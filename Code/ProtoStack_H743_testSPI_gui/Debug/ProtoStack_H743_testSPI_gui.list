
ProtoStack_H743_testSPI_gui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062ac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006544  08006544  00016544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08006564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001198  24000010  08006574  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240011a8  08006574  000211a8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000da7c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ee4  00000000  00000000  0002daba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009b8  00000000  00000000  0002f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008c0  00000000  00000000  00030358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000359fe  00000000  00000000  00030c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e982  00000000  00000000  00066616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00152e22  00000000  00000000  00074f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c7dba  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025dc  00000000  00000000  001c7e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800652c 	.word	0x0800652c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800652c 	.word	0x0800652c

080002d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_DMA_Init+0x4c>)
 80002e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80002e4:	4a0f      	ldr	r2, [pc, #60]	; (8000324 <MX_DMA_Init+0x4c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MX_DMA_Init+0x4c>)
 80002f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	200d      	movs	r0, #13
 8000302:	f000 fd2a 	bl	8000d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000306:	200d      	movs	r0, #13
 8000308:	f000 fd41 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	2100      	movs	r1, #0
 8000310:	200e      	movs	r0, #14
 8000312:	f000 fd22 	bl	8000d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000316:	200e      	movs	r0, #14
 8000318:	f000 fd39 	bl	8000d8e <HAL_NVIC_EnableIRQ>

}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	58024400 	.word	0x58024400

08000328 <MX_GPIO_Init>:
     PB15   ------> SPI2_MOSI
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	; 0x28
 800032c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <MX_GPIO_Init+0xb8>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000344:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <MX_GPIO_Init+0xb8>)
 8000346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800034e:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <MX_GPIO_Init+0xb8>)
 8000350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000358:	613b      	str	r3, [r7, #16]
 800035a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800035c:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000362:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <MX_GPIO_Init+0xb8>)
 8000364:	f043 0310 	orr.w	r3, r3, #16
 8000368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800036c:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800036e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000372:	f003 0310 	and.w	r3, r3, #16
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <MX_GPIO_Init+0xb8>)
 8000382:	f043 0302 	orr.w	r3, r3, #2
 8000386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800038c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000390:	f003 0302 	and.w	r3, r3, #2
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800039a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039e:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <MX_GPIO_Init+0xb8>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <MX_GPIO_Init+0xb8>)
 80003aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80003b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003bc:	2302      	movs	r3, #2
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003c4:	2303      	movs	r3, #3
 80003c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80003c8:	2305      	movs	r3, #5
 80003ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003cc:	f107 0314 	add.w	r3, r7, #20
 80003d0:	4619      	mov	r1, r3
 80003d2:	4804      	ldr	r0, [pc, #16]	; (80003e4 <MX_GPIO_Init+0xbc>)
 80003d4:	f003 f820 	bl	8003418 <HAL_GPIO_Init>

}
 80003d8:	bf00      	nop
 80003da:	3728      	adds	r7, #40	; 0x28
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	58024400 	.word	0x58024400
 80003e4:	58020400 	.word	0x58020400

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ee:	f000 fb3b 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f2:	f000 f82d 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f6:	f7ff ff97 	bl	8000328 <MX_GPIO_Init>
  MX_DMA_Init();
 80003fa:	f7ff ff6d 	bl	80002d8 <MX_DMA_Init>
  MX_SPI4_Init();
 80003fe:	f000 f8e5 	bl	80005cc <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  for(int i = 0; i < BUFSIZE; i++) {
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	e011      	b.n	800042c <main+0x44>
	  spiTxbuf[i] = BUFSIZE-i-1;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	b29a      	uxth	r2, r3
 800040c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	b299      	uxth	r1, r3
 8000414:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <main+0x5c>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  spiRxbuf[i] = 0;
 800041c:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <main+0x60>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2100      	movs	r1, #0
 8000422:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0; i < BUFSIZE; i++) {
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	3301      	adds	r3, #1
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000432:	dbe9      	blt.n	8000408 <main+0x20>
  }
  HAL_SPI_TransmitReceive_DMA(&hspi4, spiTxbuf, spiRxbuf, BUFSIZE);
 8000434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000438:	4a03      	ldr	r2, [pc, #12]	; (8000448 <main+0x60>)
 800043a:	4902      	ldr	r1, [pc, #8]	; (8000444 <main+0x5c>)
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <main+0x64>)
 800043e:	f005 fb0f 	bl	8005a60 <HAL_SPI_TransmitReceive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000442:	e7fe      	b.n	8000442 <main+0x5a>
 8000444:	2400002c 	.word	0x2400002c
 8000448:	2400082c 	.word	0x2400082c
 800044c:	2400102c 	.word	0x2400102c

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b09e      	sub	sp, #120	; 0x78
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800045a:	224c      	movs	r2, #76	; 0x4c
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f006 f85c 	bl	800651c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	2220      	movs	r2, #32
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f006 f855 	bl	800651c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000472:	2002      	movs	r0, #2
 8000474:	f003 f980 	bl	8003778 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000478:	2300      	movs	r3, #0
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	4b4d      	ldr	r3, [pc, #308]	; (80005b4 <SystemClock_Config+0x164>)
 800047e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000480:	4a4c      	ldr	r2, [pc, #304]	; (80005b4 <SystemClock_Config+0x164>)
 8000482:	f023 0301 	bic.w	r3, r3, #1
 8000486:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000488:	4b4a      	ldr	r3, [pc, #296]	; (80005b4 <SystemClock_Config+0x164>)
 800048a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	4b49      	ldr	r3, [pc, #292]	; (80005b8 <SystemClock_Config+0x168>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a48      	ldr	r2, [pc, #288]	; (80005b8 <SystemClock_Config+0x168>)
 8000498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b46      	ldr	r3, [pc, #280]	; (80005b8 <SystemClock_Config+0x168>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004aa:	bf00      	nop
 80004ac:	4b42      	ldr	r3, [pc, #264]	; (80005b8 <SystemClock_Config+0x168>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004b8:	d1f8      	bne.n	80004ac <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b40      	ldr	r3, [pc, #256]	; (80005bc <SystemClock_Config+0x16c>)
 80004bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004c0:	4a3e      	ldr	r2, [pc, #248]	; (80005bc <SystemClock_Config+0x16c>)
 80004c2:	f043 0302 	orr.w	r3, r3, #2
 80004c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004ca:	4b3c      	ldr	r3, [pc, #240]	; (80005bc <SystemClock_Config+0x16c>)
 80004cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004d0:	f003 0302 	and.w	r3, r3, #2
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004d8:	2300      	movs	r3, #0
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <SystemClock_Config+0x168>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a35      	ldr	r2, [pc, #212]	; (80005b8 <SystemClock_Config+0x168>)
 80004e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <SystemClock_Config+0x168>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <SystemClock_Config+0x164>)
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	4a2f      	ldr	r2, [pc, #188]	; (80005b4 <SystemClock_Config+0x164>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004fe:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <SystemClock_Config+0x164>)
 8000500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800050a:	bf00      	nop
 800050c:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <SystemClock_Config+0x168>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000518:	d1f8      	bne.n	800050c <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800051a:	4b28      	ldr	r3, [pc, #160]	; (80005bc <SystemClock_Config+0x16c>)
 800051c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051e:	f023 0303 	bic.w	r3, r3, #3
 8000522:	4a26      	ldr	r2, [pc, #152]	; (80005bc <SystemClock_Config+0x16c>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052a:	2301      	movs	r3, #1
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000532:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000534:	2302      	movs	r3, #2
 8000536:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000538:	2302      	movs	r3, #2
 800053a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800053c:	2304      	movs	r3, #4
 800053e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000540:	23a0      	movs	r3, #160	; 0xa0
 8000542:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000544:	2302      	movs	r3, #2
 8000546:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000548:	2305      	movs	r3, #5
 800054a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800054c:	2302      	movs	r3, #2
 800054e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000550:	2308      	movs	r3, #8
 8000552:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000554:	2300      	movs	r3, #0
 8000556:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000560:	4618      	mov	r0, r3
 8000562:	f003 f943 	bl	80037ec <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800056c:	f000 f828 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	233f      	movs	r3, #63	; 0x3f
 8000572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2303      	movs	r3, #3
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800057c:	2308      	movs	r3, #8
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000580:	2340      	movs	r3, #64	; 0x40
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000584:	2340      	movs	r3, #64	; 0x40
 8000586:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800058e:	2340      	movs	r3, #64	; 0x40
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2104      	movs	r1, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f003 fd55 	bl	8004048 <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 80005a4:	f000 f80c 	bl	80005c0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005a8:	f003 ff04 	bl	80043b4 <HAL_RCC_EnableCSS>
}
 80005ac:	bf00      	nop
 80005ae:	3778      	adds	r7, #120	; 0x78
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	58000400 	.word	0x58000400
 80005b8:	58024800 	.word	0x58024800
 80005bc:	58024400 	.word	0x58024400

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <MX_SPI4_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <MX_SPI4_Init+0x98>)
 80005d2:	4a25      	ldr	r2, [pc, #148]	; (8000668 <MX_SPI4_Init+0x9c>)
 80005d4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_SPI4_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_SPI4_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_SPI4_Init+0x98>)
 80005e4:	220f      	movs	r2, #15
 80005e6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_SPI4_Init+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_SPI4_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_SPI4_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_SPI4_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_SPI4_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_SPI4_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_SPI4_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_SPI4_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_SPI4_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_SPI4_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_SPI4_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_SPI4_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_SPI4_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_SPI4_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_SPI4_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_SPI4_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_SPI4_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_SPI4_Init+0x98>)
 8000650:	f005 f900 	bl	8005854 <HAL_SPI_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_SPI4_Init+0x92>
  {
    Error_Handler();
 800065a:	f7ff ffb1 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2400102c 	.word	0x2400102c
 8000668:	40013400 	.word	0x40013400

0800066c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0b8      	sub	sp, #224	; 0xe0
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	22bc      	movs	r2, #188	; 0xbc
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f005 ff45 	bl	800651c <memset>
  if(spiHandle->Instance==SPI4)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a62      	ldr	r2, [pc, #392]	; (8000820 <HAL_SPI_MspInit+0x1b4>)
 8000698:	4293      	cmp	r3, r2
 800069a:	f040 80bc 	bne.w	8000816 <HAL_SPI_MspInit+0x1aa>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800069e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 64;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006bc:	2300      	movs	r3, #0
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f816 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 80006da:	f7ff ff71 	bl	80005c0 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80006de:	4b51      	ldr	r3, [pc, #324]	; (8000824 <HAL_SPI_MspInit+0x1b8>)
 80006e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006e4:	4a4f      	ldr	r2, [pc, #316]	; (8000824 <HAL_SPI_MspInit+0x1b8>)
 80006e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80006ee:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <HAL_SPI_MspInit+0x1b8>)
 80006f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fc:	4b49      	ldr	r3, [pc, #292]	; (8000824 <HAL_SPI_MspInit+0x1b8>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	4a48      	ldr	r2, [pc, #288]	; (8000824 <HAL_SPI_MspInit+0x1b8>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070c:	4b45      	ldr	r3, [pc, #276]	; (8000824 <HAL_SPI_MspInit+0x1b8>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800071a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800071e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000734:	2305      	movs	r3, #5
 8000736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800073a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800073e:	4619      	mov	r1, r3
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <HAL_SPI_MspInit+0x1bc>)
 8000742:	f002 fe69 	bl	8003418 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8000746:	4b39      	ldr	r3, [pc, #228]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 8000748:	4a39      	ldr	r2, [pc, #228]	; (8000830 <HAL_SPI_MspInit+0x1c4>)
 800074a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 800074c:	4b37      	ldr	r3, [pc, #220]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 800074e:	2253      	movs	r2, #83	; 0x53
 8000750:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 8000760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000764:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000766:	4b31      	ldr	r3, [pc, #196]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 8000768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800076c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 8000770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000774:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 8000778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800078a:	4828      	ldr	r0, [pc, #160]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 800078c:	f000 fb1a 	bl	8000dc4 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_SPI_MspInit+0x12e>
    {
      Error_Handler();
 8000796:	f7ff ff13 	bl	80005c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a23      	ldr	r2, [pc, #140]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 800079e:	67da      	str	r2, [r3, #124]	; 0x7c
 80007a0:	4a22      	ldr	r2, [pc, #136]	; (800082c <HAL_SPI_MspInit+0x1c0>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream3;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007a8:	4a23      	ldr	r2, [pc, #140]	; (8000838 <HAL_SPI_MspInit+0x1cc>)
 80007aa:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007ae:	2254      	movs	r2, #84	; 0x54
 80007b0:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007b4:	2240      	movs	r2, #64	; 0x40
 80007b6:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c4:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007cc:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d4:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_CIRCULAR;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007dc:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007ec:	f000 faea 	bl	8000dc4 <HAL_DMA_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_SPI_MspInit+0x18e>
    {
      Error_Handler();
 80007f6:	f7ff fee3 	bl	80005c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 80007fe:	679a      	str	r2, [r3, #120]	; 0x78
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <HAL_SPI_MspInit+0x1c8>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2054      	movs	r0, #84	; 0x54
 800080c:	f000 faa5 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8000810:	2054      	movs	r0, #84	; 0x54
 8000812:	f000 fabc 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000816:	bf00      	nop
 8000818:	37e0      	adds	r7, #224	; 0xe0
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40013400 	.word	0x40013400
 8000824:	58024400 	.word	0x58024400
 8000828:	58021000 	.word	0x58021000
 800082c:	240010b4 	.word	0x240010b4
 8000830:	40020040 	.word	0x40020040
 8000834:	2400112c 	.word	0x2400112c
 8000838:	40020058 	.word	0x40020058

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_MspInit+0x30>)
 8000844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000848:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x30>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x30>)
 8000854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	58024400 	.word	0x58024400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000874:	f003 ff28 	bl	80046c8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x8>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c0:	f000 f944 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <DMA1_Stream2_IRQHandler+0x10>)
 80008ce:	f001 fa85 	bl	8001ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	240010b4 	.word	0x240010b4

080008dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <DMA1_Stream3_IRQHandler+0x10>)
 80008e2:	f001 fa7b 	bl	8001ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2400112c 	.word	0x2400112c

080008f0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <SPI4_IRQHandler+0x10>)
 80008f6:	f005 fa89 	bl	8005e0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2400102c 	.word	0x2400102c

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000908:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <SystemInit+0xe4>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a36      	ldr	r2, [pc, #216]	; (80009e8 <SystemInit+0xe4>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000918:	4b34      	ldr	r3, [pc, #208]	; (80009ec <SystemInit+0xe8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 030f 	and.w	r3, r3, #15
 8000920:	2b06      	cmp	r3, #6
 8000922:	d807      	bhi.n	8000934 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000924:	4b31      	ldr	r3, [pc, #196]	; (80009ec <SystemInit+0xe8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f023 030f 	bic.w	r3, r3, #15
 800092c:	4a2f      	ldr	r2, [pc, #188]	; (80009ec <SystemInit+0xe8>)
 800092e:	f043 0307 	orr.w	r3, r3, #7
 8000932:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000934:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <SystemInit+0xec>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <SystemInit+0xec>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <SystemInit+0xec>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <SystemInit+0xec>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4929      	ldr	r1, [pc, #164]	; (80009f0 <SystemInit+0xec>)
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <SystemInit+0xf0>)
 800094e:	4013      	ands	r3, r2
 8000950:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <SystemInit+0xe8>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	2b00      	cmp	r3, #0
 800095c:	d007      	beq.n	800096e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <SystemInit+0xe8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f023 030f 	bic.w	r3, r3, #15
 8000966:	4a21      	ldr	r2, [pc, #132]	; (80009ec <SystemInit+0xe8>)
 8000968:	f043 0307 	orr.w	r3, r3, #7
 800096c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <SystemInit+0xec>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <SystemInit+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <SystemInit+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <SystemInit+0xec>)
 8000982:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <SystemInit+0xf4>)
 8000984:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <SystemInit+0xec>)
 8000988:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <SystemInit+0xf8>)
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <SystemInit+0xec>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <SystemInit+0xfc>)
 8000990:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <SystemInit+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <SystemInit+0xec>)
 800099a:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <SystemInit+0xfc>)
 800099c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <SystemInit+0xec>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <SystemInit+0xec>)
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <SystemInit+0xfc>)
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <SystemInit+0xec>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <SystemInit+0xec>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <SystemInit+0xec>)
 80009b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <SystemInit+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <SystemInit+0x100>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <SystemInit+0x104>)
 80009c8:	4013      	ands	r3, r2
 80009ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009ce:	d202      	bcs.n	80009d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <SystemInit+0x108>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <SystemInit+0x10c>)
 80009d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	52002000 	.word	0x52002000
 80009f0:	58024400 	.word	0x58024400
 80009f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80009f8:	02020200 	.word	0x02020200
 80009fc:	01ff0000 	.word	0x01ff0000
 8000a00:	01010280 	.word	0x01010280
 8000a04:	5c001000 	.word	0x5c001000
 8000a08:	ffff0000 	.word	0xffff0000
 8000a0c:	51008108 	.word	0x51008108
 8000a10:	52004000 	.word	0x52004000

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a18:	f7ff ff74 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	; (8000a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	; (8000a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f005 fd47 	bl	80064d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fccf 	bl	80003e8 <main>
  bx  lr
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a54:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a58:	08006564 	.word	0x08006564
  ldr r2, =_sbss
 8000a5c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a60:	240011a8 	.word	0x240011a8

08000a64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC3_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f000 f968 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a74:	f003 fcae 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_Init+0x68>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	f003 030f 	and.w	r3, r3, #15
 8000a84:	4913      	ldr	r1, [pc, #76]	; (8000ad4 <HAL_Init+0x6c>)
 8000a86:	5ccb      	ldrb	r3, [r1, r3]
 8000a88:	f003 031f 	and.w	r3, r3, #31
 8000a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_Init+0x68>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_Init+0x6c>)
 8000a9c:	5cd3      	ldrb	r3, [r2, r3]
 8000a9e:	f003 031f 	and.w	r3, r3, #31
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <HAL_Init+0x70>)
 8000aaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_Init+0x74>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f814 	bl	8000ae0 <HAL_InitTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e002      	b.n	8000ac8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac2:	f7ff febb 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	58024400 	.word	0x58024400
 8000ad4:	08006544 	.word	0x08006544
 8000ad8:	24000004 	.word	0x24000004
 8000adc:	24000000 	.word	0x24000000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_InitTick+0x60>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e021      	b.n	8000b38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <HAL_InitTick+0x64>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_InitTick+0x60>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f94d 	bl	8000daa <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f917 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x68>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2400000c 	.word	0x2400000c
 8000b44:	24000000 	.word	0x24000000
 8000b48:	24000008 	.word	0x24000008

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2400000c 	.word	0x2400000c
 8000b70:	240011a4 	.word	0x240011a4

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	240011a4 	.word	0x240011a4

08000b8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetREVID+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	0c1b      	lsrs	r3, r3, #16
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	5c001000 	.word	0x5c001000

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <__NVIC_SetPriorityGrouping+0x40>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x40>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	05fa0000 	.word	0x05fa0000

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff40 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff90 	bl	8000c98 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5f 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff33 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa4 	bl	8000d00 <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff fed2 	bl	8000b74 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e316      	b.n	800140a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a66      	ldr	r2, [pc, #408]	; (8000f7c <HAL_DMA_Init+0x1b8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d04a      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a65      	ldr	r2, [pc, #404]	; (8000f80 <HAL_DMA_Init+0x1bc>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d045      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a63      	ldr	r2, [pc, #396]	; (8000f84 <HAL_DMA_Init+0x1c0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d040      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a62      	ldr	r2, [pc, #392]	; (8000f88 <HAL_DMA_Init+0x1c4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d03b      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a60      	ldr	r2, [pc, #384]	; (8000f8c <HAL_DMA_Init+0x1c8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d036      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a5f      	ldr	r2, [pc, #380]	; (8000f90 <HAL_DMA_Init+0x1cc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d031      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a5d      	ldr	r2, [pc, #372]	; (8000f94 <HAL_DMA_Init+0x1d0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d02c      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a5c      	ldr	r2, [pc, #368]	; (8000f98 <HAL_DMA_Init+0x1d4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d027      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a5a      	ldr	r2, [pc, #360]	; (8000f9c <HAL_DMA_Init+0x1d8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d022      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a59      	ldr	r2, [pc, #356]	; (8000fa0 <HAL_DMA_Init+0x1dc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d01d      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a57      	ldr	r2, [pc, #348]	; (8000fa4 <HAL_DMA_Init+0x1e0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d018      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a56      	ldr	r2, [pc, #344]	; (8000fa8 <HAL_DMA_Init+0x1e4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d013      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a54      	ldr	r2, [pc, #336]	; (8000fac <HAL_DMA_Init+0x1e8>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00e      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a53      	ldr	r2, [pc, #332]	; (8000fb0 <HAL_DMA_Init+0x1ec>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d009      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a51      	ldr	r2, [pc, #324]	; (8000fb4 <HAL_DMA_Init+0x1f0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d004      	beq.n	8000e7c <HAL_DMA_Init+0xb8>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <HAL_DMA_Init+0x1f4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d101      	bne.n	8000e80 <HAL_DMA_Init+0xbc>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <HAL_DMA_Init+0xbe>
 8000e80:	2300      	movs	r3, #0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 813b 	beq.w	80010fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a37      	ldr	r2, [pc, #220]	; (8000f7c <HAL_DMA_Init+0x1b8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d04a      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a36      	ldr	r2, [pc, #216]	; (8000f80 <HAL_DMA_Init+0x1bc>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d045      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <HAL_DMA_Init+0x1c0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d040      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a33      	ldr	r2, [pc, #204]	; (8000f88 <HAL_DMA_Init+0x1c4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d03b      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a31      	ldr	r2, [pc, #196]	; (8000f8c <HAL_DMA_Init+0x1c8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d036      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <HAL_DMA_Init+0x1cc>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d031      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a2e      	ldr	r2, [pc, #184]	; (8000f94 <HAL_DMA_Init+0x1d0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d02c      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <HAL_DMA_Init+0x1d4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d027      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a2b      	ldr	r2, [pc, #172]	; (8000f9c <HAL_DMA_Init+0x1d8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d022      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a2a      	ldr	r2, [pc, #168]	; (8000fa0 <HAL_DMA_Init+0x1dc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d01d      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <HAL_DMA_Init+0x1e0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d018      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <HAL_DMA_Init+0x1e4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d013      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a25      	ldr	r2, [pc, #148]	; (8000fac <HAL_DMA_Init+0x1e8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00e      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <HAL_DMA_Init+0x1ec>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d009      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <HAL_DMA_Init+0x1f0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d004      	beq.n	8000f38 <HAL_DMA_Init+0x174>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_DMA_Init+0x1f4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d108      	bne.n	8000f4a <HAL_DMA_Init+0x186>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	e007      	b.n	8000f5a <HAL_DMA_Init+0x196>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000f5a:	e02f      	b.n	8000fbc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f5c:	f7ff fe0a 	bl	8000b74 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d928      	bls.n	8000fbc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2203      	movs	r2, #3
 8000f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e246      	b.n	800140a <HAL_DMA_Init+0x646>
 8000f7c:	40020010 	.word	0x40020010
 8000f80:	40020028 	.word	0x40020028
 8000f84:	40020040 	.word	0x40020040
 8000f88:	40020058 	.word	0x40020058
 8000f8c:	40020070 	.word	0x40020070
 8000f90:	40020088 	.word	0x40020088
 8000f94:	400200a0 	.word	0x400200a0
 8000f98:	400200b8 	.word	0x400200b8
 8000f9c:	40020410 	.word	0x40020410
 8000fa0:	40020428 	.word	0x40020428
 8000fa4:	40020440 	.word	0x40020440
 8000fa8:	40020458 	.word	0x40020458
 8000fac:	40020470 	.word	0x40020470
 8000fb0:	40020488 	.word	0x40020488
 8000fb4:	400204a0 	.word	0x400204a0
 8000fb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1c8      	bne.n	8000f5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4b83      	ldr	r3, [pc, #524]	; (80011e4 <HAL_DMA_Init+0x420>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8000fe2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4313      	orrs	r3, r2
 8001006:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	2b04      	cmp	r3, #4
 800100e:	d107      	bne.n	8001020 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4313      	orrs	r3, r2
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4313      	orrs	r3, r2
 800101e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001020:	4b71      	ldr	r3, [pc, #452]	; (80011e8 <HAL_DMA_Init+0x424>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b71      	ldr	r3, [pc, #452]	; (80011ec <HAL_DMA_Init+0x428>)
 8001026:	4013      	ands	r3, r2
 8001028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800102c:	d328      	bcc.n	8001080 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b28      	cmp	r3, #40	; 0x28
 8001034:	d903      	bls.n	800103e <HAL_DMA_Init+0x27a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b2e      	cmp	r3, #46	; 0x2e
 800103c:	d917      	bls.n	800106e <HAL_DMA_Init+0x2aa>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b3e      	cmp	r3, #62	; 0x3e
 8001044:	d903      	bls.n	800104e <HAL_DMA_Init+0x28a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b42      	cmp	r3, #66	; 0x42
 800104c:	d90f      	bls.n	800106e <HAL_DMA_Init+0x2aa>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b46      	cmp	r3, #70	; 0x46
 8001054:	d903      	bls.n	800105e <HAL_DMA_Init+0x29a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b48      	cmp	r3, #72	; 0x48
 800105c:	d907      	bls.n	800106e <HAL_DMA_Init+0x2aa>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b4e      	cmp	r3, #78	; 0x4e
 8001064:	d905      	bls.n	8001072 <HAL_DMA_Init+0x2ae>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b52      	cmp	r3, #82	; 0x52
 800106c:	d801      	bhi.n	8001072 <HAL_DMA_Init+0x2ae>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_DMA_Init+0x2b0>
 8001072:	2300      	movs	r3, #0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800107e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f023 0307 	bic.w	r3, r3, #7
 8001096:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	4313      	orrs	r3, r2
 80010a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d117      	bne.n	80010da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00e      	beq.n	80010da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f002 f821 	bl	8003104 <DMA_CheckFifoParam>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2240      	movs	r2, #64	; 0x40
 80010cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e197      	b.n	800140a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f001 ff5c 	bl	8002fa0 <DMA_CalcBaseAndBitshift>
 80010e8:	4603      	mov	r3, r0
 80010ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	223f      	movs	r2, #63	; 0x3f
 80010f6:	409a      	lsls	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	e0cd      	b.n	800129a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a3b      	ldr	r2, [pc, #236]	; (80011f0 <HAL_DMA_Init+0x42c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d022      	beq.n	800114e <HAL_DMA_Init+0x38a>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a39      	ldr	r2, [pc, #228]	; (80011f4 <HAL_DMA_Init+0x430>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01d      	beq.n	800114e <HAL_DMA_Init+0x38a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a38      	ldr	r2, [pc, #224]	; (80011f8 <HAL_DMA_Init+0x434>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d018      	beq.n	800114e <HAL_DMA_Init+0x38a>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a36      	ldr	r2, [pc, #216]	; (80011fc <HAL_DMA_Init+0x438>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_DMA_Init+0x38a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a35      	ldr	r2, [pc, #212]	; (8001200 <HAL_DMA_Init+0x43c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00e      	beq.n	800114e <HAL_DMA_Init+0x38a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_DMA_Init+0x440>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d009      	beq.n	800114e <HAL_DMA_Init+0x38a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_DMA_Init+0x444>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d004      	beq.n	800114e <HAL_DMA_Init+0x38a>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a30      	ldr	r2, [pc, #192]	; (800120c <HAL_DMA_Init+0x448>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_DMA_Init+0x38e>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_DMA_Init+0x390>
 8001152:	2300      	movs	r3, #0
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8097 	beq.w	8001288 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <HAL_DMA_Init+0x42c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d021      	beq.n	80011a8 <HAL_DMA_Init+0x3e4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <HAL_DMA_Init+0x430>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01c      	beq.n	80011a8 <HAL_DMA_Init+0x3e4>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <HAL_DMA_Init+0x434>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d017      	beq.n	80011a8 <HAL_DMA_Init+0x3e4>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <HAL_DMA_Init+0x438>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d012      	beq.n	80011a8 <HAL_DMA_Init+0x3e4>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_DMA_Init+0x43c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00d      	beq.n	80011a8 <HAL_DMA_Init+0x3e4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <HAL_DMA_Init+0x440>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d008      	beq.n	80011a8 <HAL_DMA_Init+0x3e4>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_DMA_Init+0x444>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d003      	beq.n	80011a8 <HAL_DMA_Init+0x3e4>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_DMA_Init+0x448>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2202      	movs	r2, #2
 80011ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_DMA_Init+0x44c>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b40      	cmp	r3, #64	; 0x40
 80011d0:	d020      	beq.n	8001214 <HAL_DMA_Init+0x450>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b80      	cmp	r3, #128	; 0x80
 80011d8:	d102      	bne.n	80011e0 <HAL_DMA_Init+0x41c>
 80011da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011de:	e01a      	b.n	8001216 <HAL_DMA_Init+0x452>
 80011e0:	2300      	movs	r3, #0
 80011e2:	e018      	b.n	8001216 <HAL_DMA_Init+0x452>
 80011e4:	fe10803f 	.word	0xfe10803f
 80011e8:	5c001000 	.word	0x5c001000
 80011ec:	ffff0000 	.word	0xffff0000
 80011f0:	58025408 	.word	0x58025408
 80011f4:	5802541c 	.word	0x5802541c
 80011f8:	58025430 	.word	0x58025430
 80011fc:	58025444 	.word	0x58025444
 8001200:	58025458 	.word	0x58025458
 8001204:	5802546c 	.word	0x5802546c
 8001208:	58025480 	.word	0x58025480
 800120c:	58025494 	.word	0x58025494
 8001210:	fffe000f 	.word	0xfffe000f
 8001214:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68d2      	ldr	r2, [r2, #12]
 800121a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800121c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001224:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800122c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001234:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800123c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001244:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4313      	orrs	r3, r2
 800124a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <HAL_DMA_Init+0x650>)
 800125c:	4413      	add	r3, r2
 800125e:	4a6e      	ldr	r2, [pc, #440]	; (8001418 <HAL_DMA_Init+0x654>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	009a      	lsls	r2, r3, #2
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f001 fe97 	bl	8002fa0 <DMA_CalcBaseAndBitshift>
 8001272:	4603      	mov	r3, r0
 8001274:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	2201      	movs	r2, #1
 8001280:	409a      	lsls	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	e008      	b.n	800129a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2240      	movs	r2, #64	; 0x40
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0b7      	b.n	800140a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a5f      	ldr	r2, [pc, #380]	; (800141c <HAL_DMA_Init+0x658>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d072      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a5d      	ldr	r2, [pc, #372]	; (8001420 <HAL_DMA_Init+0x65c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d06d      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a5c      	ldr	r2, [pc, #368]	; (8001424 <HAL_DMA_Init+0x660>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d068      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <HAL_DMA_Init+0x664>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d063      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a59      	ldr	r2, [pc, #356]	; (800142c <HAL_DMA_Init+0x668>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d05e      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a57      	ldr	r2, [pc, #348]	; (8001430 <HAL_DMA_Init+0x66c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d059      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a56      	ldr	r2, [pc, #344]	; (8001434 <HAL_DMA_Init+0x670>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d054      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a54      	ldr	r2, [pc, #336]	; (8001438 <HAL_DMA_Init+0x674>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d04f      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a53      	ldr	r2, [pc, #332]	; (800143c <HAL_DMA_Init+0x678>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d04a      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a51      	ldr	r2, [pc, #324]	; (8001440 <HAL_DMA_Init+0x67c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d045      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a50      	ldr	r2, [pc, #320]	; (8001444 <HAL_DMA_Init+0x680>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d040      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_DMA_Init+0x684>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d03b      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_DMA_Init+0x688>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d036      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <HAL_DMA_Init+0x68c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d031      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <HAL_DMA_Init+0x690>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d02c      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_DMA_Init+0x694>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d027      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a47      	ldr	r2, [pc, #284]	; (800145c <HAL_DMA_Init+0x698>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d022      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a45      	ldr	r2, [pc, #276]	; (8001460 <HAL_DMA_Init+0x69c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01d      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a44      	ldr	r2, [pc, #272]	; (8001464 <HAL_DMA_Init+0x6a0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d018      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a42      	ldr	r2, [pc, #264]	; (8001468 <HAL_DMA_Init+0x6a4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a41      	ldr	r2, [pc, #260]	; (800146c <HAL_DMA_Init+0x6a8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d00e      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a3f      	ldr	r2, [pc, #252]	; (8001470 <HAL_DMA_Init+0x6ac>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d009      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a3e      	ldr	r2, [pc, #248]	; (8001474 <HAL_DMA_Init+0x6b0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d004      	beq.n	800138a <HAL_DMA_Init+0x5c6>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a3c      	ldr	r2, [pc, #240]	; (8001478 <HAL_DMA_Init+0x6b4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_DMA_Init+0x5ca>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_DMA_Init+0x5cc>
 800138e:	2300      	movs	r3, #0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d032      	beq.n	80013fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f001 ff31 	bl	80031fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b80      	cmp	r3, #128	; 0x80
 80013a0:	d102      	bne.n	80013a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80013bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d010      	beq.n	80013e8 <HAL_DMA_Init+0x624>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d80c      	bhi.n	80013e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f001 ffae 	bl	8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	e008      	b.n	80013fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	a7fdabf8 	.word	0xa7fdabf8
 8001418:	cccccccd 	.word	0xcccccccd
 800141c:	40020010 	.word	0x40020010
 8001420:	40020028 	.word	0x40020028
 8001424:	40020040 	.word	0x40020040
 8001428:	40020058 	.word	0x40020058
 800142c:	40020070 	.word	0x40020070
 8001430:	40020088 	.word	0x40020088
 8001434:	400200a0 	.word	0x400200a0
 8001438:	400200b8 	.word	0x400200b8
 800143c:	40020410 	.word	0x40020410
 8001440:	40020428 	.word	0x40020428
 8001444:	40020440 	.word	0x40020440
 8001448:	40020458 	.word	0x40020458
 800144c:	40020470 	.word	0x40020470
 8001450:	40020488 	.word	0x40020488
 8001454:	400204a0 	.word	0x400204a0
 8001458:	400204b8 	.word	0x400204b8
 800145c:	58025408 	.word	0x58025408
 8001460:	5802541c 	.word	0x5802541c
 8001464:	58025430 	.word	0x58025430
 8001468:	58025444 	.word	0x58025444
 800146c:	58025458 	.word	0x58025458
 8001470:	5802546c 	.word	0x5802546c
 8001474:	58025480 	.word	0x58025480
 8001478:	58025494 	.word	0x58025494

0800147c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e226      	b.n	80018e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_DMA_Start_IT+0x2a>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e21f      	b.n	80018e6 <HAL_DMA_Start_IT+0x46a>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	f040 820a 	bne.w	80018d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a68      	ldr	r2, [pc, #416]	; (8001670 <HAL_DMA_Start_IT+0x1f4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d04a      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a66      	ldr	r2, [pc, #408]	; (8001674 <HAL_DMA_Start_IT+0x1f8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d045      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_DMA_Start_IT+0x1fc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d040      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a63      	ldr	r2, [pc, #396]	; (800167c <HAL_DMA_Start_IT+0x200>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d03b      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a62      	ldr	r2, [pc, #392]	; (8001680 <HAL_DMA_Start_IT+0x204>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d036      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a60      	ldr	r2, [pc, #384]	; (8001684 <HAL_DMA_Start_IT+0x208>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d031      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a5f      	ldr	r2, [pc, #380]	; (8001688 <HAL_DMA_Start_IT+0x20c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d02c      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5d      	ldr	r2, [pc, #372]	; (800168c <HAL_DMA_Start_IT+0x210>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d027      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a5c      	ldr	r2, [pc, #368]	; (8001690 <HAL_DMA_Start_IT+0x214>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d022      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <HAL_DMA_Start_IT+0x218>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01d      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a59      	ldr	r2, [pc, #356]	; (8001698 <HAL_DMA_Start_IT+0x21c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d018      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a57      	ldr	r2, [pc, #348]	; (800169c <HAL_DMA_Start_IT+0x220>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a56      	ldr	r2, [pc, #344]	; (80016a0 <HAL_DMA_Start_IT+0x224>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d00e      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_DMA_Start_IT+0x228>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d009      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a53      	ldr	r2, [pc, #332]	; (80016a8 <HAL_DMA_Start_IT+0x22c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d004      	beq.n	800156a <HAL_DMA_Start_IT+0xee>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a51      	ldr	r2, [pc, #324]	; (80016ac <HAL_DMA_Start_IT+0x230>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d108      	bne.n	800157c <HAL_DMA_Start_IT+0x100>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e007      	b.n	800158c <HAL_DMA_Start_IT+0x110>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f001 fb58 	bl	8002c48 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a34      	ldr	r2, [pc, #208]	; (8001670 <HAL_DMA_Start_IT+0x1f4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d04a      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a33      	ldr	r2, [pc, #204]	; (8001674 <HAL_DMA_Start_IT+0x1f8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d045      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a31      	ldr	r2, [pc, #196]	; (8001678 <HAL_DMA_Start_IT+0x1fc>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d040      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a30      	ldr	r2, [pc, #192]	; (800167c <HAL_DMA_Start_IT+0x200>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d03b      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a2e      	ldr	r2, [pc, #184]	; (8001680 <HAL_DMA_Start_IT+0x204>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d036      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2d      	ldr	r2, [pc, #180]	; (8001684 <HAL_DMA_Start_IT+0x208>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d031      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a2b      	ldr	r2, [pc, #172]	; (8001688 <HAL_DMA_Start_IT+0x20c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d02c      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a2a      	ldr	r2, [pc, #168]	; (800168c <HAL_DMA_Start_IT+0x210>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d027      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a28      	ldr	r2, [pc, #160]	; (8001690 <HAL_DMA_Start_IT+0x214>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d022      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a27      	ldr	r2, [pc, #156]	; (8001694 <HAL_DMA_Start_IT+0x218>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d01d      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a25      	ldr	r2, [pc, #148]	; (8001698 <HAL_DMA_Start_IT+0x21c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d018      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <HAL_DMA_Start_IT+0x220>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d013      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <HAL_DMA_Start_IT+0x224>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00e      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <HAL_DMA_Start_IT+0x228>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d009      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_DMA_Start_IT+0x22c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d004      	beq.n	8001638 <HAL_DMA_Start_IT+0x1bc>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_DMA_Start_IT+0x230>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d101      	bne.n	800163c <HAL_DMA_Start_IT+0x1c0>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_DMA_Start_IT+0x1c2>
 800163c:	2300      	movs	r3, #0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d036      	beq.n	80016b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 021e 	bic.w	r2, r3, #30
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0216 	orr.w	r2, r2, #22
 8001654:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03e      	beq.n	80016dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0208 	orr.w	r2, r2, #8
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e035      	b.n	80016dc <HAL_DMA_Start_IT+0x260>
 8001670:	40020010 	.word	0x40020010
 8001674:	40020028 	.word	0x40020028
 8001678:	40020040 	.word	0x40020040
 800167c:	40020058 	.word	0x40020058
 8001680:	40020070 	.word	0x40020070
 8001684:	40020088 	.word	0x40020088
 8001688:	400200a0 	.word	0x400200a0
 800168c:	400200b8 	.word	0x400200b8
 8001690:	40020410 	.word	0x40020410
 8001694:	40020428 	.word	0x40020428
 8001698:	40020440 	.word	0x40020440
 800169c:	40020458 	.word	0x40020458
 80016a0:	40020470 	.word	0x40020470
 80016a4:	40020488 	.word	0x40020488
 80016a8:	400204a0 	.word	0x400204a0
 80016ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 020e 	bic.w	r2, r3, #14
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 020a 	orr.w	r2, r2, #10
 80016c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0204 	orr.w	r2, r2, #4
 80016da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a83      	ldr	r2, [pc, #524]	; (80018f0 <HAL_DMA_Start_IT+0x474>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d072      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a82      	ldr	r2, [pc, #520]	; (80018f4 <HAL_DMA_Start_IT+0x478>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d06d      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a80      	ldr	r2, [pc, #512]	; (80018f8 <HAL_DMA_Start_IT+0x47c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d068      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a7f      	ldr	r2, [pc, #508]	; (80018fc <HAL_DMA_Start_IT+0x480>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d063      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a7d      	ldr	r2, [pc, #500]	; (8001900 <HAL_DMA_Start_IT+0x484>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d05e      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7c      	ldr	r2, [pc, #496]	; (8001904 <HAL_DMA_Start_IT+0x488>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d059      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a7a      	ldr	r2, [pc, #488]	; (8001908 <HAL_DMA_Start_IT+0x48c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d054      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a79      	ldr	r2, [pc, #484]	; (800190c <HAL_DMA_Start_IT+0x490>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d04f      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a77      	ldr	r2, [pc, #476]	; (8001910 <HAL_DMA_Start_IT+0x494>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d04a      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a76      	ldr	r2, [pc, #472]	; (8001914 <HAL_DMA_Start_IT+0x498>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d045      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a74      	ldr	r2, [pc, #464]	; (8001918 <HAL_DMA_Start_IT+0x49c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d040      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a73      	ldr	r2, [pc, #460]	; (800191c <HAL_DMA_Start_IT+0x4a0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d03b      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a71      	ldr	r2, [pc, #452]	; (8001920 <HAL_DMA_Start_IT+0x4a4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d036      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a70      	ldr	r2, [pc, #448]	; (8001924 <HAL_DMA_Start_IT+0x4a8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d031      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6e      	ldr	r2, [pc, #440]	; (8001928 <HAL_DMA_Start_IT+0x4ac>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d02c      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6d      	ldr	r2, [pc, #436]	; (800192c <HAL_DMA_Start_IT+0x4b0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d027      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a6b      	ldr	r2, [pc, #428]	; (8001930 <HAL_DMA_Start_IT+0x4b4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d022      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6a      	ldr	r2, [pc, #424]	; (8001934 <HAL_DMA_Start_IT+0x4b8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d01d      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a68      	ldr	r2, [pc, #416]	; (8001938 <HAL_DMA_Start_IT+0x4bc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d018      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a67      	ldr	r2, [pc, #412]	; (800193c <HAL_DMA_Start_IT+0x4c0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d013      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a65      	ldr	r2, [pc, #404]	; (8001940 <HAL_DMA_Start_IT+0x4c4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00e      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a64      	ldr	r2, [pc, #400]	; (8001944 <HAL_DMA_Start_IT+0x4c8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d009      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a62      	ldr	r2, [pc, #392]	; (8001948 <HAL_DMA_Start_IT+0x4cc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d004      	beq.n	80017cc <HAL_DMA_Start_IT+0x350>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a61      	ldr	r2, [pc, #388]	; (800194c <HAL_DMA_Start_IT+0x4d0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_DMA_Start_IT+0x354>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_DMA_Start_IT+0x356>
 80017d0:	2300      	movs	r3, #0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01a      	beq.n	800180c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800180a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a37      	ldr	r2, [pc, #220]	; (80018f0 <HAL_DMA_Start_IT+0x474>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d04a      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a36      	ldr	r2, [pc, #216]	; (80018f4 <HAL_DMA_Start_IT+0x478>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d045      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a34      	ldr	r2, [pc, #208]	; (80018f8 <HAL_DMA_Start_IT+0x47c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d040      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a33      	ldr	r2, [pc, #204]	; (80018fc <HAL_DMA_Start_IT+0x480>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d03b      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a31      	ldr	r2, [pc, #196]	; (8001900 <HAL_DMA_Start_IT+0x484>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d036      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a30      	ldr	r2, [pc, #192]	; (8001904 <HAL_DMA_Start_IT+0x488>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d031      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2e      	ldr	r2, [pc, #184]	; (8001908 <HAL_DMA_Start_IT+0x48c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d02c      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a2d      	ldr	r2, [pc, #180]	; (800190c <HAL_DMA_Start_IT+0x490>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d027      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a2b      	ldr	r2, [pc, #172]	; (8001910 <HAL_DMA_Start_IT+0x494>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d022      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a2a      	ldr	r2, [pc, #168]	; (8001914 <HAL_DMA_Start_IT+0x498>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d01d      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a28      	ldr	r2, [pc, #160]	; (8001918 <HAL_DMA_Start_IT+0x49c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d018      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_DMA_Start_IT+0x4a0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d013      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a25      	ldr	r2, [pc, #148]	; (8001920 <HAL_DMA_Start_IT+0x4a4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00e      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a24      	ldr	r2, [pc, #144]	; (8001924 <HAL_DMA_Start_IT+0x4a8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d009      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a22      	ldr	r2, [pc, #136]	; (8001928 <HAL_DMA_Start_IT+0x4ac>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d004      	beq.n	80018ac <HAL_DMA_Start_IT+0x430>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a21      	ldr	r2, [pc, #132]	; (800192c <HAL_DMA_Start_IT+0x4b0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d108      	bne.n	80018be <HAL_DMA_Start_IT+0x442>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e012      	b.n	80018e4 <HAL_DMA_Start_IT+0x468>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e009      	b.n	80018e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40020010 	.word	0x40020010
 80018f4:	40020028 	.word	0x40020028
 80018f8:	40020040 	.word	0x40020040
 80018fc:	40020058 	.word	0x40020058
 8001900:	40020070 	.word	0x40020070
 8001904:	40020088 	.word	0x40020088
 8001908:	400200a0 	.word	0x400200a0
 800190c:	400200b8 	.word	0x400200b8
 8001910:	40020410 	.word	0x40020410
 8001914:	40020428 	.word	0x40020428
 8001918:	40020440 	.word	0x40020440
 800191c:	40020458 	.word	0x40020458
 8001920:	40020470 	.word	0x40020470
 8001924:	40020488 	.word	0x40020488
 8001928:	400204a0 	.word	0x400204a0
 800192c:	400204b8 	.word	0x400204b8
 8001930:	58025408 	.word	0x58025408
 8001934:	5802541c 	.word	0x5802541c
 8001938:	58025430 	.word	0x58025430
 800193c:	58025444 	.word	0x58025444
 8001940:	58025458 	.word	0x58025458
 8001944:	5802546c 	.word	0x5802546c
 8001948:	58025480 	.word	0x58025480
 800194c:	58025494 	.word	0x58025494

08001950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e237      	b.n	8001dd2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d004      	beq.n	8001978 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e22c      	b.n	8001dd2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a5c      	ldr	r2, [pc, #368]	; (8001af0 <HAL_DMA_Abort_IT+0x1a0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d04a      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a5b      	ldr	r2, [pc, #364]	; (8001af4 <HAL_DMA_Abort_IT+0x1a4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d045      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a59      	ldr	r2, [pc, #356]	; (8001af8 <HAL_DMA_Abort_IT+0x1a8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d040      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_DMA_Abort_IT+0x1ac>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d03b      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a56      	ldr	r2, [pc, #344]	; (8001b00 <HAL_DMA_Abort_IT+0x1b0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d036      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a55      	ldr	r2, [pc, #340]	; (8001b04 <HAL_DMA_Abort_IT+0x1b4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d031      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a53      	ldr	r2, [pc, #332]	; (8001b08 <HAL_DMA_Abort_IT+0x1b8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d02c      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_DMA_Abort_IT+0x1bc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d027      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <HAL_DMA_Abort_IT+0x1c0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d022      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a4f      	ldr	r2, [pc, #316]	; (8001b14 <HAL_DMA_Abort_IT+0x1c4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d01d      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a4d      	ldr	r2, [pc, #308]	; (8001b18 <HAL_DMA_Abort_IT+0x1c8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d018      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_DMA_Abort_IT+0x1cc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d013      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a4a      	ldr	r2, [pc, #296]	; (8001b20 <HAL_DMA_Abort_IT+0x1d0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00e      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <HAL_DMA_Abort_IT+0x1d4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d009      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <HAL_DMA_Abort_IT+0x1d8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d004      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xc8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a46      	ldr	r2, [pc, #280]	; (8001b2c <HAL_DMA_Abort_IT+0x1dc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_DMA_Abort_IT+0xcc>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_DMA_Abort_IT+0xce>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8086 	beq.w	8001b30 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2204      	movs	r2, #4
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a2f      	ldr	r2, [pc, #188]	; (8001af0 <HAL_DMA_Abort_IT+0x1a0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d04a      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2e      	ldr	r2, [pc, #184]	; (8001af4 <HAL_DMA_Abort_IT+0x1a4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d045      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2c      	ldr	r2, [pc, #176]	; (8001af8 <HAL_DMA_Abort_IT+0x1a8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d040      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <HAL_DMA_Abort_IT+0x1ac>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d03b      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a29      	ldr	r2, [pc, #164]	; (8001b00 <HAL_DMA_Abort_IT+0x1b0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d036      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <HAL_DMA_Abort_IT+0x1b4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d031      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <HAL_DMA_Abort_IT+0x1b8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d02c      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <HAL_DMA_Abort_IT+0x1bc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d027      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <HAL_DMA_Abort_IT+0x1c0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d022      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a22      	ldr	r2, [pc, #136]	; (8001b14 <HAL_DMA_Abort_IT+0x1c4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d01d      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <HAL_DMA_Abort_IT+0x1c8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d018      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <HAL_DMA_Abort_IT+0x1cc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1d      	ldr	r2, [pc, #116]	; (8001b20 <HAL_DMA_Abort_IT+0x1d0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00e      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <HAL_DMA_Abort_IT+0x1d4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d009      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_DMA_Abort_IT+0x1d8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d004      	beq.n	8001acc <HAL_DMA_Abort_IT+0x17c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_DMA_Abort_IT+0x1dc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d108      	bne.n	8001ade <HAL_DMA_Abort_IT+0x18e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e178      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x480>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e16f      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x480>
 8001af0:	40020010 	.word	0x40020010
 8001af4:	40020028 	.word	0x40020028
 8001af8:	40020040 	.word	0x40020040
 8001afc:	40020058 	.word	0x40020058
 8001b00:	40020070 	.word	0x40020070
 8001b04:	40020088 	.word	0x40020088
 8001b08:	400200a0 	.word	0x400200a0
 8001b0c:	400200b8 	.word	0x400200b8
 8001b10:	40020410 	.word	0x40020410
 8001b14:	40020428 	.word	0x40020428
 8001b18:	40020440 	.word	0x40020440
 8001b1c:	40020458 	.word	0x40020458
 8001b20:	40020470 	.word	0x40020470
 8001b24:	40020488 	.word	0x40020488
 8001b28:	400204a0 	.word	0x400204a0
 8001b2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 020e 	bic.w	r2, r2, #14
 8001b3e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6c      	ldr	r2, [pc, #432]	; (8001cf8 <HAL_DMA_Abort_IT+0x3a8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d04a      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6b      	ldr	r2, [pc, #428]	; (8001cfc <HAL_DMA_Abort_IT+0x3ac>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d045      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a69      	ldr	r2, [pc, #420]	; (8001d00 <HAL_DMA_Abort_IT+0x3b0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d040      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a68      	ldr	r2, [pc, #416]	; (8001d04 <HAL_DMA_Abort_IT+0x3b4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d03b      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a66      	ldr	r2, [pc, #408]	; (8001d08 <HAL_DMA_Abort_IT+0x3b8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d036      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a65      	ldr	r2, [pc, #404]	; (8001d0c <HAL_DMA_Abort_IT+0x3bc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d031      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a63      	ldr	r2, [pc, #396]	; (8001d10 <HAL_DMA_Abort_IT+0x3c0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02c      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a62      	ldr	r2, [pc, #392]	; (8001d14 <HAL_DMA_Abort_IT+0x3c4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d027      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a60      	ldr	r2, [pc, #384]	; (8001d18 <HAL_DMA_Abort_IT+0x3c8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d022      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5f      	ldr	r2, [pc, #380]	; (8001d1c <HAL_DMA_Abort_IT+0x3cc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d01d      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a5d      	ldr	r2, [pc, #372]	; (8001d20 <HAL_DMA_Abort_IT+0x3d0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d018      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a5c      	ldr	r2, [pc, #368]	; (8001d24 <HAL_DMA_Abort_IT+0x3d4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a5a      	ldr	r2, [pc, #360]	; (8001d28 <HAL_DMA_Abort_IT+0x3d8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00e      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a59      	ldr	r2, [pc, #356]	; (8001d2c <HAL_DMA_Abort_IT+0x3dc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d009      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a57      	ldr	r2, [pc, #348]	; (8001d30 <HAL_DMA_Abort_IT+0x3e0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x290>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a56      	ldr	r2, [pc, #344]	; (8001d34 <HAL_DMA_Abort_IT+0x3e4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d108      	bne.n	8001bf2 <HAL_DMA_Abort_IT+0x2a2>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e007      	b.n	8001c02 <HAL_DMA_Abort_IT+0x2b2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a3c      	ldr	r2, [pc, #240]	; (8001cf8 <HAL_DMA_Abort_IT+0x3a8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d072      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a3a      	ldr	r2, [pc, #232]	; (8001cfc <HAL_DMA_Abort_IT+0x3ac>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d06d      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a39      	ldr	r2, [pc, #228]	; (8001d00 <HAL_DMA_Abort_IT+0x3b0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d068      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a37      	ldr	r2, [pc, #220]	; (8001d04 <HAL_DMA_Abort_IT+0x3b4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d063      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a36      	ldr	r2, [pc, #216]	; (8001d08 <HAL_DMA_Abort_IT+0x3b8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d05e      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a34      	ldr	r2, [pc, #208]	; (8001d0c <HAL_DMA_Abort_IT+0x3bc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d059      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a33      	ldr	r2, [pc, #204]	; (8001d10 <HAL_DMA_Abort_IT+0x3c0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d054      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <HAL_DMA_Abort_IT+0x3c4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d04f      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <HAL_DMA_Abort_IT+0x3c8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d04a      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <HAL_DMA_Abort_IT+0x3cc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d045      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2d      	ldr	r2, [pc, #180]	; (8001d20 <HAL_DMA_Abort_IT+0x3d0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d040      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <HAL_DMA_Abort_IT+0x3d4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d03b      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <HAL_DMA_Abort_IT+0x3d8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d036      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <HAL_DMA_Abort_IT+0x3dc>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d031      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <HAL_DMA_Abort_IT+0x3e0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d02c      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a25      	ldr	r2, [pc, #148]	; (8001d34 <HAL_DMA_Abort_IT+0x3e4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d027      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <HAL_DMA_Abort_IT+0x3e8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d022      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_DMA_Abort_IT+0x3ec>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01d      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <HAL_DMA_Abort_IT+0x3f0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d018      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <HAL_DMA_Abort_IT+0x3f4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <HAL_DMA_Abort_IT+0x3f8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00e      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_DMA_Abort_IT+0x3fc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d009      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_DMA_Abort_IT+0x400>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d004      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x3a2>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_DMA_Abort_IT+0x404>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d132      	bne.n	8001d58 <HAL_DMA_Abort_IT+0x408>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e031      	b.n	8001d5a <HAL_DMA_Abort_IT+0x40a>
 8001cf6:	bf00      	nop
 8001cf8:	40020010 	.word	0x40020010
 8001cfc:	40020028 	.word	0x40020028
 8001d00:	40020040 	.word	0x40020040
 8001d04:	40020058 	.word	0x40020058
 8001d08:	40020070 	.word	0x40020070
 8001d0c:	40020088 	.word	0x40020088
 8001d10:	400200a0 	.word	0x400200a0
 8001d14:	400200b8 	.word	0x400200b8
 8001d18:	40020410 	.word	0x40020410
 8001d1c:	40020428 	.word	0x40020428
 8001d20:	40020440 	.word	0x40020440
 8001d24:	40020458 	.word	0x40020458
 8001d28:	40020470 	.word	0x40020470
 8001d2c:	40020488 	.word	0x40020488
 8001d30:	400204a0 	.word	0x400204a0
 8001d34:	400204b8 	.word	0x400204b8
 8001d38:	58025408 	.word	0x58025408
 8001d3c:	5802541c 	.word	0x5802541c
 8001d40:	58025430 	.word	0x58025430
 8001d44:	58025444 	.word	0x58025444
 8001d48:	58025458 	.word	0x58025458
 8001d4c:	5802546c 	.word	0x5802546c
 8001d50:	58025480 	.word	0x58025480
 8001d54:	58025494 	.word	0x58025494
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d028      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d8c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001dae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop

08001ddc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001de8:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <HAL_DMA_IRQHandler+0x1ac>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a67      	ldr	r2, [pc, #412]	; (8001f8c <HAL_DMA_IRQHandler+0x1b0>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a9b      	lsrs	r3, r3, #10
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a5f      	ldr	r2, [pc, #380]	; (8001f90 <HAL_DMA_IRQHandler+0x1b4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d04a      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a5d      	ldr	r2, [pc, #372]	; (8001f94 <HAL_DMA_IRQHandler+0x1b8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d045      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a5c      	ldr	r2, [pc, #368]	; (8001f98 <HAL_DMA_IRQHandler+0x1bc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d040      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a5a      	ldr	r2, [pc, #360]	; (8001f9c <HAL_DMA_IRQHandler+0x1c0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d03b      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <HAL_DMA_IRQHandler+0x1c4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d036      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a57      	ldr	r2, [pc, #348]	; (8001fa4 <HAL_DMA_IRQHandler+0x1c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <HAL_DMA_IRQHandler+0x1cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d02c      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a54      	ldr	r2, [pc, #336]	; (8001fac <HAL_DMA_IRQHandler+0x1d0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d027      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a53      	ldr	r2, [pc, #332]	; (8001fb0 <HAL_DMA_IRQHandler+0x1d4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d022      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_DMA_IRQHandler+0x1d8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01d      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a50      	ldr	r2, [pc, #320]	; (8001fb8 <HAL_DMA_IRQHandler+0x1dc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d018      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a4e      	ldr	r2, [pc, #312]	; (8001fbc <HAL_DMA_IRQHandler+0x1e0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a4d      	ldr	r2, [pc, #308]	; (8001fc0 <HAL_DMA_IRQHandler+0x1e4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00e      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a4b      	ldr	r2, [pc, #300]	; (8001fc4 <HAL_DMA_IRQHandler+0x1e8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d009      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a4a      	ldr	r2, [pc, #296]	; (8001fc8 <HAL_DMA_IRQHandler+0x1ec>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d004      	beq.n	8001eae <HAL_DMA_IRQHandler+0xd2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_DMA_IRQHandler+0x1f0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d101      	bne.n	8001eb2 <HAL_DMA_IRQHandler+0xd6>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_DMA_IRQHandler+0xd8>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 842b 	beq.w	8002710 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80a2 	beq.w	8002014 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <HAL_DMA_IRQHandler+0x1b4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d04a      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2d      	ldr	r2, [pc, #180]	; (8001f94 <HAL_DMA_IRQHandler+0x1b8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d045      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <HAL_DMA_IRQHandler+0x1bc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d040      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2a      	ldr	r2, [pc, #168]	; (8001f9c <HAL_DMA_IRQHandler+0x1c0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d03b      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <HAL_DMA_IRQHandler+0x1c4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d036      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <HAL_DMA_IRQHandler+0x1c8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d031      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <HAL_DMA_IRQHandler+0x1cc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d02c      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_DMA_IRQHandler+0x1d0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d027      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_DMA_IRQHandler+0x1d4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d022      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <HAL_DMA_IRQHandler+0x1d8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d01d      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_DMA_IRQHandler+0x1dc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d018      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_DMA_IRQHandler+0x1e0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d013      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <HAL_DMA_IRQHandler+0x1e4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00e      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <HAL_DMA_IRQHandler+0x1e8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_DMA_IRQHandler+0x1ec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x194>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <HAL_DMA_IRQHandler+0x1f0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d12f      	bne.n	8001fd0 <HAL_DMA_IRQHandler+0x1f4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	e02e      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x208>
 8001f86:	bf00      	nop
 8001f88:	24000000 	.word	0x24000000
 8001f8c:	1b4e81b5 	.word	0x1b4e81b5
 8001f90:	40020010 	.word	0x40020010
 8001f94:	40020028 	.word	0x40020028
 8001f98:	40020040 	.word	0x40020040
 8001f9c:	40020058 	.word	0x40020058
 8001fa0:	40020070 	.word	0x40020070
 8001fa4:	40020088 	.word	0x40020088
 8001fa8:	400200a0 	.word	0x400200a0
 8001fac:	400200b8 	.word	0x400200b8
 8001fb0:	40020410 	.word	0x40020410
 8001fb4:	40020428 	.word	0x40020428
 8001fb8:	40020440 	.word	0x40020440
 8001fbc:	40020458 	.word	0x40020458
 8001fc0:	40020470 	.word	0x40020470
 8001fc4:	40020488 	.word	0x40020488
 8001fc8:	400204a0 	.word	0x400204a0
 8001fcc:	400204b8 	.word	0x400204b8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d015      	beq.n	8002014 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0204 	bic.w	r2, r2, #4
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2208      	movs	r2, #8
 8002002:	409a      	lsls	r2, r3
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d06e      	beq.n	8002108 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a69      	ldr	r2, [pc, #420]	; (80021d4 <HAL_DMA_IRQHandler+0x3f8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d04a      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <HAL_DMA_IRQHandler+0x3fc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d045      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a66      	ldr	r2, [pc, #408]	; (80021dc <HAL_DMA_IRQHandler+0x400>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d040      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a64      	ldr	r2, [pc, #400]	; (80021e0 <HAL_DMA_IRQHandler+0x404>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d03b      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a63      	ldr	r2, [pc, #396]	; (80021e4 <HAL_DMA_IRQHandler+0x408>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d036      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a61      	ldr	r2, [pc, #388]	; (80021e8 <HAL_DMA_IRQHandler+0x40c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d031      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a60      	ldr	r2, [pc, #384]	; (80021ec <HAL_DMA_IRQHandler+0x410>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d02c      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5e      	ldr	r2, [pc, #376]	; (80021f0 <HAL_DMA_IRQHandler+0x414>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d027      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <HAL_DMA_IRQHandler+0x418>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d022      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a5b      	ldr	r2, [pc, #364]	; (80021f8 <HAL_DMA_IRQHandler+0x41c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01d      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a5a      	ldr	r2, [pc, #360]	; (80021fc <HAL_DMA_IRQHandler+0x420>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d018      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_DMA_IRQHandler+0x424>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a57      	ldr	r2, [pc, #348]	; (8002204 <HAL_DMA_IRQHandler+0x428>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00e      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a55      	ldr	r2, [pc, #340]	; (8002208 <HAL_DMA_IRQHandler+0x42c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_DMA_IRQHandler+0x430>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d004      	beq.n	80020ca <HAL_DMA_IRQHandler+0x2ee>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a52      	ldr	r2, [pc, #328]	; (8002210 <HAL_DMA_IRQHandler+0x434>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10a      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x304>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e003      	b.n	80020e8 <HAL_DMA_IRQHandler+0x30c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2300      	movs	r3, #0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00d      	beq.n	8002108 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2201      	movs	r2, #1
 80020f6:	409a      	lsls	r2, r3
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f043 0202 	orr.w	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2204      	movs	r2, #4
 8002112:	409a      	lsls	r2, r3
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 808f 	beq.w	800223c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <HAL_DMA_IRQHandler+0x3f8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d04a      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2a      	ldr	r2, [pc, #168]	; (80021d8 <HAL_DMA_IRQHandler+0x3fc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d045      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_DMA_IRQHandler+0x400>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d040      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_DMA_IRQHandler+0x404>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d03b      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_DMA_IRQHandler+0x408>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d036      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <HAL_DMA_IRQHandler+0x40c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d031      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a23      	ldr	r2, [pc, #140]	; (80021ec <HAL_DMA_IRQHandler+0x410>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d02c      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <HAL_DMA_IRQHandler+0x414>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d027      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a20      	ldr	r2, [pc, #128]	; (80021f4 <HAL_DMA_IRQHandler+0x418>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_DMA_IRQHandler+0x41c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01d      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_DMA_IRQHandler+0x420>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d018      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_DMA_IRQHandler+0x424>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_DMA_IRQHandler+0x428>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00e      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_DMA_IRQHandler+0x42c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d009      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_DMA_IRQHandler+0x430>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d004      	beq.n	80021be <HAL_DMA_IRQHandler+0x3e2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a15      	ldr	r2, [pc, #84]	; (8002210 <HAL_DMA_IRQHandler+0x434>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d12a      	bne.n	8002214 <HAL_DMA_IRQHandler+0x438>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e023      	b.n	800221c <HAL_DMA_IRQHandler+0x440>
 80021d4:	40020010 	.word	0x40020010
 80021d8:	40020028 	.word	0x40020028
 80021dc:	40020040 	.word	0x40020040
 80021e0:	40020058 	.word	0x40020058
 80021e4:	40020070 	.word	0x40020070
 80021e8:	40020088 	.word	0x40020088
 80021ec:	400200a0 	.word	0x400200a0
 80021f0:	400200b8 	.word	0x400200b8
 80021f4:	40020410 	.word	0x40020410
 80021f8:	40020428 	.word	0x40020428
 80021fc:	40020440 	.word	0x40020440
 8002200:	40020458 	.word	0x40020458
 8002204:	40020470 	.word	0x40020470
 8002208:	40020488 	.word	0x40020488
 800220c:	400204a0 	.word	0x400204a0
 8002210:	400204b8 	.word	0x400204b8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2300      	movs	r3, #0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2210      	movs	r2, #16
 8002246:	409a      	lsls	r2, r3
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80a6 	beq.w	800239e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a85      	ldr	r2, [pc, #532]	; (800246c <HAL_DMA_IRQHandler+0x690>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d04a      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a83      	ldr	r2, [pc, #524]	; (8002470 <HAL_DMA_IRQHandler+0x694>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d045      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a82      	ldr	r2, [pc, #520]	; (8002474 <HAL_DMA_IRQHandler+0x698>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d040      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a80      	ldr	r2, [pc, #512]	; (8002478 <HAL_DMA_IRQHandler+0x69c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d03b      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7f      	ldr	r2, [pc, #508]	; (800247c <HAL_DMA_IRQHandler+0x6a0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d036      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a7d      	ldr	r2, [pc, #500]	; (8002480 <HAL_DMA_IRQHandler+0x6a4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d031      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7c      	ldr	r2, [pc, #496]	; (8002484 <HAL_DMA_IRQHandler+0x6a8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d02c      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a7a      	ldr	r2, [pc, #488]	; (8002488 <HAL_DMA_IRQHandler+0x6ac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d027      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a79      	ldr	r2, [pc, #484]	; (800248c <HAL_DMA_IRQHandler+0x6b0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d022      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a77      	ldr	r2, [pc, #476]	; (8002490 <HAL_DMA_IRQHandler+0x6b4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01d      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a76      	ldr	r2, [pc, #472]	; (8002494 <HAL_DMA_IRQHandler+0x6b8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d018      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a74      	ldr	r2, [pc, #464]	; (8002498 <HAL_DMA_IRQHandler+0x6bc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a73      	ldr	r2, [pc, #460]	; (800249c <HAL_DMA_IRQHandler+0x6c0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00e      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a71      	ldr	r2, [pc, #452]	; (80024a0 <HAL_DMA_IRQHandler+0x6c4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d009      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a70      	ldr	r2, [pc, #448]	; (80024a4 <HAL_DMA_IRQHandler+0x6c8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d004      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x516>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6e      	ldr	r2, [pc, #440]	; (80024a8 <HAL_DMA_IRQHandler+0x6cc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10a      	bne.n	8002308 <HAL_DMA_IRQHandler+0x52c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e009      	b.n	800231c <HAL_DMA_IRQHandler+0x540>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d03e      	beq.n	800239e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2210      	movs	r2, #16
 800232a:	409a      	lsls	r2, r3
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d018      	beq.n	8002370 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d108      	bne.n	800235e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	2b00      	cmp	r3, #0
 8002352:	d024      	beq.n	800239e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
 800235c:	e01f      	b.n	800239e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01b      	beq.n	800239e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4798      	blx	r3
 800236e:	e016      	b.n	800239e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0208 	bic.w	r2, r2, #8
 800238c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2220      	movs	r2, #32
 80023a8:	409a      	lsls	r2, r3
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8110 	beq.w	80025d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2c      	ldr	r2, [pc, #176]	; (800246c <HAL_DMA_IRQHandler+0x690>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d04a      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <HAL_DMA_IRQHandler+0x694>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d045      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a29      	ldr	r2, [pc, #164]	; (8002474 <HAL_DMA_IRQHandler+0x698>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d040      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a28      	ldr	r2, [pc, #160]	; (8002478 <HAL_DMA_IRQHandler+0x69c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d03b      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a26      	ldr	r2, [pc, #152]	; (800247c <HAL_DMA_IRQHandler+0x6a0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d036      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a25      	ldr	r2, [pc, #148]	; (8002480 <HAL_DMA_IRQHandler+0x6a4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d031      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a23      	ldr	r2, [pc, #140]	; (8002484 <HAL_DMA_IRQHandler+0x6a8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d02c      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_DMA_IRQHandler+0x6ac>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d027      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <HAL_DMA_IRQHandler+0x6b0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d022      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <HAL_DMA_IRQHandler+0x6b4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d01d      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_DMA_IRQHandler+0x6b8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d018      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_DMA_IRQHandler+0x6bc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d013      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1a      	ldr	r2, [pc, #104]	; (800249c <HAL_DMA_IRQHandler+0x6c0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00e      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_DMA_IRQHandler+0x6c4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d009      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <HAL_DMA_IRQHandler+0x6c8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_DMA_IRQHandler+0x678>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <HAL_DMA_IRQHandler+0x6cc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d12b      	bne.n	80024ac <HAL_DMA_IRQHandler+0x6d0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	e02a      	b.n	80024c0 <HAL_DMA_IRQHandler+0x6e4>
 800246a:	bf00      	nop
 800246c:	40020010 	.word	0x40020010
 8002470:	40020028 	.word	0x40020028
 8002474:	40020040 	.word	0x40020040
 8002478:	40020058 	.word	0x40020058
 800247c:	40020070 	.word	0x40020070
 8002480:	40020088 	.word	0x40020088
 8002484:	400200a0 	.word	0x400200a0
 8002488:	400200b8 	.word	0x400200b8
 800248c:	40020410 	.word	0x40020410
 8002490:	40020428 	.word	0x40020428
 8002494:	40020440 	.word	0x40020440
 8002498:	40020458 	.word	0x40020458
 800249c:	40020470 	.word	0x40020470
 80024a0:	40020488 	.word	0x40020488
 80024a4:	400204a0 	.word	0x400204a0
 80024a8:	400204b8 	.word	0x400204b8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8087 	beq.w	80025d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2220      	movs	r2, #32
 80024d0:	409a      	lsls	r2, r3
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d139      	bne.n	8002556 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0216 	bic.w	r2, r2, #22
 80024f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002500:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_DMA_IRQHandler+0x736>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0208 	bic.w	r2, r2, #8
 8002520:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	223f      	movs	r2, #63	; 0x3f
 800252c:	409a      	lsls	r2, r3
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 834a 	beq.w	8002be0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
          }
          return;
 8002554:	e344      	b.n	8002be0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d018      	beq.n	8002596 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	2b00      	cmp	r3, #0
 8002578:	d02c      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
 8002582:	e027      	b.n	80025d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d023      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
 8002594:	e01e      	b.n	80025d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10f      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0210 	bic.w	r2, r2, #16
 80025b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8306 	beq.w	8002bea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8088 	beq.w	80026fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2204      	movs	r2, #4
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_DMA_IRQHandler+0xa08>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d04a      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a79      	ldr	r2, [pc, #484]	; (80027e8 <HAL_DMA_IRQHandler+0xa0c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d045      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a77      	ldr	r2, [pc, #476]	; (80027ec <HAL_DMA_IRQHandler+0xa10>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d040      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a76      	ldr	r2, [pc, #472]	; (80027f0 <HAL_DMA_IRQHandler+0xa14>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d03b      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a74      	ldr	r2, [pc, #464]	; (80027f4 <HAL_DMA_IRQHandler+0xa18>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d036      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a73      	ldr	r2, [pc, #460]	; (80027f8 <HAL_DMA_IRQHandler+0xa1c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d031      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a71      	ldr	r2, [pc, #452]	; (80027fc <HAL_DMA_IRQHandler+0xa20>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d02c      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a70      	ldr	r2, [pc, #448]	; (8002800 <HAL_DMA_IRQHandler+0xa24>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d027      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <HAL_DMA_IRQHandler+0xa28>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d022      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6d      	ldr	r2, [pc, #436]	; (8002808 <HAL_DMA_IRQHandler+0xa2c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d01d      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6b      	ldr	r2, [pc, #428]	; (800280c <HAL_DMA_IRQHandler+0xa30>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d018      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6a      	ldr	r2, [pc, #424]	; (8002810 <HAL_DMA_IRQHandler+0xa34>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d013      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a68      	ldr	r2, [pc, #416]	; (8002814 <HAL_DMA_IRQHandler+0xa38>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00e      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a67      	ldr	r2, [pc, #412]	; (8002818 <HAL_DMA_IRQHandler+0xa3c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d009      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_DMA_IRQHandler+0xa40>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_DMA_IRQHandler+0x8b8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a64      	ldr	r2, [pc, #400]	; (8002820 <HAL_DMA_IRQHandler+0xa44>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d108      	bne.n	80026a6 <HAL_DMA_IRQHandler+0x8ca>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_DMA_IRQHandler+0x8da>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3301      	adds	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	429a      	cmp	r2, r3
 80026c0:	d307      	bcc.n	80026d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f2      	bne.n	80026b6 <HAL_DMA_IRQHandler+0x8da>
 80026d0:	e000      	b.n	80026d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80026d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80026ea:	e003      	b.n	80026f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8272 	beq.w	8002bea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
 800270e:	e26c      	b.n	8002bea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a43      	ldr	r2, [pc, #268]	; (8002824 <HAL_DMA_IRQHandler+0xa48>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d022      	beq.n	8002760 <HAL_DMA_IRQHandler+0x984>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a42      	ldr	r2, [pc, #264]	; (8002828 <HAL_DMA_IRQHandler+0xa4c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d01d      	beq.n	8002760 <HAL_DMA_IRQHandler+0x984>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a40      	ldr	r2, [pc, #256]	; (800282c <HAL_DMA_IRQHandler+0xa50>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d018      	beq.n	8002760 <HAL_DMA_IRQHandler+0x984>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3f      	ldr	r2, [pc, #252]	; (8002830 <HAL_DMA_IRQHandler+0xa54>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <HAL_DMA_IRQHandler+0x984>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a3d      	ldr	r2, [pc, #244]	; (8002834 <HAL_DMA_IRQHandler+0xa58>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00e      	beq.n	8002760 <HAL_DMA_IRQHandler+0x984>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a3c      	ldr	r2, [pc, #240]	; (8002838 <HAL_DMA_IRQHandler+0xa5c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_DMA_IRQHandler+0x984>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a3a      	ldr	r2, [pc, #232]	; (800283c <HAL_DMA_IRQHandler+0xa60>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_DMA_IRQHandler+0x984>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a39      	ldr	r2, [pc, #228]	; (8002840 <HAL_DMA_IRQHandler+0xa64>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d101      	bne.n	8002764 <HAL_DMA_IRQHandler+0x988>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_DMA_IRQHandler+0x98a>
 8002764:	2300      	movs	r3, #0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 823f 	beq.w	8002bea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	2204      	movs	r2, #4
 800277e:	409a      	lsls	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80cd 	beq.w	8002924 <HAL_DMA_IRQHandler+0xb48>
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80c7 	beq.w	8002924 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2204      	movs	r2, #4
 80027a0:	409a      	lsls	r2, r3
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d049      	beq.n	8002844 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8210 	beq.w	8002be4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027cc:	e20a      	b.n	8002be4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8206 	beq.w	8002be4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80027e0:	e200      	b.n	8002be4 <HAL_DMA_IRQHandler+0xe08>
 80027e2:	bf00      	nop
 80027e4:	40020010 	.word	0x40020010
 80027e8:	40020028 	.word	0x40020028
 80027ec:	40020040 	.word	0x40020040
 80027f0:	40020058 	.word	0x40020058
 80027f4:	40020070 	.word	0x40020070
 80027f8:	40020088 	.word	0x40020088
 80027fc:	400200a0 	.word	0x400200a0
 8002800:	400200b8 	.word	0x400200b8
 8002804:	40020410 	.word	0x40020410
 8002808:	40020428 	.word	0x40020428
 800280c:	40020440 	.word	0x40020440
 8002810:	40020458 	.word	0x40020458
 8002814:	40020470 	.word	0x40020470
 8002818:	40020488 	.word	0x40020488
 800281c:	400204a0 	.word	0x400204a0
 8002820:	400204b8 	.word	0x400204b8
 8002824:	58025408 	.word	0x58025408
 8002828:	5802541c 	.word	0x5802541c
 800282c:	58025430 	.word	0x58025430
 8002830:	58025444 	.word	0x58025444
 8002834:	58025458 	.word	0x58025458
 8002838:	5802546c 	.word	0x5802546c
 800283c:	58025480 	.word	0x58025480
 8002840:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d160      	bne.n	8002910 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7f      	ldr	r2, [pc, #508]	; (8002a50 <HAL_DMA_IRQHandler+0xc74>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d04a      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a7d      	ldr	r2, [pc, #500]	; (8002a54 <HAL_DMA_IRQHandler+0xc78>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d045      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7c      	ldr	r2, [pc, #496]	; (8002a58 <HAL_DMA_IRQHandler+0xc7c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d040      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a7a      	ldr	r2, [pc, #488]	; (8002a5c <HAL_DMA_IRQHandler+0xc80>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d03b      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a79      	ldr	r2, [pc, #484]	; (8002a60 <HAL_DMA_IRQHandler+0xc84>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d036      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a77      	ldr	r2, [pc, #476]	; (8002a64 <HAL_DMA_IRQHandler+0xc88>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d031      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a76      	ldr	r2, [pc, #472]	; (8002a68 <HAL_DMA_IRQHandler+0xc8c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d02c      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a74      	ldr	r2, [pc, #464]	; (8002a6c <HAL_DMA_IRQHandler+0xc90>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d027      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a73      	ldr	r2, [pc, #460]	; (8002a70 <HAL_DMA_IRQHandler+0xc94>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d022      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a71      	ldr	r2, [pc, #452]	; (8002a74 <HAL_DMA_IRQHandler+0xc98>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01d      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a70      	ldr	r2, [pc, #448]	; (8002a78 <HAL_DMA_IRQHandler+0xc9c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6e      	ldr	r2, [pc, #440]	; (8002a7c <HAL_DMA_IRQHandler+0xca0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6d      	ldr	r2, [pc, #436]	; (8002a80 <HAL_DMA_IRQHandler+0xca4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00e      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a6b      	ldr	r2, [pc, #428]	; (8002a84 <HAL_DMA_IRQHandler+0xca8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6a      	ldr	r2, [pc, #424]	; (8002a88 <HAL_DMA_IRQHandler+0xcac>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d004      	beq.n	80028ee <HAL_DMA_IRQHandler+0xb12>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a68      	ldr	r2, [pc, #416]	; (8002a8c <HAL_DMA_IRQHandler+0xcb0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d108      	bne.n	8002900 <HAL_DMA_IRQHandler+0xb24>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0208 	bic.w	r2, r2, #8
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e007      	b.n	8002910 <HAL_DMA_IRQHandler+0xb34>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0204 	bic.w	r2, r2, #4
 800290e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8165 	beq.w	8002be4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002922:	e15f      	b.n	8002be4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2202      	movs	r2, #2
 800292e:	409a      	lsls	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80c5 	beq.w	8002ac4 <HAL_DMA_IRQHandler+0xce8>
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80bf 	beq.w	8002ac4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2202      	movs	r2, #2
 8002950:	409a      	lsls	r2, r3
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d018      	beq.n	8002992 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 813a 	beq.w	8002be8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800297c:	e134      	b.n	8002be8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8130 	beq.w	8002be8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002990:	e12a      	b.n	8002be8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 8089 	bne.w	8002ab0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <HAL_DMA_IRQHandler+0xc74>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d04a      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a29      	ldr	r2, [pc, #164]	; (8002a54 <HAL_DMA_IRQHandler+0xc78>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d045      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a28      	ldr	r2, [pc, #160]	; (8002a58 <HAL_DMA_IRQHandler+0xc7c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d040      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a26      	ldr	r2, [pc, #152]	; (8002a5c <HAL_DMA_IRQHandler+0xc80>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d03b      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a25      	ldr	r2, [pc, #148]	; (8002a60 <HAL_DMA_IRQHandler+0xc84>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d036      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a23      	ldr	r2, [pc, #140]	; (8002a64 <HAL_DMA_IRQHandler+0xc88>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d031      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <HAL_DMA_IRQHandler+0xc8c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d02c      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <HAL_DMA_IRQHandler+0xc90>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d027      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <HAL_DMA_IRQHandler+0xc94>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d022      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_DMA_IRQHandler+0xc98>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01d      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <HAL_DMA_IRQHandler+0xc9c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d018      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_DMA_IRQHandler+0xca0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_DMA_IRQHandler+0xca4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00e      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <HAL_DMA_IRQHandler+0xca8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d009      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_DMA_IRQHandler+0xcac>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_DMA_IRQHandler+0xc62>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_DMA_IRQHandler+0xcb0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d128      	bne.n	8002a90 <HAL_DMA_IRQHandler+0xcb4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0214 	bic.w	r2, r2, #20
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	e027      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xcc4>
 8002a50:	40020010 	.word	0x40020010
 8002a54:	40020028 	.word	0x40020028
 8002a58:	40020040 	.word	0x40020040
 8002a5c:	40020058 	.word	0x40020058
 8002a60:	40020070 	.word	0x40020070
 8002a64:	40020088 	.word	0x40020088
 8002a68:	400200a0 	.word	0x400200a0
 8002a6c:	400200b8 	.word	0x400200b8
 8002a70:	40020410 	.word	0x40020410
 8002a74:	40020428 	.word	0x40020428
 8002a78:	40020440 	.word	0x40020440
 8002a7c:	40020458 	.word	0x40020458
 8002a80:	40020470 	.word	0x40020470
 8002a84:	40020488 	.word	0x40020488
 8002a88:	400204a0 	.word	0x400204a0
 8002a8c:	400204b8 	.word	0x400204b8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 020a 	bic.w	r2, r2, #10
 8002a9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8097 	beq.w	8002be8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ac2:	e091      	b.n	8002be8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2208      	movs	r2, #8
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8088 	beq.w	8002bea <HAL_DMA_IRQHandler+0xe0e>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8082 	beq.w	8002bea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a41      	ldr	r2, [pc, #260]	; (8002bf0 <HAL_DMA_IRQHandler+0xe14>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d04a      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a3f      	ldr	r2, [pc, #252]	; (8002bf4 <HAL_DMA_IRQHandler+0xe18>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d045      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a3e      	ldr	r2, [pc, #248]	; (8002bf8 <HAL_DMA_IRQHandler+0xe1c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d040      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3c      	ldr	r2, [pc, #240]	; (8002bfc <HAL_DMA_IRQHandler+0xe20>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d03b      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a3b      	ldr	r2, [pc, #236]	; (8002c00 <HAL_DMA_IRQHandler+0xe24>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d036      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a39      	ldr	r2, [pc, #228]	; (8002c04 <HAL_DMA_IRQHandler+0xe28>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d031      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a38      	ldr	r2, [pc, #224]	; (8002c08 <HAL_DMA_IRQHandler+0xe2c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d02c      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <HAL_DMA_IRQHandler+0xe30>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d027      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a35      	ldr	r2, [pc, #212]	; (8002c10 <HAL_DMA_IRQHandler+0xe34>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a33      	ldr	r2, [pc, #204]	; (8002c14 <HAL_DMA_IRQHandler+0xe38>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a32      	ldr	r2, [pc, #200]	; (8002c18 <HAL_DMA_IRQHandler+0xe3c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <HAL_DMA_IRQHandler+0xe40>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <HAL_DMA_IRQHandler+0xe44>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <HAL_DMA_IRQHandler+0xe48>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2c      	ldr	r2, [pc, #176]	; (8002c28 <HAL_DMA_IRQHandler+0xe4c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_DMA_IRQHandler+0xdaa>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <HAL_DMA_IRQHandler+0xe50>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d108      	bne.n	8002b98 <HAL_DMA_IRQHandler+0xdbc>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 021c 	bic.w	r2, r2, #28
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e007      	b.n	8002ba8 <HAL_DMA_IRQHandler+0xdcc>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020e 	bic.w	r2, r2, #14
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
 8002bde:	e004      	b.n	8002bea <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002be0:	bf00      	nop
 8002be2:	e002      	b.n	8002bea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002be8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40020010 	.word	0x40020010
 8002bf4:	40020028 	.word	0x40020028
 8002bf8:	40020040 	.word	0x40020040
 8002bfc:	40020058 	.word	0x40020058
 8002c00:	40020070 	.word	0x40020070
 8002c04:	40020088 	.word	0x40020088
 8002c08:	400200a0 	.word	0x400200a0
 8002c0c:	400200b8 	.word	0x400200b8
 8002c10:	40020410 	.word	0x40020410
 8002c14:	40020428 	.word	0x40020428
 8002c18:	40020440 	.word	0x40020440
 8002c1c:	40020458 	.word	0x40020458
 8002c20:	40020470 	.word	0x40020470
 8002c24:	40020488 	.word	0x40020488
 8002c28:	400204a0 	.word	0x400204a0
 8002c2c:	400204b8 	.word	0x400204b8

08002c30 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7f      	ldr	r2, [pc, #508]	; (8002e64 <DMA_SetConfig+0x21c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d072      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a7d      	ldr	r2, [pc, #500]	; (8002e68 <DMA_SetConfig+0x220>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d06d      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7c      	ldr	r2, [pc, #496]	; (8002e6c <DMA_SetConfig+0x224>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d068      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7a      	ldr	r2, [pc, #488]	; (8002e70 <DMA_SetConfig+0x228>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d063      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a79      	ldr	r2, [pc, #484]	; (8002e74 <DMA_SetConfig+0x22c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d05e      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a77      	ldr	r2, [pc, #476]	; (8002e78 <DMA_SetConfig+0x230>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d059      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a76      	ldr	r2, [pc, #472]	; (8002e7c <DMA_SetConfig+0x234>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d054      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a74      	ldr	r2, [pc, #464]	; (8002e80 <DMA_SetConfig+0x238>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d04f      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a73      	ldr	r2, [pc, #460]	; (8002e84 <DMA_SetConfig+0x23c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d04a      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a71      	ldr	r2, [pc, #452]	; (8002e88 <DMA_SetConfig+0x240>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d045      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a70      	ldr	r2, [pc, #448]	; (8002e8c <DMA_SetConfig+0x244>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d040      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6e      	ldr	r2, [pc, #440]	; (8002e90 <DMA_SetConfig+0x248>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d03b      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6d      	ldr	r2, [pc, #436]	; (8002e94 <DMA_SetConfig+0x24c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d036      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a6b      	ldr	r2, [pc, #428]	; (8002e98 <DMA_SetConfig+0x250>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d031      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6a      	ldr	r2, [pc, #424]	; (8002e9c <DMA_SetConfig+0x254>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d02c      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a68      	ldr	r2, [pc, #416]	; (8002ea0 <DMA_SetConfig+0x258>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d027      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a67      	ldr	r2, [pc, #412]	; (8002ea4 <DMA_SetConfig+0x25c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a65      	ldr	r2, [pc, #404]	; (8002ea8 <DMA_SetConfig+0x260>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01d      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a64      	ldr	r2, [pc, #400]	; (8002eac <DMA_SetConfig+0x264>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d018      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a62      	ldr	r2, [pc, #392]	; (8002eb0 <DMA_SetConfig+0x268>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a61      	ldr	r2, [pc, #388]	; (8002eb4 <DMA_SetConfig+0x26c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a5f      	ldr	r2, [pc, #380]	; (8002eb8 <DMA_SetConfig+0x270>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a5e      	ldr	r2, [pc, #376]	; (8002ebc <DMA_SetConfig+0x274>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <DMA_SetConfig+0x10a>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5c      	ldr	r2, [pc, #368]	; (8002ec0 <DMA_SetConfig+0x278>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <DMA_SetConfig+0x10e>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <DMA_SetConfig+0x110>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a39      	ldr	r2, [pc, #228]	; (8002e64 <DMA_SetConfig+0x21c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d04a      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a38      	ldr	r2, [pc, #224]	; (8002e68 <DMA_SetConfig+0x220>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d045      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <DMA_SetConfig+0x224>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d040      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <DMA_SetConfig+0x228>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d03b      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <DMA_SetConfig+0x22c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d036      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <DMA_SetConfig+0x230>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d031      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a30      	ldr	r2, [pc, #192]	; (8002e7c <DMA_SetConfig+0x234>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02c      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <DMA_SetConfig+0x238>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d027      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <DMA_SetConfig+0x23c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <DMA_SetConfig+0x240>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01d      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <DMA_SetConfig+0x244>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <DMA_SetConfig+0x248>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <DMA_SetConfig+0x24c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <DMA_SetConfig+0x250>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a24      	ldr	r2, [pc, #144]	; (8002e9c <DMA_SetConfig+0x254>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <DMA_SetConfig+0x1d0>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <DMA_SetConfig+0x258>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <DMA_SetConfig+0x1d4>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <DMA_SetConfig+0x1d6>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d059      	beq.n	8002ed6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	223f      	movs	r2, #63	; 0x3f
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e40:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d138      	bne.n	8002ec4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002e62:	e086      	b.n	8002f72 <DMA_SetConfig+0x32a>
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8
 8002ea4:	58025408 	.word	0x58025408
 8002ea8:	5802541c 	.word	0x5802541c
 8002eac:	58025430 	.word	0x58025430
 8002eb0:	58025444 	.word	0x58025444
 8002eb4:	58025458 	.word	0x58025458
 8002eb8:	5802546c 	.word	0x5802546c
 8002ebc:	58025480 	.word	0x58025480
 8002ec0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	60da      	str	r2, [r3, #12]
}
 8002ed4:	e04d      	b.n	8002f72 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a29      	ldr	r2, [pc, #164]	; (8002f80 <DMA_SetConfig+0x338>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d022      	beq.n	8002f26 <DMA_SetConfig+0x2de>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <DMA_SetConfig+0x33c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01d      	beq.n	8002f26 <DMA_SetConfig+0x2de>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <DMA_SetConfig+0x340>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d018      	beq.n	8002f26 <DMA_SetConfig+0x2de>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <DMA_SetConfig+0x344>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <DMA_SetConfig+0x2de>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <DMA_SetConfig+0x348>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <DMA_SetConfig+0x2de>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <DMA_SetConfig+0x34c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d009      	beq.n	8002f26 <DMA_SetConfig+0x2de>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a20      	ldr	r2, [pc, #128]	; (8002f98 <DMA_SetConfig+0x350>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <DMA_SetConfig+0x2de>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <DMA_SetConfig+0x354>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <DMA_SetConfig+0x2e2>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <DMA_SetConfig+0x2e4>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d108      	bne.n	8002f62 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
}
 8002f60:	e007      	b.n	8002f72 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	60da      	str	r2, [r3, #12]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	58025408 	.word	0x58025408
 8002f84:	5802541c 	.word	0x5802541c
 8002f88:	58025430 	.word	0x58025430
 8002f8c:	58025444 	.word	0x58025444
 8002f90:	58025458 	.word	0x58025458
 8002f94:	5802546c 	.word	0x5802546c
 8002f98:	58025480 	.word	0x58025480
 8002f9c:	58025494 	.word	0x58025494

08002fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <DMA_CalcBaseAndBitshift+0x118>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d04a      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a41      	ldr	r2, [pc, #260]	; (80030bc <DMA_CalcBaseAndBitshift+0x11c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d045      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3f      	ldr	r2, [pc, #252]	; (80030c0 <DMA_CalcBaseAndBitshift+0x120>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d040      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a3e      	ldr	r2, [pc, #248]	; (80030c4 <DMA_CalcBaseAndBitshift+0x124>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d03b      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a3c      	ldr	r2, [pc, #240]	; (80030c8 <DMA_CalcBaseAndBitshift+0x128>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d036      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a3b      	ldr	r2, [pc, #236]	; (80030cc <DMA_CalcBaseAndBitshift+0x12c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d031      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a39      	ldr	r2, [pc, #228]	; (80030d0 <DMA_CalcBaseAndBitshift+0x130>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d02c      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a38      	ldr	r2, [pc, #224]	; (80030d4 <DMA_CalcBaseAndBitshift+0x134>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d027      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a36      	ldr	r2, [pc, #216]	; (80030d8 <DMA_CalcBaseAndBitshift+0x138>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d022      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a35      	ldr	r2, [pc, #212]	; (80030dc <DMA_CalcBaseAndBitshift+0x13c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d01d      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a33      	ldr	r2, [pc, #204]	; (80030e0 <DMA_CalcBaseAndBitshift+0x140>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d018      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a32      	ldr	r2, [pc, #200]	; (80030e4 <DMA_CalcBaseAndBitshift+0x144>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a30      	ldr	r2, [pc, #192]	; (80030e8 <DMA_CalcBaseAndBitshift+0x148>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00e      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2f      	ldr	r2, [pc, #188]	; (80030ec <DMA_CalcBaseAndBitshift+0x14c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d009      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2d      	ldr	r2, [pc, #180]	; (80030f0 <DMA_CalcBaseAndBitshift+0x150>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xa8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2c      	ldr	r2, [pc, #176]	; (80030f4 <DMA_CalcBaseAndBitshift+0x154>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <DMA_CalcBaseAndBitshift+0xac>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <DMA_CalcBaseAndBitshift+0xae>
 800304c:	2300      	movs	r3, #0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d024      	beq.n	800309c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	3b10      	subs	r3, #16
 800305a:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <DMA_CalcBaseAndBitshift+0x158>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	4a24      	ldr	r2, [pc, #144]	; (80030fc <DMA_CalcBaseAndBitshift+0x15c>)
 800306c:	5cd3      	ldrb	r3, [r2, r3]
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d908      	bls.n	800308c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <DMA_CalcBaseAndBitshift+0x160>)
 8003082:	4013      	ands	r3, r2
 8003084:	1d1a      	adds	r2, r3, #4
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	659a      	str	r2, [r3, #88]	; 0x58
 800308a:	e00d      	b.n	80030a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <DMA_CalcBaseAndBitshift+0x160>)
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6593      	str	r3, [r2, #88]	; 0x58
 800309a:	e005      	b.n	80030a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40020010 	.word	0x40020010
 80030bc:	40020028 	.word	0x40020028
 80030c0:	40020040 	.word	0x40020040
 80030c4:	40020058 	.word	0x40020058
 80030c8:	40020070 	.word	0x40020070
 80030cc:	40020088 	.word	0x40020088
 80030d0:	400200a0 	.word	0x400200a0
 80030d4:	400200b8 	.word	0x400200b8
 80030d8:	40020410 	.word	0x40020410
 80030dc:	40020428 	.word	0x40020428
 80030e0:	40020440 	.word	0x40020440
 80030e4:	40020458 	.word	0x40020458
 80030e8:	40020470 	.word	0x40020470
 80030ec:	40020488 	.word	0x40020488
 80030f0:	400204a0 	.word	0x400204a0
 80030f4:	400204b8 	.word	0x400204b8
 80030f8:	aaaaaaab 	.word	0xaaaaaaab
 80030fc:	08006554 	.word	0x08006554
 8003100:	fffffc00 	.word	0xfffffc00

08003104 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d120      	bne.n	800315a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	2b03      	cmp	r3, #3
 800311e:	d858      	bhi.n	80031d2 <DMA_CheckFifoParam+0xce>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <DMA_CheckFifoParam+0x24>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	08003139 	.word	0x08003139
 800312c:	0800314b 	.word	0x0800314b
 8003130:	08003139 	.word	0x08003139
 8003134:	080031d3 	.word	0x080031d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d048      	beq.n	80031d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003148:	e045      	b.n	80031d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003152:	d142      	bne.n	80031da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003158:	e03f      	b.n	80031da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003162:	d123      	bne.n	80031ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	2b03      	cmp	r3, #3
 800316a:	d838      	bhi.n	80031de <DMA_CheckFifoParam+0xda>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <DMA_CheckFifoParam+0x70>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	08003185 	.word	0x08003185
 8003178:	0800318b 	.word	0x0800318b
 800317c:	08003185 	.word	0x08003185
 8003180:	0800319d 	.word	0x0800319d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
        break;
 8003188:	e030      	b.n	80031ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d025      	beq.n	80031e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800319a:	e022      	b.n	80031e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a4:	d11f      	bne.n	80031e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031aa:	e01c      	b.n	80031e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d902      	bls.n	80031ba <DMA_CheckFifoParam+0xb6>
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d003      	beq.n	80031c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80031b8:	e018      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
        break;
 80031be:	e015      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
    break;
 80031d0:	e00b      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
        break;
 80031d2:	bf00      	nop
 80031d4:	e00a      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
        break;
 80031d6:	bf00      	nop
 80031d8:	e008      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
        break;
 80031da:	bf00      	nop
 80031dc:	e006      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
        break;
 80031de:	bf00      	nop
 80031e0:	e004      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
        break;
 80031e2:	bf00      	nop
 80031e4:	e002      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
        break;
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
    break;
 80031ea:	bf00      	nop
    }
  }

  return status;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a38      	ldr	r2, [pc, #224]	; (80032f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d022      	beq.n	800325a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a36      	ldr	r2, [pc, #216]	; (80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01d      	beq.n	800325a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d018      	beq.n	800325a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a33      	ldr	r2, [pc, #204]	; (80032fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a32      	ldr	r2, [pc, #200]	; (8003300 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00e      	beq.n	800325a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a30      	ldr	r2, [pc, #192]	; (8003304 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d009      	beq.n	800325a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a2f      	ldr	r2, [pc, #188]	; (8003308 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d004      	beq.n	800325a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a2d      	ldr	r2, [pc, #180]	; (800330c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01a      	beq.n	800329a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	3b08      	subs	r3, #8
 800326c:	4a28      	ldr	r2, [pc, #160]	; (8003310 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	461a      	mov	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a24      	ldr	r2, [pc, #144]	; (8003318 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003288:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2201      	movs	r2, #1
 8003292:	409a      	lsls	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003298:	e024      	b.n	80032e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3b10      	subs	r3, #16
 80032a2:	4a1e      	ldr	r2, [pc, #120]	; (800331c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d806      	bhi.n	80032c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d902      	bls.n	80032c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3308      	adds	r3, #8
 80032c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	461a      	mov	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a16      	ldr	r2, [pc, #88]	; (800332c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80032d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2201      	movs	r2, #1
 80032de:	409a      	lsls	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	58025408 	.word	0x58025408
 80032f4:	5802541c 	.word	0x5802541c
 80032f8:	58025430 	.word	0x58025430
 80032fc:	58025444 	.word	0x58025444
 8003300:	58025458 	.word	0x58025458
 8003304:	5802546c 	.word	0x5802546c
 8003308:	58025480 	.word	0x58025480
 800330c:	58025494 	.word	0x58025494
 8003310:	cccccccd 	.word	0xcccccccd
 8003314:	16009600 	.word	0x16009600
 8003318:	58025880 	.word	0x58025880
 800331c:	aaaaaaab 	.word	0xaaaaaaab
 8003320:	400204b8 	.word	0x400204b8
 8003324:	4002040f 	.word	0x4002040f
 8003328:	10008200 	.word	0x10008200
 800332c:	40020880 	.word	0x40020880

08003330 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d04a      	beq.n	80033dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d847      	bhi.n	80033dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d022      	beq.n	800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a24      	ldr	r2, [pc, #144]	; (80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d01d      	beq.n	800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d018      	beq.n	800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a21      	ldr	r2, [pc, #132]	; (80033f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4b17      	ldr	r3, [pc, #92]	; (8003408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	461a      	mov	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a15      	ldr	r2, [pc, #84]	; (800340c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80033b8:	671a      	str	r2, [r3, #112]	; 0x70
 80033ba:	e009      	b.n	80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a11      	ldr	r2, [pc, #68]	; (8003414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80033ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	58025408 	.word	0x58025408
 80033ec:	5802541c 	.word	0x5802541c
 80033f0:	58025430 	.word	0x58025430
 80033f4:	58025444 	.word	0x58025444
 80033f8:	58025458 	.word	0x58025458
 80033fc:	5802546c 	.word	0x5802546c
 8003400:	58025480 	.word	0x58025480
 8003404:	58025494 	.word	0x58025494
 8003408:	1600963f 	.word	0x1600963f
 800340c:	58025940 	.word	0x58025940
 8003410:	1000823f 	.word	0x1000823f
 8003414:	40020940 	.word	0x40020940

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003426:	4b89      	ldr	r3, [pc, #548]	; (800364c <HAL_GPIO_Init+0x234>)
 8003428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800342a:	e194      	b.n	8003756 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	2101      	movs	r1, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8186 	beq.w	8003750 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d005      	beq.n	800345c <HAL_GPIO_Init+0x44>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d130      	bne.n	80034be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003492:	2201      	movs	r2, #1
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	f003 0201 	and.w	r2, r3, #1
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d017      	beq.n	80034fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d123      	bne.n	800354e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	08da      	lsrs	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3208      	adds	r2, #8
 800350e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	220f      	movs	r2, #15
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	08da      	lsrs	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3208      	adds	r2, #8
 8003548:	69b9      	ldr	r1, [r7, #24]
 800354a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2203      	movs	r2, #3
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0203 	and.w	r2, r3, #3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80e0 	beq.w	8003750 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003590:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <HAL_GPIO_Init+0x238>)
 8003592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003596:	4a2e      	ldr	r2, [pc, #184]	; (8003650 <HAL_GPIO_Init+0x238>)
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035a0:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_GPIO_Init+0x238>)
 80035a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ae:	4a29      	ldr	r2, [pc, #164]	; (8003654 <HAL_GPIO_Init+0x23c>)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	3302      	adds	r3, #2
 80035b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	220f      	movs	r2, #15
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a20      	ldr	r2, [pc, #128]	; (8003658 <HAL_GPIO_Init+0x240>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d052      	beq.n	8003680 <HAL_GPIO_Init+0x268>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a1f      	ldr	r2, [pc, #124]	; (800365c <HAL_GPIO_Init+0x244>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d031      	beq.n	8003646 <HAL_GPIO_Init+0x22e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <HAL_GPIO_Init+0x248>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02b      	beq.n	8003642 <HAL_GPIO_Init+0x22a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <HAL_GPIO_Init+0x24c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d025      	beq.n	800363e <HAL_GPIO_Init+0x226>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a1c      	ldr	r2, [pc, #112]	; (8003668 <HAL_GPIO_Init+0x250>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <HAL_GPIO_Init+0x222>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_GPIO_Init+0x254>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d019      	beq.n	8003636 <HAL_GPIO_Init+0x21e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_GPIO_Init+0x258>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_GPIO_Init+0x21a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a19      	ldr	r2, [pc, #100]	; (8003674 <HAL_GPIO_Init+0x25c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00d      	beq.n	800362e <HAL_GPIO_Init+0x216>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a18      	ldr	r2, [pc, #96]	; (8003678 <HAL_GPIO_Init+0x260>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <HAL_GPIO_Init+0x212>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a17      	ldr	r2, [pc, #92]	; (800367c <HAL_GPIO_Init+0x264>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_GPIO_Init+0x20e>
 8003622:	2309      	movs	r3, #9
 8003624:	e02d      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 8003626:	230a      	movs	r3, #10
 8003628:	e02b      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 800362a:	2308      	movs	r3, #8
 800362c:	e029      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 800362e:	2307      	movs	r3, #7
 8003630:	e027      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 8003632:	2306      	movs	r3, #6
 8003634:	e025      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 8003636:	2305      	movs	r3, #5
 8003638:	e023      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 800363a:	2304      	movs	r3, #4
 800363c:	e021      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 800363e:	2303      	movs	r3, #3
 8003640:	e01f      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 8003642:	2302      	movs	r3, #2
 8003644:	e01d      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 8003646:	2301      	movs	r3, #1
 8003648:	e01b      	b.n	8003682 <HAL_GPIO_Init+0x26a>
 800364a:	bf00      	nop
 800364c:	58000080 	.word	0x58000080
 8003650:	58024400 	.word	0x58024400
 8003654:	58000400 	.word	0x58000400
 8003658:	58020000 	.word	0x58020000
 800365c:	58020400 	.word	0x58020400
 8003660:	58020800 	.word	0x58020800
 8003664:	58020c00 	.word	0x58020c00
 8003668:	58021000 	.word	0x58021000
 800366c:	58021400 	.word	0x58021400
 8003670:	58021800 	.word	0x58021800
 8003674:	58021c00 	.word	0x58021c00
 8003678:	58022000 	.word	0x58022000
 800367c:	58022400 	.word	0x58022400
 8003680:	2300      	movs	r3, #0
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	f002 0203 	and.w	r2, r2, #3
 8003688:	0092      	lsls	r2, r2, #2
 800368a:	4093      	lsls	r3, r2
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003692:	4938      	ldr	r1, [pc, #224]	; (8003774 <HAL_GPIO_Init+0x35c>)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	3302      	adds	r3, #2
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80036c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80036f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	3301      	adds	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	f47f ae63 	bne.w	800342c <HAL_GPIO_Init+0x14>
  }
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	3724      	adds	r7, #36	; 0x24
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	58000400 	.word	0x58000400

08003778 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003780:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HAL_PWREx_ConfigSupply+0x70>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b04      	cmp	r3, #4
 800378a:	d00a      	beq.n	80037a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800378c:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <HAL_PWREx_ConfigSupply+0x70>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d001      	beq.n	800379e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e01f      	b.n	80037de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e01d      	b.n	80037de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_PWREx_ConfigSupply+0x70>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	490f      	ldr	r1, [pc, #60]	; (80037e8 <HAL_PWREx_ConfigSupply+0x70>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037b2:	f7fd f9df 	bl	8000b74 <HAL_GetTick>
 80037b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037b8:	e009      	b.n	80037ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037ba:	f7fd f9db 	bl	8000b74 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037c8:	d901      	bls.n	80037ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_PWREx_ConfigSupply+0x70>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037da:	d1ee      	bne.n	80037ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	58024800 	.word	0x58024800

080037ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f000 bc1d 	b.w	800403a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8087 	beq.w	800391c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380e:	4b99      	ldr	r3, [pc, #612]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003818:	4b96      	ldr	r3, [pc, #600]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	2b10      	cmp	r3, #16
 8003822:	d007      	beq.n	8003834 <HAL_RCC_OscConfig+0x48>
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	2b18      	cmp	r3, #24
 8003828:	d110      	bne.n	800384c <HAL_RCC_OscConfig+0x60>
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d10b      	bne.n	800384c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	4b8f      	ldr	r3, [pc, #572]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d06c      	beq.n	800391a <HAL_RCC_OscConfig+0x12e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d168      	bne.n	800391a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e3f6      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x78>
 8003856:	4b87      	ldr	r3, [pc, #540]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a86      	ldr	r2, [pc, #536]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e02e      	b.n	80038c2 <HAL_RCC_OscConfig+0xd6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x9a>
 800386c:	4b81      	ldr	r3, [pc, #516]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a80      	ldr	r2, [pc, #512]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b7e      	ldr	r3, [pc, #504]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7d      	ldr	r2, [pc, #500]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800387e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e01d      	b.n	80038c2 <HAL_RCC_OscConfig+0xd6>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800388e:	d10c      	bne.n	80038aa <HAL_RCC_OscConfig+0xbe>
 8003890:	4b78      	ldr	r3, [pc, #480]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a77      	ldr	r2, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b75      	ldr	r3, [pc, #468]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a74      	ldr	r2, [pc, #464]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e00b      	b.n	80038c2 <HAL_RCC_OscConfig+0xd6>
 80038aa:	4b72      	ldr	r3, [pc, #456]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a71      	ldr	r2, [pc, #452]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80038b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b6f      	ldr	r3, [pc, #444]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6e      	ldr	r2, [pc, #440]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80038bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d013      	beq.n	80038f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fd f953 	bl	8000b74 <HAL_GetTick>
 80038ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d2:	f7fd f94f 	bl	8000b74 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e3aa      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038e4:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0xe6>
 80038f0:	e014      	b.n	800391c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fd f93f 	bl	8000b74 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fa:	f7fd f93b 	bl	8000b74 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e396      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800390c:	4b59      	ldr	r3, [pc, #356]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x10e>
 8003918:	e000      	b.n	800391c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80cb 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392a:	4b52      	ldr	r3, [pc, #328]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003932:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003934:	4b4f      	ldr	r3, [pc, #316]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_RCC_OscConfig+0x164>
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	2b18      	cmp	r3, #24
 8003944:	d156      	bne.n	80039f4 <HAL_RCC_OscConfig+0x208>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d151      	bne.n	80039f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003950:	4b48      	ldr	r3, [pc, #288]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_OscConfig+0x17c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e368      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003968:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 0219 	bic.w	r2, r3, #25
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	493f      	ldr	r1, [pc, #252]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800397a:	f7fd f8fb 	bl	8000b74 <HAL_GetTick>
 800397e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003982:	f7fd f8f7 	bl	8000b74 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e352      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003994:	4b37      	ldr	r3, [pc, #220]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	f7fd f8f4 	bl	8000b8c <HAL_GetREVID>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d817      	bhi.n	80039de <HAL_RCC_OscConfig+0x1f2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d108      	bne.n	80039c8 <HAL_RCC_OscConfig+0x1dc>
 80039b6:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039be:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c6:	e07b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	031b      	lsls	r3, r3, #12
 80039d6:	4927      	ldr	r1, [pc, #156]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039dc:	e070      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	061b      	lsls	r3, r3, #24
 80039ec:	4921      	ldr	r1, [pc, #132]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f2:	e065      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d048      	beq.n	8003a8e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039fc:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 0219 	bic.w	r2, r3, #25
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	491a      	ldr	r1, [pc, #104]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fd f8b1 	bl	8000b74 <HAL_GetTick>
 8003a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a16:	f7fd f8ad 	bl	8000b74 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e308      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a34:	f7fd f8aa 	bl	8000b8c <HAL_GetREVID>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d81a      	bhi.n	8003a78 <HAL_RCC_OscConfig+0x28c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d108      	bne.n	8003a5c <HAL_RCC_OscConfig+0x270>
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a52:	4a08      	ldr	r2, [pc, #32]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a58:	6053      	str	r3, [r2, #4]
 8003a5a:	e031      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2d4>
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	031b      	lsls	r3, r3, #12
 8003a6a:	4902      	ldr	r1, [pc, #8]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	e026      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2d4>
 8003a72:	bf00      	nop
 8003a74:	58024400 	.word	0x58024400
 8003a78:	4b9a      	ldr	r3, [pc, #616]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	4997      	ldr	r1, [pc, #604]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
 8003a8c:	e018      	b.n	8003ac0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b95      	ldr	r3, [pc, #596]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a94      	ldr	r2, [pc, #592]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fd f86b 	bl	8000b74 <HAL_GetTick>
 8003a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa2:	f7fd f867 	bl	8000b74 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e2c2      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ab4:	4b8b      	ldr	r3, [pc, #556]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a9 	beq.w	8003c20 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ad6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ad8:	4b82      	ldr	r3, [pc, #520]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d007      	beq.n	8003af4 <HAL_RCC_OscConfig+0x308>
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b18      	cmp	r3, #24
 8003ae8:	d13a      	bne.n	8003b60 <HAL_RCC_OscConfig+0x374>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d135      	bne.n	8003b60 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003af4:	4b7b      	ldr	r3, [pc, #492]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_OscConfig+0x320>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2b80      	cmp	r3, #128	; 0x80
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e296      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b0c:	f7fd f83e 	bl	8000b8c <HAL_GetREVID>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d817      	bhi.n	8003b4a <HAL_RCC_OscConfig+0x35e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d108      	bne.n	8003b34 <HAL_RCC_OscConfig+0x348>
 8003b22:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b2a:	4a6e      	ldr	r2, [pc, #440]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b32:	e075      	b.n	8003c20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b34:	4b6b      	ldr	r3, [pc, #428]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	069b      	lsls	r3, r3, #26
 8003b42:	4968      	ldr	r1, [pc, #416]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b48:	e06a      	b.n	8003c20 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b4a:	4b66      	ldr	r3, [pc, #408]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	4962      	ldr	r1, [pc, #392]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b5e:	e05f      	b.n	8003c20 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d042      	beq.n	8003bee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b68:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5d      	ldr	r2, [pc, #372]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fc fffe 	bl	8000b74 <HAL_GetTick>
 8003b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b7c:	f7fc fffa 	bl	8000b74 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e255      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b8e:	4b55      	ldr	r3, [pc, #340]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b9a:	f7fc fff7 	bl	8000b8c <HAL_GetREVID>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d817      	bhi.n	8003bd8 <HAL_RCC_OscConfig+0x3ec>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d108      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3d6>
 8003bb0:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bb8:	4a4a      	ldr	r2, [pc, #296]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bbe:	6053      	str	r3, [r2, #4]
 8003bc0:	e02e      	b.n	8003c20 <HAL_RCC_OscConfig+0x434>
 8003bc2:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	069b      	lsls	r3, r3, #26
 8003bd0:	4944      	ldr	r1, [pc, #272]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]
 8003bd6:	e023      	b.n	8003c20 <HAL_RCC_OscConfig+0x434>
 8003bd8:	4b42      	ldr	r3, [pc, #264]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	493f      	ldr	r1, [pc, #252]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60cb      	str	r3, [r1, #12]
 8003bec:	e018      	b.n	8003c20 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3c      	ldr	r2, [pc, #240]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fc ffbb 	bl	8000b74 <HAL_GetTick>
 8003bfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c02:	f7fc ffb7 	bl	8000b74 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e212      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c14:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d036      	beq.n	8003c9a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d019      	beq.n	8003c68 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c34:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	4a2a      	ldr	r2, [pc, #168]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fc ff98 	bl	8000b74 <HAL_GetTick>
 8003c44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c48:	f7fc ff94 	bl	8000b74 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e1ef      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c5a:	4b22      	ldr	r3, [pc, #136]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x45c>
 8003c66:	e018      	b.n	8003c9a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c68:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fc ff7e 	bl	8000b74 <HAL_GetTick>
 8003c78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7fc ff7a 	bl	8000b74 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1d5      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d039      	beq.n	8003d1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cba:	f7fc ff5b 	bl	8000b74 <HAL_GetTick>
 8003cbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cc2:	f7fc ff57 	bl	8000b74 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1b2      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <HAL_RCC_OscConfig+0x4f8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x4d6>
 8003ce0:	e01b      	b.n	8003d1a <HAL_RCC_OscConfig+0x52e>
 8003ce2:	bf00      	nop
 8003ce4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ce8:	4b9b      	ldr	r3, [pc, #620]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a9a      	ldr	r2, [pc, #616]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cf4:	f7fc ff3e 	bl	8000b74 <HAL_GetTick>
 8003cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003cfc:	f7fc ff3a 	bl	8000b74 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e195      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d0e:	4b92      	ldr	r3, [pc, #584]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8081 	beq.w	8003e2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d28:	4b8c      	ldr	r3, [pc, #560]	; (8003f5c <HAL_RCC_OscConfig+0x770>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a8b      	ldr	r2, [pc, #556]	; (8003f5c <HAL_RCC_OscConfig+0x770>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d34:	f7fc ff1e 	bl	8000b74 <HAL_GetTick>
 8003d38:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fc ff1a 	bl	8000b74 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e175      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d4e:	4b83      	ldr	r3, [pc, #524]	; (8003f5c <HAL_RCC_OscConfig+0x770>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d106      	bne.n	8003d70 <HAL_RCC_OscConfig+0x584>
 8003d62:	4b7d      	ldr	r3, [pc, #500]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a7c      	ldr	r2, [pc, #496]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6e:	e02d      	b.n	8003dcc <HAL_RCC_OscConfig+0x5e0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10c      	bne.n	8003d92 <HAL_RCC_OscConfig+0x5a6>
 8003d78:	4b77      	ldr	r3, [pc, #476]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	4a76      	ldr	r2, [pc, #472]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6713      	str	r3, [r2, #112]	; 0x70
 8003d84:	4b74      	ldr	r3, [pc, #464]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4a73      	ldr	r2, [pc, #460]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003d8a:	f023 0304 	bic.w	r3, r3, #4
 8003d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d90:	e01c      	b.n	8003dcc <HAL_RCC_OscConfig+0x5e0>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b05      	cmp	r3, #5
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x5c8>
 8003d9a:	4b6f      	ldr	r3, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4a6e      	ldr	r2, [pc, #440]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003da0:	f043 0304 	orr.w	r3, r3, #4
 8003da4:	6713      	str	r3, [r2, #112]	; 0x70
 8003da6:	4b6c      	ldr	r3, [pc, #432]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a6b      	ldr	r2, [pc, #428]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
 8003db2:	e00b      	b.n	8003dcc <HAL_RCC_OscConfig+0x5e0>
 8003db4:	4b68      	ldr	r3, [pc, #416]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	4a67      	ldr	r2, [pc, #412]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc0:	4b65      	ldr	r3, [pc, #404]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	4a64      	ldr	r2, [pc, #400]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003dc6:	f023 0304 	bic.w	r3, r3, #4
 8003dca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fc fece 	bl	8000b74 <HAL_GetTick>
 8003dd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dda:	e00a      	b.n	8003df2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ddc:	f7fc feca 	bl	8000b74 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e123      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003df2:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0ee      	beq.n	8003ddc <HAL_RCC_OscConfig+0x5f0>
 8003dfe:	e014      	b.n	8003e2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e00:	f7fc feb8 	bl	8000b74 <HAL_GetTick>
 8003e04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e08:	f7fc feb4 	bl	8000b74 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e10d      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e1e:	4b4e      	ldr	r3, [pc, #312]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1ee      	bne.n	8003e08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8102 	beq.w	8004038 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e34:	4b48      	ldr	r3, [pc, #288]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e3c:	2b18      	cmp	r3, #24
 8003e3e:	f000 80bd 	beq.w	8003fbc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	f040 809e 	bne.w	8003f88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4c:	4b42      	ldr	r3, [pc, #264]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a41      	ldr	r2, [pc, #260]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fc fe8c 	bl	8000b74 <HAL_GetTick>
 8003e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fc fe88 	bl	8000b74 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0e3      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e72:	4b39      	ldr	r3, [pc, #228]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7e:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e82:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <HAL_RCC_OscConfig+0x774>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e8e:	0112      	lsls	r2, r2, #4
 8003e90:	430a      	orrs	r2, r1
 8003e92:	4931      	ldr	r1, [pc, #196]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	628b      	str	r3, [r1, #40]	; 0x28
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	025b      	lsls	r3, r3, #9
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ec8:	4923      	ldr	r1, [pc, #140]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003ece:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	4a21      	ldr	r2, [pc, #132]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003eda:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCC_OscConfig+0x778>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ee6:	00d2      	lsls	r2, r2, #3
 8003ee8:	491b      	ldr	r1, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003eee:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	f023 020c 	bic.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4917      	ldr	r1, [pc, #92]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f00:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	f023 0202 	bic.w	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	4912      	ldr	r1, [pc, #72]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	4a0d      	ldr	r2, [pc, #52]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f36:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	4a07      	ldr	r2, [pc, #28]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_RCC_OscConfig+0x76c>)
 8003f48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7fc fe11 	bl	8000b74 <HAL_GetTick>
 8003f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f54:	e011      	b.n	8003f7a <HAL_RCC_OscConfig+0x78e>
 8003f56:	bf00      	nop
 8003f58:	58024400 	.word	0x58024400
 8003f5c:	58024800 	.word	0x58024800
 8003f60:	fffffc0c 	.word	0xfffffc0c
 8003f64:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fc fe04 	bl	8000b74 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e05f      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f7a:	4b32      	ldr	r3, [pc, #200]	; (8004044 <HAL_RCC_OscConfig+0x858>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x77c>
 8003f86:	e057      	b.n	8004038 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCC_OscConfig+0x858>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	; (8004044 <HAL_RCC_OscConfig+0x858>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fc fdee 	bl	8000b74 <HAL_GetTick>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fc fdea 	bl	8000b74 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e045      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fae:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_RCC_OscConfig+0x858>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x7b0>
 8003fba:	e03d      	b.n	8004038 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fbc:	4b21      	ldr	r3, [pc, #132]	; (8004044 <HAL_RCC_OscConfig+0x858>)
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCC_OscConfig+0x858>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d031      	beq.n	8004034 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f003 0203 	and.w	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d12a      	bne.n	8004034 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d122      	bne.n	8004034 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d11a      	bne.n	8004034 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	0a5b      	lsrs	r3, r3, #9
 8004002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d111      	bne.n	8004034 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d108      	bne.n	8004034 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	0e1b      	lsrs	r3, r3, #24
 8004026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3730      	adds	r7, #48	; 0x30
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	58024400 	.word	0x58024400

08004048 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e19c      	b.n	8004396 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800405c:	4b8a      	ldr	r3, [pc, #552]	; (8004288 <HAL_RCC_ClockConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d910      	bls.n	800408c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b87      	ldr	r3, [pc, #540]	; (8004288 <HAL_RCC_ClockConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 020f 	bic.w	r2, r3, #15
 8004072:	4985      	ldr	r1, [pc, #532]	; (8004288 <HAL_RCC_ClockConfig+0x240>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b83      	ldr	r3, [pc, #524]	; (8004288 <HAL_RCC_ClockConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e184      	b.n	8004396 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d010      	beq.n	80040ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	4b7b      	ldr	r3, [pc, #492]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d908      	bls.n	80040ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040a8:	4b78      	ldr	r3, [pc, #480]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	4975      	ldr	r1, [pc, #468]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d010      	beq.n	80040e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	4b70      	ldr	r3, [pc, #448]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d908      	bls.n	80040e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040d6:	4b6d      	ldr	r3, [pc, #436]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	496a      	ldr	r1, [pc, #424]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d010      	beq.n	8004116 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	4b64      	ldr	r3, [pc, #400]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004100:	429a      	cmp	r2, r3
 8004102:	d908      	bls.n	8004116 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004104:	4b61      	ldr	r3, [pc, #388]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	495e      	ldr	r1, [pc, #376]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004112:	4313      	orrs	r3, r2
 8004114:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d010      	beq.n	8004144 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800412e:	429a      	cmp	r2, r3
 8004130:	d908      	bls.n	8004144 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004132:	4b56      	ldr	r3, [pc, #344]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4953      	ldr	r1, [pc, #332]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004140:	4313      	orrs	r3, r2
 8004142:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	4b4d      	ldr	r3, [pc, #308]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	429a      	cmp	r2, r3
 800415e:	d908      	bls.n	8004172 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b4a      	ldr	r3, [pc, #296]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f023 020f 	bic.w	r2, r3, #15
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4947      	ldr	r1, [pc, #284]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 800416e:	4313      	orrs	r3, r2
 8004170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d055      	beq.n	800422a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800417e:	4b43      	ldr	r3, [pc, #268]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4940      	ldr	r1, [pc, #256]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 800418c:	4313      	orrs	r3, r2
 800418e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004198:	4b3c      	ldr	r3, [pc, #240]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d121      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0f6      	b.n	8004396 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041b0:	4b36      	ldr	r3, [pc, #216]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d115      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0ea      	b.n	8004396 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041c8:	4b30      	ldr	r3, [pc, #192]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0de      	b.n	8004396 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041d8:	4b2c      	ldr	r3, [pc, #176]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0d6      	b.n	8004396 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e8:	4b28      	ldr	r3, [pc, #160]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f023 0207 	bic.w	r2, r3, #7
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4925      	ldr	r1, [pc, #148]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fa:	f7fc fcbb 	bl	8000b74 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004200:	e00a      	b.n	8004218 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004202:	f7fc fcb7 	bl	8000b74 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004210:	4293      	cmp	r3, r2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e0be      	b.n	8004396 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004218:	4b1c      	ldr	r3, [pc, #112]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	429a      	cmp	r2, r3
 8004228:	d1eb      	bne.n	8004202 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d010      	beq.n	8004258 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	429a      	cmp	r2, r3
 8004244:	d208      	bcs.n	8004258 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f023 020f 	bic.w	r2, r3, #15
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	490e      	ldr	r1, [pc, #56]	; (800428c <HAL_RCC_ClockConfig+0x244>)
 8004254:	4313      	orrs	r3, r2
 8004256:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_ClockConfig+0x240>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d214      	bcs.n	8004290 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <HAL_RCC_ClockConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 020f 	bic.w	r2, r3, #15
 800426e:	4906      	ldr	r1, [pc, #24]	; (8004288 <HAL_RCC_ClockConfig+0x240>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b04      	ldr	r3, [pc, #16]	; (8004288 <HAL_RCC_ClockConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e086      	b.n	8004396 <HAL_RCC_ClockConfig+0x34e>
 8004288:	52002000 	.word	0x52002000
 800428c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d010      	beq.n	80042be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	4b3f      	ldr	r3, [pc, #252]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d208      	bcs.n	80042be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042ac:	4b3c      	ldr	r3, [pc, #240]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	4939      	ldr	r1, [pc, #228]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d208      	bcs.n	80042ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042da:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	492e      	ldr	r1, [pc, #184]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	4b28      	ldr	r3, [pc, #160]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004304:	429a      	cmp	r2, r3
 8004306:	d208      	bcs.n	800431a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	4922      	ldr	r1, [pc, #136]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 8004316:	4313      	orrs	r3, r2
 8004318:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004332:	429a      	cmp	r2, r3
 8004334:	d208      	bcs.n	8004348 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4917      	ldr	r1, [pc, #92]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 8004344:	4313      	orrs	r3, r2
 8004346:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004348:	f000 f844 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 800434c:	4602      	mov	r2, r0
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	4912      	ldr	r1, [pc, #72]	; (80043a4 <HAL_RCC_ClockConfig+0x35c>)
 800435a:	5ccb      	ldrb	r3, [r1, r3]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
 8004364:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004366:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <HAL_RCC_ClockConfig+0x358>)
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	4a0d      	ldr	r2, [pc, #52]	; (80043a4 <HAL_RCC_ClockConfig+0x35c>)
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
 800437c:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <HAL_RCC_ClockConfig+0x360>)
 800437e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x364>)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <HAL_RCC_ClockConfig+0x368>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc fba8 	bl	8000ae0 <HAL_InitTick>
 8004390:	4603      	mov	r3, r0
 8004392:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	58024400 	.word	0x58024400
 80043a4:	08006544 	.word	0x08006544
 80043a8:	24000004 	.word	0x24000004
 80043ac:	24000000 	.word	0x24000000
 80043b0:	24000008 	.word	0x24000008

080043b4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCC_EnableCSS+0x1c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <HAL_RCC_EnableCSS+0x1c>)
 80043be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043c2:	6013      	str	r3, [r2, #0]
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	58024400 	.word	0x58024400

080043d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	; 0x24
 80043d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043da:	4bb3      	ldr	r3, [pc, #716]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043e2:	2b18      	cmp	r3, #24
 80043e4:	f200 8155 	bhi.w	8004692 <HAL_RCC_GetSysClockFreq+0x2be>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004455 	.word	0x08004455
 80043f4:	08004693 	.word	0x08004693
 80043f8:	08004693 	.word	0x08004693
 80043fc:	08004693 	.word	0x08004693
 8004400:	08004693 	.word	0x08004693
 8004404:	08004693 	.word	0x08004693
 8004408:	08004693 	.word	0x08004693
 800440c:	08004693 	.word	0x08004693
 8004410:	0800447b 	.word	0x0800447b
 8004414:	08004693 	.word	0x08004693
 8004418:	08004693 	.word	0x08004693
 800441c:	08004693 	.word	0x08004693
 8004420:	08004693 	.word	0x08004693
 8004424:	08004693 	.word	0x08004693
 8004428:	08004693 	.word	0x08004693
 800442c:	08004693 	.word	0x08004693
 8004430:	08004481 	.word	0x08004481
 8004434:	08004693 	.word	0x08004693
 8004438:	08004693 	.word	0x08004693
 800443c:	08004693 	.word	0x08004693
 8004440:	08004693 	.word	0x08004693
 8004444:	08004693 	.word	0x08004693
 8004448:	08004693 	.word	0x08004693
 800444c:	08004693 	.word	0x08004693
 8004450:	08004487 	.word	0x08004487
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004454:	4b94      	ldr	r3, [pc, #592]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004460:	4b91      	ldr	r3, [pc, #580]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	4a90      	ldr	r2, [pc, #576]	; (80046ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
 8004470:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004472:	e111      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004474:	4b8d      	ldr	r3, [pc, #564]	; (80046ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004476:	61bb      	str	r3, [r7, #24]
    break;
 8004478:	e10e      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800447a:	4b8d      	ldr	r3, [pc, #564]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800447c:	61bb      	str	r3, [r7, #24]
    break;
 800447e:	e10b      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004480:	4b8c      	ldr	r3, [pc, #560]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004482:	61bb      	str	r3, [r7, #24]
    break;
 8004484:	e108      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004486:	4b88      	ldr	r3, [pc, #544]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004490:	4b85      	ldr	r3, [pc, #532]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800449c:	4b82      	ldr	r3, [pc, #520]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80044a6:	4b80      	ldr	r3, [pc, #512]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	08db      	lsrs	r3, r3, #3
 80044ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80e1 	beq.w	800468c <HAL_RCC_GetSysClockFreq+0x2b8>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	f000 8083 	beq.w	80045d8 <HAL_RCC_GetSysClockFreq+0x204>
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	f200 80a1 	bhi.w	800461c <HAL_RCC_GetSysClockFreq+0x248>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0x114>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d056      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x1c0>
 80044e6:	e099      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e8:	4b6f      	ldr	r3, [pc, #444]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d02d      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044f4:	4b6c      	ldr	r3, [pc, #432]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	4a6b      	ldr	r2, [pc, #428]	; (80046ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
 8004504:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451e:	4b62      	ldr	r3, [pc, #392]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004532:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800454e:	e087      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800455e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004562:	4b51      	ldr	r3, [pc, #324]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004572:	ed97 6a02 	vldr	s12, [r7, #8]
 8004576:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800457a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800458a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004592:	e065      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a6:	4b40      	ldr	r3, [pc, #256]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045d6:	e043      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80045e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ea:	4b2f      	ldr	r3, [pc, #188]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80045fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800461a:	e021      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800462a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462e:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004642:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800465e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	0a5b      	lsrs	r3, r3, #9
 8004666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800466a:	3301      	adds	r3, #1
 800466c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004678:	edd7 6a07 	vldr	s13, [r7, #28]
 800467c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004684:	ee17 3a90 	vmov	r3, s15
 8004688:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800468a:	e005      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
    break;
 8004690:	e002      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004694:	61bb      	str	r3, [r7, #24]
    break;
 8004696:	bf00      	nop
  }

  return sysclockfreq;
 8004698:	69bb      	ldr	r3, [r7, #24]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3724      	adds	r7, #36	; 0x24
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	58024400 	.word	0x58024400
 80046ac:	03d09000 	.word	0x03d09000
 80046b0:	003d0900 	.word	0x003d0900
 80046b4:	016e3600 	.word	0x016e3600
 80046b8:	46000000 	.word	0x46000000
 80046bc:	4c742400 	.word	0x4c742400
 80046c0:	4a742400 	.word	0x4a742400
 80046c4:	4bb71b00 	.word	0x4bb71b00

080046c8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80046cc:	4b07      	ldr	r3, [pc, #28]	; (80046ec <HAL_RCC_NMI_IRQHandler+0x24>)
 80046ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d8:	d105      	bne.n	80046e6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80046da:	f000 f809 	bl	80046f0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80046de:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCC_NMI_IRQHandler+0x24>)
 80046e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046e4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	58024400 	.word	0x58024400

080046f0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004708:	2300      	movs	r3, #0
 800470a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800470c:	2300      	movs	r3, #0
 800470e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d03f      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004724:	d02a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004726:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800472a:	d824      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800472c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004730:	d018      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004736:	d81e      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800473c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004740:	d007      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004742:	e018      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004744:	4ba3      	ldr	r3, [pc, #652]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	4aa2      	ldr	r2, [pc, #648]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800474a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004750:	e015      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	2102      	movs	r1, #2
 8004758:	4618      	mov	r0, r3
 800475a:	f000 ff17 	bl	800558c <RCCEx_PLL2_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004762:	e00c      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3324      	adds	r3, #36	; 0x24
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f000 ffc0 	bl	80056f0 <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004774:	e003      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
      break;
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800477c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004784:	4b93      	ldr	r3, [pc, #588]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004790:	4990      	ldr	r1, [pc, #576]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004792:	4313      	orrs	r3, r2
 8004794:	650b      	str	r3, [r1, #80]	; 0x50
 8004796:	e001      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d03d      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d826      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047cd 	.word	0x080047cd
 80047bc:	080047db 	.word	0x080047db
 80047c0:	080047ed 	.word	0x080047ed
 80047c4:	08004805 	.word	0x08004805
 80047c8:	08004805 	.word	0x08004805
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047cc:	4b81      	ldr	r3, [pc, #516]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a80      	ldr	r2, [pc, #512]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047d8:	e015      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fed3 	bl	800558c <RCCEx_PLL2_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047ea:	e00c      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3324      	adds	r3, #36	; 0x24
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 ff7c 	bl	80056f0 <RCCEx_PLL3_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
      break;
 8004802:	e000      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800480c:	4b71      	ldr	r3, [pc, #452]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004810:	f023 0207 	bic.w	r2, r3, #7
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	496e      	ldr	r1, [pc, #440]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	650b      	str	r3, [r1, #80]	; 0x50
 800481e:	e001      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482c:	2b00      	cmp	r3, #0
 800482e:	d042      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004838:	d02b      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800483a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483e:	d825      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004840:	2bc0      	cmp	r3, #192	; 0xc0
 8004842:	d028      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004844:	2bc0      	cmp	r3, #192	; 0xc0
 8004846:	d821      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004848:	2b80      	cmp	r3, #128	; 0x80
 800484a:	d016      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800484c:	2b80      	cmp	r3, #128	; 0x80
 800484e:	d81d      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d007      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004858:	e018      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485a:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	4a5d      	ldr	r2, [pc, #372]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004866:	e017      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fe8c 	bl	800558c <RCCEx_PLL2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004878:	e00e      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3324      	adds	r3, #36	; 0x24
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f000 ff35 	bl	80056f0 <RCCEx_PLL3_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800488a:	e005      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
      break;
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800489e:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	494a      	ldr	r1, [pc, #296]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	650b      	str	r3, [r1, #80]	; 0x50
 80048b0:	e001      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d049      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048cc:	d030      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80048ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048d2:	d82a      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048d8:	d02c      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80048da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048de:	d824      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e4:	d018      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80048e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ea:	d81e      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80048f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f4:	d007      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80048f6:	e018      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f8:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	4a35      	ldr	r2, [pc, #212]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004904:	e017      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3304      	adds	r3, #4
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fe3d 	bl	800558c <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004916:	e00e      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3324      	adds	r3, #36	; 0x24
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fee6 	bl	80056f0 <RCCEx_PLL3_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004928:	e005      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
      break;
 800492e:	e002      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004930:	bf00      	nop
 8004932:	e000      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004936:	7dfb      	ldrb	r3, [r7, #23]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800493c:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800494a:	4922      	ldr	r1, [pc, #136]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800494c:	4313      	orrs	r3, r2
 800494e:	658b      	str	r3, [r1, #88]	; 0x58
 8004950:	e001      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04b      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800496c:	d030      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800496e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004972:	d82a      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004974:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004978:	d02e      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800497a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800497e:	d824      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004984:	d018      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800498a:	d81e      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004994:	d007      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004996:	e018      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800499e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049a4:	e019      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3304      	adds	r3, #4
 80049aa:	2100      	movs	r1, #0
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fded 	bl	800558c <RCCEx_PLL2_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80049b6:	e010      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3324      	adds	r3, #36	; 0x24
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fe96 	bl	80056f0 <RCCEx_PLL3_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049c8:	e007      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75fb      	strb	r3, [r7, #23]
      break;
 80049ce:	e004      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80049d0:	bf00      	nop
 80049d2:	e002      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80049d4:	58024400 	.word	0x58024400
      break;
 80049d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049e0:	4b99      	ldr	r3, [pc, #612]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049ee:	4996      	ldr	r1, [pc, #600]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	658b      	str	r3, [r1, #88]	; 0x58
 80049f4:	e001      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
 80049f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d032      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0a:	2b30      	cmp	r3, #48	; 0x30
 8004a0c:	d01c      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004a0e:	2b30      	cmp	r3, #48	; 0x30
 8004a10:	d817      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d00c      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d813      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d10f      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a22:	4b89      	ldr	r3, [pc, #548]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a88      	ldr	r2, [pc, #544]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a2e:	e00e      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	2102      	movs	r1, #2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fda8 	bl	800558c <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a40:	e005      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
      break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004a48:	bf00      	nop
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a54:	4b7c      	ldr	r3, [pc, #496]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a60:	4979      	ldr	r1, [pc, #484]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a66:	e001      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d047      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a80:	d030      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a86:	d82a      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a8c:	d02c      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a92:	d824      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d018      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9e:	d81e      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa8:	d007      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004aaa:	e018      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aac:	4b66      	ldr	r3, [pc, #408]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4a65      	ldr	r2, [pc, #404]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004ab8:	e017      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fd63 	bl	800558c <RCCEx_PLL2_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004aca:	e00e      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3324      	adds	r3, #36	; 0x24
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fe0c 	bl	80056f0 <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004adc:	e005      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004af0:	4b55      	ldr	r3, [pc, #340]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	4952      	ldr	r1, [pc, #328]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	650b      	str	r3, [r1, #80]	; 0x50
 8004b02:	e001      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d049      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b1c:	d02e      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b22:	d828      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b28:	d02a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004b2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b2e:	d822      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b34:	d026      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004b36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b3a:	d81c      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b40:	d010      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004b42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b46:	d816      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01d      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d111      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
 8004b56:	2101      	movs	r1, #1
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fd17 	bl	800558c <RCCEx_PLL2_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b62:	e012      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3324      	adds	r3, #36	; 0x24
 8004b68:	2101      	movs	r1, #1
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fdc0 	bl	80056f0 <RCCEx_PLL3_Config>
 8004b70:	4603      	mov	r3, r0
 8004b72:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b74:	e009      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
      break;
 8004b7a:	e006      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b7c:	bf00      	nop
 8004b7e:	e004      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b80:	bf00      	nop
 8004b82:	e002      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9c:	492a      	ldr	r1, [pc, #168]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	650b      	str	r3, [r1, #80]	; 0x50
 8004ba2:	e001      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d04d      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bbe:	d02e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bc4:	d828      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d02a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd0:	d822      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004bd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bd6:	d026      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004bd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bdc:	d81c      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be2:	d010      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be8:	d816      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01d      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bf2:	d111      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fcc6 	bl	800558c <RCCEx_PLL2_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c04:	e012      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3324      	adds	r3, #36	; 0x24
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fd6f 	bl	80056f0 <RCCEx_PLL3_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c16:	e009      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1c:	e006      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e004      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c22:	bf00      	nop
 8004c24:	e002      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c26:	bf00      	nop
 8004c28:	e000      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c40:	4901      	ldr	r1, [pc, #4]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	658b      	str	r3, [r1, #88]	; 0x58
 8004c46:	e003      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004c48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d02f      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c64:	d00e      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6a:	d814      	bhi.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d015      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c74:	d10f      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c76:	4baf      	ldr	r3, [pc, #700]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	4aae      	ldr	r2, [pc, #696]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c82:	e00c      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	2101      	movs	r1, #1
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fc7e 	bl	800558c <RCCEx_PLL2_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004c94:	e003      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9a:	e000      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ca4:	4ba3      	ldr	r3, [pc, #652]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb0:	49a0      	ldr	r1, [pc, #640]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8004cb6:	e001      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d032      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d81b      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004d0f 	.word	0x08004d0f
 8004cdc:	08004ce9 	.word	0x08004ce9
 8004ce0:	08004cf7 	.word	0x08004cf7
 8004ce4:	08004d0f 	.word	0x08004d0f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce8:	4b92      	ldr	r3, [pc, #584]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	4a91      	ldr	r2, [pc, #580]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004cf4:	e00c      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	2102      	movs	r1, #2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fc45 	bl	800558c <RCCEx_PLL2_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d06:	e003      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d0c:	e000      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d16:	4b87      	ldr	r3, [pc, #540]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	f023 0203 	bic.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	4984      	ldr	r1, [pc, #528]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d28:	e001      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8086 	beq.w	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d3c:	4b7e      	ldr	r3, [pc, #504]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a7d      	ldr	r2, [pc, #500]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d48:	f7fb ff14 	bl	8000b74 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d4e:	e009      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d50:	f7fb ff10 	bl	8000b74 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d902      	bls.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	75fb      	strb	r3, [r7, #23]
        break;
 8004d62:	e005      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d64:	4b74      	ldr	r3, [pc, #464]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ef      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d166      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d76:	4b6f      	ldr	r3, [pc, #444]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d80:	4053      	eors	r3, r2
 8004d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d013      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d8a:	4b6a      	ldr	r3, [pc, #424]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d94:	4b67      	ldr	r3, [pc, #412]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	4a66      	ldr	r2, [pc, #408]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004da0:	4b64      	ldr	r3, [pc, #400]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	4a63      	ldr	r2, [pc, #396]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004daa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004dac:	4a61      	ldr	r2, [pc, #388]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbc:	d115      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fb fed9 	bl	8000b74 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dc4:	e00b      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fb fed5 	bl	8000b74 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d902      	bls.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	75fb      	strb	r3, [r7, #23]
            break;
 8004ddc:	e005      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dde:	4b55      	ldr	r3, [pc, #340]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ed      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d126      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfe:	d10d      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004e00:	4b4c      	ldr	r3, [pc, #304]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e0e:	0919      	lsrs	r1, r3, #4
 8004e10:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004e12:	400b      	ands	r3, r1
 8004e14:	4947      	ldr	r1, [pc, #284]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	610b      	str	r3, [r1, #16]
 8004e1a:	e005      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004e1c:	4b45      	ldr	r3, [pc, #276]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4a44      	ldr	r2, [pc, #272]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e26:	6113      	str	r3, [r2, #16]
 8004e28:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e36:	493f      	ldr	r1, [pc, #252]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	670b      	str	r3, [r1, #112]	; 0x70
 8004e3c:	e004      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	75bb      	strb	r3, [r7, #22]
 8004e42:	e001      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8085 	beq.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5a:	2b28      	cmp	r3, #40	; 0x28
 8004e5c:	d866      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004f41 	.word	0x08004f41
 8004e68:	08004f2d 	.word	0x08004f2d
 8004e6c:	08004f2d 	.word	0x08004f2d
 8004e70:	08004f2d 	.word	0x08004f2d
 8004e74:	08004f2d 	.word	0x08004f2d
 8004e78:	08004f2d 	.word	0x08004f2d
 8004e7c:	08004f2d 	.word	0x08004f2d
 8004e80:	08004f2d 	.word	0x08004f2d
 8004e84:	08004f09 	.word	0x08004f09
 8004e88:	08004f2d 	.word	0x08004f2d
 8004e8c:	08004f2d 	.word	0x08004f2d
 8004e90:	08004f2d 	.word	0x08004f2d
 8004e94:	08004f2d 	.word	0x08004f2d
 8004e98:	08004f2d 	.word	0x08004f2d
 8004e9c:	08004f2d 	.word	0x08004f2d
 8004ea0:	08004f2d 	.word	0x08004f2d
 8004ea4:	08004f1b 	.word	0x08004f1b
 8004ea8:	08004f2d 	.word	0x08004f2d
 8004eac:	08004f2d 	.word	0x08004f2d
 8004eb0:	08004f2d 	.word	0x08004f2d
 8004eb4:	08004f2d 	.word	0x08004f2d
 8004eb8:	08004f2d 	.word	0x08004f2d
 8004ebc:	08004f2d 	.word	0x08004f2d
 8004ec0:	08004f2d 	.word	0x08004f2d
 8004ec4:	08004f41 	.word	0x08004f41
 8004ec8:	08004f2d 	.word	0x08004f2d
 8004ecc:	08004f2d 	.word	0x08004f2d
 8004ed0:	08004f2d 	.word	0x08004f2d
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004f2d 	.word	0x08004f2d
 8004ee4:	08004f41 	.word	0x08004f41
 8004ee8:	08004f2d 	.word	0x08004f2d
 8004eec:	08004f2d 	.word	0x08004f2d
 8004ef0:	08004f2d 	.word	0x08004f2d
 8004ef4:	08004f2d 	.word	0x08004f2d
 8004ef8:	08004f2d 	.word	0x08004f2d
 8004efc:	08004f2d 	.word	0x08004f2d
 8004f00:	08004f2d 	.word	0x08004f2d
 8004f04:	08004f41 	.word	0x08004f41
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fb3c 	bl	800558c <RCCEx_PLL2_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f18:	e013      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3324      	adds	r3, #36	; 0x24
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fbe5 	bl	80056f0 <RCCEx_PLL3_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f30:	e007      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f32:	bf00      	nop
 8004f34:	58024400 	.word	0x58024400
 8004f38:	58024800 	.word	0x58024800
 8004f3c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f48:	4b96      	ldr	r3, [pc, #600]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f54:	4993      	ldr	r1, [pc, #588]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	654b      	str	r3, [r1, #84]	; 0x54
 8004f5a:	e001      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d038      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f70:	2b05      	cmp	r3, #5
 8004f72:	d821      	bhi.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fbf 	.word	0x08004fbf
 8004f80:	08004f95 	.word	0x08004f95
 8004f84:	08004fa7 	.word	0x08004fa7
 8004f88:	08004fbf 	.word	0x08004fbf
 8004f8c:	08004fbf 	.word	0x08004fbf
 8004f90:	08004fbf 	.word	0x08004fbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	2101      	movs	r1, #1
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 faf6 	bl	800558c <RCCEx_PLL2_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004fa4:	e00c      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3324      	adds	r3, #36	; 0x24
 8004faa:	2101      	movs	r1, #1
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fb9f 	bl	80056f0 <RCCEx_PLL3_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004fb6:	e003      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	75fb      	strb	r3, [r7, #23]
      break;
 8004fbc:	e000      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004fc6:	4b77      	ldr	r3, [pc, #476]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	f023 0207 	bic.w	r2, r3, #7
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd2:	4974      	ldr	r1, [pc, #464]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	654b      	str	r3, [r1, #84]	; 0x54
 8004fd8:	e001      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d03a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff0:	2b05      	cmp	r3, #5
 8004ff2:	d821      	bhi.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	0800503f 	.word	0x0800503f
 8005000:	08005015 	.word	0x08005015
 8005004:	08005027 	.word	0x08005027
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800503f 	.word	0x0800503f
 8005010:	0800503f 	.word	0x0800503f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	2101      	movs	r1, #1
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fab6 	bl	800558c <RCCEx_PLL2_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005024:	e00c      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3324      	adds	r3, #36	; 0x24
 800502a:	2101      	movs	r1, #1
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fb5f 	bl	80056f0 <RCCEx_PLL3_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005036:	e003      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
      break;
 800503c:	e000      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800503e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005046:	4b57      	ldr	r3, [pc, #348]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504a:	f023 0207 	bic.w	r2, r3, #7
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	4953      	ldr	r1, [pc, #332]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005056:	4313      	orrs	r3, r2
 8005058:	658b      	str	r3, [r1, #88]	; 0x58
 800505a:	e001      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d04b      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005076:	d02e      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800507c:	d828      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d02a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d822      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800508a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800508e:	d026      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005094:	d81c      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509a:	d010      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a0:	d816      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01d      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80050a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050aa:	d111      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fa6a 	bl	800558c <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80050bc:	e012      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3324      	adds	r3, #36	; 0x24
 80050c2:	2102      	movs	r1, #2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fb13 	bl	80056f0 <RCCEx_PLL3_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80050ce:	e009      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
      break;
 80050d4:	e006      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050d6:	bf00      	nop
 80050d8:	e004      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80050e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10a      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ea:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f8:	492a      	ldr	r1, [pc, #168]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	654b      	str	r3, [r1, #84]	; 0x54
 80050fe:	e001      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d04d      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005116:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800511a:	d02e      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800511c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005120:	d828      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	d02a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d822      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800512e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005132:	d026      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005138:	d81c      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d010      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005144:	d816      	bhi.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01d      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514e:	d111      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fa18 	bl	800558c <RCCEx_PLL2_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005160:	e012      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3324      	adds	r3, #36	; 0x24
 8005166:	2102      	movs	r1, #2
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fac1 	bl	80056f0 <RCCEx_PLL3_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005172:	e009      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	75fb      	strb	r3, [r7, #23]
      break;
 8005178:	e006      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800517a:	bf00      	nop
 800517c:	e004      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800517e:	bf00      	nop
 8005180:	e002      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005182:	bf00      	nop
 8005184:	e000      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10c      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005192:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800519c:	4901      	ldr	r1, [pc, #4]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	658b      	str	r3, [r1, #88]	; 0x58
 80051a2:	e003      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80051a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d04b      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051c2:	d02e      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80051c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80051c8:	d828      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ce:	d02a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80051d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d4:	d822      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051da:	d026      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80051dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80051e0:	d81c      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051e6:	d010      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80051e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ec:	d816      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01d      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80051f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f6:	d111      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f9c4 	bl	800558c <RCCEx_PLL2_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005208:	e012      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3324      	adds	r3, #36	; 0x24
 800520e:	2102      	movs	r1, #2
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fa6d 	bl	80056f0 <RCCEx_PLL3_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800521a:	e009      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	75fb      	strb	r3, [r7, #23]
      break;
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005222:	bf00      	nop
 8005224:	e004      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800522e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005236:	4b9d      	ldr	r3, [pc, #628]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005244:	4999      	ldr	r1, [pc, #612]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005246:	4313      	orrs	r3, r2
 8005248:	658b      	str	r3, [r1, #88]	; 0x58
 800524a:	e001      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	d10a      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	2102      	movs	r1, #2
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fa3e 	bl	80056f0 <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800527e:	4b8b      	ldr	r3, [pc, #556]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528c:	4987      	ldr	r1, [pc, #540]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800528e:	4313      	orrs	r3, r2
 8005290:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a8:	d10a      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3324      	adds	r3, #36	; 0x24
 80052ae:	2102      	movs	r1, #2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fa1d 	bl	80056f0 <RCCEx_PLL3_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052c0:	4b7a      	ldr	r3, [pc, #488]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ce:	4977      	ldr	r1, [pc, #476]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d034      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ea:	d01d      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80052ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f0:	d817      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fa:	d009      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80052fc:	e011      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3304      	adds	r3, #4
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f941 	bl	800558c <RCCEx_PLL2_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800530e:	e00c      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3324      	adds	r3, #36	; 0x24
 8005314:	2102      	movs	r1, #2
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f9ea 	bl	80056f0 <RCCEx_PLL3_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005320:	e003      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
      break;
 8005326:	e000      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800532a:	7dfb      	ldrb	r3, [r7, #23]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005330:	4b5e      	ldr	r3, [pc, #376]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800533e:	495b      	ldr	r1, [pc, #364]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005340:	4313      	orrs	r3, r2
 8005342:	658b      	str	r3, [r1, #88]	; 0x58
 8005344:	e001      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d033      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800535c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005360:	d01c      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005362:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005366:	d816      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536c:	d003      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800536e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005372:	d007      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005374:	e00f      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005376:	4b4d      	ldr	r3, [pc, #308]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	4a4c      	ldr	r2, [pc, #304]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800537c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005382:	e00c      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3324      	adds	r3, #36	; 0x24
 8005388:	2101      	movs	r1, #1
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f9b0 	bl	80056f0 <RCCEx_PLL3_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
      break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800539c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053a4:	4b41      	ldr	r3, [pc, #260]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b2:	493e      	ldr	r1, [pc, #248]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	654b      	str	r3, [r1, #84]	; 0x54
 80053b8:	e001      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d029      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80053d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d6:	d007      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80053d8:	e00f      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053da:	4b34      	ldr	r3, [pc, #208]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	4a33      	ldr	r2, [pc, #204]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80053e6:	e00b      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	2102      	movs	r1, #2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f8cc 	bl	800558c <RCCEx_PLL2_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80053f8:	e002      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	75fb      	strb	r3, [r7, #23]
      break;
 80053fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005406:	4b29      	ldr	r3, [pc, #164]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005412:	4926      	ldr	r1, [pc, #152]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005414:	4313      	orrs	r3, r2
 8005416:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005418:	e001      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541a:	7dfb      	ldrb	r3, [r7, #23]
 800541c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3324      	adds	r3, #36	; 0x24
 800542e:	2102      	movs	r1, #2
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f95d 	bl	80056f0 <RCCEx_PLL3_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d033      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005454:	d017      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545a:	d811      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800545c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005460:	d013      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005466:	d80b      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d010      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800546c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005470:	d106      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	4a0d      	ldr	r2, [pc, #52]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800547e:	e007      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
      break;
 8005484:	e004      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800548e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a2:	4902      	ldr	r1, [pc, #8]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	654b      	str	r3, [r1, #84]	; 0x54
 80054a8:	e004      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80054aa:	bf00      	nop
 80054ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054c0:	4b31      	ldr	r3, [pc, #196]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	492e      	ldr	r1, [pc, #184]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80054de:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054ec:	4926      	ldr	r1, [pc, #152]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054fe:	4b22      	ldr	r3, [pc, #136]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005502:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800550a:	491f      	ldr	r1, [pc, #124]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800550c:	4313      	orrs	r3, r2
 800550e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00d      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800551c:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005522:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005526:	6113      	str	r3, [r2, #16]
 8005528:	4b17      	ldr	r3, [pc, #92]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005532:	4915      	ldr	r1, [pc, #84]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005534:	4313      	orrs	r3, r2
 8005536:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da08      	bge.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005544:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554c:	490e      	ldr	r1, [pc, #56]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800554e:	4313      	orrs	r3, r2
 8005550:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	4906      	ldr	r1, [pc, #24]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800556e:	4313      	orrs	r3, r2
 8005570:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005572:	7dbb      	ldrb	r3, [r7, #22]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	e000      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400

0800558c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800559a:	4b53      	ldr	r3, [pc, #332]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d101      	bne.n	80055aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e099      	b.n	80056de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055aa:	4b4f      	ldr	r3, [pc, #316]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a4e      	ldr	r2, [pc, #312]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b6:	f7fb fadd 	bl	8000b74 <HAL_GetTick>
 80055ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055bc:	e008      	b.n	80055d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80055be:	f7fb fad9 	bl	8000b74 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e086      	b.n	80056de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055d0:	4b45      	ldr	r3, [pc, #276]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055dc:	4b42      	ldr	r3, [pc, #264]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	493f      	ldr	r1, [pc, #252]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	628b      	str	r3, [r1, #40]	; 0x28
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	3b01      	subs	r3, #1
 8005600:	025b      	lsls	r3, r3, #9
 8005602:	b29b      	uxth	r3, r3
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	3b01      	subs	r3, #1
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	3b01      	subs	r3, #1
 800561a:	061b      	lsls	r3, r3, #24
 800561c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005620:	4931      	ldr	r1, [pc, #196]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005622:	4313      	orrs	r3, r2
 8005624:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005626:	4b30      	ldr	r3, [pc, #192]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	492d      	ldr	r1, [pc, #180]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005634:	4313      	orrs	r3, r2
 8005636:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005638:	4b2b      	ldr	r3, [pc, #172]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	f023 0220 	bic.w	r2, r3, #32
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	4928      	ldr	r1, [pc, #160]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005646:	4313      	orrs	r3, r2
 8005648:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800564a:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005650:	f023 0310 	bic.w	r3, r3, #16
 8005654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005656:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800565a:	4b24      	ldr	r3, [pc, #144]	; (80056ec <RCCEx_PLL2_Config+0x160>)
 800565c:	4013      	ands	r3, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	69d2      	ldr	r2, [r2, #28]
 8005662:	00d2      	lsls	r2, r2, #3
 8005664:	4920      	ldr	r1, [pc, #128]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005666:	4313      	orrs	r3, r2
 8005668:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800566a:	4b1f      	ldr	r3, [pc, #124]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	4a1e      	ldr	r2, [pc, #120]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005670:	f043 0310 	orr.w	r3, r3, #16
 8005674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005688:	e00f      	b.n	80056aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d106      	bne.n	800569e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005690:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800569a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800569c:	e005      	b.n	80056aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fb fa5d 	bl	8000b74 <HAL_GetTick>
 80056ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056bc:	e008      	b.n	80056d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80056be:	f7fb fa59 	bl	8000b74 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e006      	b.n	80056de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	ffff0007 	.word	0xffff0007

080056f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056fe:	4b53      	ldr	r3, [pc, #332]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b03      	cmp	r3, #3
 8005708:	d101      	bne.n	800570e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e099      	b.n	8005842 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800570e:	4b4f      	ldr	r3, [pc, #316]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a4e      	ldr	r2, [pc, #312]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571a:	f7fb fa2b 	bl	8000b74 <HAL_GetTick>
 800571e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005720:	e008      	b.n	8005734 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005722:	f7fb fa27 	bl	8000b74 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e086      	b.n	8005842 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005734:	4b45      	ldr	r3, [pc, #276]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f0      	bne.n	8005722 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005740:	4b42      	ldr	r3, [pc, #264]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	051b      	lsls	r3, r3, #20
 800574e:	493f      	ldr	r1, [pc, #252]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	628b      	str	r3, [r1, #40]	; 0x28
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	3b01      	subs	r3, #1
 800575a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	3b01      	subs	r3, #1
 8005764:	025b      	lsls	r3, r3, #9
 8005766:	b29b      	uxth	r3, r3
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	3b01      	subs	r3, #1
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	3b01      	subs	r3, #1
 800577e:	061b      	lsls	r3, r3, #24
 8005780:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005784:	4931      	ldr	r1, [pc, #196]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005786:	4313      	orrs	r3, r2
 8005788:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800578a:	4b30      	ldr	r3, [pc, #192]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	492d      	ldr	r1, [pc, #180]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005798:	4313      	orrs	r3, r2
 800579a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800579c:	4b2b      	ldr	r3, [pc, #172]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	4928      	ldr	r1, [pc, #160]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057ae:	4b27      	ldr	r3, [pc, #156]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	4a26      	ldr	r2, [pc, #152]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057ba:	4b24      	ldr	r3, [pc, #144]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <RCCEx_PLL3_Config+0x160>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	69d2      	ldr	r2, [r2, #28]
 80057c6:	00d2      	lsls	r2, r2, #3
 80057c8:	4920      	ldr	r1, [pc, #128]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057ce:	4b1f      	ldr	r3, [pc, #124]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	4a1e      	ldr	r2, [pc, #120]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057e0:	4b1a      	ldr	r3, [pc, #104]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	4a19      	ldr	r2, [pc, #100]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057ec:	e00f      	b.n	800580e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d106      	bne.n	8005802 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057f4:	4b15      	ldr	r3, [pc, #84]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	4a14      	ldr	r2, [pc, #80]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 80057fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005800:	e005      	b.n	800580e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005802:	4b12      	ldr	r3, [pc, #72]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	4a11      	ldr	r2, [pc, #68]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800580c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800580e:	4b0f      	ldr	r3, [pc, #60]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a0e      	ldr	r2, [pc, #56]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581a:	f7fb f9ab 	bl	8000b74 <HAL_GetTick>
 800581e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005820:	e008      	b.n	8005834 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005822:	f7fb f9a7 	bl	8000b74 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e006      	b.n	8005842 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <RCCEx_PLL3_Config+0x15c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	58024400 	.word	0x58024400
 8005850:	ffff0007 	.word	0xffff0007

08005854 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e0f1      	b.n	8005a4a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a78      	ldr	r2, [pc, #480]	; (8005a54 <HAL_SPI_Init+0x200>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00f      	beq.n	8005896 <HAL_SPI_Init+0x42>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a77      	ldr	r2, [pc, #476]	; (8005a58 <HAL_SPI_Init+0x204>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00a      	beq.n	8005896 <HAL_SPI_Init+0x42>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a75      	ldr	r2, [pc, #468]	; (8005a5c <HAL_SPI_Init+0x208>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d005      	beq.n	8005896 <HAL_SPI_Init+0x42>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b0f      	cmp	r3, #15
 8005890:	d901      	bls.n	8005896 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0d9      	b.n	8005a4a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fe00 	bl	800649c <SPI_GetPacketSize>
 800589c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6c      	ldr	r2, [pc, #432]	; (8005a54 <HAL_SPI_Init+0x200>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00c      	beq.n	80058c2 <HAL_SPI_Init+0x6e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6a      	ldr	r2, [pc, #424]	; (8005a58 <HAL_SPI_Init+0x204>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <HAL_SPI_Init+0x6e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a69      	ldr	r2, [pc, #420]	; (8005a5c <HAL_SPI_Init+0x208>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d002      	beq.n	80058c2 <HAL_SPI_Init+0x6e>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d811      	bhi.n	80058e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80058c6:	4a63      	ldr	r2, [pc, #396]	; (8005a54 <HAL_SPI_Init+0x200>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a61      	ldr	r2, [pc, #388]	; (8005a58 <HAL_SPI_Init+0x204>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_SPI_Init+0x8c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a60      	ldr	r2, [pc, #384]	; (8005a5c <HAL_SPI_Init+0x208>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d104      	bne.n	80058ea <HAL_SPI_Init+0x96>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d901      	bls.n	80058ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0af      	b.n	8005a4a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fa feb4 	bl	800066c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005926:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005930:	d119      	bne.n	8005966 <HAL_SPI_Init+0x112>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800593a:	d103      	bne.n	8005944 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10c      	bne.n	8005966 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005954:	d107      	bne.n	8005966 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005964:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69da      	ldr	r2, [r3, #28]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	431a      	orrs	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005978:	ea42 0103 	orr.w	r1, r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c6:	ea42 0103 	orr.w	r1, r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d113      	bne.n	8005a06 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40013000 	.word	0x40013000
 8005a58:	40003800 	.word	0x40003800
 8005a5c:	40003c00 	.word	0x40003c00

08005a60 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e1b4      	b.n	8005dea <HAL_SPI_TransmitReceive_DMA+0x38a>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a8e:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a96:	7dbb      	ldrb	r3, [r7, #22]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d012      	beq.n	8005ac2 <HAL_SPI_TransmitReceive_DMA+0x62>
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa2:	d106      	bne.n	8005ab2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d007      	beq.n	8005ac2 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	e193      	b.n	8005dea <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_SPI_TransmitReceive_DMA+0x74>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_SPI_TransmitReceive_DMA+0x74>
 8005ace:	887b      	ldrh	r3, [r7, #2]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	e182      	b.n	8005dea <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d003      	beq.n	8005af8 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2205      	movs	r2, #5
 8005af4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	887a      	ldrh	r2, [r7, #2]
 8005b0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	887a      	ldrh	r2, [r7, #2]
 8005b12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	887a      	ldrh	r2, [r7, #2]
 8005b20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	887a      	ldrh	r2, [r7, #2]
 8005b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005b46:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	2b0f      	cmp	r3, #15
 8005b4e:	d905      	bls.n	8005b5c <HAL_SPI_TransmitReceive_DMA+0xfc>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b5a:	d10f      	bne.n	8005b7c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005b60:	2b07      	cmp	r3, #7
 8005b62:	d913      	bls.n	8005b8c <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6e:	d00d      	beq.n	8005b8c <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b74:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b7a:	d007      	beq.n	8005b8c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
 8005b8a:	e12e      	b.n	8005dea <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b07      	cmp	r3, #7
 8005b92:	d840      	bhi.n	8005c16 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b9e:	d109      	bne.n	8005bb4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3301      	adds	r3, #1
 8005baa:	105b      	asrs	r3, r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bbe:	d109      	bne.n	8005bd4 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3303      	adds	r3, #3
 8005bca:	109b      	asrs	r3, r3, #2
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bde:	d109      	bne.n	8005bf4 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	105b      	asrs	r3, r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bfe:	d12e      	bne.n	8005c5e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3303      	adds	r3, #3
 8005c0a:	109b      	asrs	r3, r3, #2
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005c14:	e023      	b.n	8005c5e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	2b0f      	cmp	r3, #15
 8005c1c:	d81f      	bhi.n	8005c5e <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c28:	d109      	bne.n	8005c3e <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3301      	adds	r3, #1
 8005c34:	105b      	asrs	r3, r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c48:	d109      	bne.n	8005c5e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3301      	adds	r3, #1
 8005c54:	105b      	asrs	r3, r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d108      	bne.n	8005c7c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c6e:	4a61      	ldr	r2, [pc, #388]	; (8005df4 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c76:	4a60      	ldr	r2, [pc, #384]	; (8005df8 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c7a:	e007      	b.n	8005c8c <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c80:	4a5e      	ldr	r2, [pc, #376]	; (8005dfc <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8005c82:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c88:	4a5d      	ldr	r2, [pc, #372]	; (8005e00 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8005c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c90:	4a5c      	ldr	r2, [pc, #368]	; (8005e04 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8005c92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c98:	2200      	movs	r2, #0
 8005c9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3330      	adds	r3, #48	; 0x30
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cb4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8005cb6:	f7fb fbe1 	bl	800147c <HAL_DMA_Start_IT>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d013      	beq.n	8005ce8 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc6:	f043 0210 	orr.w	r2, r3, #16
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	e080      	b.n	8005dea <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cf6:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d04:	2200      	movs	r2, #0
 8005d06:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d14:	2200      	movs	r2, #0
 8005d16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d20:	4619      	mov	r1, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3320      	adds	r3, #32
 8005d28:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d30:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8005d32:	f7fb fba3 	bl	800147c <HAL_DMA_Start_IT>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d013      	beq.n	8005d64 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d42:	f043 0210 	orr.w	r2, r3, #16
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	e042      	b.n	8005dea <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6e:	d108      	bne.n	8005d82 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6859      	ldr	r1, [r3, #4]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b23      	ldr	r3, [pc, #140]	; (8005e08 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8005d7c:	400b      	ands	r3, r1
 8005d7e:	6053      	str	r3, [r2, #4]
 8005d80:	e009      	b.n	8005d96 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	4b1f      	ldr	r3, [pc, #124]	; (8005e08 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	8879      	ldrh	r1, [r7, #2]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	430b      	orrs	r3, r1
 8005d94:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005da4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8005db4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dce:	d107      	bne.n	8005de0 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dde:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	080062a9 	.word	0x080062a9
 8005df8:	0800621d 	.word	0x0800621d
 8005dfc:	080062c5 	.word	0x080062c5
 8005e00:	08006263 	.word	0x08006263
 8005e04:	080062e1 	.word	0x080062e1
 8005e08:	ffff0000 	.word	0xffff0000

08005e0c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005e24:	6a3a      	ldr	r2, [r7, #32]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e3e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3330      	adds	r3, #48	; 0x30
 8005e46:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d113      	bne.n	8005e7a <HAL_SPI_IRQHandler+0x6e>
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10e      	bne.n	8005e7a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d009      	beq.n	8005e7a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
    handled = 1UL;
 8005e76:	2301      	movs	r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10f      	bne.n	8005ea4 <HAL_SPI_IRQHandler+0x98>
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
    handled = 1UL;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <HAL_SPI_IRQHandler+0xc2>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
    handled = 1UL;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 815a 	bne.w	800618a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 808b 	beq.w	8005ff8 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0208 	orr.w	r2, r2, #8
 8005ef0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0210 	orr.w	r2, r2, #16
 8005f00:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f10:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0208 	bic.w	r2, r2, #8
 8005f20:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d13d      	bne.n	8005fac <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005f30:	e036      	b.n	8005fa0 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d90b      	bls.n	8005f52 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f44:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f4a:	1d1a      	adds	r2, r3, #4
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	665a      	str	r2, [r3, #100]	; 0x64
 8005f50:	e01d      	b.n	8005f8e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b07      	cmp	r3, #7
 8005f58:	d90b      	bls.n	8005f72 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	8812      	ldrh	r2, [r2, #0]
 8005f62:	b292      	uxth	r2, r2
 8005f64:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f6a:	1c9a      	adds	r2, r3, #2
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	665a      	str	r2, [r3, #100]	; 0x64
 8005f70:	e00d      	b.n	8005f8e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f7e:	7812      	ldrb	r2, [r2, #0]
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1c2      	bne.n	8005f32 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f9d5 	bl	800635c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f91f 	bl	8006208 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005fca:	e0e3      	b.n	8006194 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005fcc:	7cfb      	ldrb	r3, [r7, #19]
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d103      	bne.n	8005fda <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8fa 	bl	80061cc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005fd8:	e0d9      	b.n	800618e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005fda:	7cfb      	ldrb	r3, [r7, #19]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d103      	bne.n	8005fe8 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f8e9 	bl	80061b8 <HAL_SPI_RxCpltCallback>
    return;
 8005fe6:	e0d2      	b.n	800618e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005fe8:	7cfb      	ldrb	r3, [r7, #19]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	f040 80cf 	bne.w	800618e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8d7 	bl	80061a4 <HAL_SPI_TxCpltCallback>
    return;
 8005ff6:	e0ca      	b.n	800618e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <HAL_SPI_IRQHandler+0x212>
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800601a:	619a      	str	r2, [r3, #24]

    return;
 800601c:	e0ba      	b.n	8006194 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80b5 	beq.w	8006194 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00f      	beq.n	8006054 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800603a:	f043 0204 	orr.w	r2, r3, #4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006052:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00f      	beq.n	800607e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006064:	f043 0201 	orr.w	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00f      	beq.n	80060a8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800608e:	f043 0208 	orr.w	r2, r3, #8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00f      	beq.n	80060d2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699a      	ldr	r2, [r3, #24]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0220 	orr.w	r2, r2, #32
 80060d0:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d05a      	beq.n	8006192 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6919      	ldr	r1, [r3, #16]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b29      	ldr	r3, [pc, #164]	; (800619c <HAL_SPI_IRQHandler+0x390>)
 80060f8:	400b      	ands	r3, r1
 80060fa:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006102:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006106:	d138      	bne.n	800617a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006116:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d013      	beq.n	8006148 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006124:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <HAL_SPI_IRQHandler+0x394>)
 8006126:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800612c:	4618      	mov	r0, r3
 800612e:	f7fb fc0f 	bl	8001950 <HAL_DMA_Abort_IT>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800614c:	2b00      	cmp	r3, #0
 800614e:	d020      	beq.n	8006192 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006154:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <HAL_SPI_IRQHandler+0x394>)
 8006156:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800615c:	4618      	mov	r0, r3
 800615e:	f7fb fbf7 	bl	8001950 <HAL_DMA_Abort_IT>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d014      	beq.n	8006192 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800616e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006178:	e00b      	b.n	8006192 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f840 	bl	8006208 <HAL_SPI_ErrorCallback>
    return;
 8006188:	e003      	b.n	8006192 <HAL_SPI_IRQHandler+0x386>
    return;
 800618a:	bf00      	nop
 800618c:	e002      	b.n	8006194 <HAL_SPI_IRQHandler+0x388>
    return;
 800618e:	bf00      	nop
 8006190:	e000      	b.n	8006194 <HAL_SPI_IRQHandler+0x388>
    return;
 8006192:	bf00      	nop
  }
}
 8006194:	3728      	adds	r7, #40	; 0x28
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	fffffc94 	.word	0xfffffc94
 80061a0:	08006327 	.word	0x08006327

080061a4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b07      	cmp	r3, #7
 8006234:	d011      	beq.n	800625a <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006240:	d103      	bne.n	800624a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff ffb8 	bl	80061b8 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8006248:	e007      	b.n	800625a <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0208 	orr.w	r2, r2, #8
 8006258:	611a      	str	r2, [r3, #16]
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b07      	cmp	r3, #7
 800627a:	d011      	beq.n	80062a0 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006286:	d103      	bne.n	8006290 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff ff9f 	bl	80061cc <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800628e:	e007      	b.n	80062a0 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0208 	orr.w	r2, r2, #8
 800629e:	611a      	str	r2, [r3, #16]
}
 80062a0:	bf00      	nop
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff ff92 	bl	80061e0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7ff ff8e 	bl	80061f4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fc fc9e 	bl	8002c30 <HAL_DMA_GetError>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d011      	beq.n	800631e <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f82e 	bl	800635c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006306:	f043 0210 	orr.w	r2, r3, #16
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff ff75 	bl	8006208 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff ff5b 	bl	8006208 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0208 	orr.w	r2, r2, #8
 800637a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0210 	orr.w	r2, r2, #16
 800638a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0201 	bic.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6919      	ldr	r1, [r3, #16]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b3c      	ldr	r3, [pc, #240]	; (8006498 <SPI_CloseTransfer+0x13c>)
 80063a8:	400b      	ands	r3, r1
 80063aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80063ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d014      	beq.n	80063f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00f      	beq.n	80063f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	699a      	ldr	r2, [r3, #24]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0220 	orr.w	r2, r2, #32
 80063f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d014      	beq.n	8006428 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00f      	beq.n	8006428 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640e:	f043 0204 	orr.w	r2, r3, #4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006426:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00f      	beq.n	8006452 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006438:	f043 0201 	orr.w	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006450:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00f      	beq.n	800647c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006462:	f043 0208 	orr.w	r2, r3, #8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800647a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800648c:	bf00      	nop
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	fffffc90 	.word	0xfffffc90

0800649c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a8:	095b      	lsrs	r3, r3, #5
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	3307      	adds	r3, #7
 80064ba:	08db      	lsrs	r3, r3, #3
 80064bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	fb02 f303 	mul.w	r3, r2, r3
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <__libc_init_array>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	4d0d      	ldr	r5, [pc, #52]	; (800650c <__libc_init_array+0x38>)
 80064d8:	4c0d      	ldr	r4, [pc, #52]	; (8006510 <__libc_init_array+0x3c>)
 80064da:	1b64      	subs	r4, r4, r5
 80064dc:	10a4      	asrs	r4, r4, #2
 80064de:	2600      	movs	r6, #0
 80064e0:	42a6      	cmp	r6, r4
 80064e2:	d109      	bne.n	80064f8 <__libc_init_array+0x24>
 80064e4:	4d0b      	ldr	r5, [pc, #44]	; (8006514 <__libc_init_array+0x40>)
 80064e6:	4c0c      	ldr	r4, [pc, #48]	; (8006518 <__libc_init_array+0x44>)
 80064e8:	f000 f820 	bl	800652c <_init>
 80064ec:	1b64      	subs	r4, r4, r5
 80064ee:	10a4      	asrs	r4, r4, #2
 80064f0:	2600      	movs	r6, #0
 80064f2:	42a6      	cmp	r6, r4
 80064f4:	d105      	bne.n	8006502 <__libc_init_array+0x2e>
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fc:	4798      	blx	r3
 80064fe:	3601      	adds	r6, #1
 8006500:	e7ee      	b.n	80064e0 <__libc_init_array+0xc>
 8006502:	f855 3b04 	ldr.w	r3, [r5], #4
 8006506:	4798      	blx	r3
 8006508:	3601      	adds	r6, #1
 800650a:	e7f2      	b.n	80064f2 <__libc_init_array+0x1e>
 800650c:	0800655c 	.word	0x0800655c
 8006510:	0800655c 	.word	0x0800655c
 8006514:	0800655c 	.word	0x0800655c
 8006518:	08006560 	.word	0x08006560

0800651c <memset>:
 800651c:	4402      	add	r2, r0
 800651e:	4603      	mov	r3, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	f803 1b01 	strb.w	r1, [r3], #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <_init>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	bf00      	nop
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr

08006538 <_fini>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	bf00      	nop
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr
