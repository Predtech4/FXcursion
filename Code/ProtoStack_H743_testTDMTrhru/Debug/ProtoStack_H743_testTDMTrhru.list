
ProtoStack_H743_testTDMTrhru.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e10  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080080fc  080080fc  000180fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24002000  08008100  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000588  24002010  08008110  00022010  2**2
                  ALLOC
  8 ._user_heap_stack 00003a00  20000000  20000000  00030000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00022010  2**0
                  CONTENTS, READONLY
 10 .ramd1dma     000003e2  24000000  24000000  00030000  2**2
                  ALLOC
 11 .ramd1        00000000  24002598  24002598  0002203e  2**0
                  CONTENTS
 12 .ramd2        00000000  30000000  30000000  0002203e  2**0
                  CONTENTS
 13 .ramd3        00000000  38000000  38000000  0002203e  2**0
                  CONTENTS
 14 .dtcm         00000000  20004000  20004000  0002203e  2**0
                  CONTENTS
 15 .itcm         00000000  00000000  00000000  0002203e  2**0
                  CONTENTS
 16 .debug_info   00025e1f  00000000  00000000  0002203e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00003d9e  00000000  00000000  00047e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000011b0  00000000  00000000  0004bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001348  00000000  00000000  0004cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003bff2  00000000  00000000  0004e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00024268  00000000  00000000  0008a0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00164051  00000000  00000000  000ae352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  002123a3  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00002ff0  00000000  00000000  002123f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00013ac1  00000000  00000000  002153e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24002010 	.word	0x24002010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008090 	.word	0x08008090

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24002014 	.word	0x24002014
 80002d4:	08008090 	.word	0x08008090

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005dc:	b500      	push	{lr}
 80005de:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_DMA_Init+0x84>)
 80005e2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80005e6:	f042 0201 	orr.w	r2, r2, #1
 80005ea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80005ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	4611      	mov	r1, r2
 80005fe:	200d      	movs	r0, #13
 8000600:	f000 ff9a 	bl	8001538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000604:	200d      	movs	r0, #13
 8000606:	f000 ffcb 	bl	80015a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	4611      	mov	r1, r2
 800060e:	200e      	movs	r0, #14
 8000610:	f000 ff92 	bl	8001538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000614:	200e      	movs	r0, #14
 8000616:	f000 ffc3 	bl	80015a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	4611      	mov	r1, r2
 800061e:	200f      	movs	r0, #15
 8000620:	f000 ff8a 	bl	8001538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000624:	200f      	movs	r0, #15
 8000626:	f000 ffbb 	bl	80015a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	4611      	mov	r1, r2
 800062e:	2010      	movs	r0, #16
 8000630:	f000 ff82 	bl	8001538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000634:	2010      	movs	r0, #16
 8000636:	f000 ffb3 	bl	80015a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	4611      	mov	r1, r2
 800063e:	2011      	movs	r0, #17
 8000640:	f000 ff7a 	bl	8001538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000644:	2011      	movs	r0, #17
 8000646:	f000 ffab 	bl	80015a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	4611      	mov	r1, r2
 800064e:	202f      	movs	r0, #47	; 0x2f
 8000650:	f000 ff72 	bl	8001538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000654:	202f      	movs	r0, #47	; 0x2f
 8000656:	f000 ffa3 	bl	80015a0 <HAL_NVIC_EnableIRQ>

}
 800065a:	b003      	add	sp, #12
 800065c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000660:	58024400 	.word	0x58024400

08000664 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000664:	b086      	sub	sp, #24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <MX_GPIO_Init+0x98>)
 8000668:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800066c:	f042 0210 	orr.w	r2, r2, #16
 8000670:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000674:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000678:	f002 0210 	and.w	r2, r2, #16
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000680:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000688:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800068c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000690:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000698:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800069c:	f042 0204 	orr.w	r2, r2, #4
 80006a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80006a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006a8:	f002 0204 	and.w	r2, r2, #4
 80006ac:	9202      	str	r2, [sp, #8]
 80006ae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006b4:	f042 0201 	orr.w	r2, r2, #1
 80006b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80006bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006c0:	f002 0201 	and.w	r2, r2, #1
 80006c4:	9203      	str	r2, [sp, #12]
 80006c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006cc:	f042 0202 	orr.w	r2, r2, #2
 80006d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80006d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006d8:	f002 0202 	and.w	r2, r2, #2
 80006dc:	9204      	str	r2, [sp, #16]
 80006de:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006e4:	f042 0208 	orr.w	r2, r2, #8
 80006e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f0:	f003 0308 	and.w	r3, r3, #8
 80006f4:	9305      	str	r3, [sp, #20]
 80006f6:	9b05      	ldr	r3, [sp, #20]

}
 80006f8:	b006      	add	sp, #24
 80006fa:	4770      	bx	lr
 80006fc:	58024400 	.word	0x58024400

08000700 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000700:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000702:	4813      	ldr	r0, [pc, #76]	; (8000750 <MX_I2C4_Init+0x50>)
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_I2C4_Init+0x54>)
 8000706:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x00000E14;
 8000708:	f640 6314 	movw	r3, #3604	; 0xe14
 800070c:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	6083      	str	r3, [r0, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000712:	2201      	movs	r2, #1
 8000714:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000716:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000718:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800071a:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000720:	f003 f94e 	bl	80039c0 <HAL_I2C_Init>
 8000724:	b950      	cbnz	r0, 800073c <MX_I2C4_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	4809      	ldr	r0, [pc, #36]	; (8000750 <MX_I2C4_Init+0x50>)
 800072a:	f003 fa7b 	bl	8003c24 <HAL_I2CEx_ConfigAnalogFilter>
 800072e:	b940      	cbnz	r0, 8000742 <MX_I2C4_Init+0x42>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4807      	ldr	r0, [pc, #28]	; (8000750 <MX_I2C4_Init+0x50>)
 8000734:	f003 faa4 	bl	8003c80 <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	b930      	cbnz	r0, 8000748 <MX_I2C4_Init+0x48>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800073a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800073c:	f000 f9a2 	bl	8000a84 <Error_Handler>
 8000740:	e7f1      	b.n	8000726 <MX_I2C4_Init+0x26>
    Error_Handler();
 8000742:	f000 f99f 	bl	8000a84 <Error_Handler>
 8000746:	e7f3      	b.n	8000730 <MX_I2C4_Init+0x30>
    Error_Handler();
 8000748:	f000 f99c 	bl	8000a84 <Error_Handler>
}
 800074c:	e7f5      	b.n	800073a <MX_I2C4_Init+0x3a>
 800074e:	bf00      	nop
 8000750:	2400202c 	.word	0x2400202c
 8000754:	58001c00 	.word	0x58001c00

08000758 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000758:	b510      	push	{r4, lr}
 800075a:	b0b6      	sub	sp, #216	; 0xd8
 800075c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	2100      	movs	r1, #0
 8000760:	9131      	str	r1, [sp, #196]	; 0xc4
 8000762:	9132      	str	r1, [sp, #200]	; 0xc8
 8000764:	9133      	str	r1, [sp, #204]	; 0xcc
 8000766:	9134      	str	r1, [sp, #208]	; 0xd0
 8000768:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076a:	22bc      	movs	r2, #188	; 0xbc
 800076c:	a802      	add	r0, sp, #8
 800076e:	f007 fc87 	bl	8008080 <memset>
  if(i2cHandle->Instance==I2C4)
 8000772:	6822      	ldr	r2, [r4, #0]
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <HAL_I2C_MspInit+0x90>)
 8000776:	429a      	cmp	r2, r3
 8000778:	d001      	beq.n	800077e <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800077a:	b036      	add	sp, #216	; 0xd8
 800077c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800077e:	2310      	movs	r3, #16
 8000780:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_CSI;
 8000782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000786:	9327      	str	r3, [sp, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000788:	a802      	add	r0, sp, #8
 800078a:	f004 f9b9 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 800078e:	bb40      	cbnz	r0, 80007e2 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000790:	4c16      	ldr	r4, [pc, #88]	; (80007ec <HAL_I2C_MspInit+0x94>)
 8000792:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800079e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007ae:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b0:	2312      	movs	r3, #18
 80007b2:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b8:	2302      	movs	r3, #2
 80007ba:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80007bc:	2304      	movs	r3, #4
 80007be:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c0:	a931      	add	r1, sp, #196	; 0xc4
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <HAL_I2C_MspInit+0x98>)
 80007c4:	f002 fe52 	bl	800346c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80007c8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80007d4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80007d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	9b01      	ldr	r3, [sp, #4]
}
 80007e0:	e7cb      	b.n	800077a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80007e2:	f000 f94f 	bl	8000a84 <Error_Handler>
 80007e6:	e7d3      	b.n	8000790 <HAL_I2C_MspInit+0x38>
 80007e8:	58001c00 	.word	0x58001c00
 80007ec:	58024400 	.word	0x58024400
 80007f0:	58020c00 	.word	0x58020c00

080007f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b500      	push	{lr}
 80007f6:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f8:	224c      	movs	r2, #76	; 0x4c
 80007fa:	2100      	movs	r1, #0
 80007fc:	a80b      	add	r0, sp, #44	; 0x2c
 80007fe:	f007 fc3f 	bl	8008080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000802:	2220      	movs	r2, #32
 8000804:	2100      	movs	r1, #0
 8000806:	a803      	add	r0, sp, #12
 8000808:	f007 fc3a 	bl	8008080 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800080c:	2002      	movs	r0, #2
 800080e:	f003 fa63 	bl	8003cd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000812:	2300      	movs	r3, #0
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <_Z18SystemClock_Configv+0x120>)
 8000818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081a:	f022 0201 	bic.w	r2, r2, #1
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	4b3b      	ldr	r3, [pc, #236]	; (8000918 <_Z18SystemClock_Configv+0x124>)
 800082a:	699a      	ldr	r2, [r3, #24]
 800082c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000830:	619a      	str	r2, [r3, #24]
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	4a36      	ldr	r2, [pc, #216]	; (8000918 <_Z18SystemClock_Configv+0x124>)
 800083e:	6993      	ldr	r3, [r2, #24]
 8000840:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000844:	d0fb      	beq.n	800083e <_Z18SystemClock_Configv+0x4a>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b35      	ldr	r3, [pc, #212]	; (800091c <_Z18SystemClock_Configv+0x128>)
 8000848:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800084c:	f042 0202 	orr.w	r2, r2, #2
 8000850:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000860:	2300      	movs	r3, #0
 8000862:	9302      	str	r3, [sp, #8]
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <_Z18SystemClock_Configv+0x124>)
 8000866:	699a      	ldr	r2, [r3, #24]
 8000868:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800086c:	619a      	str	r2, [r3, #24]
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <_Z18SystemClock_Configv+0x120>)
 8000878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087a:	f042 0201 	orr.w	r2, r2, #1
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	9302      	str	r3, [sp, #8]
 8000888:	9b02      	ldr	r3, [sp, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <_Z18SystemClock_Configv+0x124>)
 800088c:	6993      	ldr	r3, [r2, #24]
 800088e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000892:	d0fb      	beq.n	800088c <_Z18SystemClock_Configv+0x98>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000894:	4a21      	ldr	r2, [pc, #132]	; (800091c <_Z18SystemClock_Configv+0x128>)
 8000896:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000898:	f023 0303 	bic.w	r3, r3, #3
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 80008a2:	2311      	movs	r3, #17
 80008a4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008aa:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80008b0:	2320      	movs	r3, #32
 80008b2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
 80008ba:	2203      	movs	r2, #3
 80008bc:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008be:	2278      	movs	r2, #120	; 0x78
 80008c0:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c2:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008c4:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c6:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008c8:	230c      	movs	r3, #12
 80008ca:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d0:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	a80b      	add	r0, sp, #44	; 0x2c
 80008d4:	f003 fa28 	bl	8003d28 <HAL_RCC_OscConfig>
 80008d8:	b9c0      	cbnz	r0, 800090c <_Z18SystemClock_Configv+0x118>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	233f      	movs	r3, #63	; 0x3f
 80008dc:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2303      	movs	r3, #3
 80008e0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008e6:	2308      	movs	r3, #8
 80008e8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ee:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f4:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f6:	930a      	str	r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f8:	2104      	movs	r1, #4
 80008fa:	a803      	add	r0, sp, #12
 80008fc:	f003 fe4c 	bl	8004598 <HAL_RCC_ClockConfig>
 8000900:	b930      	cbnz	r0, 8000910 <_Z18SystemClock_Configv+0x11c>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000902:	f003 fd49 	bl	8004398 <HAL_RCC_EnableCSS>
}
 8000906:	b01f      	add	sp, #124	; 0x7c
 8000908:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090e:	e7fe      	b.n	800090e <_Z18SystemClock_Configv+0x11a>
 8000910:	b672      	cpsid	i
 8000912:	e7fe      	b.n	8000912 <_Z18SystemClock_Configv+0x11e>
 8000914:	58000400 	.word	0x58000400
 8000918:	58024800 	.word	0x58024800
 800091c:	58024400 	.word	0x58024400

08000920 <_Z24PeriphCommonClock_Configv>:
{
 8000920:	b500      	push	{lr}
 8000922:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000924:	22a0      	movs	r2, #160	; 0xa0
 8000926:	2100      	movs	r1, #0
 8000928:	a808      	add	r0, sp, #32
 800092a:	f007 fba9 	bl	8008080 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800092e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000932:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000934:	2305      	movs	r3, #5
 8000936:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 25;
 800093c:	2219      	movs	r2, #25
 800093e:	9204      	str	r2, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000940:	2202      	movs	r2, #2
 8000942:	9205      	str	r2, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000944:	9206      	str	r2, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000946:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8000948:	2301      	movs	r3, #1
 800094a:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800094c:	a801      	add	r0, sp, #4
 800094e:	f004 f8d7 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8000952:	b910      	cbnz	r0, 800095a <_Z24PeriphCommonClock_Configv+0x3a>
}
 8000954:	b031      	add	sp, #196	; 0xc4
 8000956:	f85d fb04 	ldr.w	pc, [sp], #4
 800095a:	b672      	cpsid	i
  while (1)
 800095c:	e7fe      	b.n	800095c <_Z24PeriphCommonClock_Configv+0x3c>
	...

08000960 <main>:
{
 8000960:	b510      	push	{r4, lr}
 8000962:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000966:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000968:	466b      	mov	r3, sp
 800096a:	2400      	movs	r4, #0
 800096c:	9400      	str	r4, [sp, #0]
 800096e:	605c      	str	r4, [r3, #4]
 8000970:	609c      	str	r4, [r3, #8]
 8000972:	60dc      	str	r4, [r3, #12]
  HAL_MPU_Disable();
 8000974:	f000 fe36 	bl	80015e4 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000978:	2301      	movs	r3, #1
 800097a:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800097e:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000982:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 8000986:	9201      	str	r2, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000988:	220c      	movs	r2, #12
 800098a:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800098e:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000992:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000996:	2203      	movs	r2, #3
 8000998:	f88d 200b 	strb.w	r2, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800099c:	f88d 300c 	strb.w	r3, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009a0:	f88d 300d 	strb.w	r3, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009a4:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80009a8:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009ac:	4668      	mov	r0, sp
 80009ae:	f000 fe37 	bl	8001620 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009b2:	2004      	movs	r0, #4
 80009b4:	f000 fe24 	bl	8001600 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009b8:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <main+0x114>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80009c0:	d112      	bne.n	80009e8 <main+0x88>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009c6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <main+0x114>)
 80009cc:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009d4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80009de:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009e4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80009e8:	f000 fd3a 	bl	8001460 <HAL_Init>
  SystemClock_Config();
 80009ec:	f7ff ff02 	bl	80007f4 <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 80009f0:	f7ff ff96 	bl	8000920 <_Z24PeriphCommonClock_Configv>
  MX_GPIO_Init();
 80009f4:	f7ff fe36 	bl	8000664 <MX_GPIO_Init>
  MX_SAI1_Init();
 80009f8:	f000 f846 	bl	8000a88 <MX_SAI1_Init>
  MX_DMA_Init();
 80009fc:	f7ff fdee 	bl	80005dc <MX_DMA_Init>
  MX_I2C4_Init();
 8000a00:	f7ff fe7e 	bl	8000700 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8000a04:	f000 fb54 	bl	80010b0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000a08:	f000 f982 	bl	8000d10 <MX_SPI2_Init>
  CS42448_enable();
 8000a0c:	f000 fcee 	bl	80013ec <CS42448_enable>
  for(int i =  0; i < 1024; i++)
 8000a10:	f241 020c 	movw	r2, #4108	; 0x100c
 8000a14:	446a      	add	r2, sp
 8000a16:	f242 010c 	movw	r1, #8204	; 0x200c
 8000a1a:	4469      	add	r1, sp
  CS42448_enable();
 8000a1c:	2300      	movs	r3, #0
	  samples[i] = (uint32_t) i << 8;
 8000a1e:	f842 3f04 	str.w	r3, [r2, #4]!
  for(int i =  0; i < 1024; i++)
 8000a22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a26:	428a      	cmp	r2, r1
 8000a28:	d1f9      	bne.n	8000a1e <main+0xbe>
 8000a2a:	ab03      	add	r3, sp, #12
 8000a2c:	aa04      	add	r2, sp, #16
 8000a2e:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
	  samples_tx[i] = (uint32_t) 0xFFFFFFFF;
 8000a32:	f04f 31ff 	mov.w	r1, #4294967295
 8000a36:	f843 1f04 	str.w	r1, [r3, #4]!
  for(int i =  0; i < 1024; i++)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d1fb      	bne.n	8000a36 <main+0xd6>
HAL_Delay(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f000 fd4e 	bl	80014e0 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)samples, 1024);
 8000a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4a:	f241 0110 	movw	r1, #4112	; 0x1010
 8000a4e:	4469      	add	r1, sp
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <main+0x118>)
 8000a52:	f005 fe3b 	bl	80066cc <HAL_SAI_Receive_DMA>
HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*)samples_tx, 1024);
 8000a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5a:	a904      	add	r1, sp, #16
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <main+0x11c>)
 8000a5e:	f005 fdb3 	bl	80065c8 <HAL_SAI_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a62:	b662      	cpsie	i
  HAL_Delay(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 fd3b 	bl	80014e0 <HAL_Delay>
	guiAdapter_Init(&guiadapter);
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <main+0x120>)
 8000a6c:	f000 fc0c 	bl	8001288 <guiAdapter_Init>
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <main+0x110>
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00
 8000a78:	2400216c 	.word	0x2400216c
 8000a7c:	24002204 	.word	0x24002204
 8000a80:	24000000 	.word	0x24000000

08000a84 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <Error_Handler+0x2>

08000a88 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000a88:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000a8a:	482f      	ldr	r0, [pc, #188]	; (8000b48 <MX_SAI1_Init+0xc0>)
 8000a8c:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <MX_SAI1_Init+0xc4>)
 8000a8e:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000a94:	2201      	movs	r2, #1
 8000a96:	6042      	str	r2, [r0, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_24;
 8000a98:	21c0      	movs	r1, #192	; 0xc0
 8000a9a:	6481      	str	r1, [r0, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000a9c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000a9e:	6502      	str	r2, [r0, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000aa0:	6083      	str	r3, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000aa2:	6143      	str	r3, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000aa4:	6183      	str	r3, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000aa6:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000aa8:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000aac:	6201      	str	r1, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000aae:	60c3      	str	r3, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ab0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ab2:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000ab4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000ab8:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abe:	6401      	str	r1, [r0, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000ac0:	6541      	str	r1, [r0, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000ac2:	6582      	str	r2, [r0, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ac4:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000ac6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000aca:	6601      	str	r1, [r0, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000acc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000ad0:	6641      	str	r1, [r0, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ad2:	6683      	str	r3, [r0, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	66c1      	str	r1, [r0, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000ad8:	6702      	str	r2, [r0, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000ada:	6743      	str	r3, [r0, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000adc:	f005 fb30 	bl	8006140 <HAL_SAI_Init>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d12a      	bne.n	8000b3a <MX_SAI1_Init+0xb2>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8000ae4:	481a      	ldr	r0, [pc, #104]	; (8000b50 <MX_SAI1_Init+0xc8>)
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_SAI1_Init+0xcc>)
 8000ae8:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	6443      	str	r3, [r0, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 8000aee:	2202      	movs	r2, #2
 8000af0:	6042      	str	r2, [r0, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_24;
 8000af2:	22c0      	movs	r2, #192	; 0xc0
 8000af4:	6482      	str	r2, [r0, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000af6:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000af8:	2201      	movs	r2, #1
 8000afa:	6502      	str	r2, [r0, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000afc:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000afe:	6143      	str	r3, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b00:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b02:	60c3      	str	r3, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b04:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b06:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b08:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000b0a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8000b0e:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b14:	6401      	str	r1, [r0, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 256;
 8000b16:	6541      	str	r1, [r0, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000b18:	6582      	str	r2, [r0, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b1a:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000b1c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000b20:	6601      	str	r1, [r0, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000b22:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000b26:	6641      	str	r1, [r0, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000b28:	6683      	str	r3, [r0, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	66c1      	str	r1, [r0, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000b2e:	6702      	str	r2, [r0, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000b30:	6743      	str	r3, [r0, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000b32:	f005 fb05 	bl	8006140 <HAL_SAI_Init>
 8000b36:	b918      	cbnz	r0, 8000b40 <MX_SAI1_Init+0xb8>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000b38:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b3a:	f7ff ffa3 	bl	8000a84 <Error_Handler>
 8000b3e:	e7d1      	b.n	8000ae4 <MX_SAI1_Init+0x5c>
    Error_Handler();
 8000b40:	f7ff ffa0 	bl	8000a84 <Error_Handler>
}
 8000b44:	e7f8      	b.n	8000b38 <MX_SAI1_Init+0xb0>
 8000b46:	bf00      	nop
 8000b48:	2400216c 	.word	0x2400216c
 8000b4c:	40015804 	.word	0x40015804
 8000b50:	24002204 	.word	0x24002204
 8000b54:	40015824 	.word	0x40015824

08000b58 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b5c:	b089      	sub	sp, #36	; 0x24
 8000b5e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000b60:	6802      	ldr	r2, [r0, #0]
 8000b62:	4b61      	ldr	r3, [pc, #388]	; (8000ce8 <HAL_SAI_MspInit+0x190>)
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d006      	beq.n	8000b76 <HAL_SAI_MspInit+0x1e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8000b68:	6822      	ldr	r2, [r4, #0]
 8000b6a:	4b60      	ldr	r3, [pc, #384]	; (8000cec <HAL_SAI_MspInit+0x194>)
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d06a      	beq.n	8000c46 <HAL_SAI_MspInit+0xee>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8000b70:	b009      	add	sp, #36	; 0x24
 8000b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (SAI1_client == 0)
 8000b76:	4b5e      	ldr	r3, [pc, #376]	; (8000cf0 <HAL_SAI_MspInit+0x198>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d04a      	beq.n	8000c14 <HAL_SAI_MspInit+0xbc>
    SAI1_client ++;
 8000b7e:	4a5c      	ldr	r2, [pc, #368]	; (8000cf0 <HAL_SAI_MspInit+0x198>)
 8000b80:	6813      	ldr	r3, [r2, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b86:	2304      	movs	r3, #4
 8000b88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2602      	movs	r6, #2
 8000b8c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2500      	movs	r5, #0
 8000b90:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000b94:	2706      	movs	r7, #6
 8000b96:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b98:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8000d04 <HAL_SAI_MspInit+0x1ac>
 8000b9c:	a903      	add	r1, sp, #12
 8000b9e:	4648      	mov	r0, r9
 8000ba0:	f002 fc64 	bl	800346c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ba4:	2330      	movs	r3, #48	; 0x30
 8000ba6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	f04f 0803 	mov.w	r8, #3
 8000bb0:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000bb4:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb6:	a903      	add	r1, sp, #12
 8000bb8:	4648      	mov	r0, r9
 8000bba:	f002 fc57 	bl	800346c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bbe:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000bc8:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	a903      	add	r1, sp, #12
 8000bcc:	4849      	ldr	r0, [pc, #292]	; (8000cf4 <HAL_SAI_MspInit+0x19c>)
 8000bce:	f002 fc4d 	bl	800346c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream2;
 8000bd2:	4849      	ldr	r0, [pc, #292]	; (8000cf8 <HAL_SAI_MspInit+0x1a0>)
 8000bd4:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <HAL_SAI_MspInit+0x1a4>)
 8000bd6:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8000bd8:	2357      	movs	r3, #87	; 0x57
 8000bda:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bdc:	6085      	str	r5, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bde:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be4:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bea:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf6:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8000bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bfc:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bfe:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000c00:	f000 ff9c 	bl	8001b3c <HAL_DMA_Init>
 8000c04:	b9e0      	cbnz	r0, 8000c40 <HAL_SAI_MspInit+0xe8>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8000c06:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <HAL_SAI_MspInit+0x1a0>)
 8000c08:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8000c0c:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8000c0e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8000c12:	e7a9      	b.n	8000b68 <HAL_SAI_MspInit+0x10>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000c14:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <HAL_SAI_MspInit+0x1a8>)
 8000c16:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000c1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000c1e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4611      	mov	r1, r2
 8000c32:	2057      	movs	r0, #87	; 0x57
 8000c34:	f000 fc80 	bl	8001538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8000c38:	2057      	movs	r0, #87	; 0x57
 8000c3a:	f000 fcb1 	bl	80015a0 <HAL_NVIC_EnableIRQ>
 8000c3e:	e79e      	b.n	8000b7e <HAL_SAI_MspInit+0x26>
      Error_Handler();
 8000c40:	f7ff ff20 	bl	8000a84 <Error_Handler>
 8000c44:	e7df      	b.n	8000c06 <HAL_SAI_MspInit+0xae>
      if (SAI1_client == 0)
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_SAI_MspInit+0x198>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d033      	beq.n	8000cb6 <HAL_SAI_MspInit+0x15e>
    SAI1_client ++;
 8000c4e:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <HAL_SAI_MspInit+0x198>)
 8000c50:	6813      	ldr	r3, [r2, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c56:	2308      	movs	r3, #8
 8000c58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2500      	movs	r5, #0
 8000c60:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000c66:	2306      	movs	r3, #6
 8000c68:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6a:	a903      	add	r1, sp, #12
 8000c6c:	4825      	ldr	r0, [pc, #148]	; (8000d04 <HAL_SAI_MspInit+0x1ac>)
 8000c6e:	f002 fbfd 	bl	800346c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream3;
 8000c72:	4825      	ldr	r0, [pc, #148]	; (8000d08 <HAL_SAI_MspInit+0x1b0>)
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_SAI_MspInit+0x1b4>)
 8000c76:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8000c78:	2358      	movs	r3, #88	; 0x58
 8000c7a:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	6083      	str	r3, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c80:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c86:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c8c:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c92:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c98:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8000c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c9e:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca0:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000ca2:	f000 ff4b 	bl	8001b3c <HAL_DMA_Init>
 8000ca6:	b9e0      	cbnz	r0, 8000ce2 <HAL_SAI_MspInit+0x18a>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_SAI_MspInit+0x1b0>)
 8000caa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8000cae:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8000cb0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8000cb4:	e75c      	b.n	8000b70 <HAL_SAI_MspInit+0x18>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_SAI_MspInit+0x1a8>)
 8000cb8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000cbc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000cc0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	9b02      	ldr	r3, [sp, #8]
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	2057      	movs	r0, #87	; 0x57
 8000cd6:	f000 fc2f 	bl	8001538 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8000cda:	2057      	movs	r0, #87	; 0x57
 8000cdc:	f000 fc60 	bl	80015a0 <HAL_NVIC_EnableIRQ>
 8000ce0:	e7b5      	b.n	8000c4e <HAL_SAI_MspInit+0xf6>
      Error_Handler();
 8000ce2:	f7ff fecf 	bl	8000a84 <Error_Handler>
 8000ce6:	e7df      	b.n	8000ca8 <HAL_SAI_MspInit+0x150>
 8000ce8:	40015804 	.word	0x40015804
 8000cec:	40015824 	.word	0x40015824
 8000cf0:	24002078 	.word	0x24002078
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	2400207c 	.word	0x2400207c
 8000cfc:	40020040 	.word	0x40020040
 8000d00:	58024400 	.word	0x58024400
 8000d04:	58021000 	.word	0x58021000
 8000d08:	240020f4 	.word	0x240020f4
 8000d0c:	40020058 	.word	0x40020058

08000d10 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d10:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d12:	4813      	ldr	r0, [pc, #76]	; (8000d60 <MX_SPI2_Init+0x50>)
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <MX_SPI2_Init+0x54>)
 8000d16:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d22:	220f      	movs	r2, #15
 8000d24:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d26:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d28:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d2e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d30:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d32:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d34:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d36:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d38:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d3e:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d40:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d42:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d44:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d46:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d48:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d4a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d4c:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d4e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d50:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d52:	f005 ff3b 	bl	8006bcc <HAL_SPI_Init>
 8000d56:	b900      	cbnz	r0, 8000d5a <MX_SPI2_Init+0x4a>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d58:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d5a:	f7ff fe93 	bl	8000a84 <Error_Handler>
}
 8000d5e:	e7fb      	b.n	8000d58 <MX_SPI2_Init+0x48>
 8000d60:	2400238c 	.word	0x2400238c
 8000d64:	40003800 	.word	0x40003800

08000d68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	b0b9      	sub	sp, #228	; 0xe4
 8000d6c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	2100      	movs	r1, #0
 8000d70:	9133      	str	r1, [sp, #204]	; 0xcc
 8000d72:	9134      	str	r1, [sp, #208]	; 0xd0
 8000d74:	9135      	str	r1, [sp, #212]	; 0xd4
 8000d76:	9136      	str	r1, [sp, #216]	; 0xd8
 8000d78:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7a:	22bc      	movs	r2, #188	; 0xbc
 8000d7c:	a804      	add	r0, sp, #16
 8000d7e:	f007 f97f 	bl	8008080 <memset>
  if(spiHandle->Instance==SPI2)
 8000d82:	6822      	ldr	r2, [r4, #0]
 8000d84:	4b51      	ldr	r3, [pc, #324]	; (8000ecc <HAL_SPI_MspInit+0x164>)
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d001      	beq.n	8000d8e <HAL_SPI_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d8a:	b039      	add	sp, #228	; 0xe4
 8000d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d92:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 8;
 8000d94:	2308      	movs	r3, #8
 8000d96:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 96;
 8000d98:	2360      	movs	r3, #96	; 0x60
 8000d9a:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 3;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000da0:	2204      	movs	r2, #4
 8000da2:	9210      	str	r2, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000da4:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8000da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000daa:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db0:	931b      	str	r3, [sp, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db2:	a804      	add	r0, sp, #16
 8000db4:	f003 fea4 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d17d      	bne.n	8000eb8 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dbc:	4b44      	ldr	r3, [pc, #272]	; (8000ed0 <HAL_SPI_MspInit+0x168>)
 8000dbe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000dc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dc6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000dca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000dce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000dd2:	9201      	str	r2, [sp, #4]
 8000dd4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dda:	f042 0204 	orr.w	r2, r2, #4
 8000dde:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000de2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000de6:	f002 0204 	and.w	r2, r2, #4
 8000dea:	9202      	str	r2, [sp, #8]
 8000dec:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000df2:	f042 0202 	orr.w	r2, r2, #2
 8000df6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	9303      	str	r3, [sp, #12]
 8000e04:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e06:	230c      	movs	r3, #12
 8000e08:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2702      	movs	r7, #2
 8000e0c:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2500      	movs	r5, #0
 8000e10:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e14:	2605      	movs	r6, #5
 8000e16:	9637      	str	r6, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	a933      	add	r1, sp, #204	; 0xcc
 8000e1a:	482e      	ldr	r0, [pc, #184]	; (8000ed4 <HAL_SPI_MspInit+0x16c>)
 8000e1c:	f002 fb26 	bl	800346c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e24:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	9734      	str	r7, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2c:	9637      	str	r6, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	a933      	add	r1, sp, #204	; 0xcc
 8000e30:	4829      	ldr	r0, [pc, #164]	; (8000ed8 <HAL_SPI_MspInit+0x170>)
 8000e32:	f002 fb1b 	bl	800346c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream6;
 8000e36:	4829      	ldr	r0, [pc, #164]	; (8000edc <HAL_SPI_MspInit+0x174>)
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <HAL_SPI_MspInit+0x178>)
 8000e3a:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000e3c:	2327      	movs	r3, #39	; 0x27
 8000e3e:	6043      	str	r3, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e40:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e42:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e48:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e4e:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e54:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5a:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5c:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000e60:	f000 fe6c 	bl	8001b3c <HAL_DMA_Init>
 8000e64:	bb58      	cbnz	r0, 8000ebe <HAL_SPI_MspInit+0x156>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_SPI_MspInit+0x174>)
 8000e68:	67e3      	str	r3, [r4, #124]	; 0x7c
 8000e6a:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream7;
 8000e6c:	481d      	ldr	r0, [pc, #116]	; (8000ee4 <HAL_SPI_MspInit+0x17c>)
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_SPI_MspInit+0x180>)
 8000e70:	6003      	str	r3, [r0, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000e72:	2328      	movs	r3, #40	; 0x28
 8000e74:	6043      	str	r3, [r0, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e76:	2340      	movs	r3, #64	; 0x40
 8000e78:	6083      	str	r3, [r0, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60c3      	str	r3, [r0, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e82:	6102      	str	r2, [r0, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e88:	6142      	str	r2, [r0, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8e:	6182      	str	r2, [r0, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e94:	61c2      	str	r2, [r0, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e96:	6203      	str	r3, [r0, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e98:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000e9a:	f000 fe4f 	bl	8001b3c <HAL_DMA_Init>
 8000e9e:	b988      	cbnz	r0, 8000ec4 <HAL_SPI_MspInit+0x15c>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_SPI_MspInit+0x17c>)
 8000ea2:	67a3      	str	r3, [r4, #120]	; 0x78
 8000ea4:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	2024      	movs	r0, #36	; 0x24
 8000eac:	f000 fb44 	bl	8001538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000eb0:	2024      	movs	r0, #36	; 0x24
 8000eb2:	f000 fb75 	bl	80015a0 <HAL_NVIC_EnableIRQ>
}
 8000eb6:	e768      	b.n	8000d8a <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8000eb8:	f7ff fde4 	bl	8000a84 <Error_Handler>
 8000ebc:	e77e      	b.n	8000dbc <HAL_SPI_MspInit+0x54>
      Error_Handler();
 8000ebe:	f7ff fde1 	bl	8000a84 <Error_Handler>
 8000ec2:	e7d0      	b.n	8000e66 <HAL_SPI_MspInit+0xfe>
      Error_Handler();
 8000ec4:	f7ff fdde 	bl	8000a84 <Error_Handler>
 8000ec8:	e7ea      	b.n	8000ea0 <HAL_SPI_MspInit+0x138>
 8000eca:	bf00      	nop
 8000ecc:	40003800 	.word	0x40003800
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	58020800 	.word	0x58020800
 8000ed8:	58020400 	.word	0x58020400
 8000edc:	2400229c 	.word	0x2400229c
 8000ee0:	400200a0 	.word	0x400200a0
 8000ee4:	24002314 	.word	0x24002314
 8000ee8:	400200b8 	.word	0x400200b8

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_MspInit+0x20>)
 8000ef0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ef4:	f042 0202 	orr.w	r2, r2, #2
 8000ef8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000efc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f08:	b002      	add	sp, #8
 8000f0a:	4770      	bx	lr
 8000f0c:	58024400 	.word	0x58024400

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000f12:	f003 fce1 	bl	80048d8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <NMI_Handler+0x6>

08000f18 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <HardFault_Handler>

08000f1a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <MemManage_Handler>

08000f1c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <BusFault_Handler>

08000f1e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <UsageFault_Handler>

08000f20 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	4770      	bx	lr

08000f24 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 fac8 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bd08      	pop	{r3, pc}
	...

08000f30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000f30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000f32:	4802      	ldr	r0, [pc, #8]	; (8000f3c <DMA1_Stream2_IRQHandler+0xc>)
 8000f34:	f001 fddc 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000f38:	bd08      	pop	{r3, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2400207c 	.word	0x2400207c

08000f40 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8000f42:	4802      	ldr	r0, [pc, #8]	; (8000f4c <DMA1_Stream3_IRQHandler+0xc>)
 8000f44:	f001 fdd4 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f48:	bd08      	pop	{r3, pc}
 8000f4a:	bf00      	nop
 8000f4c:	240020f4 	.word	0x240020f4

08000f50 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <DMA1_Stream4_IRQHandler+0xc>)
 8000f54:	f001 fdcc 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f58:	bd08      	pop	{r3, pc}
 8000f5a:	bf00      	nop
 8000f5c:	24002414 	.word	0x24002414

08000f60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f62:	4802      	ldr	r0, [pc, #8]	; (8000f6c <DMA1_Stream5_IRQHandler+0xc>)
 8000f64:	f001 fdc4 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f68:	bd08      	pop	{r3, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2400248c 	.word	0x2400248c

08000f70 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000f72:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Stream6_IRQHandler+0xc>)
 8000f74:	f001 fdbc 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f78:	bd08      	pop	{r3, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2400229c 	.word	0x2400229c

08000f80 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000f80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000f82:	4802      	ldr	r0, [pc, #8]	; (8000f8c <SPI2_IRQHandler+0xc>)
 8000f84:	f005 fed8 	bl	8006d38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000f88:	bd08      	pop	{r3, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2400238c 	.word	0x2400238c

08000f90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	if((huart2.Instance->RDR & 0xF0) == 0xA0)
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <USART2_IRQHandler+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f9c:	2ba0      	cmp	r3, #160	; 0xa0
 8000f9e:	d003      	beq.n	8000fa8 <USART2_IRQHandler+0x18>
		guiadapter.sync = 1;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <USART2_IRQHandler+0x24>)
 8000fa2:	f006 f87d 	bl	80070a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fa6:	bd08      	pop	{r3, pc}
		guiadapter.sync = 1;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <USART2_IRQHandler+0x28>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8000fb0:	e7f6      	b.n	8000fa0 <USART2_IRQHandler+0x10>
 8000fb2:	bf00      	nop
 8000fb4:	24002504 	.word	0x24002504
 8000fb8:	24000000 	.word	0x24000000

08000fbc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000fbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fbe:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <DMA1_Stream7_IRQHandler+0xc>)
 8000fc0:	f001 fd96 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000fc4:	bd08      	pop	{r3, pc}
 8000fc6:	bf00      	nop
 8000fc8:	24002314 	.word	0x24002314

08000fcc <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8000fcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <SAI1_IRQHandler+0x10>)
 8000fd0:	f005 fc48 	bl	8006864 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <SAI1_IRQHandler+0x14>)
 8000fd6:	f005 fc45 	bl	8006864 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8000fda:	bd08      	pop	{r3, pc}
 8000fdc:	2400216c 	.word	0x2400216c
 8000fe0:	24002204 	.word	0x24002204

08000fe4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe4:	4a27      	ldr	r2, [pc, #156]	; (8001084 <SystemInit+0xa0>)
 8000fe6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000fea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <SystemInit+0xa4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d806      	bhi.n	800100c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ffe:	4a22      	ldr	r2, [pc, #136]	; (8001088 <SystemInit+0xa4>)
 8001000:	6813      	ldr	r3, [r2, #0]
 8001002:	f023 030f 	bic.w	r3, r3, #15
 8001006:	f043 0307 	orr.w	r3, r3, #7
 800100a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SystemInit+0xa8>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	f042 0201 	orr.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <SystemInit+0xac>)
 800101e:	400a      	ands	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <SystemInit+0xa4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f013 0f08 	tst.w	r3, #8
 800102a:	d006      	beq.n	800103a <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800102c:	4a16      	ldr	r2, [pc, #88]	; (8001088 <SystemInit+0xa4>)
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	f023 030f 	bic.w	r3, r3, #15
 8001034:	f043 0307 	orr.w	r3, r3, #7
 8001038:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <SystemInit+0xa8>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001040:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001042:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001044:	4913      	ldr	r1, [pc, #76]	; (8001094 <SystemInit+0xb0>)
 8001046:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001048:	4913      	ldr	r1, [pc, #76]	; (8001098 <SystemInit+0xb4>)
 800104a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800104c:	4913      	ldr	r1, [pc, #76]	; (800109c <SystemInit+0xb8>)
 800104e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001050:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001052:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001056:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001058:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800105a:	6819      	ldr	r1, [r3, #0]
 800105c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001060:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001062:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <SystemInit+0xbc>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <SystemInit+0xc0>)
 800106a:	4013      	ands	r3, r2
 800106c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001070:	d203      	bcs.n	800107a <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <SystemInit+0xc4>)
 8001074:	2201      	movs	r2, #1
 8001076:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <SystemInit+0xc8>)
 800107c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001080:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	52002000 	.word	0x52002000
 800108c:	58024400 	.word	0x58024400
 8001090:	eaf6ed7f 	.word	0xeaf6ed7f
 8001094:	02020200 	.word	0x02020200
 8001098:	01ff0000 	.word	0x01ff0000
 800109c:	01010280 	.word	0x01010280
 80010a0:	5c001000 	.word	0x5c001000
 80010a4:	ffff0000 	.word	0xffff0000
 80010a8:	51008000 	.word	0x51008000
 80010ac:	52004000 	.word	0x52004000

080010b0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010b0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <MX_USART2_UART_Init+0x60>)
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_USART2_UART_Init+0x64>)
 80010b6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80010b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010bc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	2300      	movs	r3, #0
 80010c0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c6:	220c      	movs	r2, #12
 80010c8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d4:	f006 fe64 	bl	8007da0 <HAL_UART_Init>
 80010d8:	b970      	cbnz	r0, 80010f8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_USART2_UART_Init+0x60>)
 80010de:	f006 ff61 	bl	8007fa4 <HAL_UARTEx_SetTxFifoThreshold>
 80010e2:	b960      	cbnz	r0, 80010fe <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e4:	2100      	movs	r1, #0
 80010e6:	480a      	ldr	r0, [pc, #40]	; (8001110 <MX_USART2_UART_Init+0x60>)
 80010e8:	f006 ff81 	bl	8007fee <HAL_UARTEx_SetRxFifoThreshold>
 80010ec:	b950      	cbnz	r0, 8001104 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010ee:	4808      	ldr	r0, [pc, #32]	; (8001110 <MX_USART2_UART_Init+0x60>)
 80010f0:	f006 ff39 	bl	8007f66 <HAL_UARTEx_DisableFifoMode>
 80010f4:	b948      	cbnz	r0, 800110a <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010f8:	f7ff fcc4 	bl	8000a84 <Error_Handler>
 80010fc:	e7ed      	b.n	80010da <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80010fe:	f7ff fcc1 	bl	8000a84 <Error_Handler>
 8001102:	e7ef      	b.n	80010e4 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001104:	f7ff fcbe 	bl	8000a84 <Error_Handler>
 8001108:	e7f1      	b.n	80010ee <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 800110a:	f7ff fcbb 	bl	8000a84 <Error_Handler>
}
 800110e:	e7f2      	b.n	80010f6 <MX_USART2_UART_Init+0x46>
 8001110:	24002504 	.word	0x24002504
 8001114:	40004400 	.word	0x40004400

08001118 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001118:	b530      	push	{r4, r5, lr}
 800111a:	b0b7      	sub	sp, #220	; 0xdc
 800111c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	2100      	movs	r1, #0
 8001120:	9131      	str	r1, [sp, #196]	; 0xc4
 8001122:	9132      	str	r1, [sp, #200]	; 0xc8
 8001124:	9133      	str	r1, [sp, #204]	; 0xcc
 8001126:	9134      	str	r1, [sp, #208]	; 0xd0
 8001128:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112a:	22bc      	movs	r2, #188	; 0xbc
 800112c:	a802      	add	r0, sp, #8
 800112e:	f006 ffa7 	bl	8008080 <memset>
  if(uartHandle->Instance==USART2)
 8001132:	6822      	ldr	r2, [r4, #0]
 8001134:	4b38      	ldr	r3, [pc, #224]	; (8001218 <HAL_UART_MspInit+0x100>)
 8001136:	429a      	cmp	r2, r3
 8001138:	d001      	beq.n	800113e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800113a:	b037      	add	sp, #220	; 0xdc
 800113c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800113e:	2302      	movs	r3, #2
 8001140:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	a802      	add	r0, sp, #8
 8001144:	f003 fcdc 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	2800      	cmp	r0, #0
 800114a:	d15c      	bne.n	8001206 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <HAL_UART_MspInit+0x104>)
 800114e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001152:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001156:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800115a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800115e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800117e:	230c      	movs	r3, #12
 8001180:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2500      	movs	r5, #0
 8001188:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	9534      	str	r5, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800118c:	2307      	movs	r3, #7
 800118e:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	a931      	add	r1, sp, #196	; 0xc4
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <HAL_UART_MspInit+0x108>)
 8001194:	f002 f96a 	bl	800346c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 8001198:	4822      	ldr	r0, [pc, #136]	; (8001224 <HAL_UART_MspInit+0x10c>)
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_UART_MspInit+0x110>)
 800119c:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800119e:	232b      	movs	r3, #43	; 0x2b
 80011a0:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a2:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a4:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011aa:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ac:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ae:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80011b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b4:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011b6:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011ba:	f000 fcbf 	bl	8001b3c <HAL_DMA_Init>
 80011be:	bb28      	cbnz	r0, 800120c <HAL_UART_MspInit+0xf4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_UART_MspInit+0x10c>)
 80011c2:	67e3      	str	r3, [r4, #124]	; 0x7c
 80011c4:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream5;
 80011c6:	4819      	ldr	r0, [pc, #100]	; (800122c <HAL_UART_MspInit+0x114>)
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_UART_MspInit+0x118>)
 80011ca:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80011cc:	232c      	movs	r3, #44	; 0x2c
 80011ce:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011d0:	2340      	movs	r3, #64	; 0x40
 80011d2:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011dc:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011de:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e0:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011e2:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011e4:	6203      	str	r3, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e6:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011e8:	f000 fca8 	bl	8001b3c <HAL_DMA_Init>
 80011ec:	b988      	cbnz	r0, 8001212 <HAL_UART_MspInit+0xfa>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_UART_MspInit+0x114>)
 80011f0:	67a3      	str	r3, [r4, #120]	; 0x78
 80011f2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	4611      	mov	r1, r2
 80011f8:	2026      	movs	r0, #38	; 0x26
 80011fa:	f000 f99d 	bl	8001538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011fe:	2026      	movs	r0, #38	; 0x26
 8001200:	f000 f9ce 	bl	80015a0 <HAL_NVIC_EnableIRQ>
}
 8001204:	e799      	b.n	800113a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001206:	f7ff fc3d 	bl	8000a84 <Error_Handler>
 800120a:	e79f      	b.n	800114c <HAL_UART_MspInit+0x34>
      Error_Handler();
 800120c:	f7ff fc3a 	bl	8000a84 <Error_Handler>
 8001210:	e7d6      	b.n	80011c0 <HAL_UART_MspInit+0xa8>
      Error_Handler();
 8001212:	f7ff fc37 	bl	8000a84 <Error_Handler>
 8001216:	e7ea      	b.n	80011ee <HAL_UART_MspInit+0xd6>
 8001218:	40004400 	.word	0x40004400
 800121c:	58024400 	.word	0x58024400
 8001220:	58020000 	.word	0x58020000
 8001224:	24002414 	.word	0x24002414
 8001228:	40020070 	.word	0x40020070
 800122c:	2400248c 	.word	0x2400248c
 8001230:	40020088 	.word	0x40020088

08001234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001238:	f7ff fed4 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f006 fee9 	bl	8008038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001266:	f7ff fb7b 	bl	8000960 <main>
  bx  lr
 800126a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001270:	24002000 	.word	0x24002000
  ldr r1, =_edata
 8001274:	24002010 	.word	0x24002010
  ldr r2, =_sidata
 8001278:	08008100 	.word	0x08008100
  ldr r2, =_sbss
 800127c:	24002010 	.word	0x24002010
  ldr r4, =_ebss
 8001280:	24002598 	.word	0x24002598

08001284 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC3_IRQHandler>
	...

08001288 <guiAdapter_Init>:

#include "GUIadapter.h"

IN_RAM_D1_DMA GUIadapter_TypeDef guiadapter;		// global adapter instances

void guiAdapter_Init(GUIadapter_TypeDef *adapter) {
 8001288:	b508      	push	{r3, lr}
 800128a:	4601      	mov	r1, r0
	for (int i = 0; i < GUIUART_INBUF_SIZE; i++) {
 800128c:	1e42      	subs	r2, r0, #1
 800128e:	4603      	mov	r3, r0
 8001290:	f100 0e1f 	add.w	lr, r0, #31
		adapter->RxBuf[i] = 0;
 8001294:	f04f 0c00 	mov.w	ip, #0
 8001298:	f802 cf01 	strb.w	ip, [r2, #1]!
	for (int i = 0; i < GUIUART_INBUF_SIZE; i++) {
 800129c:	4572      	cmp	r2, lr
 800129e:	d1fb      	bne.n	8001298 <guiAdapter_Init+0x10>
 80012a0:	f101 021f 	add.w	r2, r1, #31
 80012a4:	f101 0e3f 	add.w	lr, r1, #63	; 0x3f
	}
	for (int i = 0; i < GUIUART_OUTBUF_SIZE; i++) {
		adapter->TxBuf[i] = 0;
 80012a8:	f04f 0c00 	mov.w	ip, #0
 80012ac:	f802 cf01 	strb.w	ip, [r2, #1]!
	for (int i = 0; i < GUIUART_OUTBUF_SIZE; i++) {
 80012b0:	4572      	cmp	r2, lr
 80012b2:	d1fb      	bne.n	80012ac <guiAdapter_Init+0x24>
	}
	adapter->msgBufIdx = 0;
 80012b4:	2200      	movs	r2, #0
 80012b6:	f881 23e0 	strb.w	r2, [r1, #992]	; 0x3e0
	for (int i = 0; i < MAX_MODULES_NUM; i++) {
 80012ba:	f501 7c68 	add.w	ip, r1, #928	; 0x3a0
		adapter->msgBuf[i].fxsIdx = 0;
 80012be:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	for (int i = 0; i < MAX_MODULES_NUM; i++) {
 80012c2:	331d      	adds	r3, #29
 80012c4:	4563      	cmp	r3, ip
 80012c6:	d1fa      	bne.n	80012be <guiAdapter_Init+0x36>
	}
	adapter->sync = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f881 33e1 	strb.w	r3, [r1, #993]	; 0x3e1
	HAL_UART_Receive_DMA(&huart2, adapter->RxBuf, GUIUART_INBUF_SIZE);
 80012ce:	2220      	movs	r2, #32
 80012d0:	4801      	ldr	r0, [pc, #4]	; (80012d8 <guiAdapter_Init+0x50>)
 80012d2:	f006 fdf3 	bl	8007ebc <HAL_UART_Receive_DMA>
}
 80012d6:	bd08      	pop	{r3, pc}
 80012d8:	24002504 	.word	0x24002504

080012dc <HAL_UART_RxCpltCallback>:

/////////////// UART2 callbacks ///////////////
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart2 && guiadapter.sync)
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_UART_RxCpltCallback+0xa0>)
 80012de:	4283      	cmp	r3, r0
 80012e0:	d000      	beq.n	80012e4 <HAL_UART_RxCpltCallback+0x8>
		MyGUIcallback(&guiadapter);
}
 80012e2:	4770      	bx	lr
	if (huart == &huart2 && guiadapter.sync)
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_UART_RxCpltCallback+0xa4>)
 80012e6:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f9      	beq.n	80012e2 <HAL_UART_RxCpltCallback+0x6>
	else
		return 0;
}

inline void putGUImsg(GUIadapter_TypeDef *adapter) {
	uint8_t idx = adapter->msgBufIdx;
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_UART_RxCpltCallback+0xa4>)
 80012f0:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
	switch (adapter->RxBuf[0]) {
 80012f4:	7818      	ldrb	r0, [r3, #0]
 80012f6:	b310      	cbz	r0, 800133e <HAL_UART_RxCpltCallback+0x62>
 80012f8:	2801      	cmp	r0, #1
 80012fa:	d119      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x54>
		adapter->msgBuf[idx].chain 				= adapter->RxBuf[1];
		adapter->msgBuf[idx].fxs[0].name 		= adapter->RxBuf[2];
		adapter->msgBuf[idx].fxs[0].instance 	= adapter->RxBuf[3];
		adapter->msgBuf[idx].fxs[0].order_index = adapter->RxBuf[4];
	case CHANGE_PARAM:
		adapter->msgBuf[idx].cmd 				= adapter->RxBuf[0];
 80012fc:	4920      	ldr	r1, [pc, #128]	; (8001380 <HAL_UART_RxCpltCallback+0xa4>)
 80012fe:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8001302:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001306:	440b      	add	r3, r1
 8001308:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
		adapter->msgBuf[idx].chain 				= adapter->RxBuf[1];
 800130c:	7848      	ldrb	r0, [r1, #1]
 800130e:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
		adapter->msgBuf[idx].fxs[0].name 		= adapter->RxBuf[2];
 8001312:	7888      	ldrb	r0, [r1, #2]
 8001314:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
		adapter->msgBuf[idx].fxs[0].instance 	= adapter->RxBuf[3];
 8001318:	78c8      	ldrb	r0, [r1, #3]
 800131a:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
		adapter->msgBuf[idx].fxs[0].order_index = adapter->RxBuf[4];
 800131e:	7908      	ldrb	r0, [r1, #4]
 8001320:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
		adapter->msgBuf[idx].parameterIndex 	= adapter->RxBuf[5];
 8001324:	7948      	ldrb	r0, [r1, #5]
 8001326:	f883 005b 	strb.w	r0, [r3, #91]	; 0x5b
		adapter->msgBuf[idx].parameterValue 	= adapter->RxBuf[6];
 800132a:	7989      	ldrb	r1, [r1, #6]
 800132c:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
	if (guiadapter.msgBufIdx < MAX_MODULES_NUM) {
 8001330:	2a1f      	cmp	r2, #31
 8001332:	d81e      	bhi.n	8001372 <HAL_UART_RxCpltCallback+0x96>
		guiadapter.msgBufIdx = guiadapter.msgBufIdx + 1;
 8001334:	3201      	adds	r2, #1
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_UART_RxCpltCallback+0xa4>)
 8001338:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 800133c:	4770      	bx	lr
		adapter->msgBuf[idx].cmd 				= adapter->RxBuf[0];
 800133e:	4910      	ldr	r1, [pc, #64]	; (8001380 <HAL_UART_RxCpltCallback+0xa4>)
 8001340:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8001344:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001348:	440b      	add	r3, r1
 800134a:	f04f 0c00 	mov.w	ip, #0
 800134e:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
		adapter->msgBuf[idx].chain 				= adapter->RxBuf[1];
 8001352:	f891 c001 	ldrb.w	ip, [r1, #1]
 8001356:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
		adapter->msgBuf[idx].fxs[0].name 		= adapter->RxBuf[2];
 800135a:	f891 c002 	ldrb.w	ip, [r1, #2]
 800135e:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
		adapter->msgBuf[idx].fxs[0].instance 	= adapter->RxBuf[3];
 8001362:	f891 c003 	ldrb.w	ip, [r1, #3]
 8001366:	f883 c043 	strb.w	ip, [r3, #67]	; 0x43
		adapter->msgBuf[idx].fxs[0].order_index = adapter->RxBuf[4];
 800136a:	7909      	ldrb	r1, [r1, #4]
 800136c:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
 8001370:	e7c4      	b.n	80012fc <HAL_UART_RxCpltCallback+0x20>
		guiadapter.msgBufIdx = 0;
 8001372:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_UART_RxCpltCallback+0xa4>)
 8001374:	2200      	movs	r2, #0
 8001376:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
}
 800137a:	e7b2      	b.n	80012e2 <HAL_UART_RxCpltCallback+0x6>
 800137c:	24002504 	.word	0x24002504
 8001380:	24000000 	.word	0x24000000

08001384 <CS42448_write_byte>:
{
	CS42448_write_byte(CS42448_ADC_Channel_Invert, data); // these bits will invert the signal polarity of their respective ADC channels (1-6)
}

void CS42448_write_byte(uint32_t address, uint8_t data)
{
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	f88d 1017 	strb.w	r1, [sp, #23]
	while (HAL_OK != HAL_I2C_Mem_Write(&hi2c4, (CS42448_I2C_ADDR<<1), address, I2C_MEMADD_SIZE_8BIT, &data, 1, 1));
 800138c:	b285      	uxth	r5, r0
 800138e:	4e08      	ldr	r6, [pc, #32]	; (80013b0 <CS42448_write_byte+0x2c>)
 8001390:	2401      	movs	r4, #1
 8001392:	9402      	str	r4, [sp, #8]
 8001394:	9401      	str	r4, [sp, #4]
 8001396:	f10d 0317 	add.w	r3, sp, #23
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	4623      	mov	r3, r4
 800139e:	462a      	mov	r2, r5
 80013a0:	2196      	movs	r1, #150	; 0x96
 80013a2:	4630      	mov	r0, r6
 80013a4:	f002 fb66 	bl	8003a74 <HAL_I2C_Mem_Write>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d1f2      	bne.n	8001392 <CS42448_write_byte+0xe>
}
 80013ac:	b006      	add	sp, #24
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
 80013b0:	2400202c 	.word	0x2400202c

080013b4 <CS42448_write>:

void CS42448_write(uint32_t address, const void *data, uint32_t len)
{
 80013b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	460e      	mov	r6, r1
 80013bc:	4615      	mov	r5, r2
	while (HAL_OK != HAL_I2C_Mem_Write(&hi2c4, (CS42448_I2C_ADDR<<1), (address | 0x80), I2C_MEMADD_SIZE_8BIT, data, len, 10));
 80013be:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80013c2:	b284      	uxth	r4, r0
 80013c4:	f8df 8020 	ldr.w	r8, [pc, #32]	; 80013e8 <CS42448_write+0x34>
 80013c8:	270a      	movs	r7, #10
 80013ca:	9702      	str	r7, [sp, #8]
 80013cc:	b2ab      	uxth	r3, r5
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	9600      	str	r6, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	4622      	mov	r2, r4
 80013d6:	2196      	movs	r1, #150	; 0x96
 80013d8:	4640      	mov	r0, r8
 80013da:	f002 fb4b 	bl	8003a74 <HAL_I2C_Mem_Write>
 80013de:	2800      	cmp	r0, #0
 80013e0:	d1f3      	bne.n	80013ca <CS42448_write+0x16>
}
 80013e2:	b004      	add	sp, #16
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013e8:	2400202c 	.word	0x2400202c

080013ec <CS42448_enable>:
{
 80013ec:	b508      	push	{r3, lr}
	HAL_Delay(10);
 80013ee:	200a      	movs	r0, #10
 80013f0:	f000 f876 	bl	80014e0 <HAL_Delay>
	CS42448_write_byte(CS42448_Power_Control, 0xFF); // power down
 80013f4:	21ff      	movs	r1, #255	; 0xff
 80013f6:	2002      	movs	r0, #2
 80013f8:	f7ff ffc4 	bl	8001384 <CS42448_write_byte>
	CS42448_write(CS42448_Functional_Mode, default_config, sizeof(default_config));
 80013fc:	2205      	movs	r2, #5
 80013fe:	4904      	ldr	r1, [pc, #16]	; (8001410 <CS42448_enable+0x24>)
 8001400:	2003      	movs	r0, #3
 8001402:	f7ff ffd7 	bl	80013b4 <CS42448_write>
	CS42448_write_byte(CS42448_Power_Control, 0);  // power up
 8001406:	2100      	movs	r1, #0
 8001408:	2002      	movs	r0, #2
 800140a:	f7ff ffbb 	bl	8001384 <CS42448_write_byte>
}
 800140e:	bd08      	pop	{r3, pc}
 8001410:	080080b8 	.word	0x080080b8

08001414 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_InitTick+0x40>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b90b      	cbnz	r3, 800141e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800141a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800141c:	4770      	bx	lr
{
 800141e:	b510      	push	{r4, lr}
 8001420:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001426:	fbb0 f3f3 	udiv	r3, r0, r3
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_InitTick+0x44>)
 800142c:	6810      	ldr	r0, [r2, #0]
 800142e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001432:	f000 f8c3 	bl	80015bc <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	2c0f      	cmp	r4, #15
 8001438:	d800      	bhi.n	800143c <HAL_InitTick+0x28>
 800143a:	b108      	cbz	r0, 8001440 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800143c:	2001      	movs	r0, #1
}
 800143e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	4621      	mov	r1, r4
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f876 	bl	8001538 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_InitTick+0x48>)
 800144e:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001450:	2000      	movs	r0, #0
 8001452:	e7f4      	b.n	800143e <HAL_InitTick+0x2a>
 8001454:	24002008 	.word	0x24002008
 8001458:	24002000 	.word	0x24002000
 800145c:	2400200c 	.word	0x2400200c

08001460 <HAL_Init>:
{
 8001460:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001462:	2003      	movs	r0, #3
 8001464:	f000 f856 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001468:	f002 ff9e 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 800146c:	490f      	ldr	r1, [pc, #60]	; (80014ac <HAL_Init+0x4c>)
 800146e:	698b      	ldr	r3, [r1, #24]
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_Init+0x50>)
 8001472:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800147e:	698b      	ldr	r3, [r1, #24]
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	fa20 f303 	lsr.w	r3, r0, r3
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_Init+0x54>)
 8001490:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_Init+0x58>)
 8001494:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001496:	200f      	movs	r0, #15
 8001498:	f7ff ffbc 	bl	8001414 <HAL_InitTick>
 800149c:	b110      	cbz	r0, 80014a4 <HAL_Init+0x44>
    return HAL_ERROR;
 800149e:	2401      	movs	r4, #1
}
 80014a0:	4620      	mov	r0, r4
 80014a2:	bd10      	pop	{r4, pc}
 80014a4:	4604      	mov	r4, r0
  HAL_MspInit();
 80014a6:	f7ff fd21 	bl	8000eec <HAL_MspInit>
  return HAL_OK;
 80014aa:	e7f9      	b.n	80014a0 <HAL_Init+0x40>
 80014ac:	58024400 	.word	0x58024400
 80014b0:	080080a8 	.word	0x080080a8
 80014b4:	24002004 	.word	0x24002004
 80014b8:	24002000 	.word	0x24002000

080014bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_IncTick+0x10>)
 80014be:	6811      	ldr	r1, [r2, #0]
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_IncTick+0x14>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	440b      	add	r3, r1
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	24002594 	.word	0x24002594
 80014d0:	24002008 	.word	0x24002008

080014d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014d4:	4b01      	ldr	r3, [pc, #4]	; (80014dc <HAL_GetTick+0x8>)
 80014d6:	6818      	ldr	r0, [r3, #0]
}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	24002594 	.word	0x24002594

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff fff6 	bl	80014d4 <HAL_GetTick>
 80014e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	f1b4 3fff 	cmp.w	r4, #4294967295
 80014ee:	d002      	beq.n	80014f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <HAL_Delay+0x24>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f6:	f7ff ffed 	bl	80014d4 <HAL_GetTick>
 80014fa:	1b40      	subs	r0, r0, r5
 80014fc:	42a0      	cmp	r0, r4
 80014fe:	d3fa      	bcc.n	80014f6 <HAL_Delay+0x16>
  {
  }
}
 8001500:	bd38      	pop	{r3, r4, r5, pc}
 8001502:	bf00      	nop
 8001504:	24002008 	.word	0x24002008

08001508 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001508:	4b01      	ldr	r3, [pc, #4]	; (8001510 <HAL_GetREVID+0x8>)
 800150a:	6818      	ldr	r0, [r3, #0]
}
 800150c:	0c00      	lsrs	r0, r0, #16
 800150e:	4770      	bx	lr
 8001510:	5c001000 	.word	0x5c001000

08001514 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001516:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	0200      	lsls	r0, r0, #8
 800151a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001526:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800152a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800152c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00
 8001534:	05fa0000 	.word	0x05fa0000

08001538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_NVIC_SetPriority+0x5c>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001542:	f1c3 0c07 	rsb	ip, r3, #7
 8001546:	f1bc 0f04 	cmp.w	ip, #4
 800154a:	bf28      	it	cs
 800154c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001550:	f103 0e04 	add.w	lr, r3, #4
 8001554:	f1be 0f06 	cmp.w	lr, #6
 8001558:	bf8c      	ite	hi
 800155a:	3b03      	subhi	r3, #3
 800155c:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155e:	f04f 3eff 	mov.w	lr, #4294967295
 8001562:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001566:	ea21 010c 	bic.w	r1, r1, ip
 800156a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	fa0e f303 	lsl.w	r3, lr, r3
 8001570:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001576:	2800      	cmp	r0, #0
 8001578:	db05      	blt.n	8001586 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	0109      	lsls	r1, r1, #4
 800157c:	b2c9      	uxtb	r1, r1
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_NVIC_SetPriority+0x60>)
 8001580:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001582:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	f000 000f 	and.w	r0, r0, #15
 800158a:	0109      	lsls	r1, r1, #4
 800158c:	b2c9      	uxtb	r1, r1
 800158e:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_NVIC_SetPriority+0x64>)
 8001590:	5419      	strb	r1, [r3, r0]
 8001592:	e7f6      	b.n	8001582 <HAL_NVIC_SetPriority+0x4a>
 8001594:	e000ed00 	.word	0xe000ed00
 8001598:	e000e400 	.word	0xe000e400
 800159c:	e000ed14 	.word	0xe000ed14

080015a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015a0:	2800      	cmp	r0, #0
 80015a2:	db08      	blt.n	80015b6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a4:	0942      	lsrs	r2, r0, #5
 80015a6:	f000 001f 	and.w	r0, r0, #31
 80015aa:	2301      	movs	r3, #1
 80015ac:	fa03 f000 	lsl.w	r0, r3, r0
 80015b0:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <HAL_NVIC_EnableIRQ+0x18>)
 80015b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100

080015bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	3801      	subs	r0, #1
 80015be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015c2:	d20b      	bcs.n	80015dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80015c8:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <HAL_SYSTICK_Config+0x24>)
 80015cc:	21f0      	movs	r1, #240	; 0xf0
 80015ce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d2:	2000      	movs	r0, #0
 80015d4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	2207      	movs	r2, #7
 80015d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_MPU_Disable+0x18>)
 80015ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015f2:	2200      	movs	r2, #0
 80015f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001600:	f040 0001 	orr.w	r0, r0, #1
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_MPU_Enable+0x1c>)
 8001606:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800160a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800160c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001616:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001620:	7842      	ldrb	r2, [r0, #1]
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_MPU_ConfigRegion+0x5c>)
 8001624:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8001628:	7803      	ldrb	r3, [r0, #0]
 800162a:	b1fb      	cbz	r3, 800166c <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800162c:	6843      	ldr	r3, [r0, #4]
 800162e:	4a13      	ldr	r2, [pc, #76]	; (800167c <HAL_MPU_ConfigRegion+0x5c>)
 8001630:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001634:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001636:	7ac3      	ldrb	r3, [r0, #11]
 8001638:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800163a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800163e:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001640:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001642:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001644:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001648:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800164a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800164e:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001650:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001654:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001656:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800165a:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800165c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001660:	7a01      	ldrb	r1, [r0, #8]
 8001662:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001666:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800166a:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_MPU_ConfigRegion+0x5c>)
 800166e:	2200      	movs	r2, #0
 8001670:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001674:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001680:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001682:	6d86      	ldr	r6, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001684:	6805      	ldr	r5, [r0, #0]
 8001686:	4c91      	ldr	r4, [pc, #580]	; (80018cc <DMA_SetConfig+0x24c>)
 8001688:	4f91      	ldr	r7, [pc, #580]	; (80018d0 <DMA_SetConfig+0x250>)
 800168a:	42bd      	cmp	r5, r7
 800168c:	bf18      	it	ne
 800168e:	42a5      	cmpne	r5, r4
 8001690:	bf0c      	ite	eq
 8001692:	2401      	moveq	r4, #1
 8001694:	2400      	movne	r4, #0
 8001696:	3718      	adds	r7, #24
 8001698:	42bd      	cmp	r5, r7
 800169a:	bf08      	it	eq
 800169c:	f044 0401 	orreq.w	r4, r4, #1
 80016a0:	3718      	adds	r7, #24
 80016a2:	42bd      	cmp	r5, r7
 80016a4:	bf08      	it	eq
 80016a6:	f044 0401 	orreq.w	r4, r4, #1
 80016aa:	3718      	adds	r7, #24
 80016ac:	42bd      	cmp	r5, r7
 80016ae:	bf08      	it	eq
 80016b0:	f044 0401 	orreq.w	r4, r4, #1
 80016b4:	3718      	adds	r7, #24
 80016b6:	42bd      	cmp	r5, r7
 80016b8:	bf08      	it	eq
 80016ba:	f044 0401 	orreq.w	r4, r4, #1
 80016be:	3718      	adds	r7, #24
 80016c0:	42bd      	cmp	r5, r7
 80016c2:	bf08      	it	eq
 80016c4:	f044 0401 	orreq.w	r4, r4, #1
 80016c8:	3718      	adds	r7, #24
 80016ca:	42bd      	cmp	r5, r7
 80016cc:	bf08      	it	eq
 80016ce:	f044 0401 	orreq.w	r4, r4, #1
 80016d2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80016d6:	42bd      	cmp	r5, r7
 80016d8:	bf08      	it	eq
 80016da:	f044 0401 	orreq.w	r4, r4, #1
 80016de:	3718      	adds	r7, #24
 80016e0:	42bd      	cmp	r5, r7
 80016e2:	bf08      	it	eq
 80016e4:	f044 0401 	orreq.w	r4, r4, #1
 80016e8:	3718      	adds	r7, #24
 80016ea:	42bd      	cmp	r5, r7
 80016ec:	bf08      	it	eq
 80016ee:	f044 0401 	orreq.w	r4, r4, #1
 80016f2:	3718      	adds	r7, #24
 80016f4:	42bd      	cmp	r5, r7
 80016f6:	bf08      	it	eq
 80016f8:	f044 0401 	orreq.w	r4, r4, #1
 80016fc:	3718      	adds	r7, #24
 80016fe:	42bd      	cmp	r5, r7
 8001700:	bf08      	it	eq
 8001702:	f044 0401 	orreq.w	r4, r4, #1
 8001706:	3718      	adds	r7, #24
 8001708:	42bd      	cmp	r5, r7
 800170a:	bf08      	it	eq
 800170c:	f044 0401 	orreq.w	r4, r4, #1
 8001710:	3718      	adds	r7, #24
 8001712:	42bd      	cmp	r5, r7
 8001714:	bf08      	it	eq
 8001716:	f044 0401 	orreq.w	r4, r4, #1
 800171a:	3718      	adds	r7, #24
 800171c:	42bd      	cmp	r5, r7
 800171e:	bf08      	it	eq
 8001720:	f044 0401 	orreq.w	r4, r4, #1
 8001724:	4f6b      	ldr	r7, [pc, #428]	; (80018d4 <DMA_SetConfig+0x254>)
 8001726:	42bd      	cmp	r5, r7
 8001728:	bf08      	it	eq
 800172a:	f044 0401 	orreq.w	r4, r4, #1
 800172e:	3714      	adds	r7, #20
 8001730:	42bd      	cmp	r5, r7
 8001732:	bf08      	it	eq
 8001734:	f044 0401 	orreq.w	r4, r4, #1
 8001738:	3714      	adds	r7, #20
 800173a:	42bd      	cmp	r5, r7
 800173c:	bf08      	it	eq
 800173e:	f044 0401 	orreq.w	r4, r4, #1
 8001742:	3714      	adds	r7, #20
 8001744:	42bd      	cmp	r5, r7
 8001746:	bf08      	it	eq
 8001748:	f044 0401 	orreq.w	r4, r4, #1
 800174c:	3714      	adds	r7, #20
 800174e:	42bd      	cmp	r5, r7
 8001750:	bf08      	it	eq
 8001752:	f044 0401 	orreq.w	r4, r4, #1
 8001756:	3714      	adds	r7, #20
 8001758:	42bd      	cmp	r5, r7
 800175a:	bf08      	it	eq
 800175c:	f044 0401 	orreq.w	r4, r4, #1
 8001760:	3714      	adds	r7, #20
 8001762:	42bd      	cmp	r5, r7
 8001764:	bf08      	it	eq
 8001766:	f044 0401 	orreq.w	r4, r4, #1
 800176a:	b914      	cbnz	r4, 8001772 <DMA_SetConfig+0xf2>
 800176c:	4c5a      	ldr	r4, [pc, #360]	; (80018d8 <DMA_SetConfig+0x258>)
 800176e:	42a5      	cmp	r5, r4
 8001770:	d107      	bne.n	8001782 <DMA_SetConfig+0x102>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001772:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001774:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8001776:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001778:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 800177a:	b114      	cbz	r4, 8001782 <DMA_SetConfig+0x102>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800177c:	6f04      	ldr	r4, [r0, #112]	; 0x70
 800177e:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8001780:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001782:	6805      	ldr	r5, [r0, #0]
 8001784:	4c51      	ldr	r4, [pc, #324]	; (80018cc <DMA_SetConfig+0x24c>)
 8001786:	4f52      	ldr	r7, [pc, #328]	; (80018d0 <DMA_SetConfig+0x250>)
 8001788:	42bd      	cmp	r5, r7
 800178a:	bf18      	it	ne
 800178c:	42a5      	cmpne	r5, r4
 800178e:	bf0c      	ite	eq
 8001790:	2401      	moveq	r4, #1
 8001792:	2400      	movne	r4, #0
 8001794:	3718      	adds	r7, #24
 8001796:	42bd      	cmp	r5, r7
 8001798:	bf08      	it	eq
 800179a:	f044 0401 	orreq.w	r4, r4, #1
 800179e:	3718      	adds	r7, #24
 80017a0:	42bd      	cmp	r5, r7
 80017a2:	bf08      	it	eq
 80017a4:	f044 0401 	orreq.w	r4, r4, #1
 80017a8:	3718      	adds	r7, #24
 80017aa:	42bd      	cmp	r5, r7
 80017ac:	bf08      	it	eq
 80017ae:	f044 0401 	orreq.w	r4, r4, #1
 80017b2:	3718      	adds	r7, #24
 80017b4:	42bd      	cmp	r5, r7
 80017b6:	bf08      	it	eq
 80017b8:	f044 0401 	orreq.w	r4, r4, #1
 80017bc:	3718      	adds	r7, #24
 80017be:	42bd      	cmp	r5, r7
 80017c0:	bf08      	it	eq
 80017c2:	f044 0401 	orreq.w	r4, r4, #1
 80017c6:	3718      	adds	r7, #24
 80017c8:	42bd      	cmp	r5, r7
 80017ca:	bf08      	it	eq
 80017cc:	f044 0401 	orreq.w	r4, r4, #1
 80017d0:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80017d4:	42bd      	cmp	r5, r7
 80017d6:	bf08      	it	eq
 80017d8:	f044 0401 	orreq.w	r4, r4, #1
 80017dc:	3718      	adds	r7, #24
 80017de:	42bd      	cmp	r5, r7
 80017e0:	bf08      	it	eq
 80017e2:	f044 0401 	orreq.w	r4, r4, #1
 80017e6:	3718      	adds	r7, #24
 80017e8:	42bd      	cmp	r5, r7
 80017ea:	bf08      	it	eq
 80017ec:	f044 0401 	orreq.w	r4, r4, #1
 80017f0:	3718      	adds	r7, #24
 80017f2:	42bd      	cmp	r5, r7
 80017f4:	bf08      	it	eq
 80017f6:	f044 0401 	orreq.w	r4, r4, #1
 80017fa:	3718      	adds	r7, #24
 80017fc:	42bd      	cmp	r5, r7
 80017fe:	bf08      	it	eq
 8001800:	f044 0401 	orreq.w	r4, r4, #1
 8001804:	3718      	adds	r7, #24
 8001806:	42bd      	cmp	r5, r7
 8001808:	bf08      	it	eq
 800180a:	f044 0401 	orreq.w	r4, r4, #1
 800180e:	3718      	adds	r7, #24
 8001810:	42bd      	cmp	r5, r7
 8001812:	bf08      	it	eq
 8001814:	f044 0401 	orreq.w	r4, r4, #1
 8001818:	b914      	cbnz	r4, 8001820 <DMA_SetConfig+0x1a0>
 800181a:	4c30      	ldr	r4, [pc, #192]	; (80018dc <DMA_SetConfig+0x25c>)
 800181c:	42a5      	cmp	r5, r4
 800181e:	d115      	bne.n	800184c <DMA_SetConfig+0x1cc>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001820:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001822:	f004 051f 	and.w	r5, r4, #31
 8001826:	243f      	movs	r4, #63	; 0x3f
 8001828:	40ac      	lsls	r4, r5
 800182a:	60b4      	str	r4, [r6, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800182c:	6805      	ldr	r5, [r0, #0]
 800182e:	682c      	ldr	r4, [r5, #0]
 8001830:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001834:	602c      	str	r4, [r5, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8001836:	6804      	ldr	r4, [r0, #0]
 8001838:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800183a:	6883      	ldr	r3, [r0, #8]
 800183c:	2b40      	cmp	r3, #64	; 0x40
 800183e:	d03a      	beq.n	80018b6 <DMA_SetConfig+0x236>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8001840:	6803      	ldr	r3, [r0, #0]
 8001842:	6099      	str	r1, [r3, #8]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001844:	6803      	ldr	r3, [r0, #0]
 8001846:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001848:	bcf0      	pop	{r4, r5, r6, r7}
 800184a:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800184c:	4c21      	ldr	r4, [pc, #132]	; (80018d4 <DMA_SetConfig+0x254>)
 800184e:	4f24      	ldr	r7, [pc, #144]	; (80018e0 <DMA_SetConfig+0x260>)
 8001850:	42bd      	cmp	r5, r7
 8001852:	bf18      	it	ne
 8001854:	42a5      	cmpne	r5, r4
 8001856:	bf0c      	ite	eq
 8001858:	2401      	moveq	r4, #1
 800185a:	2400      	movne	r4, #0
 800185c:	3714      	adds	r7, #20
 800185e:	42bd      	cmp	r5, r7
 8001860:	bf08      	it	eq
 8001862:	f044 0401 	orreq.w	r4, r4, #1
 8001866:	3714      	adds	r7, #20
 8001868:	42bd      	cmp	r5, r7
 800186a:	bf08      	it	eq
 800186c:	f044 0401 	orreq.w	r4, r4, #1
 8001870:	3714      	adds	r7, #20
 8001872:	42bd      	cmp	r5, r7
 8001874:	bf08      	it	eq
 8001876:	f044 0401 	orreq.w	r4, r4, #1
 800187a:	3714      	adds	r7, #20
 800187c:	42bd      	cmp	r5, r7
 800187e:	bf08      	it	eq
 8001880:	f044 0401 	orreq.w	r4, r4, #1
 8001884:	3714      	adds	r7, #20
 8001886:	42bd      	cmp	r5, r7
 8001888:	bf08      	it	eq
 800188a:	f044 0401 	orreq.w	r4, r4, #1
 800188e:	b914      	cbnz	r4, 8001896 <DMA_SetConfig+0x216>
 8001890:	4c11      	ldr	r4, [pc, #68]	; (80018d8 <DMA_SetConfig+0x258>)
 8001892:	42a5      	cmp	r5, r4
 8001894:	d1d8      	bne.n	8001848 <DMA_SetConfig+0x1c8>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001896:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001898:	f004 051f 	and.w	r5, r4, #31
 800189c:	2401      	movs	r4, #1
 800189e:	40ac      	lsls	r4, r5
 80018a0:	6074      	str	r4, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80018a2:	6804      	ldr	r4, [r0, #0]
 80018a4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a6:	6883      	ldr	r3, [r0, #8]
 80018a8:	2b40      	cmp	r3, #64	; 0x40
 80018aa:	d009      	beq.n	80018c0 <DMA_SetConfig+0x240>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80018ac:	6803      	ldr	r3, [r0, #0]
 80018ae:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80018b0:	6803      	ldr	r3, [r0, #0]
 80018b2:	60da      	str	r2, [r3, #12]
}
 80018b4:	e7c8      	b.n	8001848 <DMA_SetConfig+0x1c8>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80018b6:	6803      	ldr	r3, [r0, #0]
 80018b8:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80018ba:	6803      	ldr	r3, [r0, #0]
 80018bc:	60d9      	str	r1, [r3, #12]
 80018be:	e7c3      	b.n	8001848 <DMA_SetConfig+0x1c8>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80018c0:	6803      	ldr	r3, [r0, #0]
 80018c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80018c4:	6803      	ldr	r3, [r0, #0]
 80018c6:	60d9      	str	r1, [r3, #12]
 80018c8:	e7be      	b.n	8001848 <DMA_SetConfig+0x1c8>
 80018ca:	bf00      	nop
 80018cc:	40020010 	.word	0x40020010
 80018d0:	40020028 	.word	0x40020028
 80018d4:	58025408 	.word	0x58025408
 80018d8:	58025494 	.word	0x58025494
 80018dc:	400204b8 	.word	0x400204b8
 80018e0:	5802541c 	.word	0x5802541c

080018e4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018e4:	6802      	ldr	r2, [r0, #0]
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <DMA_CalcBaseAndBitshift+0xd4>)
 80018e8:	4934      	ldr	r1, [pc, #208]	; (80019bc <DMA_CalcBaseAndBitshift+0xd8>)
 80018ea:	428a      	cmp	r2, r1
 80018ec:	bf18      	it	ne
 80018ee:	429a      	cmpne	r2, r3
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	3118      	adds	r1, #24
 80018f8:	428a      	cmp	r2, r1
 80018fa:	bf08      	it	eq
 80018fc:	f043 0301 	orreq.w	r3, r3, #1
 8001900:	3118      	adds	r1, #24
 8001902:	428a      	cmp	r2, r1
 8001904:	bf08      	it	eq
 8001906:	f043 0301 	orreq.w	r3, r3, #1
 800190a:	3118      	adds	r1, #24
 800190c:	428a      	cmp	r2, r1
 800190e:	bf08      	it	eq
 8001910:	f043 0301 	orreq.w	r3, r3, #1
 8001914:	3118      	adds	r1, #24
 8001916:	428a      	cmp	r2, r1
 8001918:	bf08      	it	eq
 800191a:	f043 0301 	orreq.w	r3, r3, #1
 800191e:	3118      	adds	r1, #24
 8001920:	428a      	cmp	r2, r1
 8001922:	bf08      	it	eq
 8001924:	f043 0301 	orreq.w	r3, r3, #1
 8001928:	3118      	adds	r1, #24
 800192a:	428a      	cmp	r2, r1
 800192c:	bf08      	it	eq
 800192e:	f043 0301 	orreq.w	r3, r3, #1
 8001932:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001936:	428a      	cmp	r2, r1
 8001938:	bf08      	it	eq
 800193a:	f043 0301 	orreq.w	r3, r3, #1
 800193e:	3118      	adds	r1, #24
 8001940:	428a      	cmp	r2, r1
 8001942:	bf08      	it	eq
 8001944:	f043 0301 	orreq.w	r3, r3, #1
 8001948:	3118      	adds	r1, #24
 800194a:	428a      	cmp	r2, r1
 800194c:	bf08      	it	eq
 800194e:	f043 0301 	orreq.w	r3, r3, #1
 8001952:	3118      	adds	r1, #24
 8001954:	428a      	cmp	r2, r1
 8001956:	bf08      	it	eq
 8001958:	f043 0301 	orreq.w	r3, r3, #1
 800195c:	3118      	adds	r1, #24
 800195e:	428a      	cmp	r2, r1
 8001960:	bf08      	it	eq
 8001962:	f043 0301 	orreq.w	r3, r3, #1
 8001966:	3118      	adds	r1, #24
 8001968:	428a      	cmp	r2, r1
 800196a:	bf08      	it	eq
 800196c:	f043 0301 	orreq.w	r3, r3, #1
 8001970:	3118      	adds	r1, #24
 8001972:	428a      	cmp	r2, r1
 8001974:	bf08      	it	eq
 8001976:	f043 0301 	orreq.w	r3, r3, #1
 800197a:	b913      	cbnz	r3, 8001982 <DMA_CalcBaseAndBitshift+0x9e>
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <DMA_CalcBaseAndBitshift+0xdc>)
 800197e:	429a      	cmp	r2, r3
 8001980:	d115      	bne.n	80019ae <DMA_CalcBaseAndBitshift+0xca>
{
 8001982:	b410      	push	{r4}
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001984:	b2d1      	uxtb	r1, r2
 8001986:	3910      	subs	r1, #16
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <DMA_CalcBaseAndBitshift+0xe0>)
 800198a:	fba3 4301 	umull	r4, r3, r3, r1

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800198e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001992:	4c0d      	ldr	r4, [pc, #52]	; (80019c8 <DMA_CalcBaseAndBitshift+0xe4>)
 8001994:	5ce3      	ldrb	r3, [r4, r3]
 8001996:	65c3      	str	r3, [r0, #92]	; 0x5c

    if (stream_number > 3U)
 8001998:	295f      	cmp	r1, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <DMA_CalcBaseAndBitshift+0xe8>)
 800199c:	ea03 0302 	and.w	r3, r3, r2
 80019a0:	bf88      	it	hi
 80019a2:	3304      	addhi	r3, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80019a4:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80019a6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80019a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019ac:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80019ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019b2:	6582      	str	r2, [r0, #88]	; 0x58
}
 80019b4:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80019b6:	4770      	bx	lr
 80019b8:	40020010 	.word	0x40020010
 80019bc:	40020028 	.word	0x40020028
 80019c0:	400204b8 	.word	0x400204b8
 80019c4:	aaaaaaab 	.word	0xaaaaaaab
 80019c8:	080080c0 	.word	0x080080c0
 80019cc:	fffffc00 	.word	0xfffffc00

080019d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80019d0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80019d2:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 80019d4:	4928      	ldr	r1, [pc, #160]	; (8001a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80019d6:	428b      	cmp	r3, r1
 80019d8:	bf18      	it	ne
 80019da:	4293      	cmpne	r3, r2
 80019dc:	bf0c      	ite	eq
 80019de:	2201      	moveq	r2, #1
 80019e0:	2200      	movne	r2, #0
 80019e2:	3114      	adds	r1, #20
 80019e4:	428b      	cmp	r3, r1
 80019e6:	bf08      	it	eq
 80019e8:	f042 0201 	orreq.w	r2, r2, #1
 80019ec:	3114      	adds	r1, #20
 80019ee:	428b      	cmp	r3, r1
 80019f0:	bf08      	it	eq
 80019f2:	f042 0201 	orreq.w	r2, r2, #1
 80019f6:	3114      	adds	r1, #20
 80019f8:	428b      	cmp	r3, r1
 80019fa:	bf08      	it	eq
 80019fc:	f042 0201 	orreq.w	r2, r2, #1
 8001a00:	3114      	adds	r1, #20
 8001a02:	428b      	cmp	r3, r1
 8001a04:	bf08      	it	eq
 8001a06:	f042 0201 	orreq.w	r2, r2, #1
 8001a0a:	3114      	adds	r1, #20
 8001a0c:	428b      	cmp	r3, r1
 8001a0e:	bf08      	it	eq
 8001a10:	f042 0201 	orreq.w	r2, r2, #1
 8001a14:	b912      	cbnz	r2, 8001a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>
 8001a16:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d112      	bne.n	8001a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	3b08      	subs	r3, #8
 8001a20:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8001a28:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001a30:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8001a32:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001a34:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8001a38:	2201      	movs	r2, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	6683      	str	r3, [r0, #104]	; 0x68
 8001a40:	4770      	bx	lr
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	3a10      	subs	r2, #16
 8001a46:	4911      	ldr	r1, [pc, #68]	; (8001a8c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8001a48:	fba1 1202 	umull	r1, r2, r1, r2
 8001a4c:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001a4e:	4910      	ldr	r1, [pc, #64]	; (8001a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8001a50:	4419      	add	r1, r3
 8001a52:	29a8      	cmp	r1, #168	; 0xa8
 8001a54:	d90c      	bls.n	8001a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
 8001a60:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001a62:	f002 021f 	and.w	r2, r2, #31
 8001a66:	2301      	movs	r3, #1
 8001a68:	fa03 f202 	lsl.w	r2, r3, r2
 8001a6c:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8001a6e:	4770      	bx	lr
      stream_number += 8U;
 8001a70:	3208      	adds	r2, #8
 8001a72:	e7f0      	b.n	8001a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
 8001a74:	58025408 	.word	0x58025408
 8001a78:	5802541c 	.word	0x5802541c
 8001a7c:	58025494 	.word	0x58025494
 8001a80:	cccccccd 	.word	0xcccccccd
 8001a84:	16009600 	.word	0x16009600
 8001a88:	58025880 	.word	0x58025880
 8001a8c:	aaaaaaab 	.word	0xaaaaaaab
 8001a90:	bffdfbf0 	.word	0xbffdfbf0
 8001a94:	10008200 	.word	0x10008200
 8001a98:	40020880 	.word	0x40020880

08001a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a9c:	f890 c004 	ldrb.w	ip, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001aa0:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001aa4:	2907      	cmp	r1, #7
 8001aa6:	d83a      	bhi.n	8001b1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x82>
{
 8001aa8:	b410      	push	{r4}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001aaa:	6802      	ldr	r2, [r0, #0]
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x84>)
 8001aae:	4c1d      	ldr	r4, [pc, #116]	; (8001b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x88>)
 8001ab0:	42a2      	cmp	r2, r4
 8001ab2:	bf18      	it	ne
 8001ab4:	429a      	cmpne	r2, r3
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	3414      	adds	r4, #20
 8001abe:	42a2      	cmp	r2, r4
 8001ac0:	bf08      	it	eq
 8001ac2:	f043 0301 	orreq.w	r3, r3, #1
 8001ac6:	3414      	adds	r4, #20
 8001ac8:	42a2      	cmp	r2, r4
 8001aca:	bf08      	it	eq
 8001acc:	f043 0301 	orreq.w	r3, r3, #1
 8001ad0:	3414      	adds	r4, #20
 8001ad2:	42a2      	cmp	r2, r4
 8001ad4:	bf08      	it	eq
 8001ad6:	f043 0301 	orreq.w	r3, r3, #1
 8001ada:	3414      	adds	r4, #20
 8001adc:	42a2      	cmp	r2, r4
 8001ade:	bf08      	it	eq
 8001ae0:	f043 0301 	orreq.w	r3, r3, #1
 8001ae4:	3414      	adds	r4, #20
 8001ae6:	42a2      	cmp	r2, r4
 8001ae8:	bf08      	it	eq
 8001aea:	f043 0301 	orreq.w	r3, r3, #1
 8001aee:	b913      	cbnz	r3, 8001af6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5a>
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>)
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d10c      	bne.n	8001b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x90>)
 8001af8:	4463      	add	r3, ip
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x94>)
 8001b00:	6703      	str	r3, [r0, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001b02:	2301      	movs	r3, #1
 8001b04:	fa03 f101 	lsl.w	r1, r3, r1
 8001b08:	6741      	str	r1, [r0, #116]	; 0x74
  }
}
 8001b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b0e:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x98>)
 8001b12:	4463      	add	r3, ip
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x9c>)
 8001b1a:	6703      	str	r3, [r0, #112]	; 0x70
 8001b1c:	e7f1      	b.n	8001b02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x66>
 8001b1e:	4770      	bx	lr
 8001b20:	58025408 	.word	0x58025408
 8001b24:	5802541c 	.word	0x5802541c
 8001b28:	58025494 	.word	0x58025494
 8001b2c:	1600963f 	.word	0x1600963f
 8001b30:	58025940 	.word	0x58025940
 8001b34:	1000823f 	.word	0x1000823f
 8001b38:	40020940 	.word	0x40020940

08001b3c <HAL_DMA_Init>:
{
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff fcc8 	bl	80014d4 <HAL_GetTick>
  if(hdma == NULL)
 8001b44:	2c00      	cmp	r4, #0
 8001b46:	f000 820c 	beq.w	8001f62 <HAL_DMA_Init+0x426>
 8001b4a:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b4c:	6822      	ldr	r2, [r4, #0]
 8001b4e:	4b64      	ldr	r3, [pc, #400]	; (8001ce0 <HAL_DMA_Init+0x1a4>)
 8001b50:	4964      	ldr	r1, [pc, #400]	; (8001ce4 <HAL_DMA_Init+0x1a8>)
 8001b52:	428a      	cmp	r2, r1
 8001b54:	bf18      	it	ne
 8001b56:	429a      	cmpne	r2, r3
 8001b58:	bf0c      	ite	eq
 8001b5a:	2301      	moveq	r3, #1
 8001b5c:	2300      	movne	r3, #0
 8001b5e:	3118      	adds	r1, #24
 8001b60:	428a      	cmp	r2, r1
 8001b62:	bf08      	it	eq
 8001b64:	f043 0301 	orreq.w	r3, r3, #1
 8001b68:	3118      	adds	r1, #24
 8001b6a:	428a      	cmp	r2, r1
 8001b6c:	bf08      	it	eq
 8001b6e:	f043 0301 	orreq.w	r3, r3, #1
 8001b72:	3118      	adds	r1, #24
 8001b74:	428a      	cmp	r2, r1
 8001b76:	bf08      	it	eq
 8001b78:	f043 0301 	orreq.w	r3, r3, #1
 8001b7c:	3118      	adds	r1, #24
 8001b7e:	428a      	cmp	r2, r1
 8001b80:	bf08      	it	eq
 8001b82:	f043 0301 	orreq.w	r3, r3, #1
 8001b86:	3118      	adds	r1, #24
 8001b88:	428a      	cmp	r2, r1
 8001b8a:	bf08      	it	eq
 8001b8c:	f043 0301 	orreq.w	r3, r3, #1
 8001b90:	3118      	adds	r1, #24
 8001b92:	428a      	cmp	r2, r1
 8001b94:	bf08      	it	eq
 8001b96:	f043 0301 	orreq.w	r3, r3, #1
 8001b9a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001b9e:	428a      	cmp	r2, r1
 8001ba0:	bf08      	it	eq
 8001ba2:	f043 0301 	orreq.w	r3, r3, #1
 8001ba6:	3118      	adds	r1, #24
 8001ba8:	428a      	cmp	r2, r1
 8001baa:	bf08      	it	eq
 8001bac:	f043 0301 	orreq.w	r3, r3, #1
 8001bb0:	3118      	adds	r1, #24
 8001bb2:	428a      	cmp	r2, r1
 8001bb4:	bf08      	it	eq
 8001bb6:	f043 0301 	orreq.w	r3, r3, #1
 8001bba:	3118      	adds	r1, #24
 8001bbc:	428a      	cmp	r2, r1
 8001bbe:	bf08      	it	eq
 8001bc0:	f043 0301 	orreq.w	r3, r3, #1
 8001bc4:	3118      	adds	r1, #24
 8001bc6:	428a      	cmp	r2, r1
 8001bc8:	bf08      	it	eq
 8001bca:	f043 0301 	orreq.w	r3, r3, #1
 8001bce:	3118      	adds	r1, #24
 8001bd0:	428a      	cmp	r2, r1
 8001bd2:	bf08      	it	eq
 8001bd4:	f043 0301 	orreq.w	r3, r3, #1
 8001bd8:	3118      	adds	r1, #24
 8001bda:	428a      	cmp	r2, r1
 8001bdc:	bf08      	it	eq
 8001bde:	f043 0301 	orreq.w	r3, r3, #1
 8001be2:	b913      	cbnz	r3, 8001bea <HAL_DMA_Init+0xae>
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <HAL_DMA_Init+0x1ac>)
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11a      	bne.n	8001c20 <HAL_DMA_Init+0xe4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bea:	2302      	movs	r3, #2
 8001bec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6013      	str	r3, [r2, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	f012 0f01 	tst.w	r2, #1
 8001c06:	d07d      	beq.n	8001d04 <HAL_DMA_Init+0x1c8>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c08:	f7ff fc64 	bl	80014d4 <HAL_GetTick>
 8001c0c:	1b43      	subs	r3, r0, r5
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d9f5      	bls.n	8001bfe <HAL_DMA_Init+0xc2>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c12:	2320      	movs	r3, #32
 8001c14:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c16:	2303      	movs	r3, #3
 8001c18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8001c1c:	2001      	movs	r0, #1
}
 8001c1e:	bd38      	pop	{r3, r4, r5, pc}
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c20:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_DMA_Init+0x1b0>)
 8001c22:	4933      	ldr	r1, [pc, #204]	; (8001cf0 <HAL_DMA_Init+0x1b4>)
 8001c24:	428a      	cmp	r2, r1
 8001c26:	bf18      	it	ne
 8001c28:	429a      	cmpne	r2, r3
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2301      	moveq	r3, #1
 8001c2e:	2300      	movne	r3, #0
 8001c30:	3114      	adds	r1, #20
 8001c32:	428a      	cmp	r2, r1
 8001c34:	bf08      	it	eq
 8001c36:	f043 0301 	orreq.w	r3, r3, #1
 8001c3a:	3114      	adds	r1, #20
 8001c3c:	428a      	cmp	r2, r1
 8001c3e:	bf08      	it	eq
 8001c40:	f043 0301 	orreq.w	r3, r3, #1
 8001c44:	3114      	adds	r1, #20
 8001c46:	428a      	cmp	r2, r1
 8001c48:	bf08      	it	eq
 8001c4a:	f043 0301 	orreq.w	r3, r3, #1
 8001c4e:	3114      	adds	r1, #20
 8001c50:	428a      	cmp	r2, r1
 8001c52:	bf08      	it	eq
 8001c54:	f043 0301 	orreq.w	r3, r3, #1
 8001c58:	3114      	adds	r1, #20
 8001c5a:	428a      	cmp	r2, r1
 8001c5c:	bf08      	it	eq
 8001c5e:	f043 0301 	orreq.w	r3, r3, #1
 8001c62:	b91b      	cbnz	r3, 8001c6c <HAL_DMA_Init+0x130>
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_DMA_Init+0x1b8>)
 8001c66:	429a      	cmp	r2, r3
 8001c68:	f040 8165 	bne.w	8001f36 <HAL_DMA_Init+0x3fa>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001c72:	2300      	movs	r3, #0
 8001c74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c78:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c7a:	481f      	ldr	r0, [pc, #124]	; (8001cf8 <HAL_DMA_Init+0x1bc>)
 8001c7c:	4018      	ands	r0, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c7e:	68a3      	ldr	r3, [r4, #8]
 8001c80:	2b40      	cmp	r3, #64	; 0x40
 8001c82:	f000 815f 	beq.w	8001f44 <HAL_DMA_Init+0x408>
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	bf0c      	ite	eq
 8001c8a:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 8001c8e:	2100      	movne	r1, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c90:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c92:	6923      	ldr	r3, [r4, #16]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c9a:	6965      	ldr	r5, [r4, #20]
 8001c9c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ca0:	69a5      	ldr	r5, [r4, #24]
 8001ca2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ca6:	69e5      	ldr	r5, [r4, #28]
 8001ca8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001cac:	6a25      	ldr	r5, [r4, #32]
 8001cae:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8001cb2:	4303      	orrs	r3, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cb4:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001cb6:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_DMA_Init+0x1c0>)
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_DMA_Init+0x1c4>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff fe0a 	bl	80018e4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cd0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cd2:	f002 011f 	and.w	r1, r2, #31
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	408a      	lsls	r2, r1
 8001cda:	6042      	str	r2, [r0, #4]
 8001cdc:	e05e      	b.n	8001d9c <HAL_DMA_Init+0x260>
 8001cde:	bf00      	nop
 8001ce0:	40020010 	.word	0x40020010
 8001ce4:	40020028 	.word	0x40020028
 8001ce8:	400204b8 	.word	0x400204b8
 8001cec:	58025408 	.word	0x58025408
 8001cf0:	5802541c 	.word	0x5802541c
 8001cf4:	58025494 	.word	0x58025494
 8001cf8:	fffe000f 	.word	0xfffe000f
 8001cfc:	a7fdabf8 	.word	0xa7fdabf8
 8001d00:	cccccccd 	.word	0xcccccccd
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d04:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d06:	489a      	ldr	r0, [pc, #616]	; (8001f70 <HAL_DMA_Init+0x434>)
 8001d08:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8001d0a:	68a1      	ldr	r1, [r4, #8]
 8001d0c:	68e2      	ldr	r2, [r4, #12]
 8001d0e:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d10:	6921      	ldr	r1, [r4, #16]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	6961      	ldr	r1, [r4, #20]
 8001d16:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d18:	69a1      	ldr	r1, [r4, #24]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	69e1      	ldr	r1, [r4, #28]
 8001d1e:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d20:	6a21      	ldr	r1, [r4, #32]
 8001d22:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8001d24:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d28:	2904      	cmp	r1, #4
 8001d2a:	f000 80c8 	beq.w	8001ebe <HAL_DMA_Init+0x382>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d2e:	4991      	ldr	r1, [pc, #580]	; (8001f74 <HAL_DMA_Init+0x438>)
 8001d30:	6808      	ldr	r0, [r1, #0]
 8001d32:	4991      	ldr	r1, [pc, #580]	; (8001f78 <HAL_DMA_Init+0x43c>)
 8001d34:	4001      	ands	r1, r0
 8001d36:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001d3a:	d30d      	bcc.n	8001d58 <HAL_DMA_Init+0x21c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d3c:	6861      	ldr	r1, [r4, #4]
 8001d3e:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8001d42:	281f      	cmp	r0, #31
 8001d44:	f200 810f 	bhi.w	8001f66 <HAL_DMA_Init+0x42a>
 8001d48:	498c      	ldr	r1, [pc, #560]	; (8001f7c <HAL_DMA_Init+0x440>)
 8001d4a:	fa21 f000 	lsr.w	r0, r1, r0
 8001d4e:	f010 0f01 	tst.w	r0, #1
 8001d52:	d001      	beq.n	8001d58 <HAL_DMA_Init+0x21c>
        registerValue |= DMA_SxCR_TRBUFF;
 8001d54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d58:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d5a:	6821      	ldr	r1, [r4, #0]
 8001d5c:	694a      	ldr	r2, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d5e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8001d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d64:	431a      	orrs	r2, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d10e      	bne.n	8001d88 <HAL_DMA_Init+0x24c>
      registerValue |= hdma->Init.FIFOThreshold;
 8001d6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d6c:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d70:	b153      	cbz	r3, 8001d88 <HAL_DMA_Init+0x24c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d72:	69a5      	ldr	r5, [r4, #24]
 8001d74:	2d00      	cmp	r5, #0
 8001d76:	f040 80b8 	bne.w	8001eea <HAL_DMA_Init+0x3ae>
    switch (hdma->Init.FIFOThreshold)
 8001d7a:	2801      	cmp	r0, #1
 8001d7c:	f000 80af 	beq.w	8001ede <HAL_DMA_Init+0x3a2>
 8001d80:	f030 0002 	bics.w	r0, r0, #2
 8001d84:	f000 80a0 	beq.w	8001ec8 <HAL_DMA_Init+0x38c>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d88:	614a      	str	r2, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff fdaa 	bl	80018e4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d92:	f003 021f 	and.w	r2, r3, #31
 8001d96:	233f      	movs	r3, #63	; 0x3f
 8001d98:	4093      	lsls	r3, r2
 8001d9a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	4b78      	ldr	r3, [pc, #480]	; (8001f80 <HAL_DMA_Init+0x444>)
 8001da0:	4978      	ldr	r1, [pc, #480]	; (8001f84 <HAL_DMA_Init+0x448>)
 8001da2:	428a      	cmp	r2, r1
 8001da4:	bf18      	it	ne
 8001da6:	429a      	cmpne	r2, r3
 8001da8:	bf0c      	ite	eq
 8001daa:	2301      	moveq	r3, #1
 8001dac:	2300      	movne	r3, #0
 8001dae:	3118      	adds	r1, #24
 8001db0:	428a      	cmp	r2, r1
 8001db2:	bf08      	it	eq
 8001db4:	f043 0301 	orreq.w	r3, r3, #1
 8001db8:	3118      	adds	r1, #24
 8001dba:	428a      	cmp	r2, r1
 8001dbc:	bf08      	it	eq
 8001dbe:	f043 0301 	orreq.w	r3, r3, #1
 8001dc2:	3118      	adds	r1, #24
 8001dc4:	428a      	cmp	r2, r1
 8001dc6:	bf08      	it	eq
 8001dc8:	f043 0301 	orreq.w	r3, r3, #1
 8001dcc:	3118      	adds	r1, #24
 8001dce:	428a      	cmp	r2, r1
 8001dd0:	bf08      	it	eq
 8001dd2:	f043 0301 	orreq.w	r3, r3, #1
 8001dd6:	3118      	adds	r1, #24
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	bf08      	it	eq
 8001ddc:	f043 0301 	orreq.w	r3, r3, #1
 8001de0:	3118      	adds	r1, #24
 8001de2:	428a      	cmp	r2, r1
 8001de4:	bf08      	it	eq
 8001de6:	f043 0301 	orreq.w	r3, r3, #1
 8001dea:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001dee:	428a      	cmp	r2, r1
 8001df0:	bf08      	it	eq
 8001df2:	f043 0301 	orreq.w	r3, r3, #1
 8001df6:	3118      	adds	r1, #24
 8001df8:	428a      	cmp	r2, r1
 8001dfa:	bf08      	it	eq
 8001dfc:	f043 0301 	orreq.w	r3, r3, #1
 8001e00:	3118      	adds	r1, #24
 8001e02:	428a      	cmp	r2, r1
 8001e04:	bf08      	it	eq
 8001e06:	f043 0301 	orreq.w	r3, r3, #1
 8001e0a:	3118      	adds	r1, #24
 8001e0c:	428a      	cmp	r2, r1
 8001e0e:	bf08      	it	eq
 8001e10:	f043 0301 	orreq.w	r3, r3, #1
 8001e14:	3118      	adds	r1, #24
 8001e16:	428a      	cmp	r2, r1
 8001e18:	bf08      	it	eq
 8001e1a:	f043 0301 	orreq.w	r3, r3, #1
 8001e1e:	3118      	adds	r1, #24
 8001e20:	428a      	cmp	r2, r1
 8001e22:	bf08      	it	eq
 8001e24:	f043 0301 	orreq.w	r3, r3, #1
 8001e28:	3118      	adds	r1, #24
 8001e2a:	428a      	cmp	r2, r1
 8001e2c:	bf08      	it	eq
 8001e2e:	f043 0301 	orreq.w	r3, r3, #1
 8001e32:	3118      	adds	r1, #24
 8001e34:	428a      	cmp	r2, r1
 8001e36:	bf08      	it	eq
 8001e38:	f043 0301 	orreq.w	r3, r3, #1
 8001e3c:	4952      	ldr	r1, [pc, #328]	; (8001f88 <HAL_DMA_Init+0x44c>)
 8001e3e:	428a      	cmp	r2, r1
 8001e40:	bf08      	it	eq
 8001e42:	f043 0301 	orreq.w	r3, r3, #1
 8001e46:	3114      	adds	r1, #20
 8001e48:	428a      	cmp	r2, r1
 8001e4a:	bf08      	it	eq
 8001e4c:	f043 0301 	orreq.w	r3, r3, #1
 8001e50:	3114      	adds	r1, #20
 8001e52:	428a      	cmp	r2, r1
 8001e54:	bf08      	it	eq
 8001e56:	f043 0301 	orreq.w	r3, r3, #1
 8001e5a:	3114      	adds	r1, #20
 8001e5c:	428a      	cmp	r2, r1
 8001e5e:	bf08      	it	eq
 8001e60:	f043 0301 	orreq.w	r3, r3, #1
 8001e64:	3114      	adds	r1, #20
 8001e66:	428a      	cmp	r2, r1
 8001e68:	bf08      	it	eq
 8001e6a:	f043 0301 	orreq.w	r3, r3, #1
 8001e6e:	3114      	adds	r1, #20
 8001e70:	428a      	cmp	r2, r1
 8001e72:	bf08      	it	eq
 8001e74:	f043 0301 	orreq.w	r3, r3, #1
 8001e78:	3114      	adds	r1, #20
 8001e7a:	428a      	cmp	r2, r1
 8001e7c:	bf08      	it	eq
 8001e7e:	f043 0301 	orreq.w	r3, r3, #1
 8001e82:	b913      	cbnz	r3, 8001e8a <HAL_DMA_Init+0x34e>
 8001e84:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_DMA_Init+0x450>)
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d113      	bne.n	8001eb2 <HAL_DMA_Init+0x376>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff fda0 	bl	80019d0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e90:	68a3      	ldr	r3, [r4, #8]
 8001e92:	2b80      	cmp	r3, #128	; 0x80
 8001e94:	d058      	beq.n	8001f48 <HAL_DMA_Init+0x40c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001e98:	7922      	ldrb	r2, [r4, #4]
 8001e9a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e9e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001ea0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ea2:	6863      	ldr	r3, [r4, #4]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	2b07      	cmp	r3, #7
 8001ea8:	d951      	bls.n	8001f4e <HAL_DMA_Init+0x412>
      hdma->DMAmuxRequestGen = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001eae:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001eb0:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ebc:	e6af      	b.n	8001c1e <HAL_DMA_Init+0xe2>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ebe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ec0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ec2:	4301      	orrs	r1, r0
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	e732      	b.n	8001d2e <HAL_DMA_Init+0x1f2>
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f43f af5b 	beq.w	8001d88 <HAL_DMA_Init+0x24c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8001edc:	e69f      	b.n	8001c1e <HAL_DMA_Init+0xe2>
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee2:	bf14      	ite	ne
 8001ee4:	2300      	movne	r3, #0
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	e7f0      	b.n	8001ecc <HAL_DMA_Init+0x390>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eea:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8001eee:	d00a      	beq.n	8001f06 <HAL_DMA_Init+0x3ca>
    switch (hdma->Init.FIFOThreshold)
 8001ef0:	2802      	cmp	r0, #2
 8001ef2:	d9ee      	bls.n	8001ed2 <HAL_DMA_Init+0x396>
 8001ef4:	2803      	cmp	r0, #3
 8001ef6:	f47f af47 	bne.w	8001d88 <HAL_DMA_Init+0x24c>
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f43f af42 	beq.w	8001d88 <HAL_DMA_Init+0x24c>
 8001f04:	e7e5      	b.n	8001ed2 <HAL_DMA_Init+0x396>
    switch (hdma->Init.FIFOThreshold)
 8001f06:	2803      	cmp	r0, #3
 8001f08:	f63f af3e 	bhi.w	8001d88 <HAL_DMA_Init+0x24c>
 8001f0c:	a501      	add	r5, pc, #4	; (adr r5, 8001f14 <HAL_DMA_Init+0x3d8>)
 8001f0e:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8001f12:	bf00      	nop
 8001f14:	08001ed3 	.word	0x08001ed3
 8001f18:	08001f25 	.word	0x08001f25
 8001f1c:	08001ed3 	.word	0x08001ed3
 8001f20:	08001f2b 	.word	0x08001f2b
  HAL_StatusTypeDef status = HAL_OK;
 8001f24:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8001f28:	e7e9      	b.n	8001efe <HAL_DMA_Init+0x3c2>
 8001f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f2e:	bf14      	ite	ne
 8001f30:	2300      	movne	r3, #0
 8001f32:	2301      	moveq	r3, #1
 8001f34:	e7e3      	b.n	8001efe <HAL_DMA_Init+0x3c2>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f36:	2340      	movs	r3, #64	; 0x40
 8001f38:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
 8001f42:	e66c      	b.n	8001c1e <HAL_DMA_Init+0xe2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f44:	2110      	movs	r1, #16
 8001f46:	e6a3      	b.n	8001c90 <HAL_DMA_Init+0x154>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	6063      	str	r3, [r4, #4]
 8001f4c:	e7a3      	b.n	8001e96 <HAL_DMA_Init+0x35a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff fda4 	bl	8001a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001f5c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	e7a7      	b.n	8001eb2 <HAL_DMA_Init+0x376>
    return HAL_ERROR;
 8001f62:	2001      	movs	r0, #1
 8001f64:	e65b      	b.n	8001c1e <HAL_DMA_Init+0xe2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f66:	394f      	subs	r1, #79	; 0x4f
 8001f68:	2903      	cmp	r1, #3
 8001f6a:	f67f aef3 	bls.w	8001d54 <HAL_DMA_Init+0x218>
 8001f6e:	e6f3      	b.n	8001d58 <HAL_DMA_Init+0x21c>
 8001f70:	fe10803f 	.word	0xfe10803f
 8001f74:	5c001000 	.word	0x5c001000
 8001f78:	ffff0000 	.word	0xffff0000
 8001f7c:	c3c0003f 	.word	0xc3c0003f
 8001f80:	40020010 	.word	0x40020010
 8001f84:	40020028 	.word	0x40020028
 8001f88:	58025408 	.word	0x58025408
 8001f8c:	58025494 	.word	0x58025494

08001f90 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8001f90:	2800      	cmp	r0, #0
 8001f92:	f000 81d2 	beq.w	800233a <HAL_DMA_Start_IT+0x3aa>
{
 8001f96:	b570      	push	{r4, r5, r6, lr}
 8001f98:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001f9a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001f9e:	2801      	cmp	r0, #1
 8001fa0:	f000 81cd 	beq.w	800233e <HAL_DMA_Start_IT+0x3ae>
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001faa:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001fae:	b2c0      	uxtb	r0, r0
 8001fb0:	2801      	cmp	r0, #1
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001fb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fb8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8001fc0:	2001      	movs	r0, #1
}
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fca:	2000      	movs	r0, #0
 8001fcc:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8001fce:	6825      	ldr	r5, [r4, #0]
 8001fd0:	4895      	ldr	r0, [pc, #596]	; (8002228 <HAL_DMA_Start_IT+0x298>)
 8001fd2:	4e96      	ldr	r6, [pc, #600]	; (800222c <HAL_DMA_Start_IT+0x29c>)
 8001fd4:	42b5      	cmp	r5, r6
 8001fd6:	bf18      	it	ne
 8001fd8:	4285      	cmpne	r5, r0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2001      	moveq	r0, #1
 8001fde:	2000      	movne	r0, #0
 8001fe0:	3618      	adds	r6, #24
 8001fe2:	42b5      	cmp	r5, r6
 8001fe4:	bf08      	it	eq
 8001fe6:	f040 0001 	orreq.w	r0, r0, #1
 8001fea:	3618      	adds	r6, #24
 8001fec:	42b5      	cmp	r5, r6
 8001fee:	bf08      	it	eq
 8001ff0:	f040 0001 	orreq.w	r0, r0, #1
 8001ff4:	3618      	adds	r6, #24
 8001ff6:	42b5      	cmp	r5, r6
 8001ff8:	bf08      	it	eq
 8001ffa:	f040 0001 	orreq.w	r0, r0, #1
 8001ffe:	3618      	adds	r6, #24
 8002000:	42b5      	cmp	r5, r6
 8002002:	bf08      	it	eq
 8002004:	f040 0001 	orreq.w	r0, r0, #1
 8002008:	3618      	adds	r6, #24
 800200a:	42b5      	cmp	r5, r6
 800200c:	bf08      	it	eq
 800200e:	f040 0001 	orreq.w	r0, r0, #1
 8002012:	3618      	adds	r6, #24
 8002014:	42b5      	cmp	r5, r6
 8002016:	bf08      	it	eq
 8002018:	f040 0001 	orreq.w	r0, r0, #1
 800201c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8002020:	42b5      	cmp	r5, r6
 8002022:	bf08      	it	eq
 8002024:	f040 0001 	orreq.w	r0, r0, #1
 8002028:	3618      	adds	r6, #24
 800202a:	42b5      	cmp	r5, r6
 800202c:	bf08      	it	eq
 800202e:	f040 0001 	orreq.w	r0, r0, #1
 8002032:	3618      	adds	r6, #24
 8002034:	42b5      	cmp	r5, r6
 8002036:	bf08      	it	eq
 8002038:	f040 0001 	orreq.w	r0, r0, #1
 800203c:	3618      	adds	r6, #24
 800203e:	42b5      	cmp	r5, r6
 8002040:	bf08      	it	eq
 8002042:	f040 0001 	orreq.w	r0, r0, #1
 8002046:	3618      	adds	r6, #24
 8002048:	42b5      	cmp	r5, r6
 800204a:	bf08      	it	eq
 800204c:	f040 0001 	orreq.w	r0, r0, #1
 8002050:	3618      	adds	r6, #24
 8002052:	42b5      	cmp	r5, r6
 8002054:	bf08      	it	eq
 8002056:	f040 0001 	orreq.w	r0, r0, #1
 800205a:	3618      	adds	r6, #24
 800205c:	42b5      	cmp	r5, r6
 800205e:	bf08      	it	eq
 8002060:	f040 0001 	orreq.w	r0, r0, #1
 8002064:	b918      	cbnz	r0, 800206e <HAL_DMA_Start_IT+0xde>
 8002066:	4872      	ldr	r0, [pc, #456]	; (8002230 <HAL_DMA_Start_IT+0x2a0>)
 8002068:	4285      	cmp	r5, r0
 800206a:	f040 814b 	bne.w	8002304 <HAL_DMA_Start_IT+0x374>
 800206e:	6828      	ldr	r0, [r5, #0]
 8002070:	f020 0001 	bic.w	r0, r0, #1
 8002074:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002076:	4620      	mov	r0, r4
 8002078:	f7ff fb02 	bl	8001680 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800207c:	6822      	ldr	r2, [r4, #0]
 800207e:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_DMA_Start_IT+0x298>)
 8002080:	496a      	ldr	r1, [pc, #424]	; (800222c <HAL_DMA_Start_IT+0x29c>)
 8002082:	428a      	cmp	r2, r1
 8002084:	bf18      	it	ne
 8002086:	429a      	cmpne	r2, r3
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	3118      	adds	r1, #24
 8002090:	428a      	cmp	r2, r1
 8002092:	bf08      	it	eq
 8002094:	f043 0301 	orreq.w	r3, r3, #1
 8002098:	3118      	adds	r1, #24
 800209a:	428a      	cmp	r2, r1
 800209c:	bf08      	it	eq
 800209e:	f043 0301 	orreq.w	r3, r3, #1
 80020a2:	3118      	adds	r1, #24
 80020a4:	428a      	cmp	r2, r1
 80020a6:	bf08      	it	eq
 80020a8:	f043 0301 	orreq.w	r3, r3, #1
 80020ac:	3118      	adds	r1, #24
 80020ae:	428a      	cmp	r2, r1
 80020b0:	bf08      	it	eq
 80020b2:	f043 0301 	orreq.w	r3, r3, #1
 80020b6:	3118      	adds	r1, #24
 80020b8:	428a      	cmp	r2, r1
 80020ba:	bf08      	it	eq
 80020bc:	f043 0301 	orreq.w	r3, r3, #1
 80020c0:	3118      	adds	r1, #24
 80020c2:	428a      	cmp	r2, r1
 80020c4:	bf08      	it	eq
 80020c6:	f043 0301 	orreq.w	r3, r3, #1
 80020ca:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80020ce:	428a      	cmp	r2, r1
 80020d0:	bf08      	it	eq
 80020d2:	f043 0301 	orreq.w	r3, r3, #1
 80020d6:	3118      	adds	r1, #24
 80020d8:	428a      	cmp	r2, r1
 80020da:	bf08      	it	eq
 80020dc:	f043 0301 	orreq.w	r3, r3, #1
 80020e0:	3118      	adds	r1, #24
 80020e2:	428a      	cmp	r2, r1
 80020e4:	bf08      	it	eq
 80020e6:	f043 0301 	orreq.w	r3, r3, #1
 80020ea:	3118      	adds	r1, #24
 80020ec:	428a      	cmp	r2, r1
 80020ee:	bf08      	it	eq
 80020f0:	f043 0301 	orreq.w	r3, r3, #1
 80020f4:	3118      	adds	r1, #24
 80020f6:	428a      	cmp	r2, r1
 80020f8:	bf08      	it	eq
 80020fa:	f043 0301 	orreq.w	r3, r3, #1
 80020fe:	3118      	adds	r1, #24
 8002100:	428a      	cmp	r2, r1
 8002102:	bf08      	it	eq
 8002104:	f043 0301 	orreq.w	r3, r3, #1
 8002108:	3118      	adds	r1, #24
 800210a:	428a      	cmp	r2, r1
 800210c:	bf08      	it	eq
 800210e:	f043 0301 	orreq.w	r3, r3, #1
 8002112:	b91b      	cbnz	r3, 800211c <HAL_DMA_Start_IT+0x18c>
 8002114:	4b46      	ldr	r3, [pc, #280]	; (8002230 <HAL_DMA_Start_IT+0x2a0>)
 8002116:	429a      	cmp	r2, r3
 8002118:	f040 80f9 	bne.w	800230e <HAL_DMA_Start_IT+0x37e>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800211c:	6813      	ldr	r3, [r2, #0]
 800211e:	f023 031e 	bic.w	r3, r3, #30
 8002122:	f043 0316 	orr.w	r3, r3, #22
 8002126:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002128:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800212a:	b123      	cbz	r3, 8002136 <HAL_DMA_Start_IT+0x1a6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	6813      	ldr	r3, [r2, #0]
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002136:	6822      	ldr	r2, [r4, #0]
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_DMA_Start_IT+0x298>)
 800213a:	493c      	ldr	r1, [pc, #240]	; (800222c <HAL_DMA_Start_IT+0x29c>)
 800213c:	428a      	cmp	r2, r1
 800213e:	bf18      	it	ne
 8002140:	429a      	cmpne	r2, r3
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	3118      	adds	r1, #24
 800214a:	428a      	cmp	r2, r1
 800214c:	bf08      	it	eq
 800214e:	f043 0301 	orreq.w	r3, r3, #1
 8002152:	3118      	adds	r1, #24
 8002154:	428a      	cmp	r2, r1
 8002156:	bf08      	it	eq
 8002158:	f043 0301 	orreq.w	r3, r3, #1
 800215c:	3118      	adds	r1, #24
 800215e:	428a      	cmp	r2, r1
 8002160:	bf08      	it	eq
 8002162:	f043 0301 	orreq.w	r3, r3, #1
 8002166:	3118      	adds	r1, #24
 8002168:	428a      	cmp	r2, r1
 800216a:	bf08      	it	eq
 800216c:	f043 0301 	orreq.w	r3, r3, #1
 8002170:	3118      	adds	r1, #24
 8002172:	428a      	cmp	r2, r1
 8002174:	bf08      	it	eq
 8002176:	f043 0301 	orreq.w	r3, r3, #1
 800217a:	3118      	adds	r1, #24
 800217c:	428a      	cmp	r2, r1
 800217e:	bf08      	it	eq
 8002180:	f043 0301 	orreq.w	r3, r3, #1
 8002184:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002188:	428a      	cmp	r2, r1
 800218a:	bf08      	it	eq
 800218c:	f043 0301 	orreq.w	r3, r3, #1
 8002190:	3118      	adds	r1, #24
 8002192:	428a      	cmp	r2, r1
 8002194:	bf08      	it	eq
 8002196:	f043 0301 	orreq.w	r3, r3, #1
 800219a:	3118      	adds	r1, #24
 800219c:	428a      	cmp	r2, r1
 800219e:	bf08      	it	eq
 80021a0:	f043 0301 	orreq.w	r3, r3, #1
 80021a4:	3118      	adds	r1, #24
 80021a6:	428a      	cmp	r2, r1
 80021a8:	bf08      	it	eq
 80021aa:	f043 0301 	orreq.w	r3, r3, #1
 80021ae:	3118      	adds	r1, #24
 80021b0:	428a      	cmp	r2, r1
 80021b2:	bf08      	it	eq
 80021b4:	f043 0301 	orreq.w	r3, r3, #1
 80021b8:	3118      	adds	r1, #24
 80021ba:	428a      	cmp	r2, r1
 80021bc:	bf08      	it	eq
 80021be:	f043 0301 	orreq.w	r3, r3, #1
 80021c2:	3118      	adds	r1, #24
 80021c4:	428a      	cmp	r2, r1
 80021c6:	bf08      	it	eq
 80021c8:	f043 0301 	orreq.w	r3, r3, #1
 80021cc:	3118      	adds	r1, #24
 80021ce:	428a      	cmp	r2, r1
 80021d0:	bf08      	it	eq
 80021d2:	f043 0301 	orreq.w	r3, r3, #1
 80021d6:	4917      	ldr	r1, [pc, #92]	; (8002234 <HAL_DMA_Start_IT+0x2a4>)
 80021d8:	428a      	cmp	r2, r1
 80021da:	bf08      	it	eq
 80021dc:	f043 0301 	orreq.w	r3, r3, #1
 80021e0:	3114      	adds	r1, #20
 80021e2:	428a      	cmp	r2, r1
 80021e4:	bf08      	it	eq
 80021e6:	f043 0301 	orreq.w	r3, r3, #1
 80021ea:	3114      	adds	r1, #20
 80021ec:	428a      	cmp	r2, r1
 80021ee:	bf08      	it	eq
 80021f0:	f043 0301 	orreq.w	r3, r3, #1
 80021f4:	3114      	adds	r1, #20
 80021f6:	428a      	cmp	r2, r1
 80021f8:	bf08      	it	eq
 80021fa:	f043 0301 	orreq.w	r3, r3, #1
 80021fe:	3114      	adds	r1, #20
 8002200:	428a      	cmp	r2, r1
 8002202:	bf08      	it	eq
 8002204:	f043 0301 	orreq.w	r3, r3, #1
 8002208:	3114      	adds	r1, #20
 800220a:	428a      	cmp	r2, r1
 800220c:	bf08      	it	eq
 800220e:	f043 0301 	orreq.w	r3, r3, #1
 8002212:	3114      	adds	r1, #20
 8002214:	428a      	cmp	r2, r1
 8002216:	bf08      	it	eq
 8002218:	f043 0301 	orreq.w	r3, r3, #1
 800221c:	b973      	cbnz	r3, 800223c <HAL_DMA_Start_IT+0x2ac>
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_DMA_Start_IT+0x2a8>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d11a      	bne.n	800225a <HAL_DMA_Start_IT+0x2ca>
 8002224:	e00a      	b.n	800223c <HAL_DMA_Start_IT+0x2ac>
 8002226:	bf00      	nop
 8002228:	40020010 	.word	0x40020010
 800222c:	40020028 	.word	0x40020028
 8002230:	400204b8 	.word	0x400204b8
 8002234:	58025408 	.word	0x58025408
 8002238:	58025494 	.word	0x58025494
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800223c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002244:	d003      	beq.n	800224e <HAL_DMA_Start_IT+0x2be>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800224e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002250:	b11b      	cbz	r3, 800225a <HAL_DMA_Start_IT+0x2ca>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002258:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800225a:	6822      	ldr	r2, [r4, #0]
 800225c:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_DMA_Start_IT+0x3b4>)
 800225e:	493a      	ldr	r1, [pc, #232]	; (8002348 <HAL_DMA_Start_IT+0x3b8>)
 8002260:	428a      	cmp	r2, r1
 8002262:	bf18      	it	ne
 8002264:	429a      	cmpne	r2, r3
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	3118      	adds	r1, #24
 800226e:	428a      	cmp	r2, r1
 8002270:	bf08      	it	eq
 8002272:	f043 0301 	orreq.w	r3, r3, #1
 8002276:	3118      	adds	r1, #24
 8002278:	428a      	cmp	r2, r1
 800227a:	bf08      	it	eq
 800227c:	f043 0301 	orreq.w	r3, r3, #1
 8002280:	3118      	adds	r1, #24
 8002282:	428a      	cmp	r2, r1
 8002284:	bf08      	it	eq
 8002286:	f043 0301 	orreq.w	r3, r3, #1
 800228a:	3118      	adds	r1, #24
 800228c:	428a      	cmp	r2, r1
 800228e:	bf08      	it	eq
 8002290:	f043 0301 	orreq.w	r3, r3, #1
 8002294:	3118      	adds	r1, #24
 8002296:	428a      	cmp	r2, r1
 8002298:	bf08      	it	eq
 800229a:	f043 0301 	orreq.w	r3, r3, #1
 800229e:	3118      	adds	r1, #24
 80022a0:	428a      	cmp	r2, r1
 80022a2:	bf08      	it	eq
 80022a4:	f043 0301 	orreq.w	r3, r3, #1
 80022a8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80022ac:	428a      	cmp	r2, r1
 80022ae:	bf08      	it	eq
 80022b0:	f043 0301 	orreq.w	r3, r3, #1
 80022b4:	3118      	adds	r1, #24
 80022b6:	428a      	cmp	r2, r1
 80022b8:	bf08      	it	eq
 80022ba:	f043 0301 	orreq.w	r3, r3, #1
 80022be:	3118      	adds	r1, #24
 80022c0:	428a      	cmp	r2, r1
 80022c2:	bf08      	it	eq
 80022c4:	f043 0301 	orreq.w	r3, r3, #1
 80022c8:	3118      	adds	r1, #24
 80022ca:	428a      	cmp	r2, r1
 80022cc:	bf08      	it	eq
 80022ce:	f043 0301 	orreq.w	r3, r3, #1
 80022d2:	3118      	adds	r1, #24
 80022d4:	428a      	cmp	r2, r1
 80022d6:	bf08      	it	eq
 80022d8:	f043 0301 	orreq.w	r3, r3, #1
 80022dc:	3118      	adds	r1, #24
 80022de:	428a      	cmp	r2, r1
 80022e0:	bf08      	it	eq
 80022e2:	f043 0301 	orreq.w	r3, r3, #1
 80022e6:	3118      	adds	r1, #24
 80022e8:	428a      	cmp	r2, r1
 80022ea:	bf08      	it	eq
 80022ec:	f043 0301 	orreq.w	r3, r3, #1
 80022f0:	b913      	cbnz	r3, 80022f8 <HAL_DMA_Start_IT+0x368>
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_DMA_Start_IT+0x3bc>)
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d11a      	bne.n	800232e <HAL_DMA_Start_IT+0x39e>
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002302:	e65e      	b.n	8001fc2 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_DISABLE(hdma);
 8002304:	6828      	ldr	r0, [r5, #0]
 8002306:	f020 0001 	bic.w	r0, r0, #1
 800230a:	6028      	str	r0, [r5, #0]
 800230c:	e6b3      	b.n	8002076 <HAL_DMA_Start_IT+0xe6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800230e:	6813      	ldr	r3, [r2, #0]
 8002310:	f023 030e 	bic.w	r3, r3, #14
 8002314:	f043 030a 	orr.w	r3, r3, #10
 8002318:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800231a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	f43f af0a 	beq.w	8002136 <HAL_DMA_Start_IT+0x1a6>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002322:	6822      	ldr	r2, [r4, #0]
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e703      	b.n	8002136 <HAL_DMA_Start_IT+0x1a6>
    __HAL_DMA_ENABLE(hdma);
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002336:	2000      	movs	r0, #0
 8002338:	e643      	b.n	8001fc2 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 800233a:	2001      	movs	r0, #1
}
 800233c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800233e:	2002      	movs	r0, #2
 8002340:	e63f      	b.n	8001fc2 <HAL_DMA_Start_IT+0x32>
 8002342:	bf00      	nop
 8002344:	40020010 	.word	0x40020010
 8002348:	40020028 	.word	0x40020028
 800234c:	400204b8 	.word	0x400204b8

08002350 <HAL_DMA_Abort>:
{
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002354:	f7ff f8be 	bl	80014d4 <HAL_GetTick>
  if(hdma == NULL)
 8002358:	2c00      	cmp	r4, #0
 800235a:	f000 8248 	beq.w	80027ee <HAL_DMA_Abort+0x49e>
 800235e:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002360:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d006      	beq.n	8002378 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800236e:	2300      	movs	r3, #0
 8002370:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002374:	2001      	movs	r0, #1
}
 8002376:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002378:	6822      	ldr	r2, [r4, #0]
 800237a:	4b92      	ldr	r3, [pc, #584]	; (80025c4 <HAL_DMA_Abort+0x274>)
 800237c:	4992      	ldr	r1, [pc, #584]	; (80025c8 <HAL_DMA_Abort+0x278>)
 800237e:	428a      	cmp	r2, r1
 8002380:	bf18      	it	ne
 8002382:	429a      	cmpne	r2, r3
 8002384:	bf0c      	ite	eq
 8002386:	2301      	moveq	r3, #1
 8002388:	2300      	movne	r3, #0
 800238a:	3118      	adds	r1, #24
 800238c:	428a      	cmp	r2, r1
 800238e:	bf08      	it	eq
 8002390:	f043 0301 	orreq.w	r3, r3, #1
 8002394:	3118      	adds	r1, #24
 8002396:	428a      	cmp	r2, r1
 8002398:	bf08      	it	eq
 800239a:	f043 0301 	orreq.w	r3, r3, #1
 800239e:	3118      	adds	r1, #24
 80023a0:	428a      	cmp	r2, r1
 80023a2:	bf08      	it	eq
 80023a4:	f043 0301 	orreq.w	r3, r3, #1
 80023a8:	3118      	adds	r1, #24
 80023aa:	428a      	cmp	r2, r1
 80023ac:	bf08      	it	eq
 80023ae:	f043 0301 	orreq.w	r3, r3, #1
 80023b2:	3118      	adds	r1, #24
 80023b4:	428a      	cmp	r2, r1
 80023b6:	bf08      	it	eq
 80023b8:	f043 0301 	orreq.w	r3, r3, #1
 80023bc:	3118      	adds	r1, #24
 80023be:	428a      	cmp	r2, r1
 80023c0:	bf08      	it	eq
 80023c2:	f043 0301 	orreq.w	r3, r3, #1
 80023c6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80023ca:	428a      	cmp	r2, r1
 80023cc:	bf08      	it	eq
 80023ce:	f043 0301 	orreq.w	r3, r3, #1
 80023d2:	3118      	adds	r1, #24
 80023d4:	428a      	cmp	r2, r1
 80023d6:	bf08      	it	eq
 80023d8:	f043 0301 	orreq.w	r3, r3, #1
 80023dc:	3118      	adds	r1, #24
 80023de:	428a      	cmp	r2, r1
 80023e0:	bf08      	it	eq
 80023e2:	f043 0301 	orreq.w	r3, r3, #1
 80023e6:	3118      	adds	r1, #24
 80023e8:	428a      	cmp	r2, r1
 80023ea:	bf08      	it	eq
 80023ec:	f043 0301 	orreq.w	r3, r3, #1
 80023f0:	3118      	adds	r1, #24
 80023f2:	428a      	cmp	r2, r1
 80023f4:	bf08      	it	eq
 80023f6:	f043 0301 	orreq.w	r3, r3, #1
 80023fa:	3118      	adds	r1, #24
 80023fc:	428a      	cmp	r2, r1
 80023fe:	bf08      	it	eq
 8002400:	f043 0301 	orreq.w	r3, r3, #1
 8002404:	3118      	adds	r1, #24
 8002406:	428a      	cmp	r2, r1
 8002408:	bf08      	it	eq
 800240a:	f043 0301 	orreq.w	r3, r3, #1
 800240e:	b91b      	cbnz	r3, 8002418 <HAL_DMA_Abort+0xc8>
 8002410:	4b6e      	ldr	r3, [pc, #440]	; (80025cc <HAL_DMA_Abort+0x27c>)
 8002412:	429a      	cmp	r2, r3
 8002414:	f040 80f7 	bne.w	8002606 <HAL_DMA_Abort+0x2b6>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002418:	6813      	ldr	r3, [r2, #0]
 800241a:	f023 031e 	bic.w	r3, r3, #30
 800241e:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	6953      	ldr	r3, [r2, #20]
 8002424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002428:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800242a:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <HAL_DMA_Abort+0x274>)
 8002430:	4965      	ldr	r1, [pc, #404]	; (80025c8 <HAL_DMA_Abort+0x278>)
 8002432:	428a      	cmp	r2, r1
 8002434:	bf18      	it	ne
 8002436:	429a      	cmpne	r2, r3
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	3118      	adds	r1, #24
 8002440:	428a      	cmp	r2, r1
 8002442:	bf08      	it	eq
 8002444:	f043 0301 	orreq.w	r3, r3, #1
 8002448:	3118      	adds	r1, #24
 800244a:	428a      	cmp	r2, r1
 800244c:	bf08      	it	eq
 800244e:	f043 0301 	orreq.w	r3, r3, #1
 8002452:	3118      	adds	r1, #24
 8002454:	428a      	cmp	r2, r1
 8002456:	bf08      	it	eq
 8002458:	f043 0301 	orreq.w	r3, r3, #1
 800245c:	3118      	adds	r1, #24
 800245e:	428a      	cmp	r2, r1
 8002460:	bf08      	it	eq
 8002462:	f043 0301 	orreq.w	r3, r3, #1
 8002466:	3118      	adds	r1, #24
 8002468:	428a      	cmp	r2, r1
 800246a:	bf08      	it	eq
 800246c:	f043 0301 	orreq.w	r3, r3, #1
 8002470:	3118      	adds	r1, #24
 8002472:	428a      	cmp	r2, r1
 8002474:	bf08      	it	eq
 8002476:	f043 0301 	orreq.w	r3, r3, #1
 800247a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800247e:	428a      	cmp	r2, r1
 8002480:	bf08      	it	eq
 8002482:	f043 0301 	orreq.w	r3, r3, #1
 8002486:	3118      	adds	r1, #24
 8002488:	428a      	cmp	r2, r1
 800248a:	bf08      	it	eq
 800248c:	f043 0301 	orreq.w	r3, r3, #1
 8002490:	3118      	adds	r1, #24
 8002492:	428a      	cmp	r2, r1
 8002494:	bf08      	it	eq
 8002496:	f043 0301 	orreq.w	r3, r3, #1
 800249a:	3118      	adds	r1, #24
 800249c:	428a      	cmp	r2, r1
 800249e:	bf08      	it	eq
 80024a0:	f043 0301 	orreq.w	r3, r3, #1
 80024a4:	3118      	adds	r1, #24
 80024a6:	428a      	cmp	r2, r1
 80024a8:	bf08      	it	eq
 80024aa:	f043 0301 	orreq.w	r3, r3, #1
 80024ae:	3118      	adds	r1, #24
 80024b0:	428a      	cmp	r2, r1
 80024b2:	bf08      	it	eq
 80024b4:	f043 0301 	orreq.w	r3, r3, #1
 80024b8:	3118      	adds	r1, #24
 80024ba:	428a      	cmp	r2, r1
 80024bc:	bf08      	it	eq
 80024be:	f043 0301 	orreq.w	r3, r3, #1
 80024c2:	3118      	adds	r1, #24
 80024c4:	428a      	cmp	r2, r1
 80024c6:	bf08      	it	eq
 80024c8:	f043 0301 	orreq.w	r3, r3, #1
 80024cc:	4940      	ldr	r1, [pc, #256]	; (80025d0 <HAL_DMA_Abort+0x280>)
 80024ce:	428a      	cmp	r2, r1
 80024d0:	bf08      	it	eq
 80024d2:	f043 0301 	orreq.w	r3, r3, #1
 80024d6:	3114      	adds	r1, #20
 80024d8:	428a      	cmp	r2, r1
 80024da:	bf08      	it	eq
 80024dc:	f043 0301 	orreq.w	r3, r3, #1
 80024e0:	3114      	adds	r1, #20
 80024e2:	428a      	cmp	r2, r1
 80024e4:	bf08      	it	eq
 80024e6:	f043 0301 	orreq.w	r3, r3, #1
 80024ea:	3114      	adds	r1, #20
 80024ec:	428a      	cmp	r2, r1
 80024ee:	bf08      	it	eq
 80024f0:	f043 0301 	orreq.w	r3, r3, #1
 80024f4:	3114      	adds	r1, #20
 80024f6:	428a      	cmp	r2, r1
 80024f8:	bf08      	it	eq
 80024fa:	f043 0301 	orreq.w	r3, r3, #1
 80024fe:	3114      	adds	r1, #20
 8002500:	428a      	cmp	r2, r1
 8002502:	bf08      	it	eq
 8002504:	f043 0301 	orreq.w	r3, r3, #1
 8002508:	3114      	adds	r1, #20
 800250a:	428a      	cmp	r2, r1
 800250c:	bf08      	it	eq
 800250e:	f043 0301 	orreq.w	r3, r3, #1
 8002512:	b913      	cbnz	r3, 800251a <HAL_DMA_Abort+0x1ca>
 8002514:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_DMA_Abort+0x284>)
 8002516:	429a      	cmp	r2, r3
 8002518:	d104      	bne.n	8002524 <HAL_DMA_Abort+0x1d4>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800251a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800251c:	6813      	ldr	r3, [r2, #0]
 800251e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002522:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002524:	6822      	ldr	r2, [r4, #0]
 8002526:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_DMA_Abort+0x274>)
 8002528:	4927      	ldr	r1, [pc, #156]	; (80025c8 <HAL_DMA_Abort+0x278>)
 800252a:	428a      	cmp	r2, r1
 800252c:	bf18      	it	ne
 800252e:	429a      	cmpne	r2, r3
 8002530:	bf0c      	ite	eq
 8002532:	2301      	moveq	r3, #1
 8002534:	2300      	movne	r3, #0
 8002536:	3118      	adds	r1, #24
 8002538:	428a      	cmp	r2, r1
 800253a:	bf08      	it	eq
 800253c:	f043 0301 	orreq.w	r3, r3, #1
 8002540:	3118      	adds	r1, #24
 8002542:	428a      	cmp	r2, r1
 8002544:	bf08      	it	eq
 8002546:	f043 0301 	orreq.w	r3, r3, #1
 800254a:	3118      	adds	r1, #24
 800254c:	428a      	cmp	r2, r1
 800254e:	bf08      	it	eq
 8002550:	f043 0301 	orreq.w	r3, r3, #1
 8002554:	3118      	adds	r1, #24
 8002556:	428a      	cmp	r2, r1
 8002558:	bf08      	it	eq
 800255a:	f043 0301 	orreq.w	r3, r3, #1
 800255e:	3118      	adds	r1, #24
 8002560:	428a      	cmp	r2, r1
 8002562:	bf08      	it	eq
 8002564:	f043 0301 	orreq.w	r3, r3, #1
 8002568:	3118      	adds	r1, #24
 800256a:	428a      	cmp	r2, r1
 800256c:	bf08      	it	eq
 800256e:	f043 0301 	orreq.w	r3, r3, #1
 8002572:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002576:	428a      	cmp	r2, r1
 8002578:	bf08      	it	eq
 800257a:	f043 0301 	orreq.w	r3, r3, #1
 800257e:	3118      	adds	r1, #24
 8002580:	428a      	cmp	r2, r1
 8002582:	bf08      	it	eq
 8002584:	f043 0301 	orreq.w	r3, r3, #1
 8002588:	3118      	adds	r1, #24
 800258a:	428a      	cmp	r2, r1
 800258c:	bf08      	it	eq
 800258e:	f043 0301 	orreq.w	r3, r3, #1
 8002592:	3118      	adds	r1, #24
 8002594:	428a      	cmp	r2, r1
 8002596:	bf08      	it	eq
 8002598:	f043 0301 	orreq.w	r3, r3, #1
 800259c:	3118      	adds	r1, #24
 800259e:	428a      	cmp	r2, r1
 80025a0:	bf08      	it	eq
 80025a2:	f043 0301 	orreq.w	r3, r3, #1
 80025a6:	3118      	adds	r1, #24
 80025a8:	428a      	cmp	r2, r1
 80025aa:	bf08      	it	eq
 80025ac:	f043 0301 	orreq.w	r3, r3, #1
 80025b0:	3118      	adds	r1, #24
 80025b2:	428a      	cmp	r2, r1
 80025b4:	bf08      	it	eq
 80025b6:	f043 0301 	orreq.w	r3, r3, #1
 80025ba:	b96b      	cbnz	r3, 80025d8 <HAL_DMA_Abort+0x288>
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_DMA_Abort+0x27c>)
 80025be:	429a      	cmp	r2, r3
 80025c0:	d127      	bne.n	8002612 <HAL_DMA_Abort+0x2c2>
 80025c2:	e009      	b.n	80025d8 <HAL_DMA_Abort+0x288>
 80025c4:	40020010 	.word	0x40020010
 80025c8:	40020028 	.word	0x40020028
 80025cc:	400204b8 	.word	0x400204b8
 80025d0:	58025408 	.word	0x58025408
 80025d4:	58025494 	.word	0x58025494
 80025d8:	6813      	ldr	r3, [r2, #0]
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6013      	str	r3, [r2, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025e0:	6833      	ldr	r3, [r6, #0]
 80025e2:	f013 0f01 	tst.w	r3, #1
 80025e6:	d019      	beq.n	800261c <HAL_DMA_Abort+0x2cc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e8:	f7fe ff74 	bl	80014d4 <HAL_GetTick>
 80025ec:	1b40      	subs	r0, r0, r5
 80025ee:	2805      	cmp	r0, #5
 80025f0:	d9f6      	bls.n	80025e0 <HAL_DMA_Abort+0x290>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f2:	2320      	movs	r3, #32
 80025f4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80025f6:	2303      	movs	r3, #3
 80025f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80025fc:	2300      	movs	r3, #0
 80025fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
 8002604:	e6b7      	b.n	8002376 <HAL_DMA_Abort+0x26>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	f023 030e 	bic.w	r3, r3, #14
 800260c:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800260e:	6826      	ldr	r6, [r4, #0]
 8002610:	e70c      	b.n	800242c <HAL_DMA_Abort+0xdc>
    __HAL_DMA_DISABLE(hdma);
 8002612:	6813      	ldr	r3, [r2, #0]
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e7e1      	b.n	80025e0 <HAL_DMA_Abort+0x290>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800261c:	6822      	ldr	r2, [r4, #0]
 800261e:	4b75      	ldr	r3, [pc, #468]	; (80027f4 <HAL_DMA_Abort+0x4a4>)
 8002620:	4975      	ldr	r1, [pc, #468]	; (80027f8 <HAL_DMA_Abort+0x4a8>)
 8002622:	428a      	cmp	r2, r1
 8002624:	bf18      	it	ne
 8002626:	429a      	cmpne	r2, r3
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	3118      	adds	r1, #24
 8002630:	428a      	cmp	r2, r1
 8002632:	bf08      	it	eq
 8002634:	f043 0301 	orreq.w	r3, r3, #1
 8002638:	3118      	adds	r1, #24
 800263a:	428a      	cmp	r2, r1
 800263c:	bf08      	it	eq
 800263e:	f043 0301 	orreq.w	r3, r3, #1
 8002642:	3118      	adds	r1, #24
 8002644:	428a      	cmp	r2, r1
 8002646:	bf08      	it	eq
 8002648:	f043 0301 	orreq.w	r3, r3, #1
 800264c:	3118      	adds	r1, #24
 800264e:	428a      	cmp	r2, r1
 8002650:	bf08      	it	eq
 8002652:	f043 0301 	orreq.w	r3, r3, #1
 8002656:	3118      	adds	r1, #24
 8002658:	428a      	cmp	r2, r1
 800265a:	bf08      	it	eq
 800265c:	f043 0301 	orreq.w	r3, r3, #1
 8002660:	3118      	adds	r1, #24
 8002662:	428a      	cmp	r2, r1
 8002664:	bf08      	it	eq
 8002666:	f043 0301 	orreq.w	r3, r3, #1
 800266a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800266e:	428a      	cmp	r2, r1
 8002670:	bf08      	it	eq
 8002672:	f043 0301 	orreq.w	r3, r3, #1
 8002676:	3118      	adds	r1, #24
 8002678:	428a      	cmp	r2, r1
 800267a:	bf08      	it	eq
 800267c:	f043 0301 	orreq.w	r3, r3, #1
 8002680:	3118      	adds	r1, #24
 8002682:	428a      	cmp	r2, r1
 8002684:	bf08      	it	eq
 8002686:	f043 0301 	orreq.w	r3, r3, #1
 800268a:	3118      	adds	r1, #24
 800268c:	428a      	cmp	r2, r1
 800268e:	bf08      	it	eq
 8002690:	f043 0301 	orreq.w	r3, r3, #1
 8002694:	3118      	adds	r1, #24
 8002696:	428a      	cmp	r2, r1
 8002698:	bf08      	it	eq
 800269a:	f043 0301 	orreq.w	r3, r3, #1
 800269e:	3118      	adds	r1, #24
 80026a0:	428a      	cmp	r2, r1
 80026a2:	bf08      	it	eq
 80026a4:	f043 0301 	orreq.w	r3, r3, #1
 80026a8:	3118      	adds	r1, #24
 80026aa:	428a      	cmp	r2, r1
 80026ac:	bf08      	it	eq
 80026ae:	f043 0301 	orreq.w	r3, r3, #1
 80026b2:	b91b      	cbnz	r3, 80026bc <HAL_DMA_Abort+0x36c>
 80026b4:	4b51      	ldr	r3, [pc, #324]	; (80027fc <HAL_DMA_Abort+0x4ac>)
 80026b6:	429a      	cmp	r2, r3
 80026b8:	f040 8091 	bne.w	80027de <HAL_DMA_Abort+0x48e>
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026bc:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	233f      	movs	r3, #63	; 0x3f
 80026c6:	4093      	lsls	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026ca:	6822      	ldr	r2, [r4, #0]
 80026cc:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <HAL_DMA_Abort+0x4a4>)
 80026ce:	494a      	ldr	r1, [pc, #296]	; (80027f8 <HAL_DMA_Abort+0x4a8>)
 80026d0:	428a      	cmp	r2, r1
 80026d2:	bf18      	it	ne
 80026d4:	429a      	cmpne	r2, r3
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	3118      	adds	r1, #24
 80026de:	428a      	cmp	r2, r1
 80026e0:	bf08      	it	eq
 80026e2:	f043 0301 	orreq.w	r3, r3, #1
 80026e6:	3118      	adds	r1, #24
 80026e8:	428a      	cmp	r2, r1
 80026ea:	bf08      	it	eq
 80026ec:	f043 0301 	orreq.w	r3, r3, #1
 80026f0:	3118      	adds	r1, #24
 80026f2:	428a      	cmp	r2, r1
 80026f4:	bf08      	it	eq
 80026f6:	f043 0301 	orreq.w	r3, r3, #1
 80026fa:	3118      	adds	r1, #24
 80026fc:	428a      	cmp	r2, r1
 80026fe:	bf08      	it	eq
 8002700:	f043 0301 	orreq.w	r3, r3, #1
 8002704:	3118      	adds	r1, #24
 8002706:	428a      	cmp	r2, r1
 8002708:	bf08      	it	eq
 800270a:	f043 0301 	orreq.w	r3, r3, #1
 800270e:	3118      	adds	r1, #24
 8002710:	428a      	cmp	r2, r1
 8002712:	bf08      	it	eq
 8002714:	f043 0301 	orreq.w	r3, r3, #1
 8002718:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800271c:	428a      	cmp	r2, r1
 800271e:	bf08      	it	eq
 8002720:	f043 0301 	orreq.w	r3, r3, #1
 8002724:	3118      	adds	r1, #24
 8002726:	428a      	cmp	r2, r1
 8002728:	bf08      	it	eq
 800272a:	f043 0301 	orreq.w	r3, r3, #1
 800272e:	3118      	adds	r1, #24
 8002730:	428a      	cmp	r2, r1
 8002732:	bf08      	it	eq
 8002734:	f043 0301 	orreq.w	r3, r3, #1
 8002738:	3118      	adds	r1, #24
 800273a:	428a      	cmp	r2, r1
 800273c:	bf08      	it	eq
 800273e:	f043 0301 	orreq.w	r3, r3, #1
 8002742:	3118      	adds	r1, #24
 8002744:	428a      	cmp	r2, r1
 8002746:	bf08      	it	eq
 8002748:	f043 0301 	orreq.w	r3, r3, #1
 800274c:	3118      	adds	r1, #24
 800274e:	428a      	cmp	r2, r1
 8002750:	bf08      	it	eq
 8002752:	f043 0301 	orreq.w	r3, r3, #1
 8002756:	3118      	adds	r1, #24
 8002758:	428a      	cmp	r2, r1
 800275a:	bf08      	it	eq
 800275c:	f043 0301 	orreq.w	r3, r3, #1
 8002760:	3118      	adds	r1, #24
 8002762:	428a      	cmp	r2, r1
 8002764:	bf08      	it	eq
 8002766:	f043 0301 	orreq.w	r3, r3, #1
 800276a:	4925      	ldr	r1, [pc, #148]	; (8002800 <HAL_DMA_Abort+0x4b0>)
 800276c:	428a      	cmp	r2, r1
 800276e:	bf08      	it	eq
 8002770:	f043 0301 	orreq.w	r3, r3, #1
 8002774:	3114      	adds	r1, #20
 8002776:	428a      	cmp	r2, r1
 8002778:	bf08      	it	eq
 800277a:	f043 0301 	orreq.w	r3, r3, #1
 800277e:	3114      	adds	r1, #20
 8002780:	428a      	cmp	r2, r1
 8002782:	bf08      	it	eq
 8002784:	f043 0301 	orreq.w	r3, r3, #1
 8002788:	3114      	adds	r1, #20
 800278a:	428a      	cmp	r2, r1
 800278c:	bf08      	it	eq
 800278e:	f043 0301 	orreq.w	r3, r3, #1
 8002792:	3114      	adds	r1, #20
 8002794:	428a      	cmp	r2, r1
 8002796:	bf08      	it	eq
 8002798:	f043 0301 	orreq.w	r3, r3, #1
 800279c:	3114      	adds	r1, #20
 800279e:	428a      	cmp	r2, r1
 80027a0:	bf08      	it	eq
 80027a2:	f043 0301 	orreq.w	r3, r3, #1
 80027a6:	3114      	adds	r1, #20
 80027a8:	428a      	cmp	r2, r1
 80027aa:	bf08      	it	eq
 80027ac:	f043 0301 	orreq.w	r3, r3, #1
 80027b0:	b913      	cbnz	r3, 80027b8 <HAL_DMA_Abort+0x468>
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_DMA_Abort+0x4b4>)
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10b      	bne.n	80027d0 <HAL_DMA_Abort+0x480>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027ba:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80027bc:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80027be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80027c0:	b133      	cbz	r3, 80027d0 <HAL_DMA_Abort+0x480>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c8:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80027cc:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80027ce:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 80027dc:	e5cb      	b.n	8002376 <HAL_DMA_Abort+0x26>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027de:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027e2:	f003 021f 	and.w	r2, r3, #31
 80027e6:	2301      	movs	r3, #1
 80027e8:	4093      	lsls	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
 80027ec:	e76d      	b.n	80026ca <HAL_DMA_Abort+0x37a>
    return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
 80027f0:	e5c1      	b.n	8002376 <HAL_DMA_Abort+0x26>
 80027f2:	bf00      	nop
 80027f4:	40020010 	.word	0x40020010
 80027f8:	40020028 	.word	0x40020028
 80027fc:	400204b8 	.word	0x400204b8
 8002800:	58025408 	.word	0x58025408
 8002804:	58025494 	.word	0x58025494

08002808 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8002808:	2800      	cmp	r0, #0
 800280a:	f000 8162 	beq.w	8002ad2 <HAL_DMA_Abort_IT+0x2ca>
{
 800280e:	b508      	push	{r3, lr}
 8002810:	4601      	mov	r1, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002812:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d003      	beq.n	8002824 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002820:	2001      	movs	r0, #1
}
 8002822:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002824:	6802      	ldr	r2, [r0, #0]
 8002826:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_DMA_Abort_IT+0xcc>)
 8002828:	482b      	ldr	r0, [pc, #172]	; (80028d8 <HAL_DMA_Abort_IT+0xd0>)
 800282a:	4282      	cmp	r2, r0
 800282c:	bf18      	it	ne
 800282e:	429a      	cmpne	r2, r3
 8002830:	bf0c      	ite	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	2300      	movne	r3, #0
 8002836:	3018      	adds	r0, #24
 8002838:	4282      	cmp	r2, r0
 800283a:	bf08      	it	eq
 800283c:	f043 0301 	orreq.w	r3, r3, #1
 8002840:	3018      	adds	r0, #24
 8002842:	4282      	cmp	r2, r0
 8002844:	bf08      	it	eq
 8002846:	f043 0301 	orreq.w	r3, r3, #1
 800284a:	3018      	adds	r0, #24
 800284c:	4282      	cmp	r2, r0
 800284e:	bf08      	it	eq
 8002850:	f043 0301 	orreq.w	r3, r3, #1
 8002854:	3018      	adds	r0, #24
 8002856:	4282      	cmp	r2, r0
 8002858:	bf08      	it	eq
 800285a:	f043 0301 	orreq.w	r3, r3, #1
 800285e:	3018      	adds	r0, #24
 8002860:	4282      	cmp	r2, r0
 8002862:	bf08      	it	eq
 8002864:	f043 0301 	orreq.w	r3, r3, #1
 8002868:	3018      	adds	r0, #24
 800286a:	4282      	cmp	r2, r0
 800286c:	bf08      	it	eq
 800286e:	f043 0301 	orreq.w	r3, r3, #1
 8002872:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002876:	4282      	cmp	r2, r0
 8002878:	bf08      	it	eq
 800287a:	f043 0301 	orreq.w	r3, r3, #1
 800287e:	3018      	adds	r0, #24
 8002880:	4282      	cmp	r2, r0
 8002882:	bf08      	it	eq
 8002884:	f043 0301 	orreq.w	r3, r3, #1
 8002888:	3018      	adds	r0, #24
 800288a:	4282      	cmp	r2, r0
 800288c:	bf08      	it	eq
 800288e:	f043 0301 	orreq.w	r3, r3, #1
 8002892:	3018      	adds	r0, #24
 8002894:	4282      	cmp	r2, r0
 8002896:	bf08      	it	eq
 8002898:	f043 0301 	orreq.w	r3, r3, #1
 800289c:	3018      	adds	r0, #24
 800289e:	4282      	cmp	r2, r0
 80028a0:	bf08      	it	eq
 80028a2:	f043 0301 	orreq.w	r3, r3, #1
 80028a6:	3018      	adds	r0, #24
 80028a8:	4282      	cmp	r2, r0
 80028aa:	bf08      	it	eq
 80028ac:	f043 0301 	orreq.w	r3, r3, #1
 80028b0:	3018      	adds	r0, #24
 80028b2:	4282      	cmp	r2, r0
 80028b4:	bf08      	it	eq
 80028b6:	f043 0301 	orreq.w	r3, r3, #1
 80028ba:	b913      	cbnz	r3, 80028c2 <HAL_DMA_Abort_IT+0xba>
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_DMA_Abort_IT+0xd4>)
 80028be:	429a      	cmp	r2, r3
 80028c0:	d10e      	bne.n	80028e0 <HAL_DMA_Abort_IT+0xd8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c2:	2304      	movs	r3, #4
 80028c4:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80028c8:	6813      	ldr	r3, [r2, #0]
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80028d0:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 80028d2:	e7a6      	b.n	8002822 <HAL_DMA_Abort_IT+0x1a>
 80028d4:	40020010 	.word	0x40020010
 80028d8:	40020028 	.word	0x40020028
 80028dc:	400204b8 	.word	0x400204b8
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028e0:	6813      	ldr	r3, [r2, #0]
 80028e2:	f023 030e 	bic.w	r3, r3, #14
 80028e6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 80028e8:	680a      	ldr	r2, [r1, #0]
 80028ea:	4b7c      	ldr	r3, [pc, #496]	; (8002adc <HAL_DMA_Abort_IT+0x2d4>)
 80028ec:	f5a0 608f 	sub.w	r0, r0, #1144	; 0x478
 80028f0:	4282      	cmp	r2, r0
 80028f2:	bf18      	it	ne
 80028f4:	429a      	cmpne	r2, r3
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	3018      	adds	r0, #24
 80028fe:	4282      	cmp	r2, r0
 8002900:	bf08      	it	eq
 8002902:	f043 0301 	orreq.w	r3, r3, #1
 8002906:	3018      	adds	r0, #24
 8002908:	4282      	cmp	r2, r0
 800290a:	bf08      	it	eq
 800290c:	f043 0301 	orreq.w	r3, r3, #1
 8002910:	3018      	adds	r0, #24
 8002912:	4282      	cmp	r2, r0
 8002914:	bf08      	it	eq
 8002916:	f043 0301 	orreq.w	r3, r3, #1
 800291a:	3018      	adds	r0, #24
 800291c:	4282      	cmp	r2, r0
 800291e:	bf08      	it	eq
 8002920:	f043 0301 	orreq.w	r3, r3, #1
 8002924:	3018      	adds	r0, #24
 8002926:	4282      	cmp	r2, r0
 8002928:	bf08      	it	eq
 800292a:	f043 0301 	orreq.w	r3, r3, #1
 800292e:	3018      	adds	r0, #24
 8002930:	4282      	cmp	r2, r0
 8002932:	bf08      	it	eq
 8002934:	f043 0301 	orreq.w	r3, r3, #1
 8002938:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800293c:	4282      	cmp	r2, r0
 800293e:	bf08      	it	eq
 8002940:	f043 0301 	orreq.w	r3, r3, #1
 8002944:	3018      	adds	r0, #24
 8002946:	4282      	cmp	r2, r0
 8002948:	bf08      	it	eq
 800294a:	f043 0301 	orreq.w	r3, r3, #1
 800294e:	3018      	adds	r0, #24
 8002950:	4282      	cmp	r2, r0
 8002952:	bf08      	it	eq
 8002954:	f043 0301 	orreq.w	r3, r3, #1
 8002958:	3018      	adds	r0, #24
 800295a:	4282      	cmp	r2, r0
 800295c:	bf08      	it	eq
 800295e:	f043 0301 	orreq.w	r3, r3, #1
 8002962:	3018      	adds	r0, #24
 8002964:	4282      	cmp	r2, r0
 8002966:	bf08      	it	eq
 8002968:	f043 0301 	orreq.w	r3, r3, #1
 800296c:	3018      	adds	r0, #24
 800296e:	4282      	cmp	r2, r0
 8002970:	bf08      	it	eq
 8002972:	f043 0301 	orreq.w	r3, r3, #1
 8002976:	3018      	adds	r0, #24
 8002978:	4282      	cmp	r2, r0
 800297a:	bf08      	it	eq
 800297c:	f043 0301 	orreq.w	r3, r3, #1
 8002980:	b91b      	cbnz	r3, 800298a <HAL_DMA_Abort_IT+0x182>
 8002982:	4b57      	ldr	r3, [pc, #348]	; (8002ae0 <HAL_DMA_Abort_IT+0x2d8>)
 8002984:	429a      	cmp	r2, r3
 8002986:	f040 809f 	bne.w	8002ac8 <HAL_DMA_Abort_IT+0x2c0>
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	6013      	str	r3, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002992:	680a      	ldr	r2, [r1, #0]
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <HAL_DMA_Abort_IT+0x2d4>)
 8002996:	4853      	ldr	r0, [pc, #332]	; (8002ae4 <HAL_DMA_Abort_IT+0x2dc>)
 8002998:	4282      	cmp	r2, r0
 800299a:	bf18      	it	ne
 800299c:	429a      	cmpne	r2, r3
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	3018      	adds	r0, #24
 80029a6:	4282      	cmp	r2, r0
 80029a8:	bf08      	it	eq
 80029aa:	f043 0301 	orreq.w	r3, r3, #1
 80029ae:	3018      	adds	r0, #24
 80029b0:	4282      	cmp	r2, r0
 80029b2:	bf08      	it	eq
 80029b4:	f043 0301 	orreq.w	r3, r3, #1
 80029b8:	3018      	adds	r0, #24
 80029ba:	4282      	cmp	r2, r0
 80029bc:	bf08      	it	eq
 80029be:	f043 0301 	orreq.w	r3, r3, #1
 80029c2:	3018      	adds	r0, #24
 80029c4:	4282      	cmp	r2, r0
 80029c6:	bf08      	it	eq
 80029c8:	f043 0301 	orreq.w	r3, r3, #1
 80029cc:	3018      	adds	r0, #24
 80029ce:	4282      	cmp	r2, r0
 80029d0:	bf08      	it	eq
 80029d2:	f043 0301 	orreq.w	r3, r3, #1
 80029d6:	3018      	adds	r0, #24
 80029d8:	4282      	cmp	r2, r0
 80029da:	bf08      	it	eq
 80029dc:	f043 0301 	orreq.w	r3, r3, #1
 80029e0:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80029e4:	4282      	cmp	r2, r0
 80029e6:	bf08      	it	eq
 80029e8:	f043 0301 	orreq.w	r3, r3, #1
 80029ec:	3018      	adds	r0, #24
 80029ee:	4282      	cmp	r2, r0
 80029f0:	bf08      	it	eq
 80029f2:	f043 0301 	orreq.w	r3, r3, #1
 80029f6:	3018      	adds	r0, #24
 80029f8:	4282      	cmp	r2, r0
 80029fa:	bf08      	it	eq
 80029fc:	f043 0301 	orreq.w	r3, r3, #1
 8002a00:	3018      	adds	r0, #24
 8002a02:	4282      	cmp	r2, r0
 8002a04:	bf08      	it	eq
 8002a06:	f043 0301 	orreq.w	r3, r3, #1
 8002a0a:	3018      	adds	r0, #24
 8002a0c:	4282      	cmp	r2, r0
 8002a0e:	bf08      	it	eq
 8002a10:	f043 0301 	orreq.w	r3, r3, #1
 8002a14:	3018      	adds	r0, #24
 8002a16:	4282      	cmp	r2, r0
 8002a18:	bf08      	it	eq
 8002a1a:	f043 0301 	orreq.w	r3, r3, #1
 8002a1e:	3018      	adds	r0, #24
 8002a20:	4282      	cmp	r2, r0
 8002a22:	bf08      	it	eq
 8002a24:	f043 0301 	orreq.w	r3, r3, #1
 8002a28:	3018      	adds	r0, #24
 8002a2a:	4282      	cmp	r2, r0
 8002a2c:	bf08      	it	eq
 8002a2e:	f043 0301 	orreq.w	r3, r3, #1
 8002a32:	482d      	ldr	r0, [pc, #180]	; (8002ae8 <HAL_DMA_Abort_IT+0x2e0>)
 8002a34:	4282      	cmp	r2, r0
 8002a36:	bf08      	it	eq
 8002a38:	f043 0301 	orreq.w	r3, r3, #1
 8002a3c:	3014      	adds	r0, #20
 8002a3e:	4282      	cmp	r2, r0
 8002a40:	bf08      	it	eq
 8002a42:	f043 0301 	orreq.w	r3, r3, #1
 8002a46:	3014      	adds	r0, #20
 8002a48:	4282      	cmp	r2, r0
 8002a4a:	bf08      	it	eq
 8002a4c:	f043 0301 	orreq.w	r3, r3, #1
 8002a50:	3014      	adds	r0, #20
 8002a52:	4282      	cmp	r2, r0
 8002a54:	bf08      	it	eq
 8002a56:	f043 0301 	orreq.w	r3, r3, #1
 8002a5a:	3014      	adds	r0, #20
 8002a5c:	4282      	cmp	r2, r0
 8002a5e:	bf08      	it	eq
 8002a60:	f043 0301 	orreq.w	r3, r3, #1
 8002a64:	3014      	adds	r0, #20
 8002a66:	4282      	cmp	r2, r0
 8002a68:	bf08      	it	eq
 8002a6a:	f043 0301 	orreq.w	r3, r3, #1
 8002a6e:	3014      	adds	r0, #20
 8002a70:	4282      	cmp	r2, r0
 8002a72:	bf08      	it	eq
 8002a74:	f043 0301 	orreq.w	r3, r3, #1
 8002a78:	b913      	cbnz	r3, 8002a80 <HAL_DMA_Abort_IT+0x278>
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_DMA_Abort_IT+0x2e4>)
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d117      	bne.n	8002ab0 <HAL_DMA_Abort_IT+0x2a8>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a80:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8a:	6d88      	ldr	r0, [r1, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a8c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8002a8e:	f003 021f 	and.w	r2, r3, #31
 8002a92:	2301      	movs	r3, #1
 8002a94:	4093      	lsls	r3, r2
 8002a96:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a98:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8002a9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 8002a9c:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002a9e:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 8002aa0:	b133      	cbz	r3, 8002ab0 <HAL_DMA_Abort_IT+0x2a8>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa8:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aaa:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002aac:	6f4a      	ldr	r2, [r1, #116]	; 0x74
 8002aae:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8002abc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8002abe:	b153      	cbz	r3, 8002ad6 <HAL_DMA_Abort_IT+0x2ce>
        hdma->XferAbortCallback(hdma);
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4798      	blx	r3
  return HAL_OK;
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	e6ac      	b.n	8002822 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8002ac8:	6813      	ldr	r3, [r2, #0]
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e75f      	b.n	8002992 <HAL_DMA_Abort_IT+0x18a>
    return HAL_ERROR;
 8002ad2:	2001      	movs	r0, #1
}
 8002ad4:	4770      	bx	lr
  return HAL_OK;
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e6a3      	b.n	8002822 <HAL_DMA_Abort_IT+0x1a>
 8002ada:	bf00      	nop
 8002adc:	40020010 	.word	0x40020010
 8002ae0:	400204b8 	.word	0x400204b8
 8002ae4:	40020028 	.word	0x40020028
 8002ae8:	58025408 	.word	0x58025408
 8002aec:	58025494 	.word	0x58025494

08002af0 <HAL_DMA_IRQHandler>:
{
 8002af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af2:	b083      	sub	sp, #12
 8002af4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002afa:	4b95      	ldr	r3, [pc, #596]	; (8002d50 <HAL_DMA_IRQHandler+0x260>)
 8002afc:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002afe:	6d86      	ldr	r6, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8002b00:	6835      	ldr	r5, [r6, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8002b02:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b04:	6802      	ldr	r2, [r0, #0]
 8002b06:	4b93      	ldr	r3, [pc, #588]	; (8002d54 <HAL_DMA_IRQHandler+0x264>)
 8002b08:	4893      	ldr	r0, [pc, #588]	; (8002d58 <HAL_DMA_IRQHandler+0x268>)
 8002b0a:	4282      	cmp	r2, r0
 8002b0c:	bf18      	it	ne
 8002b0e:	429a      	cmpne	r2, r3
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	3018      	adds	r0, #24
 8002b18:	4282      	cmp	r2, r0
 8002b1a:	bf08      	it	eq
 8002b1c:	f043 0301 	orreq.w	r3, r3, #1
 8002b20:	3018      	adds	r0, #24
 8002b22:	4282      	cmp	r2, r0
 8002b24:	bf08      	it	eq
 8002b26:	f043 0301 	orreq.w	r3, r3, #1
 8002b2a:	3018      	adds	r0, #24
 8002b2c:	4282      	cmp	r2, r0
 8002b2e:	bf08      	it	eq
 8002b30:	f043 0301 	orreq.w	r3, r3, #1
 8002b34:	3018      	adds	r0, #24
 8002b36:	4282      	cmp	r2, r0
 8002b38:	bf08      	it	eq
 8002b3a:	f043 0301 	orreq.w	r3, r3, #1
 8002b3e:	3018      	adds	r0, #24
 8002b40:	4282      	cmp	r2, r0
 8002b42:	bf08      	it	eq
 8002b44:	f043 0301 	orreq.w	r3, r3, #1
 8002b48:	3018      	adds	r0, #24
 8002b4a:	4282      	cmp	r2, r0
 8002b4c:	bf08      	it	eq
 8002b4e:	f043 0301 	orreq.w	r3, r3, #1
 8002b52:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002b56:	4282      	cmp	r2, r0
 8002b58:	bf08      	it	eq
 8002b5a:	f043 0301 	orreq.w	r3, r3, #1
 8002b5e:	3018      	adds	r0, #24
 8002b60:	4282      	cmp	r2, r0
 8002b62:	bf08      	it	eq
 8002b64:	f043 0301 	orreq.w	r3, r3, #1
 8002b68:	3018      	adds	r0, #24
 8002b6a:	4282      	cmp	r2, r0
 8002b6c:	bf08      	it	eq
 8002b6e:	f043 0301 	orreq.w	r3, r3, #1
 8002b72:	3018      	adds	r0, #24
 8002b74:	4282      	cmp	r2, r0
 8002b76:	bf08      	it	eq
 8002b78:	f043 0301 	orreq.w	r3, r3, #1
 8002b7c:	3018      	adds	r0, #24
 8002b7e:	4282      	cmp	r2, r0
 8002b80:	bf08      	it	eq
 8002b82:	f043 0301 	orreq.w	r3, r3, #1
 8002b86:	3018      	adds	r0, #24
 8002b88:	4282      	cmp	r2, r0
 8002b8a:	bf08      	it	eq
 8002b8c:	f043 0301 	orreq.w	r3, r3, #1
 8002b90:	3018      	adds	r0, #24
 8002b92:	4282      	cmp	r2, r0
 8002b94:	bf08      	it	eq
 8002b96:	f043 0301 	orreq.w	r3, r3, #1
 8002b9a:	b91b      	cbnz	r3, 8002ba4 <HAL_DMA_IRQHandler+0xb4>
 8002b9c:	4b6f      	ldr	r3, [pc, #444]	; (8002d5c <HAL_DMA_IRQHandler+0x26c>)
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	f040 8082 	bne.w	8002ca8 <HAL_DMA_IRQHandler+0x1b8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ba4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2108      	movs	r1, #8
 8002bac:	4099      	lsls	r1, r3
 8002bae:	4229      	tst	r1, r5
 8002bb0:	f000 83be 	beq.w	8003330 <HAL_DMA_IRQHandler+0x840>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002bb4:	6811      	ldr	r1, [r2, #0]
 8002bb6:	f011 0f04 	tst.w	r1, #4
 8002bba:	f000 83b9 	beq.w	8003330 <HAL_DMA_IRQHandler+0x840>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002bbe:	6813      	ldr	r3, [r2, #0]
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6013      	str	r3, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bc6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	2308      	movs	r3, #8
 8002bce:	4093      	lsls	r3, r2
 8002bd0:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa25 f203 	lsr.w	r2, r5, r3
 8002be4:	f012 0f01 	tst.w	r2, #1
 8002be8:	f000 80c8 	beq.w	8002d7c <HAL_DMA_IRQHandler+0x28c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002bec:	6822      	ldr	r2, [r4, #0]
 8002bee:	4959      	ldr	r1, [pc, #356]	; (8002d54 <HAL_DMA_IRQHandler+0x264>)
 8002bf0:	4859      	ldr	r0, [pc, #356]	; (8002d58 <HAL_DMA_IRQHandler+0x268>)
 8002bf2:	4282      	cmp	r2, r0
 8002bf4:	bf18      	it	ne
 8002bf6:	428a      	cmpne	r2, r1
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2101      	moveq	r1, #1
 8002bfc:	2100      	movne	r1, #0
 8002bfe:	3018      	adds	r0, #24
 8002c00:	4282      	cmp	r2, r0
 8002c02:	bf08      	it	eq
 8002c04:	f041 0101 	orreq.w	r1, r1, #1
 8002c08:	3018      	adds	r0, #24
 8002c0a:	4282      	cmp	r2, r0
 8002c0c:	bf08      	it	eq
 8002c0e:	f041 0101 	orreq.w	r1, r1, #1
 8002c12:	3018      	adds	r0, #24
 8002c14:	4282      	cmp	r2, r0
 8002c16:	bf08      	it	eq
 8002c18:	f041 0101 	orreq.w	r1, r1, #1
 8002c1c:	3018      	adds	r0, #24
 8002c1e:	4282      	cmp	r2, r0
 8002c20:	bf08      	it	eq
 8002c22:	f041 0101 	orreq.w	r1, r1, #1
 8002c26:	3018      	adds	r0, #24
 8002c28:	4282      	cmp	r2, r0
 8002c2a:	bf08      	it	eq
 8002c2c:	f041 0101 	orreq.w	r1, r1, #1
 8002c30:	3018      	adds	r0, #24
 8002c32:	4282      	cmp	r2, r0
 8002c34:	bf08      	it	eq
 8002c36:	f041 0101 	orreq.w	r1, r1, #1
 8002c3a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002c3e:	4282      	cmp	r2, r0
 8002c40:	bf08      	it	eq
 8002c42:	f041 0101 	orreq.w	r1, r1, #1
 8002c46:	3018      	adds	r0, #24
 8002c48:	4282      	cmp	r2, r0
 8002c4a:	bf08      	it	eq
 8002c4c:	f041 0101 	orreq.w	r1, r1, #1
 8002c50:	3018      	adds	r0, #24
 8002c52:	4282      	cmp	r2, r0
 8002c54:	bf08      	it	eq
 8002c56:	f041 0101 	orreq.w	r1, r1, #1
 8002c5a:	3018      	adds	r0, #24
 8002c5c:	4282      	cmp	r2, r0
 8002c5e:	bf08      	it	eq
 8002c60:	f041 0101 	orreq.w	r1, r1, #1
 8002c64:	3018      	adds	r0, #24
 8002c66:	4282      	cmp	r2, r0
 8002c68:	bf08      	it	eq
 8002c6a:	f041 0101 	orreq.w	r1, r1, #1
 8002c6e:	3018      	adds	r0, #24
 8002c70:	4282      	cmp	r2, r0
 8002c72:	bf08      	it	eq
 8002c74:	f041 0101 	orreq.w	r1, r1, #1
 8002c78:	3018      	adds	r0, #24
 8002c7a:	4282      	cmp	r2, r0
 8002c7c:	bf08      	it	eq
 8002c7e:	f041 0101 	orreq.w	r1, r1, #1
 8002c82:	b911      	cbnz	r1, 8002c8a <HAL_DMA_IRQHandler+0x19a>
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_DMA_IRQHandler+0x26c>)
 8002c86:	428a      	cmp	r2, r1
 8002c88:	d151      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x23e>
 8002c8a:	6952      	ldr	r2, [r2, #20]
 8002c8c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c90:	d16c      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x27c>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c92:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002c94:	f001 011f 	and.w	r1, r1, #31
 8002c98:	2304      	movs	r3, #4
 8002c9a:	fa03 f101 	lsl.w	r1, r3, r1
 8002c9e:	420d      	tst	r5, r1
 8002ca0:	f000 80d9 	beq.w	8002e56 <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ca4:	6822      	ldr	r2, [r4, #0]
 8002ca6:	e353      	b.n	8003350 <HAL_DMA_IRQHandler+0x860>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_DMA_IRQHandler+0x270>)
 8002caa:	482e      	ldr	r0, [pc, #184]	; (8002d64 <HAL_DMA_IRQHandler+0x274>)
 8002cac:	4282      	cmp	r2, r0
 8002cae:	bf18      	it	ne
 8002cb0:	429a      	cmpne	r2, r3
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	3014      	adds	r0, #20
 8002cba:	4282      	cmp	r2, r0
 8002cbc:	bf08      	it	eq
 8002cbe:	f043 0301 	orreq.w	r3, r3, #1
 8002cc2:	3014      	adds	r0, #20
 8002cc4:	4282      	cmp	r2, r0
 8002cc6:	bf08      	it	eq
 8002cc8:	f043 0301 	orreq.w	r3, r3, #1
 8002ccc:	3014      	adds	r0, #20
 8002cce:	4282      	cmp	r2, r0
 8002cd0:	bf08      	it	eq
 8002cd2:	f043 0301 	orreq.w	r3, r3, #1
 8002cd6:	3014      	adds	r0, #20
 8002cd8:	4282      	cmp	r2, r0
 8002cda:	bf08      	it	eq
 8002cdc:	f043 0301 	orreq.w	r3, r3, #1
 8002ce0:	3014      	adds	r0, #20
 8002ce2:	4282      	cmp	r2, r0
 8002ce4:	bf08      	it	eq
 8002ce6:	f043 0301 	orreq.w	r3, r3, #1
 8002cea:	b91b      	cbnz	r3, 8002cf4 <HAL_DMA_IRQHandler+0x204>
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <HAL_DMA_IRQHandler+0x278>)
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	f040 81fd 	bne.w	80030ee <HAL_DMA_IRQHandler+0x5fe>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002cf4:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002cf6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002cf8:	f000 001f 	and.w	r0, r0, #31
 8002cfc:	2504      	movs	r5, #4
 8002cfe:	4085      	lsls	r5, r0
 8002d00:	420d      	tst	r5, r1
 8002d02:	f000 8262 	beq.w	80031ca <HAL_DMA_IRQHandler+0x6da>
 8002d06:	f013 0f04 	tst.w	r3, #4
 8002d0a:	f000 825e 	beq.w	80031ca <HAL_DMA_IRQHandler+0x6da>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002d0e:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d10:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002d14:	f000 81f8 	beq.w	8003108 <HAL_DMA_IRQHandler+0x618>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d1c:	f040 81ee 	bne.w	80030fc <HAL_DMA_IRQHandler+0x60c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 81e3 	beq.w	80030ee <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferM1HalfCpltCallback(hdma);
 8002d28:	4620      	mov	r0, r4
 8002d2a:	4798      	blx	r3
 8002d2c:	e1df      	b.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d2e:	6811      	ldr	r1, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d30:	2104      	movs	r1, #4
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	422b      	tst	r3, r5
 8002d38:	d17a      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x340>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2110      	movs	r1, #16
 8002d42:	4099      	lsls	r1, r3
 8002d44:	420d      	tst	r5, r1
 8002d46:	f000 8310 	beq.w	800336a <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	e07a      	b.n	8002e44 <HAL_DMA_IRQHandler+0x354>
 8002d4e:	bf00      	nop
 8002d50:	24002000 	.word	0x24002000
 8002d54:	40020010 	.word	0x40020010
 8002d58:	40020028 	.word	0x40020028
 8002d5c:	400204b8 	.word	0x400204b8
 8002d60:	58025408 	.word	0x58025408
 8002d64:	5802541c 	.word	0x5802541c
 8002d68:	58025494 	.word	0x58025494
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002d7e:	f001 011f 	and.w	r1, r1, #31
 8002d82:	2304      	movs	r3, #4
 8002d84:	fa03 f101 	lsl.w	r1, r3, r1
 8002d88:	4229      	tst	r1, r5
 8002d8a:	d064      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d8c:	6822      	ldr	r2, [r4, #0]
 8002d8e:	4b8e      	ldr	r3, [pc, #568]	; (8002fc8 <HAL_DMA_IRQHandler+0x4d8>)
 8002d90:	488e      	ldr	r0, [pc, #568]	; (8002fcc <HAL_DMA_IRQHandler+0x4dc>)
 8002d92:	4282      	cmp	r2, r0
 8002d94:	bf18      	it	ne
 8002d96:	429a      	cmpne	r2, r3
 8002d98:	bf0c      	ite	eq
 8002d9a:	2301      	moveq	r3, #1
 8002d9c:	2300      	movne	r3, #0
 8002d9e:	3018      	adds	r0, #24
 8002da0:	4282      	cmp	r2, r0
 8002da2:	bf08      	it	eq
 8002da4:	f043 0301 	orreq.w	r3, r3, #1
 8002da8:	3018      	adds	r0, #24
 8002daa:	4282      	cmp	r2, r0
 8002dac:	bf08      	it	eq
 8002dae:	f043 0301 	orreq.w	r3, r3, #1
 8002db2:	3018      	adds	r0, #24
 8002db4:	4282      	cmp	r2, r0
 8002db6:	bf08      	it	eq
 8002db8:	f043 0301 	orreq.w	r3, r3, #1
 8002dbc:	3018      	adds	r0, #24
 8002dbe:	4282      	cmp	r2, r0
 8002dc0:	bf08      	it	eq
 8002dc2:	f043 0301 	orreq.w	r3, r3, #1
 8002dc6:	3018      	adds	r0, #24
 8002dc8:	4282      	cmp	r2, r0
 8002dca:	bf08      	it	eq
 8002dcc:	f043 0301 	orreq.w	r3, r3, #1
 8002dd0:	3018      	adds	r0, #24
 8002dd2:	4282      	cmp	r2, r0
 8002dd4:	bf08      	it	eq
 8002dd6:	f043 0301 	orreq.w	r3, r3, #1
 8002dda:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002dde:	4282      	cmp	r2, r0
 8002de0:	bf08      	it	eq
 8002de2:	f043 0301 	orreq.w	r3, r3, #1
 8002de6:	3018      	adds	r0, #24
 8002de8:	4282      	cmp	r2, r0
 8002dea:	bf08      	it	eq
 8002dec:	f043 0301 	orreq.w	r3, r3, #1
 8002df0:	3018      	adds	r0, #24
 8002df2:	4282      	cmp	r2, r0
 8002df4:	bf08      	it	eq
 8002df6:	f043 0301 	orreq.w	r3, r3, #1
 8002dfa:	3018      	adds	r0, #24
 8002dfc:	4282      	cmp	r2, r0
 8002dfe:	bf08      	it	eq
 8002e00:	f043 0301 	orreq.w	r3, r3, #1
 8002e04:	3018      	adds	r0, #24
 8002e06:	4282      	cmp	r2, r0
 8002e08:	bf08      	it	eq
 8002e0a:	f043 0301 	orreq.w	r3, r3, #1
 8002e0e:	3018      	adds	r0, #24
 8002e10:	4282      	cmp	r2, r0
 8002e12:	bf08      	it	eq
 8002e14:	f043 0301 	orreq.w	r3, r3, #1
 8002e18:	3018      	adds	r0, #24
 8002e1a:	4282      	cmp	r2, r0
 8002e1c:	bf08      	it	eq
 8002e1e:	f043 0301 	orreq.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 8294 	bne.w	8003350 <HAL_DMA_IRQHandler+0x860>
 8002e28:	4b69      	ldr	r3, [pc, #420]	; (8002fd0 <HAL_DMA_IRQHandler+0x4e0>)
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	f000 8290 	beq.w	8003350 <HAL_DMA_IRQHandler+0x860>
 8002e30:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2110      	movs	r1, #16
 8002e3a:	4099      	lsls	r1, r3
 8002e3c:	420d      	tst	r5, r1
 8002e3e:	f000 8294 	beq.w	800336a <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	6813      	ldr	r3, [r2, #0]
 8002e46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e4a:	e062      	b.n	8002f12 <HAL_DMA_IRQHandler+0x422>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e4c:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e56:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002e58:	f001 011f 	and.w	r1, r1, #31
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	fa03 f101 	lsl.w	r1, r3, r1
 8002e62:	4229      	tst	r1, r5
 8002e64:	f000 8281 	beq.w	800336a <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e68:	6822      	ldr	r2, [r4, #0]
 8002e6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e6e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002e72:	4856      	ldr	r0, [pc, #344]	; (8002fcc <HAL_DMA_IRQHandler+0x4dc>)
 8002e74:	4282      	cmp	r2, r0
 8002e76:	bf18      	it	ne
 8002e78:	429a      	cmpne	r2, r3
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	3018      	adds	r0, #24
 8002e82:	4282      	cmp	r2, r0
 8002e84:	bf08      	it	eq
 8002e86:	f043 0301 	orreq.w	r3, r3, #1
 8002e8a:	3018      	adds	r0, #24
 8002e8c:	4282      	cmp	r2, r0
 8002e8e:	bf08      	it	eq
 8002e90:	f043 0301 	orreq.w	r3, r3, #1
 8002e94:	3018      	adds	r0, #24
 8002e96:	4282      	cmp	r2, r0
 8002e98:	bf08      	it	eq
 8002e9a:	f043 0301 	orreq.w	r3, r3, #1
 8002e9e:	3018      	adds	r0, #24
 8002ea0:	4282      	cmp	r2, r0
 8002ea2:	bf08      	it	eq
 8002ea4:	f043 0301 	orreq.w	r3, r3, #1
 8002ea8:	3018      	adds	r0, #24
 8002eaa:	4282      	cmp	r2, r0
 8002eac:	bf08      	it	eq
 8002eae:	f043 0301 	orreq.w	r3, r3, #1
 8002eb2:	3018      	adds	r0, #24
 8002eb4:	4282      	cmp	r2, r0
 8002eb6:	bf08      	it	eq
 8002eb8:	f043 0301 	orreq.w	r3, r3, #1
 8002ebc:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002ec0:	4282      	cmp	r2, r0
 8002ec2:	bf08      	it	eq
 8002ec4:	f043 0301 	orreq.w	r3, r3, #1
 8002ec8:	3018      	adds	r0, #24
 8002eca:	4282      	cmp	r2, r0
 8002ecc:	bf08      	it	eq
 8002ece:	f043 0301 	orreq.w	r3, r3, #1
 8002ed2:	3018      	adds	r0, #24
 8002ed4:	4282      	cmp	r2, r0
 8002ed6:	bf08      	it	eq
 8002ed8:	f043 0301 	orreq.w	r3, r3, #1
 8002edc:	3018      	adds	r0, #24
 8002ede:	4282      	cmp	r2, r0
 8002ee0:	bf08      	it	eq
 8002ee2:	f043 0301 	orreq.w	r3, r3, #1
 8002ee6:	3018      	adds	r0, #24
 8002ee8:	4282      	cmp	r2, r0
 8002eea:	bf08      	it	eq
 8002eec:	f043 0301 	orreq.w	r3, r3, #1
 8002ef0:	3018      	adds	r0, #24
 8002ef2:	4282      	cmp	r2, r0
 8002ef4:	bf08      	it	eq
 8002ef6:	f043 0301 	orreq.w	r3, r3, #1
 8002efa:	3018      	adds	r0, #24
 8002efc:	4282      	cmp	r2, r0
 8002efe:	bf08      	it	eq
 8002f00:	f043 0301 	orreq.w	r3, r3, #1
 8002f04:	b913      	cbnz	r3, 8002f0c <HAL_DMA_IRQHandler+0x41c>
 8002f06:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_DMA_IRQHandler+0x4e0>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d19b      	bne.n	8002e44 <HAL_DMA_IRQHandler+0x354>
 8002f0c:	6813      	ldr	r3, [r2, #0]
 8002f0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8229 	beq.w	800336a <HAL_DMA_IRQHandler+0x87a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f18:	60b1      	str	r1, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002f22:	d011      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x458>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002f2a:	d106      	bne.n	8002f3a <HAL_DMA_IRQHandler+0x44a>
            if(hdma->XferHalfCpltCallback != NULL)
 8002f2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 821b 	beq.w	800336a <HAL_DMA_IRQHandler+0x87a>
              hdma->XferHalfCpltCallback(hdma);
 8002f34:	4620      	mov	r0, r4
 8002f36:	4798      	blx	r3
 8002f38:	e217      	b.n	800336a <HAL_DMA_IRQHandler+0x87a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8214 	beq.w	800336a <HAL_DMA_IRQHandler+0x87a>
              hdma->XferM1HalfCpltCallback(hdma);
 8002f42:	4620      	mov	r0, r4
 8002f44:	4798      	blx	r3
 8002f46:	e210      	b.n	800336a <HAL_DMA_IRQHandler+0x87a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002f4e:	d103      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x468>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	f022 0208 	bic.w	r2, r2, #8
 8002f56:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8002f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8205 	beq.w	800336a <HAL_DMA_IRQHandler+0x87a>
            hdma->XferHalfCpltCallback(hdma);
 8002f60:	4620      	mov	r0, r4
 8002f62:	4798      	blx	r3
 8002f64:	e201      	b.n	800336a <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f66:	680b      	ldr	r3, [r1, #0]
 8002f68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f6c:	e259      	b.n	8003422 <HAL_DMA_IRQHandler+0x932>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	6813      	ldr	r3, [r2, #0]
 8002f72:	f023 0316 	bic.w	r3, r3, #22
 8002f76:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	6953      	ldr	r3, [r2, #20]
 8002f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f80:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f84:	b1bb      	cbz	r3, 8002fb6 <HAL_DMA_IRQHandler+0x4c6>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	6813      	ldr	r3, [r2, #0]
 8002f8a:	f023 0308 	bic.w	r3, r3, #8
 8002f8e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f92:	f003 021f 	and.w	r2, r3, #31
 8002f96:	233f      	movs	r3, #63	; 0x3f
 8002f98:	4093      	lsls	r3, r2
 8002f9a:	60b3      	str	r3, [r6, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8002fa8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 809f 	beq.w	80030ee <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferAbortCallback(hdma);
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	4798      	blx	r3
 8002fb4:	e09b      	b.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e4      	bne.n	8002f86 <HAL_DMA_IRQHandler+0x496>
 8002fbc:	e7e8      	b.n	8002f90 <HAL_DMA_IRQHandler+0x4a0>
            if(hdma->XferCpltCallback != NULL)
 8002fbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fc0:	b1d3      	cbz	r3, 8002ff8 <HAL_DMA_IRQHandler+0x508>
              hdma->XferCpltCallback(hdma);
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4798      	blx	r3
 8002fc6:	e017      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x508>
 8002fc8:	40020010 	.word	0x40020010
 8002fcc:	40020028 	.word	0x40020028
 8002fd0:	400204b8 	.word	0x400204b8
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002fda:	d109      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x500>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f022 0210 	bic.w	r2, r2, #16
 8002fe2:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8002fea:	2300      	movs	r3, #0
 8002fec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8002ff0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ff2:	b10b      	cbz	r3, 8002ff8 <HAL_DMA_IRQHandler+0x508>
            hdma->XferCpltCallback(hdma);
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ff8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d077      	beq.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ffe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003000:	f013 0f01 	tst.w	r3, #1
 8003004:	d06f      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x5f6>
        hdma->State = HAL_DMA_STATE_ABORT;
 8003006:	2304      	movs	r3, #4
 8003008:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800300c:	6822      	ldr	r2, [r4, #0]
 800300e:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <HAL_DMA_IRQHandler+0x718>)
 8003010:	497e      	ldr	r1, [pc, #504]	; (800320c <HAL_DMA_IRQHandler+0x71c>)
 8003012:	428a      	cmp	r2, r1
 8003014:	bf18      	it	ne
 8003016:	429a      	cmpne	r2, r3
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	3118      	adds	r1, #24
 8003020:	428a      	cmp	r2, r1
 8003022:	bf08      	it	eq
 8003024:	f043 0301 	orreq.w	r3, r3, #1
 8003028:	3118      	adds	r1, #24
 800302a:	428a      	cmp	r2, r1
 800302c:	bf08      	it	eq
 800302e:	f043 0301 	orreq.w	r3, r3, #1
 8003032:	3118      	adds	r1, #24
 8003034:	428a      	cmp	r2, r1
 8003036:	bf08      	it	eq
 8003038:	f043 0301 	orreq.w	r3, r3, #1
 800303c:	3118      	adds	r1, #24
 800303e:	428a      	cmp	r2, r1
 8003040:	bf08      	it	eq
 8003042:	f043 0301 	orreq.w	r3, r3, #1
 8003046:	3118      	adds	r1, #24
 8003048:	428a      	cmp	r2, r1
 800304a:	bf08      	it	eq
 800304c:	f043 0301 	orreq.w	r3, r3, #1
 8003050:	3118      	adds	r1, #24
 8003052:	428a      	cmp	r2, r1
 8003054:	bf08      	it	eq
 8003056:	f043 0301 	orreq.w	r3, r3, #1
 800305a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800305e:	428a      	cmp	r2, r1
 8003060:	bf08      	it	eq
 8003062:	f043 0301 	orreq.w	r3, r3, #1
 8003066:	3118      	adds	r1, #24
 8003068:	428a      	cmp	r2, r1
 800306a:	bf08      	it	eq
 800306c:	f043 0301 	orreq.w	r3, r3, #1
 8003070:	3118      	adds	r1, #24
 8003072:	428a      	cmp	r2, r1
 8003074:	bf08      	it	eq
 8003076:	f043 0301 	orreq.w	r3, r3, #1
 800307a:	3118      	adds	r1, #24
 800307c:	428a      	cmp	r2, r1
 800307e:	bf08      	it	eq
 8003080:	f043 0301 	orreq.w	r3, r3, #1
 8003084:	3118      	adds	r1, #24
 8003086:	428a      	cmp	r2, r1
 8003088:	bf08      	it	eq
 800308a:	f043 0301 	orreq.w	r3, r3, #1
 800308e:	3118      	adds	r1, #24
 8003090:	428a      	cmp	r2, r1
 8003092:	bf08      	it	eq
 8003094:	f043 0301 	orreq.w	r3, r3, #1
 8003098:	3118      	adds	r1, #24
 800309a:	428a      	cmp	r2, r1
 800309c:	bf08      	it	eq
 800309e:	f043 0301 	orreq.w	r3, r3, #1
 80030a2:	b913      	cbnz	r3, 80030aa <HAL_DMA_IRQHandler+0x5ba>
 80030a4:	4b5a      	ldr	r3, [pc, #360]	; (8003210 <HAL_DMA_IRQHandler+0x720>)
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d123      	bne.n	80030f2 <HAL_DMA_IRQHandler+0x602>
 80030aa:	6813      	ldr	r3, [r2, #0]
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030b2:	4b58      	ldr	r3, [pc, #352]	; (8003214 <HAL_DMA_IRQHandler+0x724>)
 80030b4:	fba3 3707 	umull	r3, r7, r3, r7
 80030b8:	0abf      	lsrs	r7, r7, #10
          if (++count > timeout)
 80030ba:	9b01      	ldr	r3, [sp, #4]
 80030bc:	3301      	adds	r3, #1
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	42bb      	cmp	r3, r7
 80030c2:	d804      	bhi.n	80030ce <HAL_DMA_IRQHandler+0x5de>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f013 0f01 	tst.w	r3, #1
 80030cc:	d1f5      	bne.n	80030ba <HAL_DMA_IRQHandler+0x5ca>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f013 0f01 	tst.w	r3, #1
          hdma->State = HAL_DMA_STATE_ERROR;
 80030d6:	bf14      	ite	ne
 80030d8:	2303      	movne	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80030da:	2301      	moveq	r3, #1
 80030dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80030e0:	2300      	movs	r3, #0
 80030e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80030e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80030e8:	b10b      	cbz	r3, 80030ee <HAL_DMA_IRQHandler+0x5fe>
        hdma->XferErrorCallback(hdma);
 80030ea:	4620      	mov	r0, r4
 80030ec:	4798      	blx	r3
}
 80030ee:	b003      	add	sp, #12
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_DMA_DISABLE(hdma);
 80030f2:	6813      	ldr	r3, [r2, #0]
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e7da      	b.n	80030b2 <HAL_DMA_IRQHandler+0x5c2>
          if(hdma->XferHalfCpltCallback != NULL)
 80030fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f5      	beq.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferHalfCpltCallback(hdma);
 8003102:	4620      	mov	r0, r4
 8003104:	4798      	blx	r3
 8003106:	e7f2      	b.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003108:	f013 0f20 	tst.w	r3, #32
 800310c:	d152      	bne.n	80031b4 <HAL_DMA_IRQHandler+0x6c4>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_DMA_IRQHandler+0x718>)
 8003112:	493e      	ldr	r1, [pc, #248]	; (800320c <HAL_DMA_IRQHandler+0x71c>)
 8003114:	428a      	cmp	r2, r1
 8003116:	bf18      	it	ne
 8003118:	429a      	cmpne	r2, r3
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	3118      	adds	r1, #24
 8003122:	428a      	cmp	r2, r1
 8003124:	bf08      	it	eq
 8003126:	f043 0301 	orreq.w	r3, r3, #1
 800312a:	3118      	adds	r1, #24
 800312c:	428a      	cmp	r2, r1
 800312e:	bf08      	it	eq
 8003130:	f043 0301 	orreq.w	r3, r3, #1
 8003134:	3118      	adds	r1, #24
 8003136:	428a      	cmp	r2, r1
 8003138:	bf08      	it	eq
 800313a:	f043 0301 	orreq.w	r3, r3, #1
 800313e:	3118      	adds	r1, #24
 8003140:	428a      	cmp	r2, r1
 8003142:	bf08      	it	eq
 8003144:	f043 0301 	orreq.w	r3, r3, #1
 8003148:	3118      	adds	r1, #24
 800314a:	428a      	cmp	r2, r1
 800314c:	bf08      	it	eq
 800314e:	f043 0301 	orreq.w	r3, r3, #1
 8003152:	3118      	adds	r1, #24
 8003154:	428a      	cmp	r2, r1
 8003156:	bf08      	it	eq
 8003158:	f043 0301 	orreq.w	r3, r3, #1
 800315c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003160:	428a      	cmp	r2, r1
 8003162:	bf08      	it	eq
 8003164:	f043 0301 	orreq.w	r3, r3, #1
 8003168:	3118      	adds	r1, #24
 800316a:	428a      	cmp	r2, r1
 800316c:	bf08      	it	eq
 800316e:	f043 0301 	orreq.w	r3, r3, #1
 8003172:	3118      	adds	r1, #24
 8003174:	428a      	cmp	r2, r1
 8003176:	bf08      	it	eq
 8003178:	f043 0301 	orreq.w	r3, r3, #1
 800317c:	3118      	adds	r1, #24
 800317e:	428a      	cmp	r2, r1
 8003180:	bf08      	it	eq
 8003182:	f043 0301 	orreq.w	r3, r3, #1
 8003186:	3118      	adds	r1, #24
 8003188:	428a      	cmp	r2, r1
 800318a:	bf08      	it	eq
 800318c:	f043 0301 	orreq.w	r3, r3, #1
 8003190:	3118      	adds	r1, #24
 8003192:	428a      	cmp	r2, r1
 8003194:	bf08      	it	eq
 8003196:	f043 0301 	orreq.w	r3, r3, #1
 800319a:	3118      	adds	r1, #24
 800319c:	428a      	cmp	r2, r1
 800319e:	bf08      	it	eq
 80031a0:	f043 0301 	orreq.w	r3, r3, #1
 80031a4:	b913      	cbnz	r3, 80031ac <HAL_DMA_IRQHandler+0x6bc>
 80031a6:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <HAL_DMA_IRQHandler+0x720>)
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d109      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x6d0>
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	f023 0308 	bic.w	r3, r3, #8
 80031b2:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80031b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d099      	beq.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
          hdma->XferHalfCpltCallback(hdma);
 80031ba:	4620      	mov	r0, r4
 80031bc:	4798      	blx	r3
 80031be:	e796      	b.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031c0:	6813      	ldr	r3, [r2, #0]
 80031c2:	f023 0304 	bic.w	r3, r3, #4
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	e7f4      	b.n	80031b4 <HAL_DMA_IRQHandler+0x6c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80031ca:	2502      	movs	r5, #2
 80031cc:	4085      	lsls	r5, r0
 80031ce:	420d      	tst	r5, r1
 80031d0:	f000 808a 	beq.w	80032e8 <HAL_DMA_IRQHandler+0x7f8>
 80031d4:	f013 0f02 	tst.w	r3, #2
 80031d8:	f000 8086 	beq.w	80032e8 <HAL_DMA_IRQHandler+0x7f8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80031dc:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031de:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80031e2:	d019      	beq.n	8003218 <HAL_DMA_IRQHandler+0x728>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80031e8:	d106      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x708>
          if(hdma->XferM1CpltCallback != NULL)
 80031ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f43f af7e 	beq.w	80030ee <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferM1CpltCallback(hdma);
 80031f2:	4620      	mov	r0, r4
 80031f4:	4798      	blx	r3
 80031f6:	e77a      	b.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
          if(hdma->XferCpltCallback != NULL)
 80031f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f43f af77 	beq.w	80030ee <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferCpltCallback(hdma);
 8003200:	4620      	mov	r0, r4
 8003202:	4798      	blx	r3
 8003204:	e773      	b.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
 8003206:	bf00      	nop
 8003208:	40020010 	.word	0x40020010
 800320c:	40020028 	.word	0x40020028
 8003210:	400204b8 	.word	0x400204b8
 8003214:	1b4e81b5 	.word	0x1b4e81b5
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003218:	f013 0f20 	tst.w	r3, #32
 800321c:	d158      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x7e0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	4b8e      	ldr	r3, [pc, #568]	; (800345c <HAL_DMA_IRQHandler+0x96c>)
 8003222:	498f      	ldr	r1, [pc, #572]	; (8003460 <HAL_DMA_IRQHandler+0x970>)
 8003224:	428a      	cmp	r2, r1
 8003226:	bf18      	it	ne
 8003228:	429a      	cmpne	r2, r3
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	3118      	adds	r1, #24
 8003232:	428a      	cmp	r2, r1
 8003234:	bf08      	it	eq
 8003236:	f043 0301 	orreq.w	r3, r3, #1
 800323a:	3118      	adds	r1, #24
 800323c:	428a      	cmp	r2, r1
 800323e:	bf08      	it	eq
 8003240:	f043 0301 	orreq.w	r3, r3, #1
 8003244:	3118      	adds	r1, #24
 8003246:	428a      	cmp	r2, r1
 8003248:	bf08      	it	eq
 800324a:	f043 0301 	orreq.w	r3, r3, #1
 800324e:	3118      	adds	r1, #24
 8003250:	428a      	cmp	r2, r1
 8003252:	bf08      	it	eq
 8003254:	f043 0301 	orreq.w	r3, r3, #1
 8003258:	3118      	adds	r1, #24
 800325a:	428a      	cmp	r2, r1
 800325c:	bf08      	it	eq
 800325e:	f043 0301 	orreq.w	r3, r3, #1
 8003262:	3118      	adds	r1, #24
 8003264:	428a      	cmp	r2, r1
 8003266:	bf08      	it	eq
 8003268:	f043 0301 	orreq.w	r3, r3, #1
 800326c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003270:	428a      	cmp	r2, r1
 8003272:	bf08      	it	eq
 8003274:	f043 0301 	orreq.w	r3, r3, #1
 8003278:	3118      	adds	r1, #24
 800327a:	428a      	cmp	r2, r1
 800327c:	bf08      	it	eq
 800327e:	f043 0301 	orreq.w	r3, r3, #1
 8003282:	3118      	adds	r1, #24
 8003284:	428a      	cmp	r2, r1
 8003286:	bf08      	it	eq
 8003288:	f043 0301 	orreq.w	r3, r3, #1
 800328c:	3118      	adds	r1, #24
 800328e:	428a      	cmp	r2, r1
 8003290:	bf08      	it	eq
 8003292:	f043 0301 	orreq.w	r3, r3, #1
 8003296:	3118      	adds	r1, #24
 8003298:	428a      	cmp	r2, r1
 800329a:	bf08      	it	eq
 800329c:	f043 0301 	orreq.w	r3, r3, #1
 80032a0:	3118      	adds	r1, #24
 80032a2:	428a      	cmp	r2, r1
 80032a4:	bf08      	it	eq
 80032a6:	f043 0301 	orreq.w	r3, r3, #1
 80032aa:	3118      	adds	r1, #24
 80032ac:	428a      	cmp	r2, r1
 80032ae:	bf08      	it	eq
 80032b0:	f043 0301 	orreq.w	r3, r3, #1
 80032b4:	b913      	cbnz	r3, 80032bc <HAL_DMA_IRQHandler+0x7cc>
 80032b6:	4b6b      	ldr	r3, [pc, #428]	; (8003464 <HAL_DMA_IRQHandler+0x974>)
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d110      	bne.n	80032de <HAL_DMA_IRQHandler+0x7ee>
 80032bc:	6813      	ldr	r3, [r2, #0]
 80032be:	f023 0314 	bic.w	r3, r3, #20
 80032c2:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80032ca:	2300      	movs	r3, #0
 80032cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80032d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f43f af0b 	beq.w	80030ee <HAL_DMA_IRQHandler+0x5fe>
          hdma->XferCpltCallback(hdma);
 80032d8:	4620      	mov	r0, r4
 80032da:	4798      	blx	r3
 80032dc:	e707      	b.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032de:	6813      	ldr	r3, [r2, #0]
 80032e0:	f023 030a 	bic.w	r3, r3, #10
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e7ed      	b.n	80032c4 <HAL_DMA_IRQHandler+0x7d4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80032e8:	2508      	movs	r5, #8
 80032ea:	fa05 f000 	lsl.w	r0, r5, r0
 80032ee:	4208      	tst	r0, r1
 80032f0:	f43f aefd 	beq.w	80030ee <HAL_DMA_IRQHandler+0x5fe>
 80032f4:	f013 0f08 	tst.w	r3, #8
 80032f8:	f43f aef9 	beq.w	80030ee <HAL_DMA_IRQHandler+0x5fe>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fc:	6813      	ldr	r3, [r2, #0]
 80032fe:	f023 030e 	bic.w	r3, r3, #14
 8003302:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003304:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2201      	movs	r2, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	6073      	str	r3, [r6, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003312:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8003314:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003318:	2300      	movs	r3, #0
 800331a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 800331e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003320:	2b00      	cmp	r3, #0
 8003322:	f43f aee4 	beq.w	80030ee <HAL_DMA_IRQHandler+0x5fe>
        hdma->XferErrorCallback(hdma);
 8003326:	4620      	mov	r0, r4
 8003328:	4798      	blx	r3
  }
 800332a:	e6e0      	b.n	80030ee <HAL_DMA_IRQHandler+0x5fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	e5ed      	b.n	8002f0c <HAL_DMA_IRQHandler+0x41c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003330:	fa25 f103 	lsr.w	r1, r5, r3
 8003334:	f011 0f01 	tst.w	r1, #1
 8003338:	f47f aca7 	bne.w	8002c8a <HAL_DMA_IRQHandler+0x19a>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800333c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800333e:	f001 011f 	and.w	r1, r1, #31
 8003342:	2304      	movs	r3, #4
 8003344:	fa03 f101 	lsl.w	r1, r3, r1
 8003348:	420d      	tst	r5, r1
 800334a:	f43f ad84 	beq.w	8002e56 <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	f013 0f02 	tst.w	r3, #2
 8003356:	f47f ad79 	bne.w	8002e4c <HAL_DMA_IRQHandler+0x35c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800335a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800335c:	f001 011f 	and.w	r1, r1, #31
 8003360:	2310      	movs	r3, #16
 8003362:	fa03 f101 	lsl.w	r1, r3, r1
 8003366:	420d      	tst	r5, r1
 8003368:	d1e0      	bne.n	800332c <HAL_DMA_IRQHandler+0x83c>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800336a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800336c:	f002 021f 	and.w	r2, r2, #31
 8003370:	2320      	movs	r3, #32
 8003372:	fa03 f202 	lsl.w	r2, r3, r2
 8003376:	422a      	tst	r2, r5
 8003378:	f43f ae3e 	beq.w	8002ff8 <HAL_DMA_IRQHandler+0x508>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800337c:	6821      	ldr	r1, [r4, #0]
 800337e:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_DMA_IRQHandler+0x96c>)
 8003380:	4837      	ldr	r0, [pc, #220]	; (8003460 <HAL_DMA_IRQHandler+0x970>)
 8003382:	4281      	cmp	r1, r0
 8003384:	bf18      	it	ne
 8003386:	4299      	cmpne	r1, r3
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	3018      	adds	r0, #24
 8003390:	4281      	cmp	r1, r0
 8003392:	bf08      	it	eq
 8003394:	f043 0301 	orreq.w	r3, r3, #1
 8003398:	3018      	adds	r0, #24
 800339a:	4281      	cmp	r1, r0
 800339c:	bf08      	it	eq
 800339e:	f043 0301 	orreq.w	r3, r3, #1
 80033a2:	3018      	adds	r0, #24
 80033a4:	4281      	cmp	r1, r0
 80033a6:	bf08      	it	eq
 80033a8:	f043 0301 	orreq.w	r3, r3, #1
 80033ac:	3018      	adds	r0, #24
 80033ae:	4281      	cmp	r1, r0
 80033b0:	bf08      	it	eq
 80033b2:	f043 0301 	orreq.w	r3, r3, #1
 80033b6:	3018      	adds	r0, #24
 80033b8:	4281      	cmp	r1, r0
 80033ba:	bf08      	it	eq
 80033bc:	f043 0301 	orreq.w	r3, r3, #1
 80033c0:	3018      	adds	r0, #24
 80033c2:	4281      	cmp	r1, r0
 80033c4:	bf08      	it	eq
 80033c6:	f043 0301 	orreq.w	r3, r3, #1
 80033ca:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80033ce:	4281      	cmp	r1, r0
 80033d0:	bf08      	it	eq
 80033d2:	f043 0301 	orreq.w	r3, r3, #1
 80033d6:	3018      	adds	r0, #24
 80033d8:	4281      	cmp	r1, r0
 80033da:	bf08      	it	eq
 80033dc:	f043 0301 	orreq.w	r3, r3, #1
 80033e0:	3018      	adds	r0, #24
 80033e2:	4281      	cmp	r1, r0
 80033e4:	bf08      	it	eq
 80033e6:	f043 0301 	orreq.w	r3, r3, #1
 80033ea:	3018      	adds	r0, #24
 80033ec:	4281      	cmp	r1, r0
 80033ee:	bf08      	it	eq
 80033f0:	f043 0301 	orreq.w	r3, r3, #1
 80033f4:	3018      	adds	r0, #24
 80033f6:	4281      	cmp	r1, r0
 80033f8:	bf08      	it	eq
 80033fa:	f043 0301 	orreq.w	r3, r3, #1
 80033fe:	3018      	adds	r0, #24
 8003400:	4281      	cmp	r1, r0
 8003402:	bf08      	it	eq
 8003404:	f043 0301 	orreq.w	r3, r3, #1
 8003408:	3018      	adds	r0, #24
 800340a:	4281      	cmp	r1, r0
 800340c:	bf08      	it	eq
 800340e:	f043 0301 	orreq.w	r3, r3, #1
 8003412:	b91b      	cbnz	r3, 800341c <HAL_DMA_IRQHandler+0x92c>
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <HAL_DMA_IRQHandler+0x974>)
 8003416:	4299      	cmp	r1, r3
 8003418:	f47f ada5 	bne.w	8002f66 <HAL_DMA_IRQHandler+0x476>
 800341c:	680b      	ldr	r3, [r1, #0]
 800341e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	f43f ade8 	beq.w	8002ff8 <HAL_DMA_IRQHandler+0x508>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003428:	60b2      	str	r2, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800342a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b04      	cmp	r3, #4
 8003432:	f43f ad9c 	beq.w	8002f6e <HAL_DMA_IRQHandler+0x47e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800343e:	f43f adc9 	beq.w	8002fd4 <HAL_DMA_IRQHandler+0x4e4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003448:	f47f adb9 	bne.w	8002fbe <HAL_DMA_IRQHandler+0x4ce>
            if(hdma->XferM1CpltCallback != NULL)
 800344c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800344e:	2b00      	cmp	r3, #0
 8003450:	f43f add2 	beq.w	8002ff8 <HAL_DMA_IRQHandler+0x508>
              hdma->XferM1CpltCallback(hdma);
 8003454:	4620      	mov	r0, r4
 8003456:	4798      	blx	r3
 8003458:	e5ce      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x508>
 800345a:	bf00      	nop
 800345c:	40020010 	.word	0x40020010
 8003460:	40020028 	.word	0x40020028
 8003464:	400204b8 	.word	0x400204b8

08003468 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003468:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800346a:	4770      	bx	lr

0800346c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800346c:	680b      	ldr	r3, [r1, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 810f 	beq.w	8003692 <HAL_GPIO_Init+0x226>
{
 8003474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003478:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800347a:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 800347e:	4662      	mov	r2, ip
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003480:	4c84      	ldr	r4, [pc, #528]	; (8003694 <HAL_GPIO_Init+0x228>)
 8003482:	4d85      	ldr	r5, [pc, #532]	; (8003698 <HAL_GPIO_Init+0x22c>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003484:	4e85      	ldr	r6, [pc, #532]	; (800369c <HAL_GPIO_Init+0x230>)
 8003486:	f8df 821c 	ldr.w	r8, [pc, #540]	; 80036a4 <HAL_GPIO_Init+0x238>
 800348a:	e061      	b.n	8003550 <HAL_GPIO_Init+0xe4>
        temp = GPIOx->OSPEEDR;
 800348c:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800348e:	f04f 0a03 	mov.w	sl, #3
 8003492:	fa0a fa0c 	lsl.w	sl, sl, ip
 8003496:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 800349a:	68cb      	ldr	r3, [r1, #12]
 800349c:	fa03 f30c 	lsl.w	r3, r3, ip
 80034a0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80034a4:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80034a6:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034a8:	ea23 0e0e 	bic.w	lr, r3, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ac:	684b      	ldr	r3, [r1, #4]
 80034ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80034b2:	4093      	lsls	r3, r2
 80034b4:	ea43 030e 	orr.w	r3, r3, lr
        GPIOx->OTYPER = temp;
 80034b8:	6043      	str	r3, [r0, #4]
 80034ba:	e056      	b.n	800356a <HAL_GPIO_Init+0xfe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034bc:	2300      	movs	r3, #0
 80034be:	fa03 f30b 	lsl.w	r3, r3, fp
 80034c2:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c6:	f8ce 3008 	str.w	r3, [lr, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ce:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 80034d0:	ea6f 0e09 	mvn.w	lr, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034d4:	684f      	ldr	r7, [r1, #4]
 80034d6:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80034da:	bf0c      	ite	eq
 80034dc:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 80034e0:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 80034e4:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 80034e8:	f8ca 3000 	str.w	r3, [sl]

        temp = EXTI->FTSR1;
 80034ec:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034f0:	684f      	ldr	r7, [r1, #4]
 80034f2:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~(iocurrent);
 80034f6:	bf0c      	ite	eq
 80034f8:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 80034fc:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8003500:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8003504:	f8ca 3004 	str.w	r3, [sl, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003508:	f8da 3084 	ldr.w	r3, [sl, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800350c:	684f      	ldr	r7, [r1, #4]
 800350e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003512:	bf0c      	ite	eq
 8003514:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8003518:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800351c:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8003520:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003524:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003528:	684f      	ldr	r7, [r1, #4]
 800352a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~(iocurrent);
 800352e:	bf0c      	ite	eq
 8003530:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8003534:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003538:	f04f 4eb0 	mov.w	lr, #1476395008	; 0x58000000
 800353c:	f8ce 3080 	str.w	r3, [lr, #128]	; 0x80
      }
    }

    position++;
 8003540:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003542:	680b      	ldr	r3, [r1, #0]
 8003544:	f10c 0c02 	add.w	ip, ip, #2
 8003548:	fa33 f702 	lsrs.w	r7, r3, r2
 800354c:	f000 809e 	beq.w	800368c <HAL_GPIO_Init+0x220>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003550:	f04f 0e01 	mov.w	lr, #1
 8003554:	fa0e fe02 	lsl.w	lr, lr, r2
    if (iocurrent != 0x00U)
 8003558:	ea1e 0903 	ands.w	r9, lr, r3
 800355c:	d0f0      	beq.n	8003540 <HAL_GPIO_Init+0xd4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800355e:	684b      	ldr	r3, [r1, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	3b01      	subs	r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d990      	bls.n	800348c <HAL_GPIO_Init+0x20>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800356a:	684b      	ldr	r3, [r1, #4]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b03      	cmp	r3, #3
 8003572:	d027      	beq.n	80035c4 <HAL_GPIO_Init+0x158>
      temp = GPIOx->PUPDR;
 8003574:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003576:	f04f 0e03 	mov.w	lr, #3
 800357a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800357e:	ea23 0e0e 	bic.w	lr, r3, lr
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003582:	688b      	ldr	r3, [r1, #8]
 8003584:	fa03 f30c 	lsl.w	r3, r3, ip
 8003588:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->PUPDR = temp;
 800358c:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358e:	684b      	ldr	r3, [r1, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d115      	bne.n	80035c4 <HAL_GPIO_Init+0x158>
        temp = GPIOx->AFR[position >> 3U];
 8003598:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 800359c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80035a0:	f8de a020 	ldr.w	sl, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035a4:	f002 0307 	and.w	r3, r2, #7
 80035a8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80035ac:	230f      	movs	r3, #15
 80035ae:	fa03 f30b 	lsl.w	r3, r3, fp
 80035b2:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035b6:	690b      	ldr	r3, [r1, #16]
 80035b8:	fa03 f30b 	lsl.w	r3, r3, fp
 80035bc:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80035c0:	f8ce 3020 	str.w	r3, [lr, #32]
      temp = GPIOx->MODER;
 80035c4:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035c6:	f04f 0e03 	mov.w	lr, #3
 80035ca:	fa0e fe0c 	lsl.w	lr, lr, ip
 80035ce:	ea23 0e0e 	bic.w	lr, r3, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035d2:	684b      	ldr	r3, [r1, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	fa03 f30c 	lsl.w	r3, r3, ip
 80035dc:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->MODER = temp;
 80035e0:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e2:	684b      	ldr	r3, [r1, #4]
 80035e4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80035e8:	d0aa      	beq.n	8003540 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ea:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80035f6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003602:	f022 0e03 	bic.w	lr, r2, #3
 8003606:	44ae      	add	lr, r5
 8003608:	f8de a008 	ldr.w	sl, [lr, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800360c:	f002 0303 	and.w	r3, r2, #3
 8003610:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8003614:	230f      	movs	r3, #15
 8003616:	fa03 f30b 	lsl.w	r3, r3, fp
 800361a:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800361e:	42b0      	cmp	r0, r6
 8003620:	f43f af4c 	beq.w	80034bc <HAL_GPIO_Init+0x50>
 8003624:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <HAL_GPIO_Init+0x234>)
 8003626:	4298      	cmp	r0, r3
 8003628:	d020      	beq.n	800366c <HAL_GPIO_Init+0x200>
 800362a:	4540      	cmp	r0, r8
 800362c:	d020      	beq.n	8003670 <HAL_GPIO_Init+0x204>
 800362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003632:	4298      	cmp	r0, r3
 8003634:	d01e      	beq.n	8003674 <HAL_GPIO_Init+0x208>
 8003636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800363a:	4298      	cmp	r0, r3
 800363c:	d01c      	beq.n	8003678 <HAL_GPIO_Init+0x20c>
 800363e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003642:	4298      	cmp	r0, r3
 8003644:	d01a      	beq.n	800367c <HAL_GPIO_Init+0x210>
 8003646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800364a:	4298      	cmp	r0, r3
 800364c:	d018      	beq.n	8003680 <HAL_GPIO_Init+0x214>
 800364e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003652:	4298      	cmp	r0, r3
 8003654:	d016      	beq.n	8003684 <HAL_GPIO_Init+0x218>
 8003656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800365a:	4298      	cmp	r0, r3
 800365c:	d014      	beq.n	8003688 <HAL_GPIO_Init+0x21c>
 800365e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003662:	4298      	cmp	r0, r3
 8003664:	bf0c      	ite	eq
 8003666:	2309      	moveq	r3, #9
 8003668:	230a      	movne	r3, #10
 800366a:	e728      	b.n	80034be <HAL_GPIO_Init+0x52>
 800366c:	2301      	movs	r3, #1
 800366e:	e726      	b.n	80034be <HAL_GPIO_Init+0x52>
 8003670:	2302      	movs	r3, #2
 8003672:	e724      	b.n	80034be <HAL_GPIO_Init+0x52>
 8003674:	2303      	movs	r3, #3
 8003676:	e722      	b.n	80034be <HAL_GPIO_Init+0x52>
 8003678:	2304      	movs	r3, #4
 800367a:	e720      	b.n	80034be <HAL_GPIO_Init+0x52>
 800367c:	2305      	movs	r3, #5
 800367e:	e71e      	b.n	80034be <HAL_GPIO_Init+0x52>
 8003680:	2306      	movs	r3, #6
 8003682:	e71c      	b.n	80034be <HAL_GPIO_Init+0x52>
 8003684:	2307      	movs	r3, #7
 8003686:	e71a      	b.n	80034be <HAL_GPIO_Init+0x52>
 8003688:	2308      	movs	r3, #8
 800368a:	e718      	b.n	80034be <HAL_GPIO_Init+0x52>
  }
}
 800368c:	b003      	add	sp, #12
 800368e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003692:	4770      	bx	lr
 8003694:	58024400 	.word	0x58024400
 8003698:	58000400 	.word	0x58000400
 800369c:	58020000 	.word	0x58020000
 80036a0:	58020400 	.word	0x58020400
 80036a4:	58020800 	.word	0x58020800

080036a8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036a8:	6803      	ldr	r3, [r0, #0]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	f012 0f02 	tst.w	r2, #2
 80036b0:	d001      	beq.n	80036b6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036b2:	2200      	movs	r2, #0
 80036b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b6:	6803      	ldr	r3, [r0, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	f012 0f01 	tst.w	r2, #1
 80036be:	d103      	bne.n	80036c8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	619a      	str	r2, [r3, #24]
  }
}
 80036c8:	4770      	bx	lr

080036ca <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036ca:	b430      	push	{r4, r5}
 80036cc:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036ce:	6805      	ldr	r5, [r0, #0]
 80036d0:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036d2:	4323      	orrs	r3, r4
 80036d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036d8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80036dc:	430b      	orrs	r3, r1
 80036de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80036e2:	0d64      	lsrs	r4, r4, #21
 80036e4:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80036e8:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80036ec:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80036f0:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80036f4:	f044 0403 	orr.w	r4, r4, #3
 80036f8:	ea20 0404 	bic.w	r4, r0, r4
 80036fc:	4323      	orrs	r3, r4
 80036fe:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003700:	bc30      	pop	{r4, r5}
 8003702:	4770      	bx	lr

08003704 <I2C_IsErrorOccurred>:
{
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800370a:	6803      	ldr	r3, [r0, #0]
 800370c:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800370e:	f017 0710 	ands.w	r7, r7, #16
 8003712:	d051      	beq.n	80037b8 <I2C_IsErrorOccurred+0xb4>
 8003714:	460e      	mov	r6, r1
 8003716:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003718:	2210      	movs	r2, #16
 800371a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2500      	movs	r5, #0
 800371e:	462f      	mov	r7, r5
              hi2c->State = HAL_I2C_STATE_READY;
 8003720:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003724:	6821      	ldr	r1, [r4, #0]
 8003726:	698b      	ldr	r3, [r1, #24]
 8003728:	f013 0f20 	tst.w	r3, #32
 800372c:	d13d      	bne.n	80037aa <I2C_IsErrorOccurred+0xa6>
 800372e:	2d00      	cmp	r5, #0
 8003730:	d13b      	bne.n	80037aa <I2C_IsErrorOccurred+0xa6>
      if (Timeout != HAL_MAX_DELAY)
 8003732:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003736:	d0f6      	beq.n	8003726 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003738:	f7fd fecc 	bl	80014d4 <HAL_GetTick>
 800373c:	463d      	mov	r5, r7
 800373e:	eba0 0008 	sub.w	r0, r0, r8
 8003742:	42b0      	cmp	r0, r6
 8003744:	d801      	bhi.n	800374a <I2C_IsErrorOccurred+0x46>
 8003746:	2e00      	cmp	r6, #0
 8003748:	d1ec      	bne.n	8003724 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 800374e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003752:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003754:	6991      	ldr	r1, [r2, #24]
 8003756:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800375a:	d004      	beq.n	8003766 <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 800375c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8003760:	d101      	bne.n	8003766 <I2C_IsErrorOccurred+0x62>
 8003762:	2b20      	cmp	r3, #32
 8003764:	d119      	bne.n	800379a <I2C_IsErrorOccurred+0x96>
{
 8003766:	463d      	mov	r5, r7
              status = HAL_ERROR;
 8003768:	f04f 0a01 	mov.w	sl, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f013 0f20 	tst.w	r3, #32
 8003774:	d1d6      	bne.n	8003724 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003776:	f7fd fead 	bl	80014d4 <HAL_GetTick>
 800377a:	eba0 0008 	sub.w	r0, r0, r8
 800377e:	2819      	cmp	r0, #25
 8003780:	d9f4      	bls.n	800376c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003784:	f043 0320 	orr.w	r3, r3, #32
 8003788:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800378a:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800378e:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8003792:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8003796:	4655      	mov	r5, sl
 8003798:	e7e8      	b.n	800376c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800379a:	6853      	ldr	r3, [r2, #4]
 800379c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a0:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 80037a2:	f7fd fe97 	bl	80014d4 <HAL_GetTick>
 80037a6:	4680      	mov	r8, r0
 80037a8:	e7dd      	b.n	8003766 <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 80037aa:	2d00      	cmp	r5, #0
 80037ac:	d13f      	bne.n	800382e <I2C_IsErrorOccurred+0x12a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ae:	2320      	movs	r3, #32
 80037b0:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80037b2:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80037b4:	2501      	movs	r5, #1
 80037b6:	e000      	b.n	80037ba <I2C_IsErrorOccurred+0xb6>
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037c2:	d005      	beq.n	80037d0 <I2C_IsErrorOccurred+0xcc>
    error_code |= HAL_I2C_ERROR_BERR;
 80037c4:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037cc:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80037ce:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037d0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80037d4:	d02d      	beq.n	8003832 <I2C_IsErrorOccurred+0x12e>
    error_code |= HAL_I2C_ERROR_OVR;
 80037d6:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037da:	6822      	ldr	r2, [r4, #0]
 80037dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037e0:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80037e6:	d005      	beq.n	80037f4 <I2C_IsErrorOccurred+0xf0>
    error_code |= HAL_I2C_ERROR_ARLO;
 80037e8:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f2:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7ff ff57 	bl	80036a8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	6853      	ldr	r3, [r2, #4]
 80037fe:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003802:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003806:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003810:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003812:	431f      	orrs	r7, r3
 8003814:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003816:	2320      	movs	r3, #32
 8003818:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	2300      	movs	r3, #0
 800381e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003822:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003826:	2501      	movs	r5, #1
}
 8003828:	4628      	mov	r0, r5
 800382a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800382e:	2704      	movs	r7, #4
 8003830:	e7c3      	b.n	80037ba <I2C_IsErrorOccurred+0xb6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003832:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003836:	d1d7      	bne.n	80037e8 <I2C_IsErrorOccurred+0xe4>
  if (status != HAL_OK)
 8003838:	2d00      	cmp	r5, #0
 800383a:	d0f5      	beq.n	8003828 <I2C_IsErrorOccurred+0x124>
 800383c:	e7da      	b.n	80037f4 <I2C_IsErrorOccurred+0xf0>

0800383e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800383e:	b570      	push	{r4, r5, r6, lr}
 8003840:	4604      	mov	r4, r0
 8003842:	460d      	mov	r5, r1
 8003844:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f013 0f02 	tst.w	r3, #2
 800384e:	d11d      	bne.n	800388c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003850:	4632      	mov	r2, r6
 8003852:	4629      	mov	r1, r5
 8003854:	4620      	mov	r0, r4
 8003856:	f7ff ff55 	bl	8003704 <I2C_IsErrorOccurred>
 800385a:	b9c8      	cbnz	r0, 8003890 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800385c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003860:	d0f1      	beq.n	8003846 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003862:	f7fd fe37 	bl	80014d4 <HAL_GetTick>
 8003866:	1b80      	subs	r0, r0, r6
 8003868:	42a8      	cmp	r0, r5
 800386a:	d801      	bhi.n	8003870 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800386c:	2d00      	cmp	r5, #0
 800386e:	d1ea      	bne.n	8003846 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003872:	f043 0320 	orr.w	r3, r3, #32
 8003876:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003878:	2320      	movs	r3, #32
 800387a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800387e:	2300      	movs	r3, #0
 8003880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003884:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003888:	2001      	movs	r0, #1
 800388a:	e000      	b.n	800388e <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800388c:	2000      	movs	r0, #0
}
 800388e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003890:	2001      	movs	r0, #1
 8003892:	e7fc      	b.n	800388e <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003894 <I2C_WaitOnFlagUntilTimeout>:
{
 8003894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003898:	4680      	mov	r8, r0
 800389a:	460f      	mov	r7, r1
 800389c:	4616      	mov	r6, r2
 800389e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a0:	f8d8 3000 	ldr.w	r3, [r8]
 80038a4:	699c      	ldr	r4, [r3, #24]
 80038a6:	ea37 0204 	bics.w	r2, r7, r4
 80038aa:	bf0c      	ite	eq
 80038ac:	f04f 0c01 	moveq.w	ip, #1
 80038b0:	f04f 0c00 	movne.w	ip, #0
 80038b4:	45b4      	cmp	ip, r6
 80038b6:	d11a      	bne.n	80038ee <I2C_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80038b8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80038bc:	d0f2      	beq.n	80038a4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	f7fd fe09 	bl	80014d4 <HAL_GetTick>
 80038c2:	9b06      	ldr	r3, [sp, #24]
 80038c4:	1ac0      	subs	r0, r0, r3
 80038c6:	42a8      	cmp	r0, r5
 80038c8:	d801      	bhi.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x3a>
 80038ca:	2d00      	cmp	r5, #0
 80038cc:	d1e8      	bne.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ce:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80038d2:	f043 0320 	orr.w	r3, r3, #32
 80038d6:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038da:	2320      	movs	r3, #32
 80038dc:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80038e6:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 80038ea:	2001      	movs	r0, #1
 80038ec:	e000      	b.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 80038ee:	2000      	movs	r0, #0
}
 80038f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080038f4 <I2C_RequestMemoryWrite>:
{
 80038f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	4604      	mov	r4, r0
 80038fc:	4690      	mov	r8, r2
 80038fe:	461d      	mov	r5, r3
 8003900:	9e08      	ldr	r6, [sp, #32]
 8003902:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <I2C_RequestMemoryWrite+0x78>)
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800390c:	b2ea      	uxtb	r2, r5
 800390e:	f7ff fedc 	bl	80036ca <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	463a      	mov	r2, r7
 8003914:	4631      	mov	r1, r6
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff ff91 	bl	800383e <I2C_WaitOnTXISFlagUntilTimeout>
 800391c:	bb08      	cbnz	r0, 8003962 <I2C_RequestMemoryWrite+0x6e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800391e:	2d01      	cmp	r5, #1
 8003920:	d110      	bne.n	8003944 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	fa5f f288 	uxtb.w	r2, r8
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800392a:	9700      	str	r7, [sp, #0]
 800392c:	4633      	mov	r3, r6
 800392e:	2200      	movs	r2, #0
 8003930:	2180      	movs	r1, #128	; 0x80
 8003932:	4620      	mov	r0, r4
 8003934:	f7ff ffae 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003938:	3800      	subs	r0, #0
 800393a:	bf18      	it	ne
 800393c:	2001      	movne	r0, #1
}
 800393e:	b002      	add	sp, #8
 8003940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800394c:	463a      	mov	r2, r7
 800394e:	4631      	mov	r1, r6
 8003950:	4620      	mov	r0, r4
 8003952:	f7ff ff74 	bl	800383e <I2C_WaitOnTXISFlagUntilTimeout>
 8003956:	b930      	cbnz	r0, 8003966 <I2C_RequestMemoryWrite+0x72>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	fa5f f288 	uxtb.w	r2, r8
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
 8003960:	e7e3      	b.n	800392a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8003962:	2001      	movs	r0, #1
 8003964:	e7eb      	b.n	800393e <I2C_RequestMemoryWrite+0x4a>
      return HAL_ERROR;
 8003966:	2001      	movs	r0, #1
 8003968:	e7e9      	b.n	800393e <I2C_RequestMemoryWrite+0x4a>
 800396a:	bf00      	nop
 800396c:	80002000 	.word	0x80002000

08003970 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	4605      	mov	r5, r0
 8003974:	460c      	mov	r4, r1
 8003976:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f013 0f20 	tst.w	r3, #32
 8003980:	d11a      	bne.n	80039b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003982:	4632      	mov	r2, r6
 8003984:	4621      	mov	r1, r4
 8003986:	4628      	mov	r0, r5
 8003988:	f7ff febc 	bl	8003704 <I2C_IsErrorOccurred>
 800398c:	b9b0      	cbnz	r0, 80039bc <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fd fda1 	bl	80014d4 <HAL_GetTick>
 8003992:	1b80      	subs	r0, r0, r6
 8003994:	42a0      	cmp	r0, r4
 8003996:	d801      	bhi.n	800399c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003998:	2c00      	cmp	r4, #0
 800399a:	d1ed      	bne.n	8003978 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800399c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800399e:	f043 0320 	orr.w	r3, r3, #32
 80039a2:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	2320      	movs	r3, #32
 80039a6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80039b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80039b4:	2001      	movs	r0, #1
}
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80039b8:	2000      	movs	r0, #0
 80039ba:	e7fc      	b.n	80039b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80039bc:	2001      	movs	r0, #1
 80039be:	e7fa      	b.n	80039b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080039c0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d053      	beq.n	8003a6c <HAL_I2C_Init+0xac>
{
 80039c4:	b510      	push	{r4, lr}
 80039c6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d043      	beq.n	8003a58 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d0:	2324      	movs	r3, #36	; 0x24
 80039d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	6813      	ldr	r3, [r2, #0]
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	6863      	ldr	r3, [r4, #4]
 80039e4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80039e8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	6893      	ldr	r3, [r2, #8]
 80039ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039f2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039f4:	68e3      	ldr	r3, [r4, #12]
 80039f6:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039f8:	6822      	ldr	r2, [r4, #0]
 80039fa:	68a3      	ldr	r3, [r4, #8]
 80039fc:	bf0c      	ite	eq
 80039fe:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a02:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8003a06:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a08:	68e3      	ldr	r3, [r4, #12]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d029      	beq.n	8003a62 <HAL_I2C_Init+0xa2>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a0e:	6822      	ldr	r2, [r4, #0]
 8003a10:	6851      	ldr	r1, [r2, #4]
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <HAL_I2C_Init+0xb0>)
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a18:	6822      	ldr	r2, [r4, #0]
 8003a1a:	68d3      	ldr	r3, [r2, #12]
 8003a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a20:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	6961      	ldr	r1, [r4, #20]
 8003a28:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a2a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a2c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a30:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a32:	6822      	ldr	r2, [r4, #0]
 8003a34:	69e3      	ldr	r3, [r4, #28]
 8003a36:	6a21      	ldr	r1, [r4, #32]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a46:	2000      	movs	r0, #0
 8003a48:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	2320      	movs	r3, #32
 8003a4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a50:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a52:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003a56:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003a58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003a5c:	f7fc fe7c 	bl	8000758 <HAL_I2C_MspInit>
 8003a60:	e7b6      	b.n	80039d0 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	e7d0      	b.n	8003a0e <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8003a6c:	2001      	movs	r0, #1
}
 8003a6e:	4770      	bx	lr
 8003a70:	02008000 	.word	0x02008000

08003a74 <HAL_I2C_Mem_Write>:
{
 8003a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	460d      	mov	r5, r1
 8003a7c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003a80:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a82:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003a86:	b2c9      	uxtb	r1, r1
 8003a88:	2920      	cmp	r1, #32
 8003a8a:	f040 80bf 	bne.w	8003c0c <HAL_I2C_Mem_Write+0x198>
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4690      	mov	r8, r2
 8003a92:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8003a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a96:	b1cb      	cbz	r3, 8003acc <HAL_I2C_Mem_Write+0x58>
 8003a98:	f1ba 0f00 	cmp.w	sl, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8003a9e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	f000 80b6 	beq.w	8003c14 <HAL_I2C_Mem_Write+0x1a0>
 8003aa8:	f04f 0b01 	mov.w	fp, #1
 8003aac:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fd10 	bl	80014d4 <HAL_GetTick>
 8003ab4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ab6:	9000      	str	r0, [sp, #0]
 8003ab8:	2319      	movs	r3, #25
 8003aba:	465a      	mov	r2, fp
 8003abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff fee7 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 8003ac6:	b130      	cbz	r0, 8003ad6 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8003ac8:	2001      	movs	r0, #1
 8003aca:	e0a0      	b.n	8003c0e <HAL_I2C_Mem_Write+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ad0:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	e09b      	b.n	8003c0e <HAL_I2C_Mem_Write+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ad6:	2321      	movs	r3, #33	; 0x21
 8003ad8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ae8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003aea:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003aee:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003af0:	9601      	str	r6, [sp, #4]
 8003af2:	9700      	str	r7, [sp, #0]
 8003af4:	464b      	mov	r3, r9
 8003af6:	4642      	mov	r2, r8
 8003af8:	4629      	mov	r1, r5
 8003afa:	4620      	mov	r0, r4
 8003afc:	f7ff fefa 	bl	80038f4 <I2C_RequestMemoryWrite>
 8003b00:	b9a0      	cbnz	r0, 8003b2c <HAL_I2C_Mem_Write+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2bff      	cmp	r3, #255	; 0xff
 8003b08:	d915      	bls.n	8003b36 <HAL_I2C_Mem_Write+0xc2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b16:	4629      	mov	r1, r5
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f7ff fdd6 	bl	80036ca <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b1e:	f04f 0800 	mov.w	r8, #0
 8003b22:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b26:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8003b2a:	e020      	b.n	8003b6e <HAL_I2C_Mem_Write+0xfa>
      __HAL_UNLOCK(hi2c);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003b32:	4658      	mov	r0, fp
 8003b34:	e06b      	b.n	8003c0e <HAL_I2C_Mem_Write+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 8003b36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b38:	b292      	uxth	r2, r2
 8003b3a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	4629      	mov	r1, r5
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7ff fdbe 	bl	80036ca <I2C_TransferConfig>
 8003b4e:	e7e6      	b.n	8003b1e <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8003b50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b52:	b292      	uxth	r2, r2
 8003b54:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b56:	f8cd 8000 	str.w	r8, [sp]
 8003b5a:	4653      	mov	r3, sl
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	4629      	mov	r1, r5
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff fdb2 	bl	80036ca <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003b66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d032      	beq.n	8003bd4 <HAL_I2C_Mem_Write+0x160>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6e:	4632      	mov	r2, r6
 8003b70:	4639      	mov	r1, r7
 8003b72:	4620      	mov	r0, r4
 8003b74:	f7ff fe63 	bl	800383e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d14d      	bne.n	8003c18 <HAL_I2C_Mem_Write+0x1a4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b86:	3301      	adds	r3, #1
 8003b88:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003b8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e1      	bne.n	8003b66 <HAL_I2C_Mem_Write+0xf2>
 8003ba2:	2a00      	cmp	r2, #0
 8003ba4:	d0df      	beq.n	8003b66 <HAL_I2C_Mem_Write+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ba6:	9600      	str	r6, [sp, #0]
 8003ba8:	463b      	mov	r3, r7
 8003baa:	4642      	mov	r2, r8
 8003bac:	4649      	mov	r1, r9
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff fe70 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 8003bb4:	bb90      	cbnz	r0, 8003c1c <HAL_I2C_Mem_Write+0x1a8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2bff      	cmp	r3, #255	; 0xff
 8003bbc:	d9c8      	bls.n	8003b50 <HAL_I2C_Mem_Write+0xdc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bbe:	22ff      	movs	r2, #255	; 0xff
 8003bc0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bc2:	f8cd 8000 	str.w	r8, [sp]
 8003bc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bca:	4629      	mov	r1, r5
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f7ff fd7c 	bl	80036ca <I2C_TransferConfig>
 8003bd2:	e7c8      	b.n	8003b66 <HAL_I2C_Mem_Write+0xf2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd4:	4632      	mov	r2, r6
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7ff fec9 	bl	8003970 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bde:	b9f8      	cbnz	r0, 8003c20 <HAL_I2C_Mem_Write+0x1ac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	2220      	movs	r2, #32
 8003be4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003be6:	6821      	ldr	r1, [r4, #0]
 8003be8:	684b      	ldr	r3, [r1, #4]
 8003bea:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003bee:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003bf2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003c06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003c0a:	e000      	b.n	8003c0e <HAL_I2C_Mem_Write+0x19a>
    return HAL_BUSY;
 8003c0c:	2002      	movs	r0, #2
}
 8003c0e:	b003      	add	sp, #12
 8003c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003c14:	2002      	movs	r0, #2
 8003c16:	e7fa      	b.n	8003c0e <HAL_I2C_Mem_Write+0x19a>
        return HAL_ERROR;
 8003c18:	2001      	movs	r0, #1
 8003c1a:	e7f8      	b.n	8003c0e <HAL_I2C_Mem_Write+0x19a>
          return HAL_ERROR;
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	e7f6      	b.n	8003c0e <HAL_I2C_Mem_Write+0x19a>
      return HAL_ERROR;
 8003c20:	2001      	movs	r0, #1
 8003c22:	e7f4      	b.n	8003c0e <HAL_I2C_Mem_Write+0x19a>

08003c24 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c24:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d124      	bne.n	8003c78 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d022      	beq.n	8003c7c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8003c36:	2301      	movs	r3, #1
 8003c38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3c:	2324      	movs	r3, #36	; 0x24
 8003c3e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c42:	6802      	ldr	r2, [r0, #0]
 8003c44:	6813      	ldr	r3, [r2, #0]
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c4c:	6802      	ldr	r2, [r0, #0]
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c54:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c56:	6802      	ldr	r2, [r0, #0]
 8003c58:	6813      	ldr	r3, [r2, #0]
 8003c5a:	4319      	orrs	r1, r3
 8003c5c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c5e:	6802      	ldr	r2, [r0, #0]
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003c74:	4618      	mov	r0, r3
 8003c76:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2002      	movs	r0, #2
 8003c7a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003c7c:	2002      	movs	r0, #2
  }
}
 8003c7e:	4770      	bx	lr

08003c80 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c80:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d122      	bne.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d020      	beq.n	8003cd4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8003c92:	2301      	movs	r3, #1
 8003c94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c98:	2324      	movs	r3, #36	; 0x24
 8003c9a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c9e:	6802      	ldr	r2, [r0, #0]
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ca8:	6802      	ldr	r2, [r0, #0]
 8003caa:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cb0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cb4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb6:	6802      	ldr	r2, [r0, #0]
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003ccc:	4618      	mov	r0, r3
 8003cce:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2002      	movs	r0, #2
 8003cd2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003cd4:	2002      	movs	r0, #2
  }
}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cd8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_PWREx_ConfigSupply+0x4c>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f013 0f04 	tst.w	r3, #4
 8003ce2:	d107      	bne.n	8003cf4 <HAL_PWREx_ConfigSupply+0x1c>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <HAL_PWREx_ConfigSupply+0x4c>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cec:	1a18      	subs	r0, r3, r0
 8003cee:	bf18      	it	ne
 8003cf0:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cf4:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <HAL_PWREx_ConfigSupply+0x4c>)
 8003cf6:	68d3      	ldr	r3, [r2, #12]
 8003cf8:	f023 0307 	bic.w	r3, r3, #7
 8003cfc:	4318      	orrs	r0, r3
 8003cfe:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick ();
 8003d00:	f7fd fbe8 	bl	80014d4 <HAL_GetTick>
 8003d04:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d06:	4d07      	ldr	r5, [pc, #28]	; (8003d24 <HAL_PWREx_ConfigSupply+0x4c>)
 8003d08:	686b      	ldr	r3, [r5, #4]
 8003d0a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003d0e:	d107      	bne.n	8003d20 <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d10:	f7fd fbe0 	bl	80014d4 <HAL_GetTick>
 8003d14:	1b00      	subs	r0, r0, r4
 8003d16:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d1a:	d9f5      	bls.n	8003d08 <HAL_PWREx_ConfigSupply+0x30>
      return HAL_ERROR;
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	e7e8      	b.n	8003cf2 <HAL_PWREx_ConfigSupply+0x1a>
  return HAL_OK;
 8003d20:	2000      	movs	r0, #0
 8003d22:	e7e6      	b.n	8003cf2 <HAL_PWREx_ConfigSupply+0x1a>
 8003d24:	58024800 	.word	0x58024800

08003d28 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	f000 8318 	beq.w	800435e <HAL_RCC_OscConfig+0x636>
{
 8003d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d30:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d32:	6803      	ldr	r3, [r0, #0]
 8003d34:	f013 0f01 	tst.w	r3, #1
 8003d38:	d025      	beq.n	8003d86 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3a:	4a94      	ldr	r2, [pc, #592]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003d3c:	6913      	ldr	r3, [r2, #16]
 8003d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d42:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d015      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4c>
 8003d48:	2b18      	cmp	r3, #24
 8003d4a:	d00f      	beq.n	8003d6c <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	6863      	ldr	r3, [r4, #4]
 8003d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d52:	d03f      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xac>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d153      	bne.n	8003e00 <HAL_RCC_OscConfig+0xd8>
 8003d58:	4b8c      	ldr	r3, [pc, #560]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e038      	b.n	8003dde <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d6c:	f002 0203 	and.w	r2, r2, #3
 8003d70:	2a02      	cmp	r2, #2
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d74:	4b85      	ldr	r3, [pc, #532]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_OscConfig+0x5e>
 8003d7e:	6863      	ldr	r3, [r4, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 82ee 	beq.w	8004362 <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	f013 0f02 	tst.w	r3, #2
 8003d8c:	f000 80a1 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d90:	4a7e      	ldr	r2, [pc, #504]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003d92:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d94:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d96:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003d9a:	d05a      	beq.n	8003e52 <HAL_RCC_OscConfig+0x12a>
 8003d9c:	2b18      	cmp	r3, #24
 8003d9e:	d055      	beq.n	8003e4c <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003da0:	68e2      	ldr	r2, [r4, #12]
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	f000 80de 	beq.w	8003f64 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003da8:	4978      	ldr	r1, [pc, #480]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003daa:	680b      	ldr	r3, [r1, #0]
 8003dac:	f023 0319 	bic.w	r3, r3, #25
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fb8e 	bl	80014d4 <HAL_GetTick>
 8003db8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dba:	4e74      	ldr	r6, [pc, #464]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003dbc:	6833      	ldr	r3, [r6, #0]
 8003dbe:	f013 0f04 	tst.w	r3, #4
 8003dc2:	f040 80ad 	bne.w	8003f20 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fd fb85 	bl	80014d4 <HAL_GetTick>
 8003dca:	1b40      	subs	r0, r0, r5
 8003dcc:	2802      	cmp	r0, #2
 8003dce:	d9f5      	bls.n	8003dbc <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	e2cd      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd4:	4a6d      	ldr	r2, [pc, #436]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003dd6:	6813      	ldr	r3, [r2, #0]
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dde:	6863      	ldr	r3, [r4, #4]
 8003de0:	b32b      	cbz	r3, 8003e2e <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8003de2:	f7fd fb77 	bl	80014d4 <HAL_GetTick>
 8003de6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003de8:	4e68      	ldr	r6, [pc, #416]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003dea:	6833      	ldr	r3, [r6, #0]
 8003dec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003df0:	d1c9      	bne.n	8003d86 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df2:	f7fd fb6f 	bl	80014d4 <HAL_GetTick>
 8003df6:	1b40      	subs	r0, r0, r5
 8003df8:	2864      	cmp	r0, #100	; 0x64
 8003dfa:	d9f6      	bls.n	8003dea <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 8003dfc:	2003      	movs	r0, #3
 8003dfe:	e2b7      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e04:	d009      	beq.n	8003e1a <HAL_RCC_OscConfig+0xf2>
 8003e06:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e7e1      	b.n	8003dde <HAL_RCC_OscConfig+0xb6>
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e7d7      	b.n	8003dde <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8003e2e:	f7fd fb51 	bl	80014d4 <HAL_GetTick>
 8003e32:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e34:	4e55      	ldr	r6, [pc, #340]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003e36:	6833      	ldr	r3, [r6, #0]
 8003e38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e3c:	d0a3      	beq.n	8003d86 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3e:	f7fd fb49 	bl	80014d4 <HAL_GetTick>
 8003e42:	1b40      	subs	r0, r0, r5
 8003e44:	2864      	cmp	r0, #100	; 0x64
 8003e46:	d9f6      	bls.n	8003e36 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8003e48:	2003      	movs	r0, #3
 8003e4a:	e291      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e4c:	f012 0f03 	tst.w	r2, #3
 8003e50:	d1a6      	bne.n	8003da0 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e52:	4b4e      	ldr	r3, [pc, #312]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f013 0f04 	tst.w	r3, #4
 8003e5a:	d003      	beq.n	8003e64 <HAL_RCC_OscConfig+0x13c>
 8003e5c:	68e3      	ldr	r3, [r4, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8281 	beq.w	8004366 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e64:	4a49      	ldr	r2, [pc, #292]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	f023 0319 	bic.w	r3, r3, #25
 8003e6c:	68e1      	ldr	r1, [r4, #12]
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8003e72:	f7fd fb2f 	bl	80014d4 <HAL_GetTick>
 8003e76:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e78:	4e44      	ldr	r6, [pc, #272]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003e7a:	6833      	ldr	r3, [r6, #0]
 8003e7c:	f013 0f04 	tst.w	r3, #4
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fd fb27 	bl	80014d4 <HAL_GetTick>
 8003e86:	1b40      	subs	r0, r0, r5
 8003e88:	2802      	cmp	r0, #2
 8003e8a:	d9f6      	bls.n	8003e7a <HAL_RCC_OscConfig+0x152>
              return HAL_TIMEOUT;
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	e26f      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	f7fd fb3a 	bl	8001508 <HAL_GetREVID>
 8003e94:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e98:	4298      	cmp	r0, r3
 8003e9a:	d812      	bhi.n	8003ec2 <HAL_RCC_OscConfig+0x19a>
 8003e9c:	6922      	ldr	r2, [r4, #16]
 8003e9e:	2a40      	cmp	r2, #64	; 0x40
 8003ea0:	d007      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x18a>
 8003ea2:	493a      	ldr	r1, [pc, #232]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003ea4:	684b      	ldr	r3, [r1, #4]
 8003ea6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003eaa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003eae:	604b      	str	r3, [r1, #4]
 8003eb0:	e00f      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1aa>
 8003eb2:	4a36      	ldr	r2, [pc, #216]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003eb4:	6853      	ldr	r3, [r2, #4]
 8003eb6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebe:	6053      	str	r3, [r2, #4]
 8003ec0:	e007      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1aa>
 8003ec2:	4a32      	ldr	r2, [pc, #200]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003ec4:	6853      	ldr	r3, [r2, #4]
 8003ec6:	6921      	ldr	r1, [r4, #16]
 8003ec8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ecc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ed0:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	f013 0f10 	tst.w	r3, #16
 8003ed8:	f000 8088 	beq.w	8003fec <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003edc:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003ede:	6913      	ldr	r3, [r2, #16]
 8003ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ee4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d056      	beq.n	8003f98 <HAL_RCC_OscConfig+0x270>
 8003eea:	2b18      	cmp	r3, #24
 8003eec:	d050      	beq.n	8003f90 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003eee:	69e3      	ldr	r3, [r4, #28]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80b8 	beq.w	8004066 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ef6:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003ef8:	6813      	ldr	r3, [r2, #0]
 8003efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fd fae8 	bl	80014d4 <HAL_GetTick>
 8003f04:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f06:	4e21      	ldr	r6, [pc, #132]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003f08:	6833      	ldr	r3, [r6, #0]
 8003f0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f0e:	f040 8088 	bne.w	8004022 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f12:	f7fd fadf 	bl	80014d4 <HAL_GetTick>
 8003f16:	1b40      	subs	r0, r0, r5
 8003f18:	2802      	cmp	r0, #2
 8003f1a:	d9f5      	bls.n	8003f08 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003f1c:	2003      	movs	r0, #3
 8003f1e:	e227      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	f7fd faf2 	bl	8001508 <HAL_GetREVID>
 8003f24:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f28:	4298      	cmp	r0, r3
 8003f2a:	d812      	bhi.n	8003f52 <HAL_RCC_OscConfig+0x22a>
 8003f2c:	6922      	ldr	r2, [r4, #16]
 8003f2e:	2a40      	cmp	r2, #64	; 0x40
 8003f30:	d007      	beq.n	8003f42 <HAL_RCC_OscConfig+0x21a>
 8003f32:	4916      	ldr	r1, [pc, #88]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003f34:	684b      	ldr	r3, [r1, #4]
 8003f36:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003f3e:	604b      	str	r3, [r1, #4]
 8003f40:	e7c7      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1aa>
 8003f42:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003f44:	6853      	ldr	r3, [r2, #4]
 8003f46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4e:	6053      	str	r3, [r2, #4]
 8003f50:	e7bf      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1aa>
 8003f52:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003f54:	6853      	ldr	r3, [r2, #4]
 8003f56:	6921      	ldr	r1, [r4, #16]
 8003f58:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003f5c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003f60:	6053      	str	r3, [r2, #4]
 8003f62:	e7b6      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8003f64:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003f66:	6813      	ldr	r3, [r2, #0]
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f6e:	f7fd fab1 	bl	80014d4 <HAL_GetTick>
 8003f72:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f74:	4e05      	ldr	r6, [pc, #20]	; (8003f8c <HAL_RCC_OscConfig+0x264>)
 8003f76:	6833      	ldr	r3, [r6, #0]
 8003f78:	f013 0f04 	tst.w	r3, #4
 8003f7c:	d0a9      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fd faa9 	bl	80014d4 <HAL_GetTick>
 8003f82:	1b40      	subs	r0, r0, r5
 8003f84:	2802      	cmp	r0, #2
 8003f86:	d9f6      	bls.n	8003f76 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8003f88:	2003      	movs	r0, #3
 8003f8a:	e1f1      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
 8003f8c:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f90:	f002 0203 	and.w	r2, r2, #3
 8003f94:	2a01      	cmp	r2, #1
 8003f96:	d1aa      	bne.n	8003eee <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f98:	4ba1      	ldr	r3, [pc, #644]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_OscConfig+0x282>
 8003fa2:	69e3      	ldr	r3, [r4, #28]
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	f040 81e0 	bne.w	800436a <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003faa:	f7fd faad 	bl	8001508 <HAL_GetREVID>
 8003fae:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fb2:	4298      	cmp	r0, r3
 8003fb4:	d812      	bhi.n	8003fdc <HAL_RCC_OscConfig+0x2b4>
 8003fb6:	6a22      	ldr	r2, [r4, #32]
 8003fb8:	2a20      	cmp	r2, #32
 8003fba:	d007      	beq.n	8003fcc <HAL_RCC_OscConfig+0x2a4>
 8003fbc:	4998      	ldr	r1, [pc, #608]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8003fbe:	684b      	ldr	r3, [r1, #4]
 8003fc0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003fc4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003fc8:	604b      	str	r3, [r1, #4]
 8003fca:	e00f      	b.n	8003fec <HAL_RCC_OscConfig+0x2c4>
 8003fcc:	4a94      	ldr	r2, [pc, #592]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8003fce:	6853      	ldr	r3, [r2, #4]
 8003fd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd8:	6053      	str	r3, [r2, #4]
 8003fda:	e007      	b.n	8003fec <HAL_RCC_OscConfig+0x2c4>
 8003fdc:	4a90      	ldr	r2, [pc, #576]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8003fde:	68d3      	ldr	r3, [r2, #12]
 8003fe0:	6a21      	ldr	r1, [r4, #32]
 8003fe2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003fe6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003fea:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	f013 0f08 	tst.w	r3, #8
 8003ff2:	d060      	beq.n	80040b6 <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ff4:	6963      	ldr	r3, [r4, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d049      	beq.n	800408e <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffa:	4a89      	ldr	r2, [pc, #548]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8003ffc:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7fd fa66 	bl	80014d4 <HAL_GetTick>
 8004008:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800400a:	4e85      	ldr	r6, [pc, #532]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 800400c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800400e:	f013 0f02 	tst.w	r3, #2
 8004012:	d150      	bne.n	80040b6 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004014:	f7fd fa5e 	bl	80014d4 <HAL_GetTick>
 8004018:	1b40      	subs	r0, r0, r5
 800401a:	2802      	cmp	r0, #2
 800401c:	d9f6      	bls.n	800400c <HAL_RCC_OscConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 800401e:	2003      	movs	r0, #3
 8004020:	e1a6      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004022:	f7fd fa71 	bl	8001508 <HAL_GetREVID>
 8004026:	f241 0303 	movw	r3, #4099	; 0x1003
 800402a:	4298      	cmp	r0, r3
 800402c:	d812      	bhi.n	8004054 <HAL_RCC_OscConfig+0x32c>
 800402e:	6a22      	ldr	r2, [r4, #32]
 8004030:	2a20      	cmp	r2, #32
 8004032:	d007      	beq.n	8004044 <HAL_RCC_OscConfig+0x31c>
 8004034:	497a      	ldr	r1, [pc, #488]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004036:	684b      	ldr	r3, [r1, #4]
 8004038:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800403c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004040:	604b      	str	r3, [r1, #4]
 8004042:	e7d3      	b.n	8003fec <HAL_RCC_OscConfig+0x2c4>
 8004044:	4a76      	ldr	r2, [pc, #472]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004046:	6853      	ldr	r3, [r2, #4]
 8004048:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800404c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004050:	6053      	str	r3, [r2, #4]
 8004052:	e7cb      	b.n	8003fec <HAL_RCC_OscConfig+0x2c4>
 8004054:	4a72      	ldr	r2, [pc, #456]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004056:	68d3      	ldr	r3, [r2, #12]
 8004058:	6a21      	ldr	r1, [r4, #32]
 800405a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800405e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004062:	60d3      	str	r3, [r2, #12]
 8004064:	e7c2      	b.n	8003fec <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8004066:	4a6e      	ldr	r2, [pc, #440]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004068:	6813      	ldr	r3, [r2, #0]
 800406a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004070:	f7fd fa30 	bl	80014d4 <HAL_GetTick>
 8004074:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004076:	4e6a      	ldr	r6, [pc, #424]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004078:	6833      	ldr	r3, [r6, #0]
 800407a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800407e:	d0b5      	beq.n	8003fec <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004080:	f7fd fa28 	bl	80014d4 <HAL_GetTick>
 8004084:	1b40      	subs	r0, r0, r5
 8004086:	2802      	cmp	r0, #2
 8004088:	d9f6      	bls.n	8004078 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 800408a:	2003      	movs	r0, #3
 800408c:	e170      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408e:	4a64      	ldr	r2, [pc, #400]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004090:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fd fa1c 	bl	80014d4 <HAL_GetTick>
 800409c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800409e:	4e60      	ldr	r6, [pc, #384]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 80040a0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80040a2:	f013 0f02 	tst.w	r3, #2
 80040a6:	d006      	beq.n	80040b6 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a8:	f7fd fa14 	bl	80014d4 <HAL_GetTick>
 80040ac:	1b40      	subs	r0, r0, r5
 80040ae:	2802      	cmp	r0, #2
 80040b0:	d9f6      	bls.n	80040a0 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 80040b2:	2003      	movs	r0, #3
 80040b4:	e15c      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	f013 0f20 	tst.w	r3, #32
 80040bc:	d029      	beq.n	8004112 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80040be:	69a3      	ldr	r3, [r4, #24]
 80040c0:	b19b      	cbz	r3, 80040ea <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040c2:	4a57      	ldr	r2, [pc, #348]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 80040c4:	6813      	ldr	r3, [r2, #0]
 80040c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040cc:	f7fd fa02 	bl	80014d4 <HAL_GetTick>
 80040d0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040d2:	4e53      	ldr	r6, [pc, #332]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 80040d4:	6833      	ldr	r3, [r6, #0]
 80040d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80040da:	d11a      	bne.n	8004112 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80040dc:	f7fd f9fa 	bl	80014d4 <HAL_GetTick>
 80040e0:	1b40      	subs	r0, r0, r5
 80040e2:	2802      	cmp	r0, #2
 80040e4:	d9f6      	bls.n	80040d4 <HAL_RCC_OscConfig+0x3ac>
        {
          return HAL_TIMEOUT;
 80040e6:	2003      	movs	r0, #3
 80040e8:	e142      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040ea:	4a4d      	ldr	r2, [pc, #308]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 80040ec:	6813      	ldr	r3, [r2, #0]
 80040ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040f4:	f7fd f9ee 	bl	80014d4 <HAL_GetTick>
 80040f8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040fa:	4e49      	ldr	r6, [pc, #292]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 80040fc:	6833      	ldr	r3, [r6, #0]
 80040fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004102:	d006      	beq.n	8004112 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004104:	f7fd f9e6 	bl	80014d4 <HAL_GetTick>
 8004108:	1b40      	subs	r0, r0, r5
 800410a:	2802      	cmp	r0, #2
 800410c:	d9f6      	bls.n	80040fc <HAL_RCC_OscConfig+0x3d4>
        {
          return HAL_TIMEOUT;
 800410e:	2003      	movs	r0, #3
 8004110:	e12e      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	f013 0f04 	tst.w	r3, #4
 8004118:	d121      	bne.n	800415e <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800411a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800411c:	2a00      	cmp	r2, #0
 800411e:	f000 8126 	beq.w	800436e <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800412a:	2b18      	cmp	r3, #24
 800412c:	f000 80ee 	beq.w	800430c <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004130:	2a02      	cmp	r2, #2
 8004132:	d079      	beq.n	8004228 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004134:	4a3a      	ldr	r2, [pc, #232]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fd f9c9 	bl	80014d4 <HAL_GetTick>
 8004142:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004144:	4d36      	ldr	r5, [pc, #216]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004146:	682b      	ldr	r3, [r5, #0]
 8004148:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800414c:	f000 80dc 	beq.w	8004308 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004150:	f7fd f9c0 	bl	80014d4 <HAL_GetTick>
 8004154:	1b00      	subs	r0, r0, r4
 8004156:	2802      	cmp	r0, #2
 8004158:	d9f5      	bls.n	8004146 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 800415a:	2003      	movs	r0, #3
 800415c:	e108      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 800415e:	4a31      	ldr	r2, [pc, #196]	; (8004224 <HAL_RCC_OscConfig+0x4fc>)
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004166:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004168:	f7fd f9b4 	bl	80014d4 <HAL_GetTick>
 800416c:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800416e:	4e2d      	ldr	r6, [pc, #180]	; (8004224 <HAL_RCC_OscConfig+0x4fc>)
 8004170:	6833      	ldr	r3, [r6, #0]
 8004172:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004176:	d106      	bne.n	8004186 <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7fd f9ac 	bl	80014d4 <HAL_GetTick>
 800417c:	1b40      	subs	r0, r0, r5
 800417e:	2864      	cmp	r0, #100	; 0x64
 8004180:	d9f6      	bls.n	8004170 <HAL_RCC_OscConfig+0x448>
        return HAL_TIMEOUT;
 8004182:	2003      	movs	r0, #3
 8004184:	e0f4      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004186:	68a3      	ldr	r3, [r4, #8]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d00a      	beq.n	80041a2 <HAL_RCC_OscConfig+0x47a>
 800418c:	bb0b      	cbnz	r3, 80041d2 <HAL_RCC_OscConfig+0x4aa>
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 8004190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	671a      	str	r2, [r3, #112]	; 0x70
 8004198:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800419a:	f022 0204 	bic.w	r2, r2, #4
 800419e:	671a      	str	r2, [r3, #112]	; 0x70
 80041a0:	e004      	b.n	80041ac <HAL_RCC_OscConfig+0x484>
 80041a2:	4a1f      	ldr	r2, [pc, #124]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 80041a4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ac:	68a3      	ldr	r3, [r4, #8]
 80041ae:	b333      	cbz	r3, 80041fe <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 80041b0:	f7fd f990 	bl	80014d4 <HAL_GetTick>
 80041b4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041b6:	4e1a      	ldr	r6, [pc, #104]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041bc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80041be:	f013 0f02 	tst.w	r3, #2
 80041c2:	d1aa      	bne.n	800411a <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c4:	f7fd f986 	bl	80014d4 <HAL_GetTick>
 80041c8:	1b40      	subs	r0, r0, r5
 80041ca:	42b8      	cmp	r0, r7
 80041cc:	d9f6      	bls.n	80041bc <HAL_RCC_OscConfig+0x494>
          return HAL_TIMEOUT;
 80041ce:	2003      	movs	r0, #3
 80041d0:	e0ce      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_OscConfig+0x4c2>
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 80041d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	671a      	str	r2, [r3, #112]	; 0x70
 80041e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	671a      	str	r2, [r3, #112]	; 0x70
 80041e8:	e7e0      	b.n	80041ac <HAL_RCC_OscConfig+0x484>
 80041ea:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
 80041ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ee:	f042 0204 	orr.w	r2, r2, #4
 80041f2:	671a      	str	r2, [r3, #112]	; 0x70
 80041f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	671a      	str	r2, [r3, #112]	; 0x70
 80041fc:	e7d6      	b.n	80041ac <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 80041fe:	f7fd f969 	bl	80014d4 <HAL_GetTick>
 8004202:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004204:	4e06      	ldr	r6, [pc, #24]	; (8004220 <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800420a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800420c:	f013 0f02 	tst.w	r3, #2
 8004210:	d083      	beq.n	800411a <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd f95f 	bl	80014d4 <HAL_GetTick>
 8004216:	1b40      	subs	r0, r0, r5
 8004218:	42b8      	cmp	r0, r7
 800421a:	d9f6      	bls.n	800420a <HAL_RCC_OscConfig+0x4e2>
          return HAL_TIMEOUT;
 800421c:	2003      	movs	r0, #3
 800421e:	e0a7      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
 8004220:	58024400 	.word	0x58024400
 8004224:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8004228:	4a58      	ldr	r2, [pc, #352]	; (800438c <HAL_RCC_OscConfig+0x664>)
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004230:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004232:	f7fd f94f 	bl	80014d4 <HAL_GetTick>
 8004236:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004238:	4e54      	ldr	r6, [pc, #336]	; (800438c <HAL_RCC_OscConfig+0x664>)
 800423a:	6833      	ldr	r3, [r6, #0]
 800423c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004240:	d006      	beq.n	8004250 <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004242:	f7fd f947 	bl	80014d4 <HAL_GetTick>
 8004246:	1b40      	subs	r0, r0, r5
 8004248:	2802      	cmp	r0, #2
 800424a:	d9f6      	bls.n	800423a <HAL_RCC_OscConfig+0x512>
            return HAL_TIMEOUT;
 800424c:	2003      	movs	r0, #3
 800424e:	e08f      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004250:	4b4e      	ldr	r3, [pc, #312]	; (800438c <HAL_RCC_OscConfig+0x664>)
 8004252:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004254:	4a4e      	ldr	r2, [pc, #312]	; (8004390 <HAL_RCC_OscConfig+0x668>)
 8004256:	400a      	ands	r2, r1
 8004258:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800425a:	430a      	orrs	r2, r1
 800425c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800425e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004266:	3a01      	subs	r2, #1
 8004268:	0252      	lsls	r2, r2, #9
 800426a:	b292      	uxth	r2, r2
 800426c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800426e:	3901      	subs	r1, #1
 8004270:	0409      	lsls	r1, r1, #16
 8004272:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004276:	430a      	orrs	r2, r1
 8004278:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800427a:	3901      	subs	r1, #1
 800427c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004280:	430a      	orrs	r2, r1
 8004282:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004284:	3901      	subs	r1, #1
 8004286:	0609      	lsls	r1, r1, #24
 8004288:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800428c:	430a      	orrs	r2, r1
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004298:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800429a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800429c:	4a3d      	ldr	r2, [pc, #244]	; (8004394 <HAL_RCC_OscConfig+0x66c>)
 800429e:	4002      	ands	r2, r0
 80042a0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80042a4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	f022 020c 	bic.w	r2, r2, #12
 80042ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80042ae:	430a      	orrs	r2, r1
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	f022 0202 	bic.w	r2, r2, #2
 80042b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80042ba:	430a      	orrs	r2, r1
 80042bc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042c4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80042d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80042e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042e6:	f7fd f8f5 	bl	80014d4 <HAL_GetTick>
 80042ea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042ec:	4d27      	ldr	r5, [pc, #156]	; (800438c <HAL_RCC_OscConfig+0x664>)
 80042ee:	682b      	ldr	r3, [r5, #0]
 80042f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042f4:	d106      	bne.n	8004304 <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd f8ed 	bl	80014d4 <HAL_GetTick>
 80042fa:	1b00      	subs	r0, r0, r4
 80042fc:	2802      	cmp	r0, #2
 80042fe:	d9f6      	bls.n	80042ee <HAL_RCC_OscConfig+0x5c6>
            return HAL_TIMEOUT;
 8004300:	2003      	movs	r0, #3
 8004302:	e035      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004304:	2000      	movs	r0, #0
 8004306:	e033      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
 8004308:	2000      	movs	r0, #0
 800430a:	e031      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800430c:	4b1f      	ldr	r3, [pc, #124]	; (800438c <HAL_RCC_OscConfig+0x664>)
 800430e:	6a99      	ldr	r1, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004312:	2a01      	cmp	r2, #1
 8004314:	d02d      	beq.n	8004372 <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800431c:	4282      	cmp	r2, r0
 800431e:	d12a      	bne.n	8004376 <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004320:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004324:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004326:	4291      	cmp	r1, r2
 8004328:	d127      	bne.n	800437a <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800432a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800432e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004330:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004332:	4291      	cmp	r1, r2
 8004334:	d123      	bne.n	800437e <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004336:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800433a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800433c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800433e:	4291      	cmp	r1, r2
 8004340:	d11f      	bne.n	8004382 <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004342:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8004346:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004348:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800434a:	4291      	cmp	r1, r2
 800434c:	d11b      	bne.n	8004386 <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800434e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004352:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004354:	3801      	subs	r0, #1
  return HAL_OK;
 8004356:	1a18      	subs	r0, r3, r0
 8004358:	bf18      	it	ne
 800435a:	2001      	movne	r0, #1
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 800435e:	2001      	movs	r0, #1
}
 8004360:	4770      	bx	lr
        return HAL_ERROR;
 8004362:	2001      	movs	r0, #1
 8004364:	e004      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8004366:	2001      	movs	r0, #1
 8004368:	e002      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 800436a:	2001      	movs	r0, #1
 800436c:	e000      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 800436e:	2000      	movs	r0, #0
}
 8004370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8004372:	2001      	movs	r0, #1
 8004374:	e7fc      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
 8004376:	2001      	movs	r0, #1
 8004378:	e7fa      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
 800437a:	2001      	movs	r0, #1
 800437c:	e7f8      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
 800437e:	2001      	movs	r0, #1
 8004380:	e7f6      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
 8004382:	2001      	movs	r0, #1
 8004384:	e7f4      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
 8004386:	2001      	movs	r0, #1
 8004388:	e7f2      	b.n	8004370 <HAL_RCC_OscConfig+0x648>
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400
 8004390:	fffffc0c 	.word	0xfffffc0c
 8004394:	ffff0007 	.word	0xffff0007

08004398 <HAL_RCC_EnableCSS>:
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8004398:	4a02      	ldr	r2, [pc, #8]	; (80043a4 <HAL_RCC_EnableCSS+0xc>)
 800439a:	6813      	ldr	r3, [r2, #0]
 800439c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043a0:	6013      	str	r3, [r2, #0]
}
 80043a2:	4770      	bx	lr
 80043a4:	58024400 	.word	0x58024400

080043a8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a8:	4b73      	ldr	r3, [pc, #460]	; (8004578 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	f000 80dc 	beq.w	800456e <HAL_RCC_GetSysClockFreq+0x1c6>
 80043b6:	2b18      	cmp	r3, #24
 80043b8:	d010      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x34>
 80043ba:	b10b      	cbz	r3, 80043c0 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80043bc:	486f      	ldr	r0, [pc, #444]	; (800457c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80043be:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c0:	4b6d      	ldr	r3, [pc, #436]	; (8004578 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f013 0f20 	tst.w	r3, #32
 80043c8:	f000 80d3 	beq.w	8004572 <HAL_RCC_GetSysClockFreq+0x1ca>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043cc:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80043d4:	4b6a      	ldr	r3, [pc, #424]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80043d6:	fa23 f000 	lsr.w	r0, r3, r0
 80043da:	4770      	bx	lr
{
 80043dc:	b430      	push	{r4, r5}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043de:	4a66      	ldr	r2, [pc, #408]	; (8004578 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80043e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80043e2:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80043e4:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043e8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80043ea:	6b53      	ldr	r3, [r2, #52]	; 0x34

    if (pllm != 0U)
 80043ec:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80043f0:	f000 809e 	beq.w	8004530 <HAL_RCC_GetSysClockFreq+0x188>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80043f4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043f8:	f005 0501 	and.w	r5, r5, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80043fc:	fb05 f303 	mul.w	r3, r5, r3
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004408:	f001 0103 	and.w	r1, r1, #3
 800440c:	2901      	cmp	r1, #1
 800440e:	d064      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0x132>
 8004410:	2902      	cmp	r1, #2
 8004412:	f000 808f 	beq.w	8004534 <HAL_RCC_GetSysClockFreq+0x18c>
 8004416:	b1e1      	cbz	r1, 8004452 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004418:	4b57      	ldr	r3, [pc, #348]	; (8004578 <HAL_RCC_GetSysClockFreq+0x1d0>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004420:	ee07 3a10 	vmov	s14, r3
 8004424:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004428:	eddf 6a56 	vldr	s13, [pc, #344]	; 8004584 <HAL_RCC_GetSysClockFreq+0x1dc>
 800442c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800443c:	ee07 0a10 	vmov	s14, r0
 8004440:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004444:	ed9f 6a50 	vldr	s12, [pc, #320]	; 8004588 <HAL_RCC_GetSysClockFreq+0x1e0>
 8004448:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800444c:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8004450:	e05f      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	f013 0f20 	tst.w	r3, #32
 8004458:	d022      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800445a:	6811      	ldr	r1, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800445c:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800445e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004462:	4a47      	ldr	r2, [pc, #284]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004464:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004466:	ee07 2a10 	vmov	s14, r2
 800446a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800446e:	ee07 0a10 	vmov	s14, r0
 8004472:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004476:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee06 3a90 	vmov	s13, r3
 8004482:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004486:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8004584 <HAL_RCC_GetSysClockFreq+0x1dc>
 800448a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	e038      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044a0:	4b35      	ldr	r3, [pc, #212]	; (8004578 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a8:	ee07 3a10 	vmov	s14, r3
 80044ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044b0:	eddf 6a34 	vldr	s13, [pc, #208]	; 8004584 <HAL_RCC_GetSysClockFreq+0x1dc>
 80044b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c4:	ee07 0a10 	vmov	s14, r0
 80044c8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80044cc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800458c <HAL_RCC_GetSysClockFreq+0x1e4>
 80044d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80044d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d8:	e01b      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044da:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a10 	vmov	s14, r3
 80044e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004584 <HAL_RCC_GetSysClockFreq+0x1dc>
 80044ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044fe:	ee07 0a10 	vmov	s14, r0
 8004502:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004506:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8004588 <HAL_RCC_GetSysClockFreq+0x1e0>
 800450a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800450e:	ee67 7a87 	vmul.f32	s15, s15, s14
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004512:	4b19      	ldr	r3, [pc, #100]	; (8004578 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800451a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800451c:	ee07 3a10 	vmov	s14, r3
 8004520:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004524:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004528:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800452c:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8004530:	bc30      	pop	{r4, r5}
 8004532:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_RCC_GetSysClockFreq+0x1d0>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453c:	ee07 3a10 	vmov	s14, r3
 8004540:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004544:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004584 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004548:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800454c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004554:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004558:	ee07 0a10 	vmov	s14, r0
 800455c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004560:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8004590 <HAL_RCC_GetSysClockFreq+0x1e8>
 8004564:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004568:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 800456c:	e7d1      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0x16a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800456e:	4809      	ldr	r0, [pc, #36]	; (8004594 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8004570:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004572:	4803      	ldr	r0, [pc, #12]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1d8>)
}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
 800457c:	003d0900 	.word	0x003d0900
 8004580:	03d09000 	.word	0x03d09000
 8004584:	39000000 	.word	0x39000000
 8004588:	4a742400 	.word	0x4a742400
 800458c:	4c742400 	.word	0x4c742400
 8004590:	4bb71b00 	.word	0x4bb71b00
 8004594:	016e3600 	.word	0x016e3600

08004598 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004598:	2800      	cmp	r0, #0
 800459a:	f000 80c3 	beq.w	8004724 <HAL_RCC_ClockConfig+0x18c>
{
 800459e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a2:	460d      	mov	r5, r1
 80045a4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a6:	4b65      	ldr	r3, [pc, #404]	; (800473c <HAL_RCC_ClockConfig+0x1a4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	428b      	cmp	r3, r1
 80045b0:	d20b      	bcs.n	80045ca <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4a62      	ldr	r2, [pc, #392]	; (800473c <HAL_RCC_ClockConfig+0x1a4>)
 80045b4:	6813      	ldr	r3, [r2, #0]
 80045b6:	f023 030f 	bic.w	r3, r3, #15
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	428b      	cmp	r3, r1
 80045c6:	f040 80af 	bne.w	8004728 <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	f013 0f04 	tst.w	r3, #4
 80045d0:	d00c      	beq.n	80045ec <HAL_RCC_ClockConfig+0x54>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045d2:	6922      	ldr	r2, [r4, #16]
 80045d4:	4b5a      	ldr	r3, [pc, #360]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045dc:	429a      	cmp	r2, r3
 80045de:	d905      	bls.n	80045ec <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045e0:	4957      	ldr	r1, [pc, #348]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 80045e2:	698b      	ldr	r3, [r1, #24]
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	4313      	orrs	r3, r2
 80045ea:	618b      	str	r3, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f013 0f08 	tst.w	r3, #8
 80045f2:	d00c      	beq.n	800460e <HAL_RCC_ClockConfig+0x76>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045f4:	6962      	ldr	r2, [r4, #20]
 80045f6:	4b52      	ldr	r3, [pc, #328]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045fe:	429a      	cmp	r2, r3
 8004600:	d905      	bls.n	800460e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004602:	494f      	ldr	r1, [pc, #316]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 8004604:	69cb      	ldr	r3, [r1, #28]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	4313      	orrs	r3, r2
 800460c:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	f013 0f10 	tst.w	r3, #16
 8004614:	d00c      	beq.n	8004630 <HAL_RCC_ClockConfig+0x98>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004616:	69a2      	ldr	r2, [r4, #24]
 8004618:	4b49      	ldr	r3, [pc, #292]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004620:	429a      	cmp	r2, r3
 8004622:	d905      	bls.n	8004630 <HAL_RCC_ClockConfig+0x98>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004624:	4946      	ldr	r1, [pc, #280]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 8004626:	69cb      	ldr	r3, [r1, #28]
 8004628:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800462c:	4313      	orrs	r3, r2
 800462e:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	f013 0f20 	tst.w	r3, #32
 8004636:	d00c      	beq.n	8004652 <HAL_RCC_ClockConfig+0xba>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004638:	69e2      	ldr	r2, [r4, #28]
 800463a:	4b41      	ldr	r3, [pc, #260]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004642:	429a      	cmp	r2, r3
 8004644:	d905      	bls.n	8004652 <HAL_RCC_ClockConfig+0xba>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004646:	493e      	ldr	r1, [pc, #248]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 8004648:	6a0b      	ldr	r3, [r1, #32]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	4313      	orrs	r3, r2
 8004650:	620b      	str	r3, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	f013 0f02 	tst.w	r3, #2
 8004658:	d074      	beq.n	8004744 <HAL_RCC_ClockConfig+0x1ac>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800465a:	68e1      	ldr	r1, [r4, #12]
 800465c:	4a38      	ldr	r2, [pc, #224]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 800465e:	6992      	ldr	r2, [r2, #24]
 8004660:	f002 020f 	and.w	r2, r2, #15
 8004664:	4291      	cmp	r1, r2
 8004666:	d965      	bls.n	8004734 <HAL_RCC_ClockConfig+0x19c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004668:	4a35      	ldr	r2, [pc, #212]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 800466a:	6993      	ldr	r3, [r2, #24]
 800466c:	f023 030f 	bic.w	r3, r3, #15
 8004670:	430b      	orrs	r3, r1
 8004672:	6193      	str	r3, [r2, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	f013 0f01 	tst.w	r3, #1
 800467a:	d041      	beq.n	8004700 <HAL_RCC_ClockConfig+0x168>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800467c:	4a30      	ldr	r2, [pc, #192]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 800467e:	6993      	ldr	r3, [r2, #24]
 8004680:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004684:	68a1      	ldr	r1, [r4, #8]
 8004686:	430b      	orrs	r3, r1
 8004688:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468a:	6862      	ldr	r2, [r4, #4]
 800468c:	2a02      	cmp	r2, #2
 800468e:	d00a      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004690:	2a03      	cmp	r2, #3
 8004692:	d027      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004694:	2a01      	cmp	r2, #1
 8004696:	d02c      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x15a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004698:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f013 0f04 	tst.w	r3, #4
 80046a0:	d106      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 80046a2:	2001      	movs	r0, #1
 80046a4:	e0c1      	b.n	800482a <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046a6:	4b26      	ldr	r3, [pc, #152]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80046ae:	d03d      	beq.n	800472c <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046b0:	4923      	ldr	r1, [pc, #140]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 80046b2:	690b      	ldr	r3, [r1, #16]
 80046b4:	f023 0307 	bic.w	r3, r3, #7
 80046b8:	4313      	orrs	r3, r2
 80046ba:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80046bc:	f7fc ff0a 	bl	80014d4 <HAL_GetTick>
 80046c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	4f1f      	ldr	r7, [pc, #124]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c4:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ce:	6862      	ldr	r2, [r4, #4]
 80046d0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80046d4:	d014      	beq.n	8004700 <HAL_RCC_ClockConfig+0x168>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d6:	f7fc fefd 	bl	80014d4 <HAL_GetTick>
 80046da:	1b80      	subs	r0, r0, r6
 80046dc:	4540      	cmp	r0, r8
 80046de:	d9f3      	bls.n	80046c8 <HAL_RCC_ClockConfig+0x130>
            return HAL_TIMEOUT;
 80046e0:	2003      	movs	r0, #3
 80046e2:	e0a2      	b.n	800482a <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80046ec:	d1e0      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 80046ee:	2001      	movs	r0, #1
 80046f0:	e09b      	b.n	800482a <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046f2:	4b13      	ldr	r3, [pc, #76]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046fa:	d1d9      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 80046fc:	2001      	movs	r0, #1
 80046fe:	e094      	b.n	800482a <HAL_RCC_ClockConfig+0x292>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f013 0f02 	tst.w	r3, #2
 8004706:	d020      	beq.n	800474a <HAL_RCC_ClockConfig+0x1b2>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004708:	68e2      	ldr	r2, [r4, #12]
 800470a:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	429a      	cmp	r2, r3
 8004714:	d219      	bcs.n	800474a <HAL_RCC_ClockConfig+0x1b2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004716:	490a      	ldr	r1, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x1a8>)
 8004718:	698b      	ldr	r3, [r1, #24]
 800471a:	f023 030f 	bic.w	r3, r3, #15
 800471e:	4313      	orrs	r3, r2
 8004720:	618b      	str	r3, [r1, #24]
 8004722:	e012      	b.n	800474a <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 8004724:	2001      	movs	r0, #1
}
 8004726:	4770      	bx	lr
      return HAL_ERROR;
 8004728:	2001      	movs	r0, #1
 800472a:	e07e      	b.n	800482a <HAL_RCC_ClockConfig+0x292>
          return HAL_ERROR;
 800472c:	2001      	movs	r0, #1
 800472e:	e07c      	b.n	800482a <HAL_RCC_ClockConfig+0x292>
      return HAL_ERROR;
 8004730:	2001      	movs	r0, #1
 8004732:	e07a      	b.n	800482a <HAL_RCC_ClockConfig+0x292>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004734:	f013 0f01 	tst.w	r3, #1
 8004738:	d1a0      	bne.n	800467c <HAL_RCC_ClockConfig+0xe4>
 800473a:	e7e5      	b.n	8004708 <HAL_RCC_ClockConfig+0x170>
 800473c:	52002000 	.word	0x52002000
 8004740:	58024400 	.word	0x58024400
 8004744:	f013 0f01 	tst.w	r3, #1
 8004748:	d198      	bne.n	800467c <HAL_RCC_ClockConfig+0xe4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800474a:	4b39      	ldr	r3, [pc, #228]	; (8004830 <HAL_RCC_ClockConfig+0x298>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	42ab      	cmp	r3, r5
 8004754:	d90a      	bls.n	800476c <HAL_RCC_ClockConfig+0x1d4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4a36      	ldr	r2, [pc, #216]	; (8004830 <HAL_RCC_ClockConfig+0x298>)
 8004758:	6813      	ldr	r3, [r2, #0]
 800475a:	f023 030f 	bic.w	r3, r3, #15
 800475e:	432b      	orrs	r3, r5
 8004760:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	42ab      	cmp	r3, r5
 800476a:	d1e1      	bne.n	8004730 <HAL_RCC_ClockConfig+0x198>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	f013 0f04 	tst.w	r3, #4
 8004772:	d00c      	beq.n	800478e <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004774:	6922      	ldr	r2, [r4, #16]
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_RCC_ClockConfig+0x29c>)
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800477e:	429a      	cmp	r2, r3
 8004780:	d205      	bcs.n	800478e <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004782:	492c      	ldr	r1, [pc, #176]	; (8004834 <HAL_RCC_ClockConfig+0x29c>)
 8004784:	698b      	ldr	r3, [r1, #24]
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	4313      	orrs	r3, r2
 800478c:	618b      	str	r3, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	f013 0f08 	tst.w	r3, #8
 8004794:	d00c      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004796:	6962      	ldr	r2, [r4, #20]
 8004798:	4b26      	ldr	r3, [pc, #152]	; (8004834 <HAL_RCC_ClockConfig+0x29c>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d205      	bcs.n	80047b0 <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047a4:	4923      	ldr	r1, [pc, #140]	; (8004834 <HAL_RCC_ClockConfig+0x29c>)
 80047a6:	69cb      	ldr	r3, [r1, #28]
 80047a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	f013 0f10 	tst.w	r3, #16
 80047b6:	d00c      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047b8:	69a2      	ldr	r2, [r4, #24]
 80047ba:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_RCC_ClockConfig+0x29c>)
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d205      	bcs.n	80047d2 <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047c6:	491b      	ldr	r1, [pc, #108]	; (8004834 <HAL_RCC_ClockConfig+0x29c>)
 80047c8:	69cb      	ldr	r3, [r1, #28]
 80047ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f013 0f20 	tst.w	r3, #32
 80047d8:	d00c      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x25c>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047da:	69e2      	ldr	r2, [r4, #28]
 80047dc:	4b15      	ldr	r3, [pc, #84]	; (8004834 <HAL_RCC_ClockConfig+0x29c>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d205      	bcs.n	80047f4 <HAL_RCC_ClockConfig+0x25c>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80047e8:	4912      	ldr	r1, [pc, #72]	; (8004834 <HAL_RCC_ClockConfig+0x29c>)
 80047ea:	6a0b      	ldr	r3, [r1, #32]
 80047ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f0:	4313      	orrs	r3, r2
 80047f2:	620b      	str	r3, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047f4:	f7ff fdd8 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 80047f8:	490e      	ldr	r1, [pc, #56]	; (8004834 <HAL_RCC_ClockConfig+0x29c>)
 80047fa:	698b      	ldr	r3, [r1, #24]
 80047fc:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <HAL_RCC_ClockConfig+0x2a0>)
 80047fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800480a:	698b      	ldr	r3, [r1, #24]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	5cd3      	ldrb	r3, [r2, r3]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	fa20 f303 	lsr.w	r3, r0, r3
 800481a:	4a08      	ldr	r2, [pc, #32]	; (800483c <HAL_RCC_ClockConfig+0x2a4>)
 800481c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_RCC_ClockConfig+0x2a8>)
 8004820:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <HAL_RCC_ClockConfig+0x2ac>)
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	f7fc fdf5 	bl	8001414 <HAL_InitTick>
}
 800482a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800482e:	bf00      	nop
 8004830:	52002000 	.word	0x52002000
 8004834:	58024400 	.word	0x58024400
 8004838:	080080a8 	.word	0x080080a8
 800483c:	24002004 	.word	0x24002004
 8004840:	24002000 	.word	0x24002000
 8004844:	2400200c 	.word	0x2400200c

08004848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004848:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800484a:	f7ff fdad 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 800484e:	4a0b      	ldr	r2, [pc, #44]	; (800487c <HAL_RCC_GetHCLKFreq+0x34>)
 8004850:	6993      	ldr	r3, [r2, #24]
 8004852:	490b      	ldr	r1, [pc, #44]	; (8004880 <HAL_RCC_GetHCLKFreq+0x38>)
 8004854:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004858:	5ccb      	ldrb	r3, [r1, r3]
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004862:	6992      	ldr	r2, [r2, #24]
 8004864:	f002 020f 	and.w	r2, r2, #15
 8004868:	5c88      	ldrb	r0, [r1, r2]
 800486a:	f000 001f 	and.w	r0, r0, #31
 800486e:	fa23 f000 	lsr.w	r0, r3, r0
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004874:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004876:	4a04      	ldr	r2, [pc, #16]	; (8004888 <HAL_RCC_GetHCLKFreq+0x40>)
 8004878:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800487a:	bd08      	pop	{r3, pc}
 800487c:	58024400 	.word	0x58024400
 8004880:	080080a8 	.word	0x080080a8
 8004884:	24002004 	.word	0x24002004
 8004888:	24002000 	.word	0x24002000

0800488c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800488c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800488e:	f7ff ffdb 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800489a:	4a04      	ldr	r2, [pc, #16]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800489c:	5cd3      	ldrb	r3, [r2, r3]
 800489e:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80048a2:	40d8      	lsrs	r0, r3
 80048a4:	bd08      	pop	{r3, pc}
 80048a6:	bf00      	nop
 80048a8:	58024400 	.word	0x58024400
 80048ac:	080080a8 	.word	0x080080a8

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80048b2:	f7ff ffc9 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80048be:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
 80048c2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80048c6:	40d8      	lsrs	r0, r3
 80048c8:	bd08      	pop	{r3, pc}
 80048ca:	bf00      	nop
 80048cc:	58024400 	.word	0x58024400
 80048d0:	080080a8 	.word	0x080080a8

080048d4 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CCSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80048d4:	4770      	bx	lr
	...

080048d8 <HAL_RCC_NMI_IRQHandler>:
{
 80048d8:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80048dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80048e2:	d100      	bne.n	80048e6 <HAL_RCC_NMI_IRQHandler+0xe>
}
 80048e4:	bd08      	pop	{r3, pc}
    HAL_RCC_CCSCallback();
 80048e6:	f7ff fff5 	bl	80048d4 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80048ea:	4b02      	ldr	r3, [pc, #8]	; (80048f4 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80048ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048f2:	e7f7      	b.n	80048e4 <HAL_RCC_NMI_IRQHandler+0xc>
 80048f4:	58024400 	.word	0x58024400

080048f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048fa:	4b3e      	ldr	r3, [pc, #248]	; (80049f4 <RCCEx_PLL2_Config+0xfc>)
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b03      	cmp	r3, #3
 8004904:	d074      	beq.n	80049f0 <RCCEx_PLL2_Config+0xf8>
 8004906:	4606      	mov	r6, r0
 8004908:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800490a:	4a3a      	ldr	r2, [pc, #232]	; (80049f4 <RCCEx_PLL2_Config+0xfc>)
 800490c:	6813      	ldr	r3, [r2, #0]
 800490e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fc fdde 	bl	80014d4 <HAL_GetTick>
 8004918:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800491a:	4d36      	ldr	r5, [pc, #216]	; (80049f4 <RCCEx_PLL2_Config+0xfc>)
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004922:	d006      	beq.n	8004932 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004924:	f7fc fdd6 	bl	80014d4 <HAL_GetTick>
 8004928:	1b03      	subs	r3, r0, r4
 800492a:	2b02      	cmp	r3, #2
 800492c:	d9f6      	bls.n	800491c <RCCEx_PLL2_Config+0x24>
      {
        return HAL_TIMEOUT;
 800492e:	2003      	movs	r0, #3
 8004930:	e05f      	b.n	80049f2 <RCCEx_PLL2_Config+0xfa>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004932:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <RCCEx_PLL2_Config+0xfc>)
 8004934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004936:	6831      	ldr	r1, [r6, #0]
 8004938:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800493c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8004940:	629a      	str	r2, [r3, #40]	; 0x28
 8004942:	68b2      	ldr	r2, [r6, #8]
 8004944:	3a01      	subs	r2, #1
 8004946:	0252      	lsls	r2, r2, #9
 8004948:	b292      	uxth	r2, r2
 800494a:	68f1      	ldr	r1, [r6, #12]
 800494c:	3901      	subs	r1, #1
 800494e:	0409      	lsls	r1, r1, #16
 8004950:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004954:	430a      	orrs	r2, r1
 8004956:	6871      	ldr	r1, [r6, #4]
 8004958:	3901      	subs	r1, #1
 800495a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800495e:	430a      	orrs	r2, r1
 8004960:	6931      	ldr	r1, [r6, #16]
 8004962:	3901      	subs	r1, #1
 8004964:	0609      	lsls	r1, r1, #24
 8004966:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800496a:	430a      	orrs	r2, r1
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004974:	6971      	ldr	r1, [r6, #20]
 8004976:	430a      	orrs	r2, r1
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	f022 0220 	bic.w	r2, r2, #32
 8004980:	69b1      	ldr	r1, [r6, #24]
 8004982:	430a      	orrs	r2, r1
 8004984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	f022 0210 	bic.w	r2, r2, #16
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800498e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004990:	69f1      	ldr	r1, [r6, #28]
 8004992:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <RCCEx_PLL2_Config+0x100>)
 8004994:	4002      	ands	r2, r0
 8004996:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800499a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	f042 0210 	orr.w	r2, r2, #16
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049a4:	b9c7      	cbnz	r7, 80049d8 <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049a6:	461a      	mov	r2, r3
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049b0:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <RCCEx_PLL2_Config+0xfc>)
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ba:	f7fc fd8b 	bl	80014d4 <HAL_GetTick>
 80049be:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049c0:	4d0c      	ldr	r5, [pc, #48]	; (80049f4 <RCCEx_PLL2_Config+0xfc>)
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80049c8:	d110      	bne.n	80049ec <RCCEx_PLL2_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049ca:	f7fc fd83 	bl	80014d4 <HAL_GetTick>
 80049ce:	1b00      	subs	r0, r0, r4
 80049d0:	2802      	cmp	r0, #2
 80049d2:	d9f6      	bls.n	80049c2 <RCCEx_PLL2_Config+0xca>
      {
        return HAL_TIMEOUT;
 80049d4:	2003      	movs	r0, #3
 80049d6:	e00c      	b.n	80049f2 <RCCEx_PLL2_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 80049d8:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049da:	4a06      	ldr	r2, [pc, #24]	; (80049f4 <RCCEx_PLL2_Config+0xfc>)
 80049dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049de:	bf0c      	ite	eq
 80049e0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049e4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80049e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049ea:	e7e1      	b.n	80049b0 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 80049ec:	2000      	movs	r0, #0
 80049ee:	e000      	b.n	80049f2 <RCCEx_PLL2_Config+0xfa>
    return HAL_ERROR;
 80049f0:	2001      	movs	r0, #1
}
 80049f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f4:	58024400 	.word	0x58024400
 80049f8:	ffff0007 	.word	0xffff0007

080049fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049fe:	4b3e      	ldr	r3, [pc, #248]	; (8004af8 <RCCEx_PLL3_Config+0xfc>)
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d074      	beq.n	8004af4 <RCCEx_PLL3_Config+0xf8>
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a0e:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <RCCEx_PLL3_Config+0xfc>)
 8004a10:	6813      	ldr	r3, [r2, #0]
 8004a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a18:	f7fc fd5c 	bl	80014d4 <HAL_GetTick>
 8004a1c:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a1e:	4d36      	ldr	r5, [pc, #216]	; (8004af8 <RCCEx_PLL3_Config+0xfc>)
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004a26:	d006      	beq.n	8004a36 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a28:	f7fc fd54 	bl	80014d4 <HAL_GetTick>
 8004a2c:	1b03      	subs	r3, r0, r4
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d9f6      	bls.n	8004a20 <RCCEx_PLL3_Config+0x24>
      {
        return HAL_TIMEOUT;
 8004a32:	2003      	movs	r0, #3
 8004a34:	e05f      	b.n	8004af6 <RCCEx_PLL3_Config+0xfa>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a36:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <RCCEx_PLL3_Config+0xfc>)
 8004a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a3a:	6831      	ldr	r1, [r6, #0]
 8004a3c:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8004a40:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004a44:	629a      	str	r2, [r3, #40]	; 0x28
 8004a46:	68b2      	ldr	r2, [r6, #8]
 8004a48:	3a01      	subs	r2, #1
 8004a4a:	0252      	lsls	r2, r2, #9
 8004a4c:	b292      	uxth	r2, r2
 8004a4e:	68f1      	ldr	r1, [r6, #12]
 8004a50:	3901      	subs	r1, #1
 8004a52:	0409      	lsls	r1, r1, #16
 8004a54:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	6871      	ldr	r1, [r6, #4]
 8004a5c:	3901      	subs	r1, #1
 8004a5e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004a62:	430a      	orrs	r2, r1
 8004a64:	6931      	ldr	r1, [r6, #16]
 8004a66:	3901      	subs	r1, #1
 8004a68:	0609      	lsls	r1, r1, #24
 8004a6a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a78:	6971      	ldr	r1, [r6, #20]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a84:	69b1      	ldr	r1, [r6, #24]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a92:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004a94:	69f1      	ldr	r1, [r6, #28]
 8004a96:	4a19      	ldr	r2, [pc, #100]	; (8004afc <RCCEx_PLL3_Config+0x100>)
 8004a98:	4002      	ands	r2, r0
 8004a9a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004a9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004aa8:	b9c7      	cbnz	r7, 8004adc <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ab4:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <RCCEx_PLL3_Config+0xfc>)
 8004ab6:	6813      	ldr	r3, [r2, #0]
 8004ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abe:	f7fc fd09 	bl	80014d4 <HAL_GetTick>
 8004ac2:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ac4:	4d0c      	ldr	r5, [pc, #48]	; (8004af8 <RCCEx_PLL3_Config+0xfc>)
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004acc:	d110      	bne.n	8004af0 <RCCEx_PLL3_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ace:	f7fc fd01 	bl	80014d4 <HAL_GetTick>
 8004ad2:	1b00      	subs	r0, r0, r4
 8004ad4:	2802      	cmp	r0, #2
 8004ad6:	d9f6      	bls.n	8004ac6 <RCCEx_PLL3_Config+0xca>
      {
        return HAL_TIMEOUT;
 8004ad8:	2003      	movs	r0, #3
 8004ada:	e00c      	b.n	8004af6 <RCCEx_PLL3_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 8004adc:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ade:	4a06      	ldr	r2, [pc, #24]	; (8004af8 <RCCEx_PLL3_Config+0xfc>)
 8004ae0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ae2:	bf0c      	ite	eq
 8004ae4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ae8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004aec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004aee:	e7e1      	b.n	8004ab4 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 8004af0:	2000      	movs	r0, #0
 8004af2:	e000      	b.n	8004af6 <RCCEx_PLL3_Config+0xfa>
    return HAL_ERROR;
 8004af4:	2001      	movs	r0, #1
}
 8004af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af8:	58024400 	.word	0x58024400
 8004afc:	ffff0007 	.word	0xffff0007

08004b00 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b04:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b06:	6803      	ldr	r3, [r0, #0]
 8004b08:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004b0c:	d02b      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004b0e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b14:	d021      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8004b16:	d80c      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004b18:	b1cb      	cbz	r3, 8004b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b20:	2102      	movs	r1, #2
 8004b22:	3004      	adds	r0, #4
 8004b24:	f7ff fee8 	bl	80048f8 <RCCEx_PLL2_Config>
 8004b28:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004b2a:	b9ee      	cbnz	r6, 8004b68 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004b2e:	2601      	movs	r6, #1
 8004b30:	e01a      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004b32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b36:	d108      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b38:	4a96      	ldr	r2, [pc, #600]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004b3a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004b3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004b40:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004b42:	430b      	orrs	r3, r1
 8004b44:	6513      	str	r3, [r2, #80]	; 0x50
 8004b46:	2600      	movs	r6, #0
 8004b48:	e00e      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004b4a:	2601      	movs	r6, #1
 8004b4c:	e00c      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4e:	4a91      	ldr	r2, [pc, #580]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004b50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b56:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004b58:	e7ee      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x38>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	3024      	adds	r0, #36	; 0x24
 8004b5e:	f7ff ff4d 	bl	80049fc <RCCEx_PLL3_Config>
 8004b62:	4606      	mov	r6, r0
      break;
 8004b64:	e7e1      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b66:	2600      	movs	r6, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b6e:	d025      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d834      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8004b76:	e8df f003 	tbb	[pc, r3]
 8004b7a:	0a03      	.short	0x0a03
 8004b7c:	1710      	.short	0x1710
 8004b7e:	17          	.byte	0x17
 8004b7f:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b80:	4a84      	ldr	r2, [pc, #528]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004b82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b88:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004b8a:	4635      	mov	r5, r6
 8004b8c:	e00d      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b8e:	2100      	movs	r1, #0
 8004b90:	1d20      	adds	r0, r4, #4
 8004b92:	f7ff feb1 	bl	80048f8 <RCCEx_PLL2_Config>
 8004b96:	4605      	mov	r5, r0
      break;
 8004b98:	e007      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ba0:	f7ff ff2c 	bl	80049fc <RCCEx_PLL3_Config>
 8004ba4:	4605      	mov	r5, r0
      break;
 8004ba6:	e000      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ba8:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8004baa:	b9e5      	cbnz	r5, 8004be6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bac:	4a79      	ldr	r2, [pc, #484]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004bae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004bb0:	f023 0307 	bic.w	r3, r3, #7
 8004bb4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	6513      	str	r3, [r2, #80]	; 0x50
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004bbc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004bc4:	d021      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004bc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bc8:	2b80      	cmp	r3, #128	; 0x80
 8004bca:	d03b      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004bcc:	d810      	bhi.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8004bce:	b39b      	cbz	r3, 8004c38 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	d10a      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	1d20      	adds	r0, r4, #4
 8004bd8:	f7ff fe8e 	bl	80048f8 <RCCEx_PLL2_Config>
 8004bdc:	4605      	mov	r5, r0
      break;
 8004bde:	e00c      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xfa>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004be0:	2601      	movs	r6, #1
 8004be2:	4635      	mov	r5, r6
 8004be4:	e7eb      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004be6:	462e      	mov	r6, r5
 8004be8:	e7e9      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004bea:	2601      	movs	r6, #1
 8004bec:	4635      	mov	r5, r6
 8004bee:	e00c      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004bf0:	2bc0      	cmp	r3, #192	; 0xc0
 8004bf2:	d002      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf8:	d11b      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 8004bfa:	bb55      	cbnz	r5, 8004c52 <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004bfc:	4a65      	ldr	r2, [pc, #404]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004bfe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004c00:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004c04:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004c06:	430b      	orrs	r3, r1
 8004c08:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c10:	d045      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c12:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1a:	d038      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004c1c:	d81e      	bhi.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004c1e:	b383      	cbz	r3, 8004c82 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c24:	d117      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c26:	2100      	movs	r1, #0
 8004c28:	1d20      	adds	r0, r4, #4
 8004c2a:	f7ff fe65 	bl	80048f8 <RCCEx_PLL2_Config>
 8004c2e:	4605      	mov	r5, r0
      break;
 8004c30:	e01a      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004c32:	2601      	movs	r6, #1
 8004c34:	4635      	mov	r5, r6
 8004c36:	e7e8      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c38:	4a56      	ldr	r2, [pc, #344]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c40:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004c42:	e7da      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xfa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c44:	2100      	movs	r1, #0
 8004c46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c4a:	f7ff fed7 	bl	80049fc <RCCEx_PLL3_Config>
 8004c4e:	4605      	mov	r5, r0
      break;
 8004c50:	e7d3      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004c52:	462e      	mov	r6, r5
 8004c54:	e7d9      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c56:	2601      	movs	r6, #1
 8004c58:	4635      	mov	r5, r6
 8004c5a:	e020      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004c5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c60:	d002      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004c62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c66:	d109      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 8004c68:	b9c5      	cbnz	r5, 8004c9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c6a:	4a4a      	ldr	r2, [pc, #296]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c6c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004c6e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004c72:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6593      	str	r3, [r2, #88]	; 0x58
 8004c7a:	e010      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c7c:	2601      	movs	r6, #1
 8004c7e:	4635      	mov	r5, r6
 8004c80:	e00d      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c82:	4a44      	ldr	r2, [pc, #272]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004c8c:	e7ec      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x168>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c94:	f7ff feb2 	bl	80049fc <RCCEx_PLL3_Config>
 8004c98:	4605      	mov	r5, r0
      break;
 8004c9a:	e7e5      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004c9c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ca4:	d023      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ca6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cae:	d041      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004cb0:	d80d      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d038      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	1d20      	adds	r0, r4, #4
 8004cc0:	f7ff fe1a 	bl	80048f8 <RCCEx_PLL2_Config>
 8004cc4:	4605      	mov	r5, r0
      break;
 8004cc6:	e008      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004cc8:	2601      	movs	r6, #1
 8004cca:	4635      	mov	r5, r6
 8004ccc:	e00f      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004cce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cd2:	d002      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8004cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cd8:	d123      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x222>
    if(ret == HAL_OK)
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	d131      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004cde:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004ce0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004ce2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004ce6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004cea:	430b      	orrs	r3, r1
 8004cec:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004cf4:	d02e      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->QspiClockSelection)
 8004cf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d03f      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004cfc:	d826      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8004cfe:	b133      	cbz	r3, 8004d0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d120      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d04:	4a23      	ldr	r2, [pc, #140]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	d13a      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d12:	4a20      	ldr	r2, [pc, #128]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d14:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004d1a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d20:	e018      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004d22:	2601      	movs	r6, #1
 8004d24:	4635      	mov	r5, r6
 8004d26:	e7e2      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d28:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d30:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004d32:	e7d2      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d34:	2100      	movs	r1, #0
 8004d36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d3a:	f7ff fe5f 	bl	80049fc <RCCEx_PLL3_Config>
 8004d3e:	4605      	mov	r5, r0
      break;
 8004d40:	e7cb      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8004d42:	462e      	mov	r6, r5
 8004d44:	e7d3      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->QspiClockSelection)
 8004d46:	2601      	movs	r6, #1
 8004d48:	4635      	mov	r5, r6
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004d4c:	2b30      	cmp	r3, #48	; 0x30
 8004d4e:	d0de      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004d50:	2601      	movs	r6, #1
 8004d52:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004d5a:	d02c      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d62:	d04d      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004d64:	d818      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d044      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6e:	d10d      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d70:	2100      	movs	r1, #0
 8004d72:	1d20      	adds	r0, r4, #4
 8004d74:	f7ff fdc0 	bl	80048f8 <RCCEx_PLL2_Config>
 8004d78:	4605      	mov	r5, r0
      break;
 8004d7a:	e013      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	1d20      	adds	r0, r4, #4
 8004d80:	f7ff fdba 	bl	80048f8 <RCCEx_PLL2_Config>
 8004d84:	4605      	mov	r5, r0
      break;
 8004d86:	e7c2      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004d88:	462e      	mov	r6, r5
 8004d8a:	e7e3      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004d8c:	2601      	movs	r6, #1
 8004d8e:	4635      	mov	r5, r6
 8004d90:	e011      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8004d92:	bf00      	nop
 8004d94:	58024400 	.word	0x58024400
 8004d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d9c:	d002      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da2:	d124      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 8004da4:	2d00      	cmp	r5, #0
 8004da6:	d132      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004da8:	4a80      	ldr	r2, [pc, #512]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004daa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004db2:	430b      	orrs	r3, r1
 8004db4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004dbc:	d036      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004dbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc4:	d050      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004dc6:	d827      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004dc8:	b13b      	cbz	r3, 8004dda <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dce:	d120      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	1d20      	adds	r0, r4, #4
 8004dd4:	f7ff fd90 	bl	80048f8 <RCCEx_PLL2_Config>
 8004dd8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	d14b      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004dde:	4a73      	ldr	r2, [pc, #460]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004de0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004de2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004de6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6513      	str	r3, [r2, #80]	; 0x50
 8004dec:	e01e      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004dee:	2601      	movs	r6, #1
 8004df0:	4635      	mov	r5, r6
 8004df2:	e7e0      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df4:	4a6d      	ldr	r2, [pc, #436]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004df6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004dfe:	e7d1      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e00:	2100      	movs	r1, #0
 8004e02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e06:	f7ff fdf9 	bl	80049fc <RCCEx_PLL3_Config>
 8004e0a:	4605      	mov	r5, r0
      break;
 8004e0c:	e7ca      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004e0e:	462e      	mov	r6, r5
 8004e10:	e7d1      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e12:	2601      	movs	r6, #1
 8004e14:	4635      	mov	r5, r6
 8004e16:	e009      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004e18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e1c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8004e20:	d0db      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004e22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e26:	d0d8      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004e28:	2601      	movs	r6, #1
 8004e2a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004e32:	d02f      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e34:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3c:	d043      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8004e3e:	d81f      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8004e40:	b13b      	cbz	r3, 8004e52 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e46:	d118      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e48:	2101      	movs	r1, #1
 8004e4a:	1d20      	adds	r0, r4, #4
 8004e4c:	f7ff fd54 	bl	80048f8 <RCCEx_PLL2_Config>
 8004e50:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004e52:	2d00      	cmp	r5, #0
 8004e54:	d13e      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e56:	4a55      	ldr	r2, [pc, #340]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e58:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004e5a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004e5e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004e62:	430b      	orrs	r3, r1
 8004e64:	6593      	str	r3, [r2, #88]	; 0x58
 8004e66:	e015      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x394>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e68:	2101      	movs	r1, #1
 8004e6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e6e:	f7ff fdc5 	bl	80049fc <RCCEx_PLL3_Config>
 8004e72:	4605      	mov	r5, r0
      break;
 8004e74:	e7b1      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004e76:	462e      	mov	r6, r5
 8004e78:	e7d8      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e7a:	2601      	movs	r6, #1
 8004e7c:	4635      	mov	r5, r6
 8004e7e:	e009      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8004e80:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e84:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004e88:	d0e3      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004e8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e8e:	d0e0      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004e90:	2601      	movs	r6, #1
 8004e92:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004e9a:	d009      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 8004e9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea2:	d019      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8004ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea8:	d024      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004eaa:	b1d3      	cbz	r3, 8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004eac:	2601      	movs	r6, #1
 8004eae:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004eb6:	d032      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->FmcClockSelection)
 8004eb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d859      	bhi.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x472>
 8004ebe:	e8df f003 	tbb	[pc, r3]
 8004ec2:	2126      	.short	0x2126
 8004ec4:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ecc:	f7ff fd96 	bl	80049fc <RCCEx_PLL3_Config>
 8004ed0:	4605      	mov	r5, r0
      break;
 8004ed2:	e7be      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004ed4:	462e      	mov	r6, r5
 8004ed6:	e7dd      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed8:	4a34      	ldr	r2, [pc, #208]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004ee2:	b96d      	cbnz	r5, 8004f00 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ee4:	4a31      	ldr	r2, [pc, #196]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ee6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004ee8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004eec:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	6513      	str	r3, [r2, #80]	; 0x50
 8004ef2:	e7dd      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	1d20      	adds	r0, r4, #4
 8004ef8:	f7ff fcfe 	bl	80048f8 <RCCEx_PLL2_Config>
 8004efc:	4605      	mov	r5, r0
      break;
 8004efe:	e7f0      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004f00:	462e      	mov	r6, r5
 8004f02:	e7d5      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f04:	4a29      	ldr	r2, [pc, #164]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004f0e:	bb9d      	cbnz	r5, 8004f78 <HAL_RCCEx_PeriphCLKConfig+0x478>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f10:	4a26      	ldr	r2, [pc, #152]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f12:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f14:	f023 0303 	bic.w	r3, r3, #3
 8004f18:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004f24:	d12a      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	f013 0f01 	tst.w	r3, #1
 8004f2c:	f000 80aa 	beq.w	8005084 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f30:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004f32:	2b28      	cmp	r3, #40	; 0x28
 8004f34:	f200 80a4 	bhi.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004f38:	e8df f003 	tbb	[pc, r3]
 8004f3c:	a2a2a292 	.word	0xa2a2a292
 8004f40:	a2a2a2a2 	.word	0xa2a2a2a2
 8004f44:	a2a2a28d 	.word	0xa2a2a28d
 8004f48:	a2a2a2a2 	.word	0xa2a2a2a2
 8004f4c:	a2a2a29b 	.word	0xa2a2a29b
 8004f50:	a2a2a2a2 	.word	0xa2a2a2a2
 8004f54:	a2a2a292 	.word	0xa2a2a292
 8004f58:	a2a2a2a2 	.word	0xa2a2a2a2
 8004f5c:	a2a2a292 	.word	0xa2a2a292
 8004f60:	a2a2a2a2 	.word	0xa2a2a2a2
 8004f64:	92          	.byte	0x92
 8004f65:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f66:	2102      	movs	r1, #2
 8004f68:	1d20      	adds	r0, r4, #4
 8004f6a:	f7ff fcc5 	bl	80048f8 <RCCEx_PLL2_Config>
 8004f6e:	4605      	mov	r5, r0
      break;
 8004f70:	e7cd      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->FmcClockSelection)
 8004f72:	2601      	movs	r6, #1
 8004f74:	4635      	mov	r5, r6
 8004f76:	e7d2      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8004f78:	462e      	mov	r6, r5
 8004f7a:	e7d0      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x41e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004f7e:	6813      	ldr	r3, [r2, #0]
 8004f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f84:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004f86:	f7fc faa5 	bl	80014d4 <HAL_GetTick>
 8004f8a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f8c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004f90:	f8d8 3000 	ldr.w	r3, [r8]
 8004f94:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9a:	f7fc fa9b 	bl	80014d4 <HAL_GetTick>
 8004f9e:	1bc0      	subs	r0, r0, r7
 8004fa0:	2864      	cmp	r0, #100	; 0x64
 8004fa2:	d9f5      	bls.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x490>
        ret = HAL_TIMEOUT;
 8004fa4:	2603      	movs	r6, #3
 8004fa6:	4635      	mov	r5, r6
 8004fa8:	e7bd      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004faa:	bf00      	nop
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	58024800 	.word	0x58024800
    if(ret == HAL_OK)
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	d14c      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x552>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fb8:	4b9f      	ldr	r3, [pc, #636]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004fc0:	4053      	eors	r3, r2
 8004fc2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fc8:	4b9b      	ldr	r3, [pc, #620]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004fca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004fd2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004fd6:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004fda:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004fde:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004fe0:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fe2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d014      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fec:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004ff0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004ff4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004ff8:	d021      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8004ffa:	4a8f      	ldr	r2, [pc, #572]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004ffc:	6913      	ldr	r3, [r2, #16]
 8004ffe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005002:	6113      	str	r3, [r2, #16]
 8005004:	4a8c      	ldr	r2, [pc, #560]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005006:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005008:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800500c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005010:	430b      	orrs	r3, r1
 8005012:	6713      	str	r3, [r2, #112]	; 0x70
 8005014:	e787      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x426>
        tickstart = HAL_GetTick();
 8005016:	f7fc fa5d 	bl	80014d4 <HAL_GetTick>
 800501a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800501c:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005020:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005024:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005028:	f013 0f02 	tst.w	r3, #2
 800502c:	d1de      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x4ec>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fc fa51 	bl	80014d4 <HAL_GetTick>
 8005032:	1bc0      	subs	r0, r0, r7
 8005034:	4548      	cmp	r0, r9
 8005036:	d9f5      	bls.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x524>
            ret = HAL_TIMEOUT;
 8005038:	2603      	movs	r6, #3
 800503a:	4635      	mov	r5, r6
 800503c:	e773      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x426>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800503e:	487e      	ldr	r0, [pc, #504]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005040:	6901      	ldr	r1, [r0, #16]
 8005042:	4a7e      	ldr	r2, [pc, #504]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005044:	ea02 1313 	and.w	r3, r2, r3, lsr #4
 8005048:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 800504c:	4313      	orrs	r3, r2
 800504e:	6103      	str	r3, [r0, #16]
 8005050:	e7d8      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005052:	462e      	mov	r6, r5
 8005054:	e767      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005056:	2101      	movs	r1, #1
 8005058:	1d20      	adds	r0, r4, #4
 800505a:	f7ff fc4d 	bl	80048f8 <RCCEx_PLL2_Config>
 800505e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005060:	b9e5      	cbnz	r5, 800509c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005062:	4a75      	ldr	r2, [pc, #468]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005064:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005066:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800506a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800506c:	430b      	orrs	r3, r1
 800506e:	6553      	str	r3, [r2, #84]	; 0x54
 8005070:	e008      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005072:	2101      	movs	r1, #1
 8005074:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005078:	f7ff fcc0 	bl	80049fc <RCCEx_PLL3_Config>
 800507c:	4605      	mov	r5, r0
      break;
 800507e:	e7ef      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 8005080:	2601      	movs	r6, #1
 8005082:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	f013 0f02 	tst.w	r3, #2
 800508a:	d016      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800508c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800508e:	2b05      	cmp	r3, #5
 8005090:	d827      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 8005092:	e8df f003 	tbb	[pc, r3]
 8005096:	050a      	.short	0x050a
 8005098:	0a0a0a1f 	.word	0x0a0a0a1f
 800509c:	462e      	mov	r6, r5
 800509e:	e7f1      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050a0:	2101      	movs	r1, #1
 80050a2:	1d20      	adds	r0, r4, #4
 80050a4:	f7ff fc28 	bl	80048f8 <RCCEx_PLL2_Config>
 80050a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80050aa:	b9ed      	cbnz	r5, 80050e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050ac:	4a62      	ldr	r2, [pc, #392]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80050ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80050b0:	f023 0307 	bic.w	r3, r3, #7
 80050b4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	f013 0f04 	tst.w	r3, #4
 80050c0:	d022      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80050c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d843      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80050ca:	e8df f003 	tbb	[pc, r3]
 80050ce:	0f14      	.short	0x0f14
 80050d0:	1414143b 	.word	0x1414143b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050d4:	2101      	movs	r1, #1
 80050d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80050da:	f7ff fc8f 	bl	80049fc <RCCEx_PLL3_Config>
 80050de:	4605      	mov	r5, r0
      break;
 80050e0:	e7e3      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80050e2:	2601      	movs	r6, #1
 80050e4:	4635      	mov	r5, r6
 80050e6:	e7e8      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 80050e8:	462e      	mov	r6, r5
 80050ea:	e7e6      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050ec:	2101      	movs	r1, #1
 80050ee:	1d20      	adds	r0, r4, #4
 80050f0:	f7ff fc02 	bl	80048f8 <RCCEx_PLL2_Config>
 80050f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80050f6:	bb7d      	cbnz	r5, 8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050f8:	4a4f      	ldr	r2, [pc, #316]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80050fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050fc:	f023 0307 	bic.w	r3, r3, #7
 8005100:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005104:	430b      	orrs	r3, r1
 8005106:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	f013 0f20 	tst.w	r3, #32
 800510e:	d032      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005110:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005118:	d04b      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800511a:	d822      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800511c:	b13b      	cbz	r3, 800512e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800511e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005122:	d11b      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005124:	2100      	movs	r1, #0
 8005126:	1d20      	adds	r0, r4, #4
 8005128:	f7ff fbe6 	bl	80048f8 <RCCEx_PLL2_Config>
 800512c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800512e:	2d00      	cmp	r5, #0
 8005130:	d146      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005132:	4a41      	ldr	r2, [pc, #260]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005134:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005136:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800513a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800513e:	430b      	orrs	r3, r1
 8005140:	6553      	str	r3, [r2, #84]	; 0x54
 8005142:	e018      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x676>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005144:	2101      	movs	r1, #1
 8005146:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800514a:	f7ff fc57 	bl	80049fc <RCCEx_PLL3_Config>
 800514e:	4605      	mov	r5, r0
      break;
 8005150:	e7d1      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005152:	2601      	movs	r6, #1
 8005154:	4635      	mov	r5, r6
 8005156:	e7d7      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005158:	462e      	mov	r6, r5
 800515a:	e7d5      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800515c:	2601      	movs	r6, #1
 800515e:	4635      	mov	r5, r6
 8005160:	e009      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005162:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005166:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800516a:	d0e0      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800516c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005170:	d0dd      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8005172:	2601      	movs	r6, #1
 8005174:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	f013 0f40 	tst.w	r3, #64	; 0x40
 800517c:	d02f      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800517e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005186:	d04a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8005188:	d81f      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x6ca>
 800518a:	b13b      	cbz	r3, 800519c <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005190:	d118      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005192:	2100      	movs	r1, #0
 8005194:	1d20      	adds	r0, r4, #4
 8005196:	f7ff fbaf 	bl	80048f8 <RCCEx_PLL2_Config>
 800519a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800519c:	2d00      	cmp	r5, #0
 800519e:	d145      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x72c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051a0:	4a25      	ldr	r2, [pc, #148]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80051a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80051a4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80051a8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6593      	str	r3, [r2, #88]	; 0x58
 80051b0:	e015      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x6de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051b2:	2102      	movs	r1, #2
 80051b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051b8:	f7ff fc20 	bl	80049fc <RCCEx_PLL3_Config>
 80051bc:	4605      	mov	r5, r0
      break;
 80051be:	e7b6      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 80051c0:	462e      	mov	r6, r5
 80051c2:	e7d8      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80051c4:	2601      	movs	r6, #1
 80051c6:	4635      	mov	r5, r6
 80051c8:	e009      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80051ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051ce:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80051d2:	d0e3      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x69c>
 80051d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051d8:	d0e0      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x69c>
 80051da:	2601      	movs	r6, #1
 80051dc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80051e4:	d036      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80051e6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80051ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ee:	f000 80e6 	beq.w	80053be <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80051f2:	d825      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80051f4:	b13b      	cbz	r3, 8005206 <HAL_RCCEx_PeriphCLKConfig+0x706>
 80051f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fa:	d119      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x730>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051fc:	2100      	movs	r1, #0
 80051fe:	1d20      	adds	r0, r4, #4
 8005200:	f7ff fb7a 	bl	80048f8 <RCCEx_PLL2_Config>
 8005204:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005206:	2d00      	cmp	r5, #0
 8005208:	f040 80e0 	bne.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800520c:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800520e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005210:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005214:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005218:	430b      	orrs	r3, r1
 800521a:	6593      	str	r3, [r2, #88]	; 0x58
 800521c:	e01a      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800521e:	2102      	movs	r1, #2
 8005220:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005224:	f7ff fbea 	bl	80049fc <RCCEx_PLL3_Config>
 8005228:	4605      	mov	r5, r0
      break;
 800522a:	e7b7      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800522c:	462e      	mov	r6, r5
 800522e:	e7d6      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005230:	2601      	movs	r6, #1
 8005232:	4635      	mov	r5, r6
 8005234:	e00e      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005236:	bf00      	nop
 8005238:	58024400 	.word	0x58024400
 800523c:	00ffffcf 	.word	0x00ffffcf
 8005240:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005244:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005248:	d0dd      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x706>
 800524a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800524e:	d0da      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8005250:	2601      	movs	r6, #1
 8005252:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	f013 0f08 	tst.w	r3, #8
 800525a:	d00d      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x778>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800525c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005264:	f000 80b4 	beq.w	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005268:	4a97      	ldr	r2, [pc, #604]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800526a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800526c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005270:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005274:	430b      	orrs	r3, r1
 8005276:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	f013 0f10 	tst.w	r3, #16
 800527e:	d00d      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005280:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005288:	f000 80ab 	beq.w	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800528c:	4a8e      	ldr	r2, [pc, #568]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800528e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005294:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8005298:	430b      	orrs	r3, r1
 800529a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80052a2:	d00e      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 80052a4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ac:	f000 80b1 	beq.w	8005412 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80052b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052b4:	f000 80a3 	beq.w	80053fe <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 809b 	beq.w	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80052be:	2601      	movs	r6, #1
 80052c0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80052c8:	d00f      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch(PeriphClkInit->UsbClockSelection)
 80052ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80052ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052d2:	f000 80b6 	beq.w	8005442 <HAL_RCCEx_PeriphCLKConfig+0x942>
 80052d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052da:	f000 80a8 	beq.w	800542e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 80052de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e2:	f000 809f 	beq.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80052e6:	2601      	movs	r6, #1
 80052e8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80052f0:	d009      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch(PeriphClkInit->SdmmcClockSelection)
 80052f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 80ad 	beq.w	8005454 <HAL_RCCEx_PeriphCLKConfig+0x954>
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	f000 80b7 	beq.w	8005470 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8005302:	2601      	movs	r6, #1
 8005304:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800530c:	f040 80b8 	bne.w	8005480 <HAL_RCCEx_PeriphCLKConfig+0x980>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005316:	d00d      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x834>
    switch(PeriphClkInit->RngClockSelection)
 8005318:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800531a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531e:	f000 80bb 	beq.w	8005498 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005322:	f240 80b6 	bls.w	8005492 <HAL_RCCEx_PeriphCLKConfig+0x992>
 8005326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800532a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532e:	f000 80b8 	beq.w	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005332:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800533a:	d006      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800533c:	4a62      	ldr	r2, [pc, #392]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800533e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005344:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005346:	430b      	orrs	r3, r1
 8005348:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005350:	d007      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x862>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005352:	4a5d      	ldr	r2, [pc, #372]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005354:	6913      	ldr	r3, [r2, #16]
 8005356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800535e:	430b      	orrs	r3, r1
 8005360:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005368:	d006      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800536a:	4a57      	ldr	r2, [pc, #348]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800536c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800536e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005372:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005374:	430b      	orrs	r3, r1
 8005376:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800537e:	d009      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x894>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005380:	4b51      	ldr	r3, [pc, #324]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005388:	611a      	str	r2, [r3, #16]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8005390:	430a      	orrs	r2, r1
 8005392:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f2c0 808e 	blt.w	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80053a2:	d007      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053a4:	4a48      	ldr	r2, [pc, #288]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80053a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053a8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80053ac:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6553      	str	r3, [r2, #84]	; 0x54
}
 80053b4:	1e30      	subs	r0, r6, #0
 80053b6:	bf18      	it	ne
 80053b8:	2001      	movne	r0, #1
 80053ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053be:	2102      	movs	r1, #2
 80053c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80053c4:	f7ff fb1a 	bl	80049fc <RCCEx_PLL3_Config>
 80053c8:	4605      	mov	r5, r0
      break;
 80053ca:	e71c      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x706>
 80053cc:	462e      	mov	r6, r5
 80053ce:	e741      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053d0:	2102      	movs	r1, #2
 80053d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80053d6:	f7ff fb11 	bl	80049fc <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80053da:	2800      	cmp	r0, #0
 80053dc:	bf18      	it	ne
 80053de:	2601      	movne	r6, #1
 80053e0:	e742      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x768>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053e2:	2102      	movs	r1, #2
 80053e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80053e8:	f7ff fb08 	bl	80049fc <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80053ec:	2800      	cmp	r0, #0
 80053ee:	bf18      	it	ne
 80053f0:	2601      	movne	r6, #1
 80053f2:	e74b      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x78c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053f4:	2100      	movs	r1, #0
 80053f6:	1d20      	adds	r0, r4, #4
 80053f8:	f7ff fa7e 	bl	80048f8 <RCCEx_PLL2_Config>
 80053fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80053fe:	b97d      	cbnz	r5, 8005420 <HAL_RCCEx_PeriphCLKConfig+0x920>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005400:	4a31      	ldr	r2, [pc, #196]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005402:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005404:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005408:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800540c:	430b      	orrs	r3, r1
 800540e:	6593      	str	r3, [r2, #88]	; 0x58
 8005410:	e757      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005412:	2102      	movs	r1, #2
 8005414:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005418:	f7ff faf0 	bl	80049fc <RCCEx_PLL3_Config>
 800541c:	4605      	mov	r5, r0
      break;
 800541e:	e7ee      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005420:	462e      	mov	r6, r5
 8005422:	e74e      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005424:	4a28      	ldr	r2, [pc, #160]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005426:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800542e:	b97d      	cbnz	r5, 8005450 <HAL_RCCEx_PeriphCLKConfig+0x950>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005430:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005432:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005434:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005438:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800543c:	430b      	orrs	r3, r1
 800543e:	6553      	str	r3, [r2, #84]	; 0x54
 8005440:	e753      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005442:	2101      	movs	r1, #1
 8005444:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005448:	f7ff fad8 	bl	80049fc <RCCEx_PLL3_Config>
 800544c:	4605      	mov	r5, r0
      break;
 800544e:	e7ee      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8005450:	462e      	mov	r6, r5
 8005452:	e74a      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005454:	4a1c      	ldr	r2, [pc, #112]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005456:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800545c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800545e:	b96d      	cbnz	r5, 800547c <HAL_RCCEx_PeriphCLKConfig+0x97c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005460:	4a19      	ldr	r2, [pc, #100]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005462:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005468:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800546a:	430b      	orrs	r3, r1
 800546c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800546e:	e74a      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005470:	2102      	movs	r1, #2
 8005472:	1d20      	adds	r0, r4, #4
 8005474:	f7ff fa40 	bl	80048f8 <RCCEx_PLL2_Config>
 8005478:	4605      	mov	r5, r0
      break;
 800547a:	e7f0      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x95e>
 800547c:	462e      	mov	r6, r5
 800547e:	e742      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x806>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005480:	2102      	movs	r1, #2
 8005482:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005486:	f7ff fab9 	bl	80049fc <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 800548a:	2800      	cmp	r0, #0
 800548c:	bf18      	it	ne
 800548e:	2601      	movne	r6, #1
 8005490:	e73e      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch(PeriphClkInit->RngClockSelection)
 8005492:	b133      	cbz	r3, 80054a2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005494:	2601      	movs	r6, #1
 8005496:	e74d      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005498:	4a0b      	ldr	r2, [pc, #44]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800549a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800549c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80054a2:	b93d      	cbnz	r5, 80054b4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054a4:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80054a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80054a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ac:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80054ae:	430b      	orrs	r3, r1
 80054b0:	6553      	str	r3, [r2, #84]	; 0x54
 80054b2:	e73f      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x834>
 80054b4:	462e      	mov	r6, r5
 80054b6:	e73d      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x834>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054b8:	4a03      	ldr	r2, [pc, #12]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80054ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80054bc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80054c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80054c2:	430b      	orrs	r3, r1
 80054c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054c6:	e769      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x89c>
 80054c8:	58024400 	.word	0x58024400

080054cc <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80054cc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80054ce:	f7ff f9bb 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 80054d2:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80054da:	4a04      	ldr	r2, [pc, #16]	; (80054ec <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80054dc:	5cd3      	ldrb	r3, [r2, r3]
 80054de:	f003 031f 	and.w	r3, r3, #31
}
 80054e2:	40d8      	lsrs	r0, r3
 80054e4:	bd08      	pop	{r3, pc}
 80054e6:	bf00      	nop
 80054e8:	58024400 	.word	0x58024400
 80054ec:	080080a8 	.word	0x080080a8

080054f0 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80054f0:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054f2:	4a77      	ldr	r2, [pc, #476]	; (80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80054f4:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80054f6:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80054f8:	f3c5 3105 	ubfx	r1, r5, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054fc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054fe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8005500:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
 8005504:	f000 80de 	beq.w	80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005508:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800550c:	f3c6 1600 	ubfx	r6, r6, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005510:	fb06 f303 	mul.w	r3, r6, r3
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800551c:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8005520:	2c01      	cmp	r4, #1
 8005522:	d064      	beq.n	80055ee <HAL_RCCEx_GetPLL2ClockFreq+0xfe>
 8005524:	2c02      	cmp	r4, #2
 8005526:	f000 80b0 	beq.w	800568a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 800552a:	b1e4      	cbz	r4, 8005566 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800552c:	4b68      	ldr	r3, [pc, #416]	; (80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005534:	ee07 3a90 	vmov	s15, r3
 8005538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005540:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800554c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005550:	ee07 1a10 	vmov	s14, r1
 8005554:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005558:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80056d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800555c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005560:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 8005564:	e05f      	b.n	8005626 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005566:	6813      	ldr	r3, [r2, #0]
 8005568:	f013 0f20 	tst.w	r3, #32
 800556c:	d022      	beq.n	80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800556e:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005570:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005572:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8005576:	4a59      	ldr	r2, [pc, #356]	; (80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8005578:	40e2      	lsrs	r2, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800557a:	ee07 2a90 	vmov	s15, r2
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	ee07 1a10 	vmov	s14, r1
 8005586:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800558a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800559e:	ee66 6a86 	vmul.f32	s13, s13, s12
 80055a2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80055a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80055aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	e038      	b.n	8005626 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055b4:	4b46      	ldr	r3, [pc, #280]	; (80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055c4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80055c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055d8:	ee07 1a10 	vmov	s14, r1
 80055dc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80055e0:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80055e4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80055e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ec:	e01b      	b.n	8005626 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055ee:	4b38      	ldr	r3, [pc, #224]	; (80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fe:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005602:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800560e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005612:	ee07 1a10 	vmov	s14, r1
 8005616:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800561a:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80056d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800561e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005622:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005626:	4a2a      	ldr	r2, [pc, #168]	; (80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005628:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800562a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800562e:	ee06 3a90 	vmov	s13, r3
 8005632:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005636:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800563a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800563e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005642:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005646:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800564a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800564c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005650:	ee06 3a90 	vmov	s13, r3
 8005654:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005658:	ee76 6a86 	vadd.f32	s13, s13, s12
 800565c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005660:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005664:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005668:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800566a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800566e:	ee07 3a10 	vmov	s14, r3
 8005672:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005676:	ee37 7a06 	vadd.f32	s14, s14, s12
 800567a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800567e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005682:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8005686:	bc70      	pop	{r4, r5, r6}
 8005688:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800568a:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 800569e:	ee66 6a87 	vmul.f32	s13, s13, s14
 80056a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056ae:	ee07 1a10 	vmov	s14, r1
 80056b2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80056b6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80056ba:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80056be:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 80056c2:	e7b0      	b.n	8005626 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056c8:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056ca:	6083      	str	r3, [r0, #8]
}
 80056cc:	e7db      	b.n	8005686 <HAL_RCCEx_GetPLL2ClockFreq+0x196>
 80056ce:	bf00      	nop
 80056d0:	58024400 	.word	0x58024400
 80056d4:	39000000 	.word	0x39000000
 80056d8:	4a742400 	.word	0x4a742400
 80056dc:	03d09000 	.word	0x03d09000
 80056e0:	4c742400 	.word	0x4c742400
 80056e4:	4bb71b00 	.word	0x4bb71b00

080056e8 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80056e8:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056ea:	4a77      	ldr	r2, [pc, #476]	; (80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80056ec:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80056ee:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80056f0:	f3c5 5105 	ubfx	r1, r5, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056f4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80056f6:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80056f8:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
 80056fc:	f000 80de 	beq.w	80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005700:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005704:	f3c6 2600 	ubfx	r6, r6, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005708:	fb06 f303 	mul.w	r3, r6, r3
 800570c:	ee07 3a90 	vmov	s15, r3
 8005710:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005714:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8005718:	2c01      	cmp	r4, #1
 800571a:	d064      	beq.n	80057e6 <HAL_RCCEx_GetPLL3ClockFreq+0xfe>
 800571c:	2c02      	cmp	r4, #2
 800571e:	f000 80b0 	beq.w	8005882 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8005722:	b1e4      	cbz	r4, 800575e <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005724:	4b68      	ldr	r3, [pc, #416]	; (80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005734:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80058cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8005738:	ee66 6a87 	vmul.f32	s13, s13, s14
 800573c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005744:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005748:	ee07 1a10 	vmov	s14, r1
 800574c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005750:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80058d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005754:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005758:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 800575c:	e05f      	b.n	800581e <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	f013 0f20 	tst.w	r3, #32
 8005764:	d022      	beq.n	80057ac <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005766:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005768:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800576a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 800576e:	4a59      	ldr	r2, [pc, #356]	; (80058d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 8005770:	40e2      	lsrs	r2, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005772:	ee07 2a90 	vmov	s15, r2
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	ee07 1a10 	vmov	s14, r1
 800577e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8005782:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80058cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8005796:	ee66 6a86 	vmul.f32	s13, s13, s12
 800579a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800579e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	e038      	b.n	800581e <HAL_RCCEx_GetPLL3ClockFreq+0x136>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057ac:	4b46      	ldr	r3, [pc, #280]	; (80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057bc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80058cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80057c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057d0:	ee07 1a10 	vmov	s14, r1
 80057d4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80057d8:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80057dc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80057e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057e4:	e01b      	b.n	800581e <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057e6:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80058cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80057fa:	ee66 6a87 	vmul.f32	s13, s13, s14
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800580a:	ee07 1a10 	vmov	s14, r1
 800580e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005812:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80058d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005816:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800581a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800581e:	4a2a      	ldr	r2, [pc, #168]	; (80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8005820:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005822:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005826:	ee06 3a90 	vmov	s13, r3
 800582a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800582e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005832:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005836:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800583a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800583e:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005842:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005844:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005848:	ee06 3a90 	vmov	s13, r3
 800584c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005850:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005854:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005858:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800585c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005860:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005862:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005866:	ee07 3a10 	vmov	s14, r3
 800586a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800586e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005872:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005876:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800587a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800587e:	bc70      	pop	{r4, r5, r6}
 8005880:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80058cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8005896:	ee66 6a87 	vmul.f32	s13, s13, s14
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058a6:	ee07 1a10 	vmov	s14, r1
 80058aa:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80058ae:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80058dc <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80058b2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80058b6:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 80058ba:	e7b0      	b.n	800581e <HAL_RCCEx_GetPLL3ClockFreq+0x136>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058c0:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80058c2:	6083      	str	r3, [r0, #8]
}
 80058c4:	e7db      	b.n	800587e <HAL_RCCEx_GetPLL3ClockFreq+0x196>
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
 80058cc:	39000000 	.word	0x39000000
 80058d0:	4a742400 	.word	0x4a742400
 80058d4:	03d09000 	.word	0x03d09000
 80058d8:	4c742400 	.word	0x4c742400
 80058dc:	4bb71b00 	.word	0x4bb71b00

080058e0 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80058e0:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058e2:	4a77      	ldr	r2, [pc, #476]	; (8005ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 80058e4:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80058e6:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80058e8:	f3c5 1105 	ubfx	r1, r5, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80058ec:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80058ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80058f0:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
 80058f4:	f000 80de 	beq.w	8005ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80058f8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80058fc:	f006 0601 	and.w	r6, r6, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005900:	fb06 f303 	mul.w	r3, r6, r3
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800590c:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8005910:	2c01      	cmp	r4, #1
 8005912:	d064      	beq.n	80059de <HAL_RCCEx_GetPLL1ClockFreq+0xfe>
 8005914:	2c02      	cmp	r4, #2
 8005916:	f000 80b0 	beq.w	8005a7a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 800591a:	b1e4      	cbz	r4, 8005956 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800591c:	4b68      	ldr	r3, [pc, #416]	; (8005ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8005930:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800593c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005940:	ee07 1a10 	vmov	s14, r1
 8005944:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005948:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8005ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800594c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005950:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 8005954:	e05f      	b.n	8005a16 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005956:	6813      	ldr	r3, [r2, #0]
 8005958:	f013 0f20 	tst.w	r3, #32
 800595c:	d022      	beq.n	80059a4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800595e:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005960:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005962:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8005966:	4a59      	ldr	r2, [pc, #356]	; (8005acc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 8005968:	40e2      	lsrs	r2, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800596a:	ee07 2a90 	vmov	s15, r2
 800596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005972:	ee07 1a10 	vmov	s14, r1
 8005976:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800597a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800597e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598a:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 800598e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005992:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005996:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800599a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a2:	e038      	b.n	8005a16 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059a4:	4b46      	ldr	r3, [pc, #280]	; (8005ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059b4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 80059b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059c8:	ee07 1a10 	vmov	s14, r1
 80059cc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80059d0:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8005ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80059d4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80059d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059dc:	e01b      	b.n	8005a16 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059de:	4b38      	ldr	r3, [pc, #224]	; (8005ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 80059f2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80059f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a02:	ee07 1a10 	vmov	s14, r1
 8005a06:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005a0a:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8005ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8005a0e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005a12:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005a16:	4a2a      	ldr	r2, [pc, #168]	; (8005ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005a18:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005a1a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005a1e:	ee06 3a90 	vmov	s13, r3
 8005a22:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005a26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005a2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005a2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005a32:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005a36:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005a3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005a3c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005a40:	ee06 3a90 	vmov	s13, r3
 8005a44:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005a48:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005a4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005a50:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005a54:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005a58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005a5a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005a5e:	ee07 3a10 	vmov	s14, r3
 8005a62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005a66:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005a6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a6e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005a72:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8005a76:	bc70      	pop	{r4, r5, r6}
 8005a78:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8005a8e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a9e:	ee07 1a10 	vmov	s14, r1
 8005aa2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005aa6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8005ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8005aaa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005aae:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 8005ab2:	e7b0      	b.n	8005a16 <HAL_RCCEx_GetPLL1ClockFreq+0x136>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ab8:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005aba:	6083      	str	r3, [r0, #8]
}
 8005abc:	e7db      	b.n	8005a76 <HAL_RCCEx_GetPLL1ClockFreq+0x196>
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	39000000 	.word	0x39000000
 8005ac8:	4c742400 	.word	0x4c742400
 8005acc:	03d09000 	.word	0x03d09000
 8005ad0:	4a742400 	.word	0x4a742400
 8005ad4:	4bb71b00 	.word	0x4bb71b00

08005ad8 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8005ad8:	b500      	push	{lr}
 8005ada:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005adc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005ae0:	d020      	beq.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005ae2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005ae6:	d071      	beq.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005ae8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005aec:	f000 80c8 	beq.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005af0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005af4:	f000 8121 	beq.w	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005af8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005afc:	f000 817e 	beq.w	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005b00:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005b04:	f000 81d7 	beq.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005b08:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8005b0c:	f000 821a 	beq.w	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005b10:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005b14:	f000 8234 	beq.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005b18:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005b1c:	f000 8282 	beq.w	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
      frequency = 0;
 8005b20:	2000      	movs	r0, #0
 8005b22:	e2ae      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005b24:	4b9b      	ldr	r3, [pc, #620]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b28:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d806      	bhi.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8005b30:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b34:	00120007 	.word	0x00120007
 8005b38:	02a0001d 	.word	0x02a0001d
 8005b3c:	0028      	.short	0x0028
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e29f      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b42:	4b94      	ldr	r3, [pc, #592]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005b4a:	f000 829a 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b4e:	a807      	add	r0, sp, #28
 8005b50:	f7ff fec6 	bl	80058e0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b54:	9808      	ldr	r0, [sp, #32]
 8005b56:	e294      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b58:	4b8e      	ldr	r3, [pc, #568]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005b60:	f000 828f 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b64:	a804      	add	r0, sp, #16
 8005b66:	f7ff fcc3 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b6a:	9804      	ldr	r0, [sp, #16]
 8005b6c:	e289      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b6e:	4b89      	ldr	r3, [pc, #548]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005b76:	f000 8284 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b7a:	a801      	add	r0, sp, #4
 8005b7c:	f7ff fdb4 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b80:	9801      	ldr	r0, [sp, #4]
 8005b82:	e27e      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b84:	4a83      	ldr	r2, [pc, #524]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005b86:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	f012 0f04 	tst.w	r2, #4
 8005b92:	d000      	beq.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8005b94:	b19b      	cbz	r3, 8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b96:	4a7f      	ldr	r2, [pc, #508]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005b9e:	d003      	beq.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ba4:	f000 8268 	beq.w	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ba8:	4a7a      	ldr	r2, [pc, #488]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005bb0:	d003      	beq.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8005bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb6:	f000 8261 	beq.w	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
            frequency = 0;
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e261      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bbe:	4b75      	ldr	r3, [pc, #468]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005bc6:	4874      	ldr	r0, [pc, #464]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005bc8:	40d8      	lsrs	r0, r3
 8005bca:	e25a      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005bcc:	4b71      	ldr	r3, [pc, #452]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d041      	beq.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005bd8:	d923      	bls.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005bda:	2bc0      	cmp	r3, #192	; 0xc0
 8005bdc:	f000 8250 	beq.w	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be4:	d12d      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005be6:	4a6b      	ldr	r2, [pc, #428]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005be8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	f012 0f04 	tst.w	r2, #4
 8005bf4:	d001      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d03b      	beq.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bfa:	4a66      	ldr	r2, [pc, #408]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005c02:	d003      	beq.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c08:	f000 823e 	beq.w	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c0c:	4a61      	ldr	r2, [pc, #388]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005c14:	d003      	beq.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c1a:	f000 8237 	beq.w	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
            frequency = 0;
 8005c1e:	2000      	movs	r0, #0
 8005c20:	e22f      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005c22:	b183      	cbz	r3, 8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d10a      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c28:	4b5a      	ldr	r3, [pc, #360]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005c30:	f000 8227 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c34:	a804      	add	r0, sp, #16
 8005c36:	f7ff fc5b 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c3a:	9804      	ldr	r0, [sp, #16]
 8005c3c:	e221      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e21f      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005c42:	2000      	movs	r0, #0
 8005c44:	e21d      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c46:	4b53      	ldr	r3, [pc, #332]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005c4e:	f000 8218 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c52:	a807      	add	r0, sp, #28
 8005c54:	f7ff fe44 	bl	80058e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c58:	9808      	ldr	r0, [sp, #32]
 8005c5a:	e212      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c5c:	4b4d      	ldr	r3, [pc, #308]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005c64:	f000 820d 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c68:	a801      	add	r0, sp, #4
 8005c6a:	f7ff fd3d 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c6e:	9801      	ldr	r0, [sp, #4]
 8005c70:	e207      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c72:	4b48      	ldr	r3, [pc, #288]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005c7a:	4847      	ldr	r0, [pc, #284]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c7c:	40d8      	lsrs	r0, r3
 8005c7e:	e200      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005c80:	4b44      	ldr	r3, [pc, #272]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c84:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8005c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c8c:	d043      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005c8e:	d924      	bls.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005c90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c94:	f000 81fc 	beq.w	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005c98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c9c:	d12e      	bne.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c9e:	4a3d      	ldr	r2, [pc, #244]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ca0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005ca2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	f012 0f04 	tst.w	r2, #4
 8005cac:	d001      	beq.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d03c      	beq.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cb2:	4a38      	ldr	r2, [pc, #224]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005cba:	d003      	beq.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8005cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc0:	f000 81e8 	beq.w	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cc4:	4a33      	ldr	r2, [pc, #204]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005ccc:	d003      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8005cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cd2:	f000 81e1 	beq.w	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e1d3      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005cda:	b18b      	cbz	r3, 8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8005cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ce0:	d10a      	bne.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ce2:	4b2c      	ldr	r3, [pc, #176]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005cea:	f000 81ca 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cee:	a804      	add	r0, sp, #16
 8005cf0:	f7ff fbfe 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cf4:	9804      	ldr	r0, [sp, #16]
 8005cf6:	e1c4      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e1c2      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	e1c0      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d00:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005d08:	f000 81bb 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d0c:	a807      	add	r0, sp, #28
 8005d0e:	f7ff fde7 	bl	80058e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d12:	9808      	ldr	r0, [sp, #32]
 8005d14:	e1b5      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d16:	4b1f      	ldr	r3, [pc, #124]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005d1e:	f000 81b0 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d22:	a801      	add	r0, sp, #4
 8005d24:	f7ff fce0 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d28:	9801      	ldr	r0, [sp, #4]
 8005d2a:	e1aa      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d2c:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005d34:	4818      	ldr	r0, [pc, #96]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d36:	40d8      	lsrs	r0, r3
 8005d38:	e1a3      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005d3a:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8005d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d46:	d047      	beq.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8005d48:	d928      	bls.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005d4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d4e:	f000 81a5 	beq.w	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d56:	d132      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d58:	4a0e      	ldr	r2, [pc, #56]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	f012 0f04 	tst.w	r2, #4
 8005d66:	d001      	beq.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d040      	beq.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d6c:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005d74:	d003      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7a:	f000 8191 	beq.w	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d7e:	4a05      	ldr	r2, [pc, #20]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005d86:	d003      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d8c:	f000 818a 	beq.w	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
            frequency = 0;
 8005d90:	2000      	movs	r0, #0
 8005d92:	e176      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005d94:	58024400 	.word	0x58024400
 8005d98:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8005d9c:	b18b      	cbz	r3, 8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005d9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005da2:	d10a      	bne.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005da4:	4b9b      	ldr	r3, [pc, #620]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005dac:	f000 8169 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005db0:	a804      	add	r0, sp, #16
 8005db2:	f7ff fb9d 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005db6:	9804      	ldr	r0, [sp, #16]
 8005db8:	e163      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e161      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e15f      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dc2:	4b94      	ldr	r3, [pc, #592]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005dca:	f000 815a 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dce:	a807      	add	r0, sp, #28
 8005dd0:	f7ff fd86 	bl	80058e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dd4:	9808      	ldr	r0, [sp, #32]
 8005dd6:	e154      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dd8:	4b8e      	ldr	r3, [pc, #568]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005de0:	f000 814f 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005de4:	a801      	add	r0, sp, #4
 8005de6:	f7ff fc7f 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005dea:	9801      	ldr	r0, [sp, #4]
 8005dec:	e149      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dee:	4b89      	ldr	r3, [pc, #548]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005df6:	4888      	ldr	r0, [pc, #544]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005df8:	40d8      	lsrs	r0, r3
 8005dfa:	e142      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005dfc:	4b85      	ldr	r3, [pc, #532]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8005e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e08:	d043      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005e0a:	d924      	bls.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005e0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e10:	f000 814a 	beq.w	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8005e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e18:	d12e      	bne.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e1a:	4a7e      	ldr	r2, [pc, #504]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e1c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005e1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e22:	6812      	ldr	r2, [r2, #0]
 8005e24:	f012 0f04 	tst.w	r2, #4
 8005e28:	d001      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d03c      	beq.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e2e:	4a79      	ldr	r2, [pc, #484]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005e36:	d003      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8005e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3c:	f000 8136 	beq.w	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e40:	4a74      	ldr	r2, [pc, #464]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005e48:	d003      	beq.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e4e:	f000 812f 	beq.w	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
            frequency = 0;
 8005e52:	2000      	movs	r0, #0
 8005e54:	e115      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8005e56:	b18b      	cbz	r3, 8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8005e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5c:	d10a      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e5e:	4b6d      	ldr	r3, [pc, #436]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005e66:	f000 810c 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6a:	a804      	add	r0, sp, #16
 8005e6c:	f7ff fb40 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e70:	9804      	ldr	r0, [sp, #16]
 8005e72:	e106      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8005e74:	2000      	movs	r0, #0
 8005e76:	e104      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005e78:	2000      	movs	r0, #0
 8005e7a:	e102      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e7c:	4b65      	ldr	r3, [pc, #404]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005e84:	f000 80fd 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e88:	a807      	add	r0, sp, #28
 8005e8a:	f7ff fd29 	bl	80058e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e8e:	9808      	ldr	r0, [sp, #32]
 8005e90:	e0f7      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e92:	4b60      	ldr	r3, [pc, #384]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005e9a:	f000 80f2 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e9e:	a801      	add	r0, sp, #4
 8005ea0:	f7ff fc22 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ea4:	9801      	ldr	r0, [sp, #4]
 8005ea6:	e0ec      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ea8:	4b5a      	ldr	r3, [pc, #360]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005eb0:	4859      	ldr	r0, [pc, #356]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005eb2:	40d8      	lsrs	r0, r3
 8005eb4:	e0e5      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005eb6:	4b57      	ldr	r3, [pc, #348]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec2:	d010      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ec8:	d018      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8005eca:	b10b      	cbz	r3, 8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8005ecc:	2000      	movs	r0, #0
 8005ece:	e0d8      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ed0:	4b50      	ldr	r3, [pc, #320]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005ed8:	f000 80d3 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005edc:	a804      	add	r0, sp, #16
 8005ede:	f7ff fb07 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ee2:	9804      	ldr	r0, [sp, #16]
 8005ee4:	e0cd      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ee6:	4b4b      	ldr	r3, [pc, #300]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005eee:	f000 80c8 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ef2:	a801      	add	r0, sp, #4
 8005ef4:	f7ff fbf8 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005ef8:	9803      	ldr	r0, [sp, #12]
 8005efa:	e0c2      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005efc:	4a45      	ldr	r2, [pc, #276]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005efe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	f012 0f04 	tst.w	r2, #4
 8005f0a:	d000      	beq.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005f0c:	b19b      	cbz	r3, 8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f0e:	4a41      	ldr	r2, [pc, #260]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005f16:	d003      	beq.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8005f18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f1c:	f000 80ca 	beq.w	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f20:	4a3c      	ldr	r2, [pc, #240]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005f28:	d003      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
 8005f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2e:	f000 80c3 	beq.w	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 8005f32:	2000      	movs	r0, #0
 8005f34:	e0a5      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f36:	4b37      	ldr	r3, [pc, #220]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f3e:	4836      	ldr	r0, [pc, #216]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f40:	40d8      	lsrs	r0, r3
 8005f42:	e09e      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005f44:	4b33      	ldr	r3, [pc, #204]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f46:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
      switch (srcclk)
 8005f48:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8005f4c:	d00d      	beq.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f000 8097 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f54:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005f5c:	f000 8091 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f60:	a804      	add	r0, sp, #16
 8005f62:	f7ff fac5 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f66:	9806      	ldr	r0, [sp, #24]
 8005f68:	e08b      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f6a:	4b2a      	ldr	r3, [pc, #168]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005f72:	f000 8086 	beq.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f76:	a807      	add	r0, sp, #28
 8005f78:	f7ff fcb2 	bl	80058e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f7c:	9808      	ldr	r0, [sp, #32]
 8005f7e:	e080      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005f80:	4b24      	ldr	r3, [pc, #144]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f84:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8005f88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f8c:	d02f      	beq.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005f8e:	d815      	bhi.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8005f90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f94:	d021      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8005f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9a:	d109      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f9c:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005fa4:	d06d      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fa6:	a801      	add	r0, sp, #4
 8005fa8:	f7ff fb9e 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fac:	9802      	ldr	r0, [sp, #8]
 8005fae:	e068      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8005fb0:	b913      	cbnz	r3, 8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005fb2:	f7ff fa8b 	bl	80054cc <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 8005fb6:	e064      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8005fb8:	2000      	movs	r0, #0
 8005fba:	e062      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc0:	d020      	beq.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8005fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fc8:	4b12      	ldr	r3, [pc, #72]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005fd0:	d057      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = HSE_VALUE;
 8005fd2:	4812      	ldr	r0, [pc, #72]	; (800601c <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8005fd4:	e055      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	e053      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fda:	4b0e      	ldr	r3, [pc, #56]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005fe2:	d04e      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fe4:	a804      	add	r0, sp, #16
 8005fe6:	f7ff fa83 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fea:	9805      	ldr	r0, [sp, #20]
 8005fec:	e049      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	f010 0004 	ands.w	r0, r0, #4
 8005ff6:	d044      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005ffe:	4806      	ldr	r0, [pc, #24]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006000:	40d8      	lsrs	r0, r3
 8006002:	e03e      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006004:	4b03      	ldr	r3, [pc, #12]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800600c:	d039      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = CSI_VALUE;
 800600e:	4804      	ldr	r0, [pc, #16]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 8006010:	e037      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8006012:	bf00      	nop
 8006014:	58024400 	.word	0x58024400
 8006018:	03d09000 	.word	0x03d09000
 800601c:	016e3600 	.word	0x016e3600
 8006020:	003d0900 	.word	0x003d0900
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006024:	4b25      	ldr	r3, [pc, #148]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 800602c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006030:	d00c      	beq.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8006032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006036:	d013      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
 8006038:	b10b      	cbz	r3, 800603e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800603a:	2000      	movs	r0, #0
 800603c:	e021      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800603e:	4b1f      	ldr	r3, [pc, #124]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006046:	d01c      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = HSE_VALUE;
 8006048:	481d      	ldr	r0, [pc, #116]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
  return frequency;
 800604a:	e01a      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800604c:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006054:	d015      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006056:	a807      	add	r0, sp, #28
 8006058:	f7ff fc42 	bl	80058e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800605c:	9808      	ldr	r0, [sp, #32]
 800605e:	e010      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006060:	4b16      	ldr	r3, [pc, #88]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006068:	d00b      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800606a:	a804      	add	r0, sp, #16
 800606c:	f7ff fa40 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006070:	9805      	ldr	r0, [sp, #20]
 8006072:	e006      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006074:	4813      	ldr	r0, [pc, #76]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8006076:	e004      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8006078:	4813      	ldr	r0, [pc, #76]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800607a:	e002      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 800607c:	4810      	ldr	r0, [pc, #64]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006080:	4810      	ldr	r0, [pc, #64]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
}
 8006082:	b00b      	add	sp, #44	; 0x2c
 8006084:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 8006088:	480f      	ldr	r0, [pc, #60]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800608a:	e7fa      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 800608c:	480c      	ldr	r0, [pc, #48]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800608e:	e7f8      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006090:	480c      	ldr	r0, [pc, #48]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8006092:	e7f6      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8006094:	480c      	ldr	r0, [pc, #48]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8006096:	e7f4      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8006098:	4809      	ldr	r0, [pc, #36]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800609a:	e7f2      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 800609c:	4809      	ldr	r0, [pc, #36]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800609e:	e7f0      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 80060a0:	4809      	ldr	r0, [pc, #36]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80060a2:	e7ee      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 80060a4:	4806      	ldr	r0, [pc, #24]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80060a6:	e7ec      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 80060a8:	4806      	ldr	r0, [pc, #24]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 80060aa:	e7ea      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 80060ac:	4806      	ldr	r0, [pc, #24]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80060ae:	e7e8      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 80060b0:	4803      	ldr	r0, [pc, #12]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80060b2:	e7e6      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 80060b4:	4804      	ldr	r0, [pc, #16]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 80060b6:	e7e4      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80060ba:	e7e2      	b.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 80060bc:	58024400 	.word	0x58024400
 80060c0:	016e3600 	.word	0x016e3600
 80060c4:	00bb8000 	.word	0x00bb8000
 80060c8:	003d0900 	.word	0x003d0900

080060cc <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
 80060cc:	2901      	cmp	r1, #1
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2309      	moveq	r3, #9
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80060d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060d6:	2a08      	cmp	r2, #8
 80060d8:	d008      	beq.n	80060ec <SAI_InterruptFlag+0x20>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80060da:	6842      	ldr	r2, [r0, #4]
 80060dc:	3a02      	subs	r2, #2
 80060de:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80060e0:	bf94      	ite	ls
 80060e2:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80060e6:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 80060ea:	4770      	bx	lr
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80060ec:	6842      	ldr	r2, [r0, #4]
 80060ee:	f022 0202 	bic.w	r2, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80060f2:	2a01      	cmp	r2, #1
    tmpIT |= SAI_IT_CNRDY;
 80060f4:	bf08      	it	eq
 80060f6:	f043 0310 	orreq.w	r3, r3, #16
 80060fa:	e7ee      	b.n	80060da <SAI_InterruptFlag+0xe>

080060fc <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80060fc:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <SAI_Disable+0x3c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a0e      	ldr	r2, [pc, #56]	; (800613c <SAI_Disable+0x40>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	0b1b      	lsrs	r3, r3, #12
 8006108:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800610a:	6801      	ldr	r1, [r0, #0]
 800610c:	680a      	ldr	r2, [r1, #0]
 800610e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006112:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006114:	b13b      	cbz	r3, 8006126 <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 8006116:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006118:	6802      	ldr	r2, [r0, #0]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006120:	d1f8      	bne.n	8006114 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006122:	2000      	movs	r0, #0

  return status;
}
 8006124:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006126:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800612a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006132:	2003      	movs	r0, #3
      break;
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	24002000 	.word	0x24002000
 800613c:	95cbec1b 	.word	0x95cbec1b

08006140 <HAL_SAI_Init>:
{
 8006140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 8006144:	2800      	cmp	r0, #0
 8006146:	f000 81d2 	beq.w	80064ee <HAL_SAI_Init+0x3ae>
 800614a:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800614c:	f7fb f9dc 	bl	8001508 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006150:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
 8006154:	2d01      	cmp	r5, #1
 8006156:	d01c      	beq.n	8006192 <HAL_SAI_Init+0x52>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	4aac      	ldr	r2, [pc, #688]	; (800640c <HAL_SAI_Init+0x2cc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d02d      	beq.n	80061bc <HAL_SAI_Init+0x7c>
 8006160:	3220      	adds	r2, #32
 8006162:	4293      	cmp	r3, r2
 8006164:	d02a      	beq.n	80061bc <HAL_SAI_Init+0x7c>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006166:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800616a:	4293      	cmp	r3, r2
 800616c:	d047      	beq.n	80061fe <HAL_SAI_Init+0xbe>
 800616e:	3220      	adds	r2, #32
 8006170:	4293      	cmp	r3, r2
 8006172:	d044      	beq.n	80061fe <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8006174:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8006178:	4293      	cmp	r3, r2
 800617a:	d042      	beq.n	8006202 <HAL_SAI_Init+0xc2>
 800617c:	3220      	adds	r2, #32
 800617e:	4293      	cmp	r3, r2
 8006180:	d03f      	beq.n	8006202 <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8006182:	4aa3      	ldr	r2, [pc, #652]	; (8006410 <HAL_SAI_Init+0x2d0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d017      	beq.n	80061b8 <HAL_SAI_Init+0x78>
 8006188:	3220      	adds	r2, #32
 800618a:	4293      	cmp	r3, r2
 800618c:	d014      	beq.n	80061b8 <HAL_SAI_Init+0x78>
    return HAL_ERROR;
 800618e:	2501      	movs	r5, #1
 8006190:	e10f      	b.n	80063b2 <HAL_SAI_Init+0x272>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	4a9d      	ldr	r2, [pc, #628]	; (800640c <HAL_SAI_Init+0x2cc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d006      	beq.n	80061a8 <HAL_SAI_Init+0x68>
 800619a:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800619e:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f040 8105 	bne.w	80063b2 <HAL_SAI_Init+0x272>
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	f040 8101 	bne.w	80063b2 <HAL_SAI_Init+0x272>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80061b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0d0      	beq.n	8006158 <HAL_SAI_Init+0x18>
 80061b6:	e0fc      	b.n	80063b2 <HAL_SAI_Init+0x272>
    SaiBaseAddress = SAI4;
 80061b8:	4e96      	ldr	r6, [pc, #600]	; (8006414 <HAL_SAI_Init+0x2d4>)
 80061ba:	e000      	b.n	80061be <HAL_SAI_Init+0x7e>
    SaiBaseAddress = SAI1;
 80061bc:	4e96      	ldr	r6, [pc, #600]	; (8006418 <HAL_SAI_Init+0x2d8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 80061be:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80061c2:	b303      	cbz	r3, 8006206 <HAL_SAI_Init+0xc6>
  if(SAI_Disable(hsai) != HAL_OK)
 80061c4:	4620      	mov	r0, r4
 80061c6:	f7ff ff99 	bl	80060fc <SAI_Disable>
 80061ca:	4605      	mov	r5, r0
 80061cc:	2800      	cmp	r0, #0
 80061ce:	f040 8190 	bne.w	80064f2 <HAL_SAI_Init+0x3b2>
  hsai->State = HAL_SAI_STATE_BUSY;
 80061d2:	2302      	movs	r3, #2
 80061d4:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 80061d8:	68e3      	ldr	r3, [r4, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d019      	beq.n	8006212 <HAL_SAI_Init+0xd2>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80061de:	2b02      	cmp	r3, #2
 80061e0:	bf14      	ite	ne
 80061e2:	2200      	movne	r2, #0
 80061e4:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	f200 80f6 	bhi.w	80063dc <HAL_SAI_Init+0x29c>
 80061f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80061f4:	00e20011 	.word	0x00e20011
 80061f8:	00ea00e5 	.word	0x00ea00e5
 80061fc:	00ef      	.short	0x00ef
    SaiBaseAddress = SAI2;
 80061fe:	4e87      	ldr	r6, [pc, #540]	; (800641c <HAL_SAI_Init+0x2dc>)
 8006200:	e7dd      	b.n	80061be <HAL_SAI_Init+0x7e>
    SaiBaseAddress = SAI3;
 8006202:	4e87      	ldr	r6, [pc, #540]	; (8006420 <HAL_SAI_Init+0x2e0>)
 8006204:	e7db      	b.n	80061be <HAL_SAI_Init+0x7e>
    hsai->Lock = HAL_UNLOCKED;
 8006206:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800620a:	4620      	mov	r0, r4
 800620c:	f7fa fca4 	bl	8000b58 <HAL_SAI_MspInit>
 8006210:	e7d8      	b.n	80061c4 <HAL_SAI_Init+0x84>
  switch (hsai->Init.SynchroExt)
 8006212:	2210      	movs	r2, #16
 8006214:	e7e7      	b.n	80061e6 <HAL_SAI_Init+0xa6>
  switch (hsai->Init.Synchro)
 8006216:	f44f 6880 	mov.w	r8, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 800621a:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800621c:	6a23      	ldr	r3, [r4, #32]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d049      	beq.n	80062b6 <HAL_SAI_Init+0x176>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	4a79      	ldr	r2, [pc, #484]	; (800640c <HAL_SAI_Init+0x2cc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	f000 80db 	beq.w	80063e2 <HAL_SAI_Init+0x2a2>
 800622c:	3220      	adds	r2, #32
 800622e:	4293      	cmp	r3, r2
 8006230:	f000 80d7 	beq.w	80063e2 <HAL_SAI_Init+0x2a2>
    uint32_t freq = 0;
 8006234:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	4a7a      	ldr	r2, [pc, #488]	; (8006424 <HAL_SAI_Init+0x2e4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	f000 80d6 	beq.w	80063ec <HAL_SAI_Init+0x2ac>
 8006240:	3220      	adds	r2, #32
 8006242:	4293      	cmp	r3, r2
 8006244:	f000 80d2 	beq.w	80063ec <HAL_SAI_Init+0x2ac>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	4a77      	ldr	r2, [pc, #476]	; (8006428 <HAL_SAI_Init+0x2e8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	f000 80d2 	beq.w	80063f6 <HAL_SAI_Init+0x2b6>
 8006252:	3220      	adds	r2, #32
 8006254:	4293      	cmp	r3, r2
 8006256:	f000 80ce 	beq.w	80063f6 <HAL_SAI_Init+0x2b6>
    if (hsai->Instance == SAI4_Block_A)
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	4b6c      	ldr	r3, [pc, #432]	; (8006410 <HAL_SAI_Init+0x2d0>)
 800625e:	429a      	cmp	r2, r3
 8006260:	f000 80ce 	beq.w	8006400 <HAL_SAI_Init+0x2c0>
    if (hsai->Instance == SAI4_Block_B)
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	4b71      	ldr	r3, [pc, #452]	; (800642c <HAL_SAI_Init+0x2ec>)
 8006268:	429a      	cmp	r2, r3
 800626a:	f000 80e9 	beq.w	8006440 <HAL_SAI_Init+0x300>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800626e:	69a3      	ldr	r3, [r4, #24]
 8006270:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006274:	f000 80e9 	beq.w	800644a <HAL_SAI_Init+0x30a>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800627a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800627e:	bf0c      	ite	eq
 8006280:	2302      	moveq	r3, #2
 8006282:	2301      	movne	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006284:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006288:	0040      	lsls	r0, r0, #1
 800628a:	6a22      	ldr	r2, [r4, #32]
 800628c:	fb02 f303 	mul.w	r3, r2, r3
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8006296:	4b66      	ldr	r3, [pc, #408]	; (8006430 <HAL_SAI_Init+0x2f0>)
 8006298:	fba3 2300 	umull	r2, r3, r3, r0
 800629c:	08db      	lsrs	r3, r3, #3
    if ((tmpval % 10U) > 8U)
 800629e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80062a2:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 80062a6:	2808      	cmp	r0, #8
      hsai->Init.Mckdiv += 1U;
 80062a8:	bf88      	it	hi
 80062aa:	3301      	addhi	r3, #1
 80062ac:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80062ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	f000 80de 	beq.w	8006472 <HAL_SAI_Init+0x332>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	f033 0702 	bics.w	r7, r3, #2
 80062bc:	f040 80dd 	bne.w	800647a <HAL_SAI_Init+0x33a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80062c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	bf18      	it	ne
 80062c6:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80062ca:	f7fb f91d 	bl	8001508 <HAL_GetREVID>
 80062ce:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80062d2:	f0c0 80d9 	bcc.w	8006488 <HAL_SAI_Init+0x348>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	6811      	ldr	r1, [r2, #0]
 80062da:	4b56      	ldr	r3, [pc, #344]	; (8006434 <HAL_SAI_Init+0x2f4>)
 80062dc:	400b      	ands	r3, r1
 80062de:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80062e0:	6822      	ldr	r2, [r4, #0]
 80062e2:	6811      	ldr	r1, [r2, #0]
 80062e4:	6863      	ldr	r3, [r4, #4]
 80062e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80062e8:	4303      	orrs	r3, r0
 80062ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80062ec:	4303      	orrs	r3, r0
 80062ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80062f0:	4303      	orrs	r3, r0
 80062f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80062f4:	4303      	orrs	r3, r0
 80062f6:	6960      	ldr	r0, [r4, #20]
 80062f8:	4303      	orrs	r3, r0
 80062fa:	69a0      	ldr	r0, [r4, #24]
 80062fc:	4303      	orrs	r3, r0
 80062fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006300:	4303      	orrs	r3, r0
 8006302:	6920      	ldr	r0, [r4, #16]
 8006304:	4303      	orrs	r3, r0
 8006306:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006308:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800630a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800630e:	ea43 0308 	orr.w	r3, r3, r8
 8006312:	433b      	orrs	r3, r7
 8006314:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006316:	6822      	ldr	r2, [r4, #0]
 8006318:	6851      	ldr	r1, [r2, #4]
 800631a:	4b47      	ldr	r3, [pc, #284]	; (8006438 <HAL_SAI_Init+0x2f8>)
 800631c:	400b      	ands	r3, r1
 800631e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006320:	6822      	ldr	r2, [r4, #0]
 8006322:	6851      	ldr	r1, [r2, #4]
 8006324:	69e3      	ldr	r3, [r4, #28]
 8006326:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006328:	4303      	orrs	r3, r0
 800632a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800632c:	4303      	orrs	r3, r0
 800632e:	430b      	orrs	r3, r1
 8006330:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	6891      	ldr	r1, [r2, #8]
 8006336:	4b41      	ldr	r3, [pc, #260]	; (800643c <HAL_SAI_Init+0x2fc>)
 8006338:	400b      	ands	r3, r1
 800633a:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800633c:	6821      	ldr	r1, [r4, #0]
 800633e:	688a      	ldr	r2, [r1, #8]
 8006340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006342:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006344:	4303      	orrs	r3, r0
 8006346:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006348:	4303      	orrs	r3, r0
 800634a:	4313      	orrs	r3, r2
 800634c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800634e:	3a01      	subs	r2, #1
 8006350:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006352:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006354:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006356:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800635a:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800635c:	6822      	ldr	r2, [r4, #0]
 800635e:	68d3      	ldr	r3, [r2, #12]
 8006360:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8006364:	f023 030f 	bic.w	r3, r3, #15
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	0c1b      	lsrs	r3, r3, #16
 800636c:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800636e:	6821      	ldr	r1, [r4, #0]
 8006370:	68ca      	ldr	r2, [r1, #12]
 8006372:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006374:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006376:	4303      	orrs	r3, r0
 8006378:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800637a:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800637c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006380:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8006382:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006388:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	4a1f      	ldr	r2, [pc, #124]	; (800640c <HAL_SAI_Init+0x2cc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f000 8099 	beq.w	80064c6 <HAL_SAI_Init+0x386>
 8006394:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8006398:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800639c:	4293      	cmp	r3, r2
 800639e:	f000 8092 	beq.w	80064c6 <HAL_SAI_Init+0x386>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 80063a8:	2201      	movs	r2, #1
 80063aa:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 80063ae:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80063b2:	4628      	mov	r0, r5
 80063b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063b8:	f44f 6800 	mov.w	r8, #2048	; 0x800
      break;
 80063bc:	e72d      	b.n	800621a <HAL_SAI_Init+0xda>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80063be:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063c2:	f44f 6800 	mov.w	r8, #2048	; 0x800
      break;
 80063c6:	e728      	b.n	800621a <HAL_SAI_Init+0xda>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80063c8:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063cc:	f44f 6800 	mov.w	r8, #2048	; 0x800
      break;
 80063d0:	e723      	b.n	800621a <HAL_SAI_Init+0xda>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80063d2:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063d6:	f44f 6800 	mov.w	r8, #2048	; 0x800
      break;
 80063da:	e71e      	b.n	800621a <HAL_SAI_Init+0xda>
      syncen_bits = 0;
 80063dc:	f04f 0800 	mov.w	r8, #0
 80063e0:	e71b      	b.n	800621a <HAL_SAI_Init+0xda>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80063e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80063e6:	f7ff fb77 	bl	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq>
 80063ea:	e724      	b.n	8006236 <HAL_SAI_Init+0xf6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80063ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80063f0:	f7ff fb72 	bl	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq>
 80063f4:	e728      	b.n	8006248 <HAL_SAI_Init+0x108>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80063f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80063fa:	f7ff fb6d 	bl	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq>
 80063fe:	e72c      	b.n	800625a <HAL_SAI_Init+0x11a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006400:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006404:	f7ff fb68 	bl	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006408:	e72c      	b.n	8006264 <HAL_SAI_Init+0x124>
 800640a:	bf00      	nop
 800640c:	40015804 	.word	0x40015804
 8006410:	58005404 	.word	0x58005404
 8006414:	58005400 	.word	0x58005400
 8006418:	40015800 	.word	0x40015800
 800641c:	40015c00 	.word	0x40015c00
 8006420:	40016000 	.word	0x40016000
 8006424:	40015c04 	.word	0x40015c04
 8006428:	40016004 	.word	0x40016004
 800642c:	58005424 	.word	0x58005424
 8006430:	cccccccd 	.word	0xcccccccd
 8006434:	f005c010 	.word	0xf005c010
 8006438:	ffff1ff0 	.word	0xffff1ff0
 800643c:	fff88000 	.word	0xfff88000
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006440:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006444:	f7ff fb48 	bl	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006448:	e711      	b.n	800626e <HAL_SAI_Init+0x12e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800644a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800644c:	2b04      	cmp	r3, #4
 800644e:	d00b      	beq.n	8006468 <HAL_SAI_Init+0x328>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006450:	2b08      	cmp	r3, #8
 8006452:	d00b      	beq.n	800646c <HAL_SAI_Init+0x32c>
        tmpframelength = hsai->FrameInit.FrameLength;
 8006454:	6d63      	ldr	r3, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006456:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800645a:	0040      	lsls	r0, r0, #1
 800645c:	6a22      	ldr	r2, [r4, #32]
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	fbb0 f0f3 	udiv	r0, r0, r3
 8006466:	e716      	b.n	8006296 <HAL_SAI_Init+0x156>
        tmpframelength = 64U;
 8006468:	2340      	movs	r3, #64	; 0x40
 800646a:	e7f4      	b.n	8006456 <HAL_SAI_Init+0x316>
        tmpframelength = 256U;
 800646c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006470:	e7f1      	b.n	8006456 <HAL_SAI_Init+0x316>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006474:	085b      	lsrs	r3, r3, #1
 8006476:	6263      	str	r3, [r4, #36]	; 0x24
 8006478:	e71d      	b.n	80062b6 <HAL_SAI_Init+0x176>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800647a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800647c:	2b01      	cmp	r3, #1
 800647e:	bf0c      	ite	eq
 8006480:	f44f 7700 	moveq.w	r7, #512	; 0x200
 8006484:	2700      	movne	r7, #0
 8006486:	e720      	b.n	80062ca <HAL_SAI_Init+0x18a>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	6811      	ldr	r1, [r2, #0]
 800648c:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <HAL_SAI_Init+0x3b8>)
 800648e:	400b      	ands	r3, r1
 8006490:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	6811      	ldr	r1, [r2, #0]
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800649a:	4303      	orrs	r3, r0
 800649c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800649e:	4303      	orrs	r3, r0
 80064a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80064a2:	4303      	orrs	r3, r0
 80064a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80064a6:	4303      	orrs	r3, r0
 80064a8:	6960      	ldr	r0, [r4, #20]
 80064aa:	4303      	orrs	r3, r0
 80064ac:	69a0      	ldr	r0, [r4, #24]
 80064ae:	4303      	orrs	r3, r0
 80064b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80064b2:	4303      	orrs	r3, r0
 80064b4:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80064b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064b8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80064bc:	ea43 0308 	orr.w	r3, r3, r8
 80064c0:	433b      	orrs	r3, r7
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	e727      	b.n	8006316 <HAL_SAI_Init+0x1d6>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80064c6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80064ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	f47f af65 	bne.w	80063a2 <HAL_SAI_Init+0x262>
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80064d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80064da:	1e5a      	subs	r2, r3, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80064dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064de:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80064e2:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80064e4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	6473      	str	r3, [r6, #68]	; 0x44
 80064ec:	e759      	b.n	80063a2 <HAL_SAI_Init+0x262>
    return HAL_ERROR;
 80064ee:	2501      	movs	r5, #1
 80064f0:	e75f      	b.n	80063b2 <HAL_SAI_Init+0x272>
    return HAL_ERROR;
 80064f2:	2501      	movs	r5, #1
 80064f4:	e75d      	b.n	80063b2 <HAL_SAI_Init+0x272>
 80064f6:	bf00      	nop
 80064f8:	f805c010 	.word	0xf805c010

080064fc <HAL_SAI_Abort>:
{
 80064fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 80064fe:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8006502:	2b01      	cmp	r3, #1
 8006504:	d05e      	beq.n	80065c4 <HAL_SAI_Abort+0xc8>
 8006506:	4604      	mov	r4, r0
 8006508:	2301      	movs	r3, #1
 800650a:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800650e:	6803      	ldr	r3, [r0, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006516:	d03a      	beq.n	800658e <HAL_SAI_Abort+0x92>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800651e:	601a      	str	r2, [r3, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8006520:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b12      	cmp	r3, #18
 8006528:	d018      	beq.n	800655c <HAL_SAI_Abort+0x60>
  HAL_StatusTypeDef status = HAL_OK;
 800652a:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800652c:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b22      	cmp	r3, #34	; 0x22
 8006534:	d12c      	bne.n	8006590 <HAL_SAI_Abort+0x94>
 8006536:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800653a:	b348      	cbz	r0, 8006590 <HAL_SAI_Abort+0x94>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800653c:	f7fb ff08 	bl	8002350 <HAL_DMA_Abort>
 8006540:	b330      	cbz	r0, 8006590 <HAL_SAI_Abort+0x94>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8006542:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d021      	beq.n	8006590 <HAL_SAI_Abort+0x94>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800654c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 8006558:	2501      	movs	r5, #1
 800655a:	e019      	b.n	8006590 <HAL_SAI_Abort+0x94>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800655c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8006560:	b188      	cbz	r0, 8006586 <HAL_SAI_Abort+0x8a>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8006562:	f7fb fef5 	bl	8002350 <HAL_DMA_Abort>
 8006566:	4605      	mov	r5, r0
 8006568:	2800      	cmp	r0, #0
 800656a:	d0df      	beq.n	800652c <HAL_SAI_Abort+0x30>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800656c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d009      	beq.n	800658a <HAL_SAI_Abort+0x8e>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006576:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800657a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 8006582:	2501      	movs	r5, #1
 8006584:	e7d2      	b.n	800652c <HAL_SAI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 8006586:	2500      	movs	r5, #0
 8006588:	e7d0      	b.n	800652c <HAL_SAI_Abort+0x30>
 800658a:	2500      	movs	r5, #0
 800658c:	e7ce      	b.n	800652c <HAL_SAI_Abort+0x30>
 800658e:	2500      	movs	r5, #0
  hsai->Instance->IMR = 0;
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	f04f 32ff 	mov.w	r2, #4294967295
 800659c:	619a      	str	r2, [r3, #24]
  if (SAI_Disable(hsai) != HAL_OK)
 800659e:	4620      	mov	r0, r4
 80065a0:	f7ff fdac 	bl	80060fc <SAI_Disable>
    status = HAL_ERROR;
 80065a4:	2800      	cmp	r0, #0
 80065a6:	bf18      	it	ne
 80065a8:	2501      	movne	r5, #1
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80065aa:	6822      	ldr	r2, [r4, #0]
 80065ac:	6853      	ldr	r3, [r2, #4]
 80065ae:	f043 0308 	orr.w	r3, r3, #8
 80065b2:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 80065ba:	2300      	movs	r3, #0
 80065bc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80065c0:	4628      	mov	r0, r5
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hsai);
 80065c4:	2502      	movs	r5, #2
 80065c6:	e7fb      	b.n	80065c0 <HAL_SAI_Abort+0xc4>

080065c8 <HAL_SAI_Transmit_DMA>:
{
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	4604      	mov	r4, r0
 80065ce:	4688      	mov	r8, r1
 80065d0:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80065d2:	f7fa ff7f 	bl	80014d4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 80065d6:	f1b8 0f00 	cmp.w	r8, #0
 80065da:	d068      	beq.n	80066ae <HAL_SAI_Transmit_DMA+0xe6>
 80065dc:	4605      	mov	r5, r0
 80065de:	2f00      	cmp	r7, #0
 80065e0:	d065      	beq.n	80066ae <HAL_SAI_Transmit_DMA+0xe6>
  if (hsai->State == HAL_SAI_STATE_READY)
 80065e2:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 80065e6:	b2f6      	uxtb	r6, r6
 80065e8:	2e01      	cmp	r6, #1
 80065ea:	d164      	bne.n	80066b6 <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 80065ec:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d062      	beq.n	80066ba <HAL_SAI_Transmit_DMA+0xf2>
 80065f4:	2301      	movs	r3, #1
 80065f6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80065fa:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 80065fe:	f8a4 707c 	strh.w	r7, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8006602:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006606:	2300      	movs	r3, #0
 8006608:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800660c:	2212      	movs	r2, #18
 800660e:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006612:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006616:	492a      	ldr	r1, [pc, #168]	; (80066c0 <HAL_SAI_Transmit_DMA+0xf8>)
 8006618:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800661a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800661e:	4929      	ldr	r1, [pc, #164]	; (80066c4 <HAL_SAI_Transmit_DMA+0xfc>)
 8006620:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006622:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006626:	4928      	ldr	r1, [pc, #160]	; (80066c8 <HAL_SAI_Transmit_DMA+0x100>)
 8006628:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800662a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800662e:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8006636:	321c      	adds	r2, #28
 8006638:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800663a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800663e:	f7fb fca7 	bl	8001f90 <HAL_DMA_Start_IT>
 8006642:	4607      	mov	r7, r0
 8006644:	bb10      	cbnz	r0, 800668c <HAL_SAI_Transmit_DMA+0xc4>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006646:	2100      	movs	r1, #0
 8006648:	4620      	mov	r0, r4
 800664a:	f7ff fd3f 	bl	80060cc <SAI_InterruptFlag>
 800664e:	6822      	ldr	r2, [r4, #0]
 8006650:	6913      	ldr	r3, [r2, #16]
 8006652:	4303      	orrs	r3, r0
 8006654:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	6813      	ldr	r3, [r2, #0]
 800665a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665e:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	695a      	ldr	r2, [r3, #20]
 8006664:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 8006668:	d114      	bne.n	8006694 <HAL_SAI_Transmit_DMA+0xcc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800666a:	f7fa ff33 	bl	80014d4 <HAL_GetTick>
 800666e:	1b43      	subs	r3, r0, r5
 8006670:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006674:	d9f4      	bls.n	8006660 <HAL_SAI_Transmit_DMA+0x98>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006676:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800667a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800667e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 8006682:	2300      	movs	r3, #0
 8006684:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 8006688:	2603      	movs	r6, #3
 800668a:	e011      	b.n	80066b0 <HAL_SAI_Transmit_DMA+0xe8>
      __HAL_UNLOCK(hsai);
 800668c:	2300      	movs	r3, #0
 800668e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8006692:	e00d      	b.n	80066b0 <HAL_SAI_Transmit_DMA+0xe8>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800669a:	d103      	bne.n	80066a4 <HAL_SAI_Transmit_DMA+0xdc>
      __HAL_SAI_ENABLE(hsai);
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066a2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80066a4:	2300      	movs	r3, #0
 80066a6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 80066aa:	463e      	mov	r6, r7
 80066ac:	e000      	b.n	80066b0 <HAL_SAI_Transmit_DMA+0xe8>
    return  HAL_ERROR;
 80066ae:	2601      	movs	r6, #1
}
 80066b0:	4630      	mov	r0, r6
 80066b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80066b6:	2602      	movs	r6, #2
 80066b8:	e7fa      	b.n	80066b0 <HAL_SAI_Transmit_DMA+0xe8>
    __HAL_LOCK(hsai);
 80066ba:	2602      	movs	r6, #2
 80066bc:	e7f8      	b.n	80066b0 <HAL_SAI_Transmit_DMA+0xe8>
 80066be:	bf00      	nop
 80066c0:	080067d3 	.word	0x080067d3
 80066c4:	08006797 	.word	0x08006797
 80066c8:	08006827 	.word	0x08006827

080066cc <HAL_SAI_Receive_DMA>:
{
 80066cc:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0U))
 80066ce:	2900      	cmp	r1, #0
 80066d0:	d053      	beq.n	800677a <HAL_SAI_Receive_DMA+0xae>
 80066d2:	4604      	mov	r4, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	d04f      	beq.n	800677a <HAL_SAI_Receive_DMA+0xae>
  if (hsai->State == HAL_SAI_STATE_READY)
 80066da:	f890 5091 	ldrb.w	r5, [r0, #145]	; 0x91
 80066de:	b2ed      	uxtb	r5, r5
 80066e0:	2d01      	cmp	r5, #1
 80066e2:	d14d      	bne.n	8006780 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
 80066e4:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
 80066e8:	2901      	cmp	r1, #1
 80066ea:	d04b      	beq.n	8006784 <HAL_SAI_Receive_DMA+0xb8>
 80066ec:	2101      	movs	r1, #1
 80066ee:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80066f2:	6783      	str	r3, [r0, #120]	; 0x78
    hsai->XferSize = Size;
 80066f4:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 80066f8:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006702:	2222      	movs	r2, #34	; 0x22
 8006704:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006708:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800670c:	491e      	ldr	r1, [pc, #120]	; (8006788 <HAL_SAI_Receive_DMA+0xbc>)
 800670e:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006710:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006714:	491d      	ldr	r1, [pc, #116]	; (800678c <HAL_SAI_Receive_DMA+0xc0>)
 8006716:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006718:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800671c:	491c      	ldr	r1, [pc, #112]	; (8006790 <HAL_SAI_Receive_DMA+0xc4>)
 800671e:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8006720:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006724:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006726:	6801      	ldr	r1, [r0, #0]
 8006728:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 800672c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800672e:	311c      	adds	r1, #28
 8006730:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8006734:	f7fb fc2c 	bl	8001f90 <HAL_DMA_Start_IT>
 8006738:	4606      	mov	r6, r0
 800673a:	b118      	cbz	r0, 8006744 <HAL_SAI_Receive_DMA+0x78>
      __HAL_UNLOCK(hsai);
 800673c:	2300      	movs	r3, #0
 800673e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8006742:	e01b      	b.n	800677c <HAL_SAI_Receive_DMA+0xb0>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006744:	2100      	movs	r1, #0
 8006746:	4620      	mov	r0, r4
 8006748:	f7ff fcc0 	bl	80060cc <SAI_InterruptFlag>
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	6913      	ldr	r3, [r2, #16]
 8006750:	4303      	orrs	r3, r0
 8006752:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675c:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006766:	d103      	bne.n	8006770 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800676e:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8006770:	2300      	movs	r3, #0
 8006772:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8006776:	4635      	mov	r5, r6
 8006778:	e000      	b.n	800677c <HAL_SAI_Receive_DMA+0xb0>
    return  HAL_ERROR;
 800677a:	2501      	movs	r5, #1
}
 800677c:	4628      	mov	r0, r5
 800677e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8006780:	2502      	movs	r5, #2
 8006782:	e7fb      	b.n	800677c <HAL_SAI_Receive_DMA+0xb0>
    __HAL_LOCK(hsai);
 8006784:	2502      	movs	r5, #2
 8006786:	e7f9      	b.n	800677c <HAL_SAI_Receive_DMA+0xb0>
 8006788:	0800681b 	.word	0x0800681b
 800678c:	080067df 	.word	0x080067df
 8006790:	08006827 	.word	0x08006827

08006794 <HAL_SAI_TxCpltCallback>:
}
 8006794:	4770      	bx	lr

08006796 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006796:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006798:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800679a:	69c3      	ldr	r3, [r0, #28]
 800679c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a0:	d012      	beq.n	80067c8 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 80067a2:	2100      	movs	r1, #0
 80067a4:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	6813      	ldr	r3, [r2, #0]
 80067ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067b0:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80067b2:	4620      	mov	r0, r4
 80067b4:	f7ff fc8a 	bl	80060cc <SAI_InterruptFlag>
 80067b8:	6822      	ldr	r2, [r4, #0]
 80067ba:	6913      	ldr	r3, [r2, #16]
 80067bc:	ea23 0300 	bic.w	r3, r3, r0
 80067c0:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff ffe3 	bl	8006794 <HAL_SAI_TxCpltCallback>
#endif
}
 80067ce:	bd10      	pop	{r4, pc}

080067d0 <HAL_SAI_TxHalfCpltCallback>:
}
 80067d0:	4770      	bx	lr

080067d2 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067d2:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80067d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80067d6:	f7ff fffb 	bl	80067d0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80067da:	bd08      	pop	{r3, pc}

080067dc <HAL_SAI_RxCpltCallback>:
}
 80067dc:	4770      	bx	lr

080067de <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80067de:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067e0:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80067e2:	69c3      	ldr	r3, [r0, #28]
 80067e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e8:	d012      	beq.n	8006810 <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	6813      	ldr	r3, [r2, #0]
 80067ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067f2:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 80067f4:	2100      	movs	r1, #0
 80067f6:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff fc66 	bl	80060cc <SAI_InterruptFlag>
 8006800:	6822      	ldr	r2, [r4, #0]
 8006802:	6913      	ldr	r3, [r2, #16]
 8006804:	ea23 0300 	bic.w	r3, r3, r0
 8006808:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800680a:	2301      	movs	r3, #1
 800680c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006810:	4620      	mov	r0, r4
 8006812:	f7ff ffe3 	bl	80067dc <HAL_SAI_RxCpltCallback>
#endif
}
 8006816:	bd10      	pop	{r4, pc}

08006818 <HAL_SAI_RxHalfCpltCallback>:
}
 8006818:	4770      	bx	lr

0800681a <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800681a:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800681c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800681e:	f7ff fffb 	bl	8006818 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006822:	bd08      	pop	{r3, pc}

08006824 <HAL_SAI_ErrorCallback>:
}
 8006824:	4770      	bx	lr

08006826 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006826:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006828:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800682a:	f7fc fe1d 	bl	8003468 <HAL_DMA_GetError>
 800682e:	2802      	cmp	r0, #2
 8006830:	d100      	bne.n	8006834 <SAI_DMAError+0xe>
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 8006832:	bd10      	pop	{r4, pc}
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006834:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006848:	6013      	str	r3, [r2, #0]
    (void) SAI_Disable(hsai);
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff fc56 	bl	80060fc <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8006850:	2301      	movs	r3, #1
 8006852:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800685c:	4620      	mov	r0, r4
 800685e:	f7ff ffe1 	bl	8006824 <HAL_SAI_ErrorCallback>
}
 8006862:	e7e6      	b.n	8006832 <SAI_DMAError+0xc>

08006864 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 8006864:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 811e 	beq.w	8006aaa <HAL_SAI_IRQHandler+0x246>
{
 800686e:	b510      	push	{r4, lr}
 8006870:	4604      	mov	r4, r0
    uint32_t itflags = hsai->Instance->SR;
 8006872:	6803      	ldr	r3, [r0, #0]
 8006874:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8006876:	6919      	ldr	r1, [r3, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8006878:	6818      	ldr	r0, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800687a:	f012 0f08 	tst.w	r2, #8
 800687e:	d007      	beq.n	8006890 <HAL_SAI_IRQHandler+0x2c>
 8006880:	f011 0f08 	tst.w	r1, #8
 8006884:	d004      	beq.n	8006890 <HAL_SAI_IRQHandler+0x2c>
      hsai->InterruptServiceRoutine(hsai);
 8006886:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800688a:	4620      	mov	r0, r4
 800688c:	4798      	blx	r3
}
 800688e:	bd10      	pop	{r4, pc}
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8006890:	f012 0f01 	tst.w	r2, #1
 8006894:	d015      	beq.n	80068c2 <HAL_SAI_IRQHandler+0x5e>
 8006896:	f011 0c01 	ands.w	ip, r1, #1
 800689a:	d012      	beq.n	80068c2 <HAL_SAI_IRQHandler+0x5e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800689c:	2201      	movs	r2, #1
 800689e:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80068a0:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b22      	cmp	r3, #34	; 0x22
 80068a8:	bf18      	it	ne
 80068aa:	f04f 0c02 	movne.w	ip, #2
      hsai->ErrorCode |= tmperror;
 80068ae:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80068b2:	ea43 030c 	orr.w	r3, r3, ip
 80068b6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 80068ba:	4620      	mov	r0, r4
 80068bc:	f7ff ffb2 	bl	8006824 <HAL_SAI_ErrorCallback>
 80068c0:	e7e5      	b.n	800688e <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80068c2:	f012 0f02 	tst.w	r2, #2
 80068c6:	d00a      	beq.n	80068de <HAL_SAI_IRQHandler+0x7a>
 80068c8:	f011 0f02 	tst.w	r1, #2
 80068cc:	d007      	beq.n	80068de <HAL_SAI_IRQHandler+0x7a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80068ce:	2202      	movs	r2, #2
 80068d0:	619a      	str	r2, [r3, #24]
      if (hsai->mutecallback != NULL)
 80068d2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0d9      	beq.n	800688e <HAL_SAI_IRQHandler+0x2a>
        hsai->mutecallback();
 80068da:	4798      	blx	r3
 80068dc:	e7d7      	b.n	800688e <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80068de:	f012 0f20 	tst.w	r2, #32
 80068e2:	d03e      	beq.n	8006962 <HAL_SAI_IRQHandler+0xfe>
 80068e4:	f011 0f20 	tst.w	r1, #32
 80068e8:	d03b      	beq.n	8006962 <HAL_SAI_IRQHandler+0xfe>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80068ea:	2220      	movs	r2, #32
 80068ec:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80068ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80068f2:	f043 0304 	orr.w	r3, r3, #4
 80068f6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80068fa:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80068fe:	d029      	beq.n	8006954 <HAL_SAI_IRQHandler+0xf0>
        if (hsai->hdmatx != NULL)
 8006900:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006904:	b133      	cbz	r3, 8006914 <HAL_SAI_IRQHandler+0xb0>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006906:	4a69      	ldr	r2, [pc, #420]	; (8006aac <HAL_SAI_IRQHandler+0x248>)
 8006908:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800690a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800690e:	f7fb ff7b 	bl	8002808 <HAL_DMA_Abort_IT>
 8006912:	b9a8      	cbnz	r0, 8006940 <HAL_SAI_IRQHandler+0xdc>
        if (hsai->hdmarx != NULL)
 8006914:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0b8      	beq.n	800688e <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800691c:	4a63      	ldr	r2, [pc, #396]	; (8006aac <HAL_SAI_IRQHandler+0x248>)
 800691e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006920:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006924:	f7fb ff70 	bl	8002808 <HAL_DMA_Abort_IT>
 8006928:	2800      	cmp	r0, #0
 800692a:	d0b0      	beq.n	800688e <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800692c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006934:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006938:	4620      	mov	r0, r4
 800693a:	f7ff ff73 	bl	8006824 <HAL_SAI_ErrorCallback>
 800693e:	e7a6      	b.n	800688e <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006940:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006948:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff ff69 	bl	8006824 <HAL_SAI_ErrorCallback>
 8006952:	e7df      	b.n	8006914 <HAL_SAI_IRQHandler+0xb0>
        (void) HAL_SAI_Abort(hsai);
 8006954:	4620      	mov	r0, r4
 8006956:	f7ff fdd1 	bl	80064fc <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 800695a:	4620      	mov	r0, r4
 800695c:	f7ff ff62 	bl	8006824 <HAL_SAI_ErrorCallback>
 8006960:	e795      	b.n	800688e <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8006962:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006966:	d040      	beq.n	80069ea <HAL_SAI_IRQHandler+0x186>
 8006968:	f011 0f40 	tst.w	r1, #64	; 0x40
 800696c:	d03d      	beq.n	80069ea <HAL_SAI_IRQHandler+0x186>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800696e:	2240      	movs	r2, #64	; 0x40
 8006970:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8006972:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006976:	f043 0308 	orr.w	r3, r3, #8
 800697a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800697e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8006982:	d02b      	beq.n	80069dc <HAL_SAI_IRQHandler+0x178>
        if (hsai->hdmatx != NULL)
 8006984:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006988:	b133      	cbz	r3, 8006998 <HAL_SAI_IRQHandler+0x134>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800698a:	4a48      	ldr	r2, [pc, #288]	; (8006aac <HAL_SAI_IRQHandler+0x248>)
 800698c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800698e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006992:	f7fb ff39 	bl	8002808 <HAL_DMA_Abort_IT>
 8006996:	b9b8      	cbnz	r0, 80069c8 <HAL_SAI_IRQHandler+0x164>
        if (hsai->hdmarx != NULL)
 8006998:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800699c:	2b00      	cmp	r3, #0
 800699e:	f43f af76 	beq.w	800688e <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80069a2:	4a42      	ldr	r2, [pc, #264]	; (8006aac <HAL_SAI_IRQHandler+0x248>)
 80069a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80069a6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80069aa:	f7fb ff2d 	bl	8002808 <HAL_DMA_Abort_IT>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	f43f af6d 	beq.w	800688e <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80069b4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 80069c0:	4620      	mov	r0, r4
 80069c2:	f7ff ff2f 	bl	8006824 <HAL_SAI_ErrorCallback>
 80069c6:	e762      	b.n	800688e <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80069c8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80069cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 80069d4:	4620      	mov	r0, r4
 80069d6:	f7ff ff25 	bl	8006824 <HAL_SAI_ErrorCallback>
 80069da:	e7dd      	b.n	8006998 <HAL_SAI_IRQHandler+0x134>
        (void) HAL_SAI_Abort(hsai);
 80069dc:	4620      	mov	r0, r4
 80069de:	f7ff fd8d 	bl	80064fc <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7ff ff1e 	bl	8006824 <HAL_SAI_ErrorCallback>
 80069e8:	e751      	b.n	800688e <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80069ea:	f012 0f04 	tst.w	r2, #4
 80069ee:	d049      	beq.n	8006a84 <HAL_SAI_IRQHandler+0x220>
 80069f0:	f011 0f04 	tst.w	r1, #4
 80069f4:	d046      	beq.n	8006a84 <HAL_SAI_IRQHandler+0x220>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80069f6:	2204      	movs	r2, #4
 80069f8:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80069fa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80069fe:	f043 0320 	orr.w	r3, r3, #32
 8006a02:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006a06:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8006a0a:	d02b      	beq.n	8006a64 <HAL_SAI_IRQHandler+0x200>
        if (hsai->hdmatx != NULL)
 8006a0c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006a10:	b133      	cbz	r3, 8006a20 <HAL_SAI_IRQHandler+0x1bc>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006a12:	4a26      	ldr	r2, [pc, #152]	; (8006aac <HAL_SAI_IRQHandler+0x248>)
 8006a14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006a16:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006a1a:	f7fb fef5 	bl	8002808 <HAL_DMA_Abort_IT>
 8006a1e:	b9b8      	cbnz	r0, 8006a50 <HAL_SAI_IRQHandler+0x1ec>
        if (hsai->hdmarx != NULL)
 8006a20:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f43f af32 	beq.w	800688e <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006a2a:	4a20      	ldr	r2, [pc, #128]	; (8006aac <HAL_SAI_IRQHandler+0x248>)
 8006a2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006a2e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006a32:	f7fb fee9 	bl	8002808 <HAL_DMA_Abort_IT>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f43f af29 	beq.w	800688e <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006a3c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a44:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f7ff feeb 	bl	8006824 <HAL_SAI_ErrorCallback>
 8006a4e:	e71e      	b.n	800688e <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006a50:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a58:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f7ff fee1 	bl	8006824 <HAL_SAI_ErrorCallback>
 8006a62:	e7dd      	b.n	8006a20 <HAL_SAI_IRQHandler+0x1bc>
        hsai->Instance->IMR = 0U;
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	2300      	movs	r3, #0
 8006a68:	6113      	str	r3, [r2, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006a6a:	6822      	ldr	r2, [r4, #0]
 8006a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a70:	6191      	str	r1, [r2, #24]
        hsai->State = HAL_SAI_STATE_READY;
 8006a72:	2201      	movs	r2, #1
 8006a74:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
        hsai->XferCount = 0U;
 8006a78:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
        HAL_SAI_ErrorCallback(hsai);
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7ff fed1 	bl	8006824 <HAL_SAI_ErrorCallback>
 8006a82:	e704      	b.n	800688e <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8006a84:	f012 0f10 	tst.w	r2, #16
 8006a88:	f43f af01 	beq.w	800688e <HAL_SAI_IRQHandler+0x2a>
 8006a8c:	f011 0f10 	tst.w	r1, #16
 8006a90:	f43f aefd 	beq.w	800688e <HAL_SAI_IRQHandler+0x2a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8006a94:	2210      	movs	r2, #16
 8006a96:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8006a98:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7ff febe 	bl	8006824 <HAL_SAI_ErrorCallback>
}
 8006aa8:	e6f1      	b.n	800688e <HAL_SAI_IRQHandler+0x2a>
 8006aaa:	4770      	bx	lr
 8006aac:	08006ab1 	.word	0x08006ab1

08006ab0 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006ab0:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006ab4:	6822      	ldr	r2, [r4, #0]
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006abc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aca:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8006acc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d109      	bne.n	8006ae8 <SAI_DMAAbort+0x38>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f7ff fe9f 	bl	8006824 <HAL_SAI_ErrorCallback>
#endif
}
 8006ae6:	bd10      	pop	{r4, pc}
    (void) SAI_Disable(hsai);
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f7ff fb07 	bl	80060fc <SAI_Disable>
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	6853      	ldr	r3, [r2, #4]
 8006af2:	f043 0308 	orr.w	r3, r3, #8
 8006af6:	6053      	str	r3, [r2, #4]
 8006af8:	e7ec      	b.n	8006ad4 <SAI_DMAAbort+0x24>
	...

08006afc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006afc:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006afe:	6802      	ldr	r2, [r0, #0]
 8006b00:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b02:	6991      	ldr	r1, [r2, #24]
 8006b04:	f041 0108 	orr.w	r1, r1, #8
 8006b08:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b0a:	6801      	ldr	r1, [r0, #0]
 8006b0c:	698a      	ldr	r2, [r1, #24]
 8006b0e:	f042 0210 	orr.w	r2, r2, #16
 8006b12:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b14:	6801      	ldr	r1, [r0, #0]
 8006b16:	680a      	ldr	r2, [r1, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006b1e:	6801      	ldr	r1, [r0, #0]
 8006b20:	690c      	ldr	r4, [r1, #16]
 8006b22:	4a29      	ldr	r2, [pc, #164]	; (8006bc8 <SPI_CloseTransfer+0xcc>)
 8006b24:	4022      	ands	r2, r4
 8006b26:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006b28:	6801      	ldr	r1, [r0, #0]
 8006b2a:	688a      	ldr	r2, [r1, #8]
 8006b2c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b30:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b32:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	2a04      	cmp	r2, #4
 8006b3a:	d00d      	beq.n	8006b58 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006b3c:	f013 0f20 	tst.w	r3, #32
 8006b40:	d00a      	beq.n	8006b58 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b42:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006b46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b4a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b4e:	6801      	ldr	r1, [r0, #0]
 8006b50:	698a      	ldr	r2, [r1, #24]
 8006b52:	f042 0220 	orr.w	r2, r2, #32
 8006b56:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b58:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	2a03      	cmp	r2, #3
 8006b60:	d00d      	beq.n	8006b7e <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006b62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b66:	d00a      	beq.n	8006b7e <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b68:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006b6c:	f042 0204 	orr.w	r2, r2, #4
 8006b70:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b74:	6801      	ldr	r1, [r0, #0]
 8006b76:	698a      	ldr	r2, [r1, #24]
 8006b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7c:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006b7e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006b82:	d00a      	beq.n	8006b9a <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b84:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006b88:	f042 0201 	orr.w	r2, r2, #1
 8006b8c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b90:	6801      	ldr	r1, [r0, #0]
 8006b92:	698a      	ldr	r2, [r1, #24]
 8006b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b98:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006b9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006b9e:	d00a      	beq.n	8006bb6 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ba0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006ba4:	f043 0308 	orr.w	r3, r3, #8
 8006ba8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bac:	6802      	ldr	r2, [r0, #0]
 8006bae:	6993      	ldr	r3, [r2, #24]
 8006bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb4:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006bbc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	fffffc90 	.word	0xfffffc90

08006bcc <HAL_SPI_Init>:
  if (hspi == NULL)
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d034      	beq.n	8006c3a <HAL_SPI_Init+0x6e>
{
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006bd8:	6802      	ldr	r2, [r0, #0]
 8006bda:	4953      	ldr	r1, [pc, #332]	; (8006d28 <HAL_SPI_Init+0x15c>)
 8006bdc:	4b53      	ldr	r3, [pc, #332]	; (8006d2c <HAL_SPI_Init+0x160>)
 8006bde:	428a      	cmp	r2, r1
 8006be0:	bf18      	it	ne
 8006be2:	429a      	cmpne	r2, r3
 8006be4:	d02f      	beq.n	8006c46 <HAL_SPI_Init+0x7a>
 8006be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d02b      	beq.n	8006c46 <HAL_SPI_Init+0x7a>
 8006bee:	68c3      	ldr	r3, [r0, #12]
 8006bf0:	2b0f      	cmp	r3, #15
 8006bf2:	d824      	bhi.n	8006c3e <HAL_SPI_Init+0x72>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006bf4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006bf6:	0952      	lsrs	r2, r2, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8006bfc:	fb02 3303 	mla	r3, r2, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d933      	bls.n	8006c6c <HAL_SPI_Init+0xa0>
    return HAL_ERROR;
 8006c04:	2001      	movs	r0, #1
 8006c06:	e08e      	b.n	8006d26 <HAL_SPI_Init+0x15a>
    hspi->Lock = HAL_UNLOCKED;
 8006c08:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f7fa f8ab 	bl	8000d68 <HAL_SPI_MspInit>
 8006c12:	e02f      	b.n	8006c74 <HAL_SPI_Init+0xa8>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c1a:	d006      	beq.n	8006c2a <HAL_SPI_Init+0x5e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d139      	bne.n	8006c94 <HAL_SPI_Init+0xc8>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006c20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c26:	d135      	bne.n	8006c94 <HAL_SPI_Init+0xc8>
 8006c28:	e002      	b.n	8006c30 <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006c2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d131      	bne.n	8006c94 <HAL_SPI_Init+0xc8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006c30:	680b      	ldr	r3, [r1, #0]
 8006c32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c36:	600b      	str	r3, [r1, #0]
 8006c38:	e02c      	b.n	8006c94 <HAL_SPI_Init+0xc8>
    return HAL_ERROR;
 8006c3a:	2001      	movs	r0, #1
}
 8006c3c:	4770      	bx	lr
    return HAL_ERROR;
 8006c3e:	2001      	movs	r0, #1
 8006c40:	e071      	b.n	8006d26 <HAL_SPI_Init+0x15a>
    return HAL_ERROR;
 8006c42:	2001      	movs	r0, #1
 8006c44:	e06f      	b.n	8006d26 <HAL_SPI_Init+0x15a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006c46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c48:	0959      	lsrs	r1, r3, #5
  data_size = (data_size + 7UL) / 8UL;
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8006c50:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006c54:	4834      	ldr	r0, [pc, #208]	; (8006d28 <HAL_SPI_Init+0x15c>)
 8006c56:	4935      	ldr	r1, [pc, #212]	; (8006d2c <HAL_SPI_Init+0x160>)
 8006c58:	428a      	cmp	r2, r1
 8006c5a:	bf18      	it	ne
 8006c5c:	4282      	cmpne	r2, r0
 8006c5e:	d003      	beq.n	8006c68 <HAL_SPI_Init+0x9c>
 8006c60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c64:	428a      	cmp	r2, r1
 8006c66:	d101      	bne.n	8006c6c <HAL_SPI_Init+0xa0>
 8006c68:	2b10      	cmp	r3, #16
 8006c6a:	d8ea      	bhi.n	8006c42 <HAL_SPI_Init+0x76>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c6c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0c9      	beq.n	8006c08 <HAL_SPI_Init+0x3c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006c74:	2302      	movs	r3, #2
 8006c76:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	6813      	ldr	r3, [r2, #0]
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
 8006c82:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006c84:	6821      	ldr	r1, [r4, #0]
 8006c86:	688a      	ldr	r2, [r1, #8]
 8006c88:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006c8c:	69a3      	ldr	r3, [r4, #24]
 8006c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c92:	d0bf      	beq.n	8006c14 <HAL_SPI_Init+0x48>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006c94:	6821      	ldr	r1, [r4, #0]
 8006c96:	69e3      	ldr	r3, [r4, #28]
 8006c98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006c9a:	4303      	orrs	r3, r0
 8006c9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c9e:	4303      	orrs	r3, r0
 8006ca0:	68e0      	ldr	r0, [r4, #12]
 8006ca2:	4303      	orrs	r3, r0
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	69a1      	ldr	r1, [r4, #24]
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	6921      	ldr	r1, [r4, #16]
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	6961      	ldr	r1, [r4, #20]
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	6a21      	ldr	r1, [r4, #32]
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	6861      	ldr	r1, [r4, #4]
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	68a1      	ldr	r1, [r4, #8]
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	b96b      	cbnz	r3, 8006cfa <HAL_SPI_Init+0x12e>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	6893      	ldr	r3, [r2, #8]
 8006ce2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cea:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006cec:	6822      	ldr	r2, [r4, #0]
 8006cee:	6893      	ldr	r3, [r2, #8]
 8006cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cf8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006d04:	6863      	ldr	r3, [r4, #4]
 8006d06:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006d0a:	d006      	beq.n	8006d1a <HAL_SPI_Init+0x14e>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	68d3      	ldr	r3, [r2, #12]
 8006d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d14:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006d16:	430b      	orrs	r3, r1
 8006d18:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006d26:	bd10      	pop	{r4, pc}
 8006d28:	40013000 	.word	0x40013000
 8006d2c:	40003800 	.word	0x40003800

08006d30 <HAL_SPI_TxCpltCallback>:
}
 8006d30:	4770      	bx	lr

08006d32 <HAL_SPI_RxCpltCallback>:
}
 8006d32:	4770      	bx	lr

08006d34 <HAL_SPI_TxRxCpltCallback>:
}
 8006d34:	4770      	bx	lr

08006d36 <HAL_SPI_ErrorCallback>:
}
 8006d36:	4770      	bx	lr

08006d38 <HAL_SPI_IRQHandler>:
{
 8006d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006d3e:	6806      	ldr	r6, [r0, #0]
 8006d40:	f8d6 9010 	ldr.w	r9, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006d44:	f8d6 8014 	ldr.w	r8, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 8006d48:	ea09 0508 	and.w	r5, r9, r8
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006d4c:	f8d6 a008 	ldr.w	sl, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8006d50:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 8006d54:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006d56:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d03f      	beq.n	8006dde <HAL_SPI_IRQHandler+0xa6>
  uint32_t handled  = 0UL;
 8006d5e:	2200      	movs	r2, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006d60:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d041      	beq.n	8006dec <HAL_SPI_IRQHandler+0xb4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006d68:	f005 0326 	and.w	r3, r5, #38	; 0x26
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d046      	beq.n	8006dfe <HAL_SPI_IRQHandler+0xc6>
  if (handled != 0UL)
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d142      	bne.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006d74:	f015 0f08 	tst.w	r5, #8
 8006d78:	d078      	beq.n	8006e6c <HAL_SPI_IRQHandler+0x134>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d7a:	6822      	ldr	r2, [r4, #0]
 8006d7c:	6993      	ldr	r3, [r2, #24]
 8006d7e:	f043 0308 	orr.w	r3, r3, #8
 8006d82:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d84:	6822      	ldr	r2, [r4, #0]
 8006d86:	6993      	ldr	r3, [r2, #24]
 8006d88:	f043 0310 	orr.w	r3, r3, #16
 8006d8c:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	6993      	ldr	r3, [r2, #24]
 8006d92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d96:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006d98:	6822      	ldr	r2, [r4, #0]
 8006d9a:	6913      	ldr	r3, [r2, #16]
 8006d9c:	f023 0308 	bic.w	r3, r3, #8
 8006da0:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006daa:	d104      	bne.n	8006db6 <HAL_SPI_IRQHandler+0x7e>
      while (hspi->RxXferCount != 0UL)
 8006dac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d13a      	bne.n	8006e2c <HAL_SPI_IRQHandler+0xf4>
    SPI_CloseTransfer(hspi);
 8006db6:	4620      	mov	r0, r4
 8006db8:	f7ff fea0 	bl	8006afc <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dc2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d144      	bne.n	8006e54 <HAL_SPI_IRQHandler+0x11c>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006dca:	2f05      	cmp	r7, #5
 8006dcc:	d046      	beq.n	8006e5c <HAL_SPI_IRQHandler+0x124>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006dce:	2f04      	cmp	r7, #4
 8006dd0:	d048      	beq.n	8006e64 <HAL_SPI_IRQHandler+0x12c>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006dd2:	2f03      	cmp	r7, #3
 8006dd4:	d111      	bne.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
      HAL_SPI_TxCpltCallback(hspi);
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f7ff ffaa 	bl	8006d30 <HAL_SPI_TxCpltCallback>
 8006ddc:	e00d      	b.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
    hspi->TxISR(hspi);
 8006dde:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006de0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006de2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006de4:	4620      	mov	r0, r4
 8006de6:	4798      	blx	r3
    handled = 1UL;
 8006de8:	2201      	movs	r2, #1
 8006dea:	e7b9      	b.n	8006d60 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 8006dec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006dee:	4620      	mov	r0, r4
 8006df0:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006df2:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8006df6:	2d02      	cmp	r5, #2
 8006df8:	d001      	beq.n	8006dfe <HAL_SPI_IRQHandler+0xc6>
}
 8006dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hspi->TxISR(hspi);
 8006dfe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006e00:	4620      	mov	r0, r4
 8006e02:	4798      	blx	r3
  if (handled != 0UL)
 8006e04:	e7f9      	b.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e06:	2b07      	cmp	r3, #7
 8006e08:	d91b      	bls.n	8006e42 <HAL_SPI_IRQHandler+0x10a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e0c:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8006e0e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e12:	3302      	adds	r3, #2
 8006e14:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8006e16:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8006e22:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0c4      	beq.n	8006db6 <HAL_SPI_IRQHandler+0x7e>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006e2c:	68e3      	ldr	r3, [r4, #12]
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	d9e9      	bls.n	8006e06 <HAL_SPI_IRQHandler+0xce>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e38:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	6663      	str	r3, [r4, #100]	; 0x64
 8006e40:	e7e9      	b.n	8006e16 <HAL_SPI_IRQHandler+0xde>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e46:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006e4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e4e:	3301      	adds	r3, #1
 8006e50:	6663      	str	r3, [r4, #100]	; 0x64
 8006e52:	e7e0      	b.n	8006e16 <HAL_SPI_IRQHandler+0xde>
      HAL_SPI_ErrorCallback(hspi);
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7ff ff6e 	bl	8006d36 <HAL_SPI_ErrorCallback>
      return;
 8006e5a:	e7ce      	b.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
      HAL_SPI_TxRxCpltCallback(hspi);
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f7ff ff69 	bl	8006d34 <HAL_SPI_TxRxCpltCallback>
 8006e62:	e7ca      	b.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
      HAL_SPI_RxCpltCallback(hspi);
 8006e64:	4620      	mov	r0, r4
 8006e66:	f7ff ff64 	bl	8006d32 <HAL_SPI_RxCpltCallback>
 8006e6a:	e7c6      	b.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006e6c:	f418 6f00 	tst.w	r8, #2048	; 0x800
 8006e70:	d002      	beq.n	8006e78 <HAL_SPI_IRQHandler+0x140>
 8006e72:	f019 0f08 	tst.w	r9, #8
 8006e76:	d173      	bne.n	8006f60 <HAL_SPI_IRQHandler+0x228>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006e78:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006e7c:	d0bd      	beq.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006e7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e82:	d00a      	beq.n	8006e9a <HAL_SPI_IRQHandler+0x162>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006e88:	f043 0304 	orr.w	r3, r3, #4
 8006e8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	6993      	ldr	r3, [r2, #24]
 8006e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e98:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006e9a:	f415 7f00 	tst.w	r5, #512	; 0x200
 8006e9e:	d00a      	beq.n	8006eb6 <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ea0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006eac:	6822      	ldr	r2, [r4, #0]
 8006eae:	6993      	ldr	r3, [r2, #24]
 8006eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eb4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006eb6:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006eba:	d00a      	beq.n	8006ed2 <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ebc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006ec0:	f043 0308 	orr.w	r3, r3, #8
 8006ec4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	6993      	ldr	r3, [r2, #24]
 8006ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ed0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006ed2:	f015 0f20 	tst.w	r5, #32
 8006ed6:	d00a      	beq.n	8006eee <HAL_SPI_IRQHandler+0x1b6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ed8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006ee4:	6822      	ldr	r2, [r4, #0]
 8006ee6:	6993      	ldr	r3, [r2, #24]
 8006ee8:	f043 0320 	orr.w	r3, r3, #32
 8006eec:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d081      	beq.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
      __HAL_SPI_DISABLE(hspi);
 8006ef6:	6822      	ldr	r2, [r4, #0]
 8006ef8:	6813      	ldr	r3, [r2, #0]
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006f00:	6822      	ldr	r2, [r4, #0]
 8006f02:	6911      	ldr	r1, [r2, #16]
 8006f04:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <HAL_SPI_IRQHandler+0x244>)
 8006f06:	400b      	ands	r3, r1
 8006f08:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006f0a:	f40a 4a40 	and.w	sl, sl, #49152	; 0xc000
 8006f0e:	f5ba 4f40 	cmp.w	sl, #49152	; 0xc000
 8006f12:	d12b      	bne.n	8006f6c <HAL_SPI_IRQHandler+0x234>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	6893      	ldr	r3, [r2, #8]
 8006f18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006f1c:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8006f1e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006f20:	b15b      	cbz	r3, 8006f3a <HAL_SPI_IRQHandler+0x202>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f22:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <HAL_SPI_IRQHandler+0x248>)
 8006f24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f26:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006f28:	f7fb fc6e 	bl	8002808 <HAL_DMA_Abort_IT>
 8006f2c:	b128      	cbz	r0, 8006f3a <HAL_SPI_IRQHandler+0x202>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006f3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f43f af5c 	beq.w	8006dfa <HAL_SPI_IRQHandler+0xc2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f42:	4a0f      	ldr	r2, [pc, #60]	; (8006f80 <HAL_SPI_IRQHandler+0x248>)
 8006f44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f46:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006f48:	f7fb fc5e 	bl	8002808 <HAL_DMA_Abort_IT>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	f43f af54 	beq.w	8006dfa <HAL_SPI_IRQHandler+0xc2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f52:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006f5e:	e74c      	b.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006f60:	6822      	ldr	r2, [r4, #0]
 8006f62:	6993      	ldr	r3, [r2, #24]
 8006f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f68:	6193      	str	r3, [r2, #24]
    return;
 8006f6a:	e746      	b.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
        hspi->State = HAL_SPI_STATE_READY;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006f72:	4620      	mov	r0, r4
 8006f74:	f7ff fedf 	bl	8006d36 <HAL_SPI_ErrorCallback>
 8006f78:	e73f      	b.n	8006dfa <HAL_SPI_IRQHandler+0xc2>
 8006f7a:	bf00      	nop
 8006f7c:	fffffc94 	.word	0xfffffc94
 8006f80:	08006f85 	.word	0x08006f85

08006f84 <SPI_DMAAbortOnError>:
{
 8006f84:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f86:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006f8e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006f98:	f7ff fecd 	bl	8006d36 <HAL_SPI_ErrorCallback>
}
 8006f9c:	bd08      	pop	{r3, pc}

08006f9e <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006f9e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	e852 3f00 	ldrex	r3, [r2]
 8006fa4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	e842 3100 	strex	r1, r3, [r2]
 8006fac:	2900      	cmp	r1, #0
 8006fae:	d1f6      	bne.n	8006f9e <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006fb0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	f102 0308 	add.w	r3, r2, #8
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	3208      	adds	r2, #8
 8006fc0:	e842 3100 	strex	r1, r3, [r2]
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	d1f3      	bne.n	8006fb0 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fc8:	2320      	movs	r3, #32
 8006fca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8006fce:	4770      	bx	lr

08006fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fd0:	b410      	push	{r4}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	e852 3f00 	ldrex	r3, [r2]
 8006fd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	e842 3100 	strex	r1, r3, [r2]
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	d1f6      	bne.n	8006fd2 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fe4:	4c10      	ldr	r4, [pc, #64]	; (8007028 <UART_EndRxTransfer+0x58>)
 8006fe6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	f102 0308 	add.w	r3, r2, #8
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	3208      	adds	r2, #8
 8006ff4:	e842 3100 	strex	r1, r3, [r2]
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	d1f4      	bne.n	8006fe6 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d008      	beq.n	8007014 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007002:	2320      	movs	r3, #32
 8007004:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007008:	2300      	movs	r3, #0
 800700a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800700c:	6703      	str	r3, [r0, #112]	; 0x70
}
 800700e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007012:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007014:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	e852 3f00 	ldrex	r3, [r2]
 800701a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	e842 3100 	strex	r1, r3, [r2]
 8007022:	2900      	cmp	r1, #0
 8007024:	d1f6      	bne.n	8007014 <UART_EndRxTransfer+0x44>
 8007026:	e7ec      	b.n	8007002 <UART_EndRxTransfer+0x32>
 8007028:	effffffe 	.word	0xeffffffe

0800702c <HAL_UART_TxCpltCallback>:
}
 800702c:	4770      	bx	lr

0800702e <HAL_UART_RxHalfCpltCallback>:
}
 800702e:	4770      	bx	lr

08007030 <HAL_UART_ErrorCallback>:
}
 8007030:	4770      	bx	lr

08007032 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007032:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007034:	6b84      	ldr	r4, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007036:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800703a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007046:	d001      	beq.n	800704c <UART_DMAError+0x1a>
 8007048:	2a21      	cmp	r2, #33	; 0x21
 800704a:	d010      	beq.n	800706e <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007054:	d001      	beq.n	800705a <UART_DMAError+0x28>
 8007056:	2d22      	cmp	r5, #34	; 0x22
 8007058:	d010      	beq.n	800707c <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800705a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800705e:	f043 0310 	orr.w	r3, r3, #16
 8007062:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007066:	4620      	mov	r0, r4
 8007068:	f7ff ffe2 	bl	8007030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007074:	4620      	mov	r0, r4
 8007076:	f7ff ff92 	bl	8006f9e <UART_EndTxTransfer>
 800707a:	e7e7      	b.n	800704c <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff ffa4 	bl	8006fd0 <UART_EndRxTransfer>
 8007088:	e7e7      	b.n	800705a <UART_DMAError+0x28>

0800708a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800708a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800708c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007094:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007098:	f7ff ffca 	bl	8007030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800709c:	bd08      	pop	{r3, pc}

0800709e <HAL_UARTEx_RxEventCallback>:
}
 800709e:	4770      	bx	lr

080070a0 <HAL_UART_IRQHandler>:
{
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070a4:	6802      	ldr	r2, [r0, #0]
 80070a6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070a8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070aa:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 80070ac:	f640 0c0f 	movw	ip, #2063	; 0x80f
 80070b0:	ea13 0f0c 	tst.w	r3, ip
 80070b4:	d10e      	bne.n	80070d4 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070b6:	f013 0f20 	tst.w	r3, #32
 80070ba:	d014      	beq.n	80070e6 <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070bc:	f000 0520 	and.w	r5, r0, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070c0:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 80070c4:	ea55 050c 	orrs.w	r5, r5, ip
 80070c8:	d00d      	beq.n	80070e6 <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 80070ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80070cc:	b3a3      	cbz	r3, 8007138 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 80070ce:	4620      	mov	r0, r4
 80070d0:	4798      	blx	r3
 80070d2:	e031      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070d4:	4d66      	ldr	r5, [pc, #408]	; (8007270 <HAL_UART_IRQHandler+0x1d0>)
 80070d6:	400d      	ands	r5, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80070d8:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8007278 <HAL_UART_IRQHandler+0x1d8>
 80070dc:	ea00 0c0c 	and.w	ip, r0, ip
 80070e0:	ea5c 0605 	orrs.w	r6, ip, r5
 80070e4:	d129      	bne.n	800713a <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80070e8:	2d01      	cmp	r5, #1
 80070ea:	f000 80c7 	beq.w	800727c <HAL_UART_IRQHandler+0x1dc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070ee:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80070f2:	d003      	beq.n	80070fc <HAL_UART_IRQHandler+0x5c>
 80070f4:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80070f8:	f040 81a6 	bne.w	8007448 <HAL_UART_IRQHandler+0x3a8>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007100:	d006      	beq.n	8007110 <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007102:	f000 0280 	and.w	r2, r0, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007106:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800710a:	430a      	orrs	r2, r1
 800710c:	f040 81a3 	bne.w	8007456 <HAL_UART_IRQHandler+0x3b6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007110:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007114:	d003      	beq.n	800711e <HAL_UART_IRQHandler+0x7e>
 8007116:	f010 0f40 	tst.w	r0, #64	; 0x40
 800711a:	f040 81a3 	bne.w	8007464 <HAL_UART_IRQHandler+0x3c4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800711e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007122:	d003      	beq.n	800712c <HAL_UART_IRQHandler+0x8c>
 8007124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007128:	f040 81ae 	bne.w	8007488 <HAL_UART_IRQHandler+0x3e8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800712c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007130:	d002      	beq.n	8007138 <HAL_UART_IRQHandler+0x98>
 8007132:	2800      	cmp	r0, #0
 8007134:	f2c0 81ac 	blt.w	8007490 <HAL_UART_IRQHandler+0x3f0>
}
 8007138:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800713a:	f013 0f01 	tst.w	r3, #1
 800713e:	d009      	beq.n	8007154 <HAL_UART_IRQHandler+0xb4>
 8007140:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007144:	d006      	beq.n	8007154 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007146:	2601      	movs	r6, #1
 8007148:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800714a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800714e:	4332      	orrs	r2, r6
 8007150:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007154:	f013 0f02 	tst.w	r3, #2
 8007158:	d074      	beq.n	8007244 <HAL_UART_IRQHandler+0x1a4>
 800715a:	f011 0f01 	tst.w	r1, #1
 800715e:	d014      	beq.n	800718a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007160:	6822      	ldr	r2, [r4, #0]
 8007162:	2602      	movs	r6, #2
 8007164:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007166:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800716a:	f042 0204 	orr.w	r2, r2, #4
 800716e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007172:	f013 0f04 	tst.w	r3, #4
 8007176:	d008      	beq.n	800718a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	2604      	movs	r6, #4
 800717c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800717e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007182:	f042 0202 	orr.w	r2, r2, #2
 8007186:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800718a:	f013 0f08 	tst.w	r3, #8
 800718e:	d00b      	beq.n	80071a8 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007190:	f000 0220 	and.w	r2, r0, #32
 8007194:	432a      	orrs	r2, r5
 8007196:	d007      	beq.n	80071a8 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007198:	6822      	ldr	r2, [r4, #0]
 800719a:	2508      	movs	r5, #8
 800719c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800719e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80071a2:	432a      	orrs	r2, r5
 80071a4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071a8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80071ac:	d00c      	beq.n	80071c8 <HAL_UART_IRQHandler+0x128>
 80071ae:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80071b2:	d009      	beq.n	80071c8 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80071ba:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071bc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80071c0:	f042 0220 	orr.w	r2, r2, #32
 80071c4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	d0b3      	beq.n	8007138 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071d0:	f013 0f20 	tst.w	r3, #32
 80071d4:	d00a      	beq.n	80071ec <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071d6:	f000 0020 	and.w	r0, r0, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071da:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80071de:	ea50 0301 	orrs.w	r3, r0, r1
 80071e2:	d003      	beq.n	80071ec <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80071e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80071e6:	b10b      	cbz	r3, 80071ec <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80071e8:	4620      	mov	r0, r4
 80071ea:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80071ec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071f0:	6822      	ldr	r2, [r4, #0]
 80071f2:	6892      	ldr	r2, [r2, #8]
 80071f4:	f002 0240 	and.w	r2, r2, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071fc:	4313      	orrs	r3, r2
 80071fe:	d030      	beq.n	8007262 <HAL_UART_IRQHandler+0x1c2>
        UART_EndRxTransfer(huart);
 8007200:	4620      	mov	r0, r4
 8007202:	f7ff fee5 	bl	8006fd0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800720e:	d024      	beq.n	800725a <HAL_UART_IRQHandler+0x1ba>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007210:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	f102 0308 	add.w	r3, r2, #8
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	3208      	adds	r2, #8
 8007220:	e842 3100 	strex	r1, r3, [r2]
 8007224:	2900      	cmp	r1, #0
 8007226:	d1f3      	bne.n	8007210 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8007228:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800722a:	b193      	cbz	r3, 8007252 <HAL_UART_IRQHandler+0x1b2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800722c:	4a11      	ldr	r2, [pc, #68]	; (8007274 <HAL_UART_IRQHandler+0x1d4>)
 800722e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007230:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007232:	f7fb fae9 	bl	8002808 <HAL_DMA_Abort_IT>
 8007236:	2800      	cmp	r0, #0
 8007238:	f43f af7e 	beq.w	8007138 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800723c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800723e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007240:	4798      	blx	r3
 8007242:	e779      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007244:	f013 0f04 	tst.w	r3, #4
 8007248:	d09f      	beq.n	800718a <HAL_UART_IRQHandler+0xea>
 800724a:	f011 0f01 	tst.w	r1, #1
 800724e:	d09c      	beq.n	800718a <HAL_UART_IRQHandler+0xea>
 8007250:	e792      	b.n	8007178 <HAL_UART_IRQHandler+0xd8>
            HAL_UART_ErrorCallback(huart);
 8007252:	4620      	mov	r0, r4
 8007254:	f7ff feec 	bl	8007030 <HAL_UART_ErrorCallback>
 8007258:	e76e      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 800725a:	4620      	mov	r0, r4
 800725c:	f7ff fee8 	bl	8007030 <HAL_UART_ErrorCallback>
 8007260:	e76a      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff fee4 	bl	8007030 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007268:	2300      	movs	r3, #0
 800726a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800726e:	e763      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
 8007270:	10000001 	.word	0x10000001
 8007274:	0800708b 	.word	0x0800708b
 8007278:	04000120 	.word	0x04000120
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800727c:	f013 0f10 	tst.w	r3, #16
 8007280:	f43f af35 	beq.w	80070ee <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007284:	f010 0f10 	tst.w	r0, #16
 8007288:	f43f af31 	beq.w	80070ee <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800728c:	2310      	movs	r3, #16
 800728e:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007298:	f000 809f 	beq.w	80073da <HAL_UART_IRQHandler+0x33a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800729c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800729e:	680a      	ldr	r2, [r1, #0]
 80072a0:	4b7d      	ldr	r3, [pc, #500]	; (8007498 <HAL_UART_IRQHandler+0x3f8>)
 80072a2:	487e      	ldr	r0, [pc, #504]	; (800749c <HAL_UART_IRQHandler+0x3fc>)
 80072a4:	4282      	cmp	r2, r0
 80072a6:	bf18      	it	ne
 80072a8:	429a      	cmpne	r2, r3
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	3018      	adds	r0, #24
 80072b2:	4282      	cmp	r2, r0
 80072b4:	bf08      	it	eq
 80072b6:	f043 0301 	orreq.w	r3, r3, #1
 80072ba:	3018      	adds	r0, #24
 80072bc:	4282      	cmp	r2, r0
 80072be:	bf08      	it	eq
 80072c0:	f043 0301 	orreq.w	r3, r3, #1
 80072c4:	3018      	adds	r0, #24
 80072c6:	4282      	cmp	r2, r0
 80072c8:	bf08      	it	eq
 80072ca:	f043 0301 	orreq.w	r3, r3, #1
 80072ce:	3018      	adds	r0, #24
 80072d0:	4282      	cmp	r2, r0
 80072d2:	bf08      	it	eq
 80072d4:	f043 0301 	orreq.w	r3, r3, #1
 80072d8:	3018      	adds	r0, #24
 80072da:	4282      	cmp	r2, r0
 80072dc:	bf08      	it	eq
 80072de:	f043 0301 	orreq.w	r3, r3, #1
 80072e2:	3018      	adds	r0, #24
 80072e4:	4282      	cmp	r2, r0
 80072e6:	bf08      	it	eq
 80072e8:	f043 0301 	orreq.w	r3, r3, #1
 80072ec:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80072f0:	4282      	cmp	r2, r0
 80072f2:	bf08      	it	eq
 80072f4:	f043 0301 	orreq.w	r3, r3, #1
 80072f8:	3018      	adds	r0, #24
 80072fa:	4282      	cmp	r2, r0
 80072fc:	bf08      	it	eq
 80072fe:	f043 0301 	orreq.w	r3, r3, #1
 8007302:	3018      	adds	r0, #24
 8007304:	4282      	cmp	r2, r0
 8007306:	bf08      	it	eq
 8007308:	f043 0301 	orreq.w	r3, r3, #1
 800730c:	3018      	adds	r0, #24
 800730e:	4282      	cmp	r2, r0
 8007310:	bf08      	it	eq
 8007312:	f043 0301 	orreq.w	r3, r3, #1
 8007316:	3018      	adds	r0, #24
 8007318:	4282      	cmp	r2, r0
 800731a:	bf08      	it	eq
 800731c:	f043 0301 	orreq.w	r3, r3, #1
 8007320:	3018      	adds	r0, #24
 8007322:	4282      	cmp	r2, r0
 8007324:	bf08      	it	eq
 8007326:	f043 0301 	orreq.w	r3, r3, #1
 800732a:	3018      	adds	r0, #24
 800732c:	4282      	cmp	r2, r0
 800732e:	bf08      	it	eq
 8007330:	f043 0301 	orreq.w	r3, r3, #1
 8007334:	b913      	cbnz	r3, 800733c <HAL_UART_IRQHandler+0x29c>
 8007336:	4b5a      	ldr	r3, [pc, #360]	; (80074a0 <HAL_UART_IRQHandler+0x400>)
 8007338:	429a      	cmp	r2, r3
 800733a:	d14b      	bne.n	80073d4 <HAL_UART_IRQHandler+0x334>
 800733c:	6853      	ldr	r3, [r2, #4]
 800733e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8007340:	2b00      	cmp	r3, #0
 8007342:	f43f aef9 	beq.w	8007138 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007346:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800734a:	429a      	cmp	r2, r3
 800734c:	f67f aef4 	bls.w	8007138 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 8007350:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007354:	69cb      	ldr	r3, [r1, #28]
 8007356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800735a:	d031      	beq.n	80073c0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800735c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	e852 3f00 	ldrex	r3, [r2]
 8007362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	e842 3100 	strex	r1, r3, [r2]
 800736a:	2900      	cmp	r1, #0
 800736c:	d1f6      	bne.n	800735c <HAL_UART_IRQHandler+0x2bc>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	f102 0308 	add.w	r3, r2, #8
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	3208      	adds	r2, #8
 800737e:	e842 3100 	strex	r1, r3, [r2]
 8007382:	2900      	cmp	r1, #0
 8007384:	d1f3      	bne.n	800736e <HAL_UART_IRQHandler+0x2ce>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007386:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	f102 0308 	add.w	r3, r2, #8
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	3208      	adds	r2, #8
 8007396:	e842 3100 	strex	r1, r3, [r2]
 800739a:	2900      	cmp	r1, #0
 800739c:	d1f3      	bne.n	8007386 <HAL_UART_IRQHandler+0x2e6>
          huart->RxState = HAL_UART_STATE_READY;
 800739e:	2320      	movs	r3, #32
 80073a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a4:	2300      	movs	r3, #0
 80073a6:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	e852 3f00 	ldrex	r3, [r2]
 80073ae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	e842 3100 	strex	r1, r3, [r2]
 80073b6:	2900      	cmp	r1, #0
 80073b8:	d1f6      	bne.n	80073a8 <HAL_UART_IRQHandler+0x308>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073ba:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80073bc:	f7fa ffc8 	bl	8002350 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073c0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80073c4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80073c8:	1ac9      	subs	r1, r1, r3
 80073ca:	b289      	uxth	r1, r1
 80073cc:	4620      	mov	r0, r4
 80073ce:	f7ff fe66 	bl	800709e <HAL_UARTEx_RxEventCallback>
 80073d2:	e6b1      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073d4:	6853      	ldr	r3, [r2, #4]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	e7b2      	b.n	8007340 <HAL_UART_IRQHandler+0x2a0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80073de:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80073e2:	1ac9      	subs	r1, r1, r3
 80073e4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80073e6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80073ea:	b29b      	uxth	r3, r3
          && (nb_rx_data > 0U))
 80073ec:	2900      	cmp	r1, #0
 80073ee:	f43f aea3 	beq.w	8007138 <HAL_UART_IRQHandler+0x98>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f43f aea0 	beq.w	8007138 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	e852 3f00 	ldrex	r3, [r2]
 80073fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	e842 3000 	strex	r0, r3, [r2]
 8007406:	2800      	cmp	r0, #0
 8007408:	d1f6      	bne.n	80073f8 <HAL_UART_IRQHandler+0x358>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800740a:	4d26      	ldr	r5, [pc, #152]	; (80074a4 <HAL_UART_IRQHandler+0x404>)
 800740c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	f102 0308 	add.w	r3, r2, #8
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	402b      	ands	r3, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	3208      	adds	r2, #8
 800741a:	e842 3000 	strex	r0, r3, [r2]
 800741e:	2800      	cmp	r0, #0
 8007420:	d1f4      	bne.n	800740c <HAL_UART_IRQHandler+0x36c>
        huart->RxState = HAL_UART_STATE_READY;
 8007422:	2320      	movs	r3, #32
 8007424:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007428:	2300      	movs	r3, #0
 800742a:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800742c:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	e852 3f00 	ldrex	r3, [r2]
 8007434:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	e842 3000 	strex	r0, r3, [r2]
 800743c:	2800      	cmp	r0, #0
 800743e:	d1f6      	bne.n	800742e <HAL_UART_IRQHandler+0x38e>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007440:	4620      	mov	r0, r4
 8007442:	f7ff fe2c 	bl	800709e <HAL_UARTEx_RxEventCallback>
 8007446:	e677      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007448:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800744c:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800744e:	4620      	mov	r0, r4
 8007450:	f000 fd86 	bl	8007f60 <HAL_UARTEx_WakeupCallback>
    return;
 8007454:	e670      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 8007456:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007458:	2b00      	cmp	r3, #0
 800745a:	f43f ae6d 	beq.w	8007138 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 800745e:	4620      	mov	r0, r4
 8007460:	4798      	blx	r3
 8007462:	e669      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007464:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	e852 3f00 	ldrex	r3, [r2]
 800746a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	e842 3100 	strex	r1, r3, [r2]
 8007472:	2900      	cmp	r1, #0
 8007474:	d1f6      	bne.n	8007464 <HAL_UART_IRQHandler+0x3c4>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007476:	2320      	movs	r3, #32
 8007478:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800747c:	2300      	movs	r3, #0
 800747e:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007480:	4620      	mov	r0, r4
 8007482:	f7ff fdd3 	bl	800702c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007486:	e657      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fd6b 	bl	8007f64 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800748e:	e653      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007490:	4620      	mov	r0, r4
 8007492:	f000 fd66 	bl	8007f62 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8007496:	e64f      	b.n	8007138 <HAL_UART_IRQHandler+0x98>
 8007498:	40020010 	.word	0x40020010
 800749c:	40020028 	.word	0x40020028
 80074a0:	400204b8 	.word	0x400204b8
 80074a4:	effffffe 	.word	0xeffffffe

080074a8 <UART_DMARxHalfCplt>:
{
 80074a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d002      	beq.n	80074b8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80074b2:	f7ff fdbc 	bl	800702e <HAL_UART_RxHalfCpltCallback>
}
 80074b6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80074b8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80074bc:	0849      	lsrs	r1, r1, #1
 80074be:	f7ff fdee 	bl	800709e <HAL_UARTEx_RxEventCallback>
 80074c2:	e7f8      	b.n	80074b6 <UART_DMARxHalfCplt+0xe>

080074c4 <UART_DMAReceiveCplt>:
{
 80074c4:	b508      	push	{r3, lr}
 80074c6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d0:	d029      	beq.n	8007526 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074d8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	e852 3f00 	ldrex	r3, [r2]
 80074de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	e842 3100 	strex	r1, r3, [r2]
 80074e6:	2900      	cmp	r1, #0
 80074e8:	d1f6      	bne.n	80074d8 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	f102 0308 	add.w	r3, r2, #8
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	3208      	adds	r2, #8
 80074fa:	e842 3100 	strex	r1, r3, [r2]
 80074fe:	2900      	cmp	r1, #0
 8007500:	d1f3      	bne.n	80074ea <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007502:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	f102 0308 	add.w	r3, r2, #8
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	3208      	adds	r2, #8
 8007512:	e842 3100 	strex	r1, r3, [r2]
 8007516:	2900      	cmp	r1, #0
 8007518:	d1f3      	bne.n	8007502 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800751a:	2320      	movs	r3, #32
 800751c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007520:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007522:	2b01      	cmp	r3, #1
 8007524:	d005      	beq.n	8007532 <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007526:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d00c      	beq.n	8007546 <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800752c:	f7f9 fed6 	bl	80012dc <HAL_UART_RxCpltCallback>
}
 8007530:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007532:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	e852 3f00 	ldrex	r3, [r2]
 8007538:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	e842 3100 	strex	r1, r3, [r2]
 8007540:	2900      	cmp	r1, #0
 8007542:	d1f6      	bne.n	8007532 <UART_DMAReceiveCplt+0x6e>
 8007544:	e7ef      	b.n	8007526 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007546:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800754a:	f7ff fda8 	bl	800709e <HAL_UARTEx_RxEventCallback>
 800754e:	e7ef      	b.n	8007530 <UART_DMAReceiveCplt+0x6c>

08007550 <UART_SetConfig>:
{
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007556:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007558:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	6922      	ldr	r2, [r4, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	6962      	ldr	r2, [r4, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	69e2      	ldr	r2, [r4, #28]
 8007566:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007568:	4a84      	ldr	r2, [pc, #528]	; (800777c <UART_SetConfig+0x22c>)
 800756a:	4002      	ands	r2, r0
 800756c:	4313      	orrs	r3, r2
 800756e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	6853      	ldr	r3, [r2, #4]
 8007574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007578:	68e1      	ldr	r1, [r4, #12]
 800757a:	430b      	orrs	r3, r1
 800757c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800757e:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	4b7f      	ldr	r3, [pc, #508]	; (8007780 <UART_SetConfig+0x230>)
 8007584:	429a      	cmp	r2, r3
 8007586:	d001      	beq.n	800758c <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8007588:	6a23      	ldr	r3, [r4, #32]
 800758a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800758c:	6890      	ldr	r0, [r2, #8]
 800758e:	4b7d      	ldr	r3, [pc, #500]	; (8007784 <UART_SetConfig+0x234>)
 8007590:	4003      	ands	r3, r0
 8007592:	430b      	orrs	r3, r1
 8007594:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007596:	6822      	ldr	r2, [r4, #0]
 8007598:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800759a:	f023 030f 	bic.w	r3, r3, #15
 800759e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80075a0:	430b      	orrs	r3, r1
 80075a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	4b78      	ldr	r3, [pc, #480]	; (8007788 <UART_SetConfig+0x238>)
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d021      	beq.n	80075f0 <UART_SetConfig+0xa0>
 80075ac:	4b77      	ldr	r3, [pc, #476]	; (800778c <UART_SetConfig+0x23c>)
 80075ae:	429a      	cmp	r2, r3
 80075b0:	f000 8084 	beq.w	80076bc <UART_SetConfig+0x16c>
 80075b4:	4b76      	ldr	r3, [pc, #472]	; (8007790 <UART_SetConfig+0x240>)
 80075b6:	429a      	cmp	r2, r3
 80075b8:	f000 8098 	beq.w	80076ec <UART_SetConfig+0x19c>
 80075bc:	4b75      	ldr	r3, [pc, #468]	; (8007794 <UART_SetConfig+0x244>)
 80075be:	429a      	cmp	r2, r3
 80075c0:	f000 80ac 	beq.w	800771c <UART_SetConfig+0x1cc>
 80075c4:	4b74      	ldr	r3, [pc, #464]	; (8007798 <UART_SetConfig+0x248>)
 80075c6:	429a      	cmp	r2, r3
 80075c8:	f000 80c0 	beq.w	800774c <UART_SetConfig+0x1fc>
 80075cc:	4b73      	ldr	r3, [pc, #460]	; (800779c <UART_SetConfig+0x24c>)
 80075ce:	429a      	cmp	r2, r3
 80075d0:	f000 80ec 	beq.w	80077ac <UART_SetConfig+0x25c>
 80075d4:	4b72      	ldr	r3, [pc, #456]	; (80077a0 <UART_SetConfig+0x250>)
 80075d6:	429a      	cmp	r2, r3
 80075d8:	f000 8123 	beq.w	8007822 <UART_SetConfig+0x2d2>
 80075dc:	4b71      	ldr	r3, [pc, #452]	; (80077a4 <UART_SetConfig+0x254>)
 80075de:	429a      	cmp	r2, r3
 80075e0:	f000 8137 	beq.w	8007852 <UART_SetConfig+0x302>
 80075e4:	4b66      	ldr	r3, [pc, #408]	; (8007780 <UART_SetConfig+0x230>)
 80075e6:	429a      	cmp	r2, r3
 80075e8:	f000 814b 	beq.w	8007882 <UART_SetConfig+0x332>
 80075ec:	2380      	movs	r3, #128	; 0x80
 80075ee:	e033      	b.n	8007658 <UART_SetConfig+0x108>
 80075f0:	4b6d      	ldr	r3, [pc, #436]	; (80077a8 <UART_SetConfig+0x258>)
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075f8:	2b28      	cmp	r3, #40	; 0x28
 80075fa:	d85d      	bhi.n	80076b8 <UART_SetConfig+0x168>
 80075fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007600:	005c0151 	.word	0x005c0151
 8007604:	005c005c 	.word	0x005c005c
 8007608:	005c005c 	.word	0x005c005c
 800760c:	005c005c 	.word	0x005c005c
 8007610:	005c029f 	.word	0x005c029f
 8007614:	005c005c 	.word	0x005c005c
 8007618:	005c005c 	.word	0x005c005c
 800761c:	005c005c 	.word	0x005c005c
 8007620:	005c0029 	.word	0x005c0029
 8007624:	005c005c 	.word	0x005c005c
 8007628:	005c005c 	.word	0x005c005c
 800762c:	005c005c 	.word	0x005c005c
 8007630:	005c02a1 	.word	0x005c02a1
 8007634:	005c005c 	.word	0x005c005c
 8007638:	005c005c 	.word	0x005c005c
 800763c:	005c005c 	.word	0x005c005c
 8007640:	005c002b 	.word	0x005c002b
 8007644:	005c005c 	.word	0x005c005c
 8007648:	005c005c 	.word	0x005c005c
 800764c:	005c005c 	.word	0x005c005c
 8007650:	005a      	.short	0x005a
 8007652:	2308      	movs	r3, #8
 8007654:	e000      	b.n	8007658 <UART_SetConfig+0x108>
 8007656:	2320      	movs	r3, #32
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007658:	69e0      	ldr	r0, [r4, #28]
 800765a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800765e:	f000 81b7 	beq.w	80079d0 <UART_SetConfig+0x480>
    switch (clocksource)
 8007662:	2b20      	cmp	r3, #32
 8007664:	f200 820f 	bhi.w	8007a86 <UART_SetConfig+0x536>
 8007668:	2b20      	cmp	r3, #32
 800766a:	f200 825b 	bhi.w	8007b24 <UART_SetConfig+0x5d4>
 800766e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007672:	0226      	.short	0x0226
 8007674:	0259022c 	.word	0x0259022c
 8007678:	022f0259 	.word	0x022f0259
 800767c:	02590259 	.word	0x02590259
 8007680:	02340259 	.word	0x02340259
 8007684:	02590259 	.word	0x02590259
 8007688:	02590259 	.word	0x02590259
 800768c:	02590259 	.word	0x02590259
 8007690:	02390259 	.word	0x02390259
 8007694:	02590259 	.word	0x02590259
 8007698:	02590259 	.word	0x02590259
 800769c:	02590259 	.word	0x02590259
 80076a0:	02590259 	.word	0x02590259
 80076a4:	02590259 	.word	0x02590259
 80076a8:	02590259 	.word	0x02590259
 80076ac:	02590259 	.word	0x02590259
 80076b0:	02450259 	.word	0x02450259
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076b4:	2340      	movs	r3, #64	; 0x40
 80076b6:	e7cf      	b.n	8007658 <UART_SetConfig+0x108>
 80076b8:	2380      	movs	r3, #128	; 0x80
 80076ba:	e7cd      	b.n	8007658 <UART_SetConfig+0x108>
 80076bc:	4b3a      	ldr	r3, [pc, #232]	; (80077a8 <UART_SetConfig+0x258>)
 80076be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	2b05      	cmp	r3, #5
 80076c6:	d80f      	bhi.n	80076e8 <UART_SetConfig+0x198>
 80076c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80076cc:	023d00ed 	.word	0x023d00ed
 80076d0:	00080006 	.word	0x00080006
 80076d4:	000c000a 	.word	0x000c000a
 80076d8:	2308      	movs	r3, #8
 80076da:	e7bd      	b.n	8007658 <UART_SetConfig+0x108>
 80076dc:	2310      	movs	r3, #16
 80076de:	e7bb      	b.n	8007658 <UART_SetConfig+0x108>
 80076e0:	2320      	movs	r3, #32
 80076e2:	e7b9      	b.n	8007658 <UART_SetConfig+0x108>
 80076e4:	2340      	movs	r3, #64	; 0x40
 80076e6:	e7b7      	b.n	8007658 <UART_SetConfig+0x108>
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	e7b5      	b.n	8007658 <UART_SetConfig+0x108>
 80076ec:	4b2e      	ldr	r3, [pc, #184]	; (80077a8 <UART_SetConfig+0x258>)
 80076ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	2b05      	cmp	r3, #5
 80076f6:	d80f      	bhi.n	8007718 <UART_SetConfig+0x1c8>
 80076f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80076fc:	02270104 	.word	0x02270104
 8007700:	00080006 	.word	0x00080006
 8007704:	000c000a 	.word	0x000c000a
 8007708:	2308      	movs	r3, #8
 800770a:	e7a5      	b.n	8007658 <UART_SetConfig+0x108>
 800770c:	2310      	movs	r3, #16
 800770e:	e7a3      	b.n	8007658 <UART_SetConfig+0x108>
 8007710:	2320      	movs	r3, #32
 8007712:	e7a1      	b.n	8007658 <UART_SetConfig+0x108>
 8007714:	2340      	movs	r3, #64	; 0x40
 8007716:	e79f      	b.n	8007658 <UART_SetConfig+0x108>
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	e79d      	b.n	8007658 <UART_SetConfig+0x108>
 800771c:	4b22      	ldr	r3, [pc, #136]	; (80077a8 <UART_SetConfig+0x258>)
 800771e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	2b05      	cmp	r3, #5
 8007726:	d80f      	bhi.n	8007748 <UART_SetConfig+0x1f8>
 8007728:	e8df f013 	tbh	[pc, r3, lsl #1]
 800772c:	021100ee 	.word	0x021100ee
 8007730:	00080006 	.word	0x00080006
 8007734:	000c000a 	.word	0x000c000a
 8007738:	2308      	movs	r3, #8
 800773a:	e78d      	b.n	8007658 <UART_SetConfig+0x108>
 800773c:	2310      	movs	r3, #16
 800773e:	e78b      	b.n	8007658 <UART_SetConfig+0x108>
 8007740:	2320      	movs	r3, #32
 8007742:	e789      	b.n	8007658 <UART_SetConfig+0x108>
 8007744:	2340      	movs	r3, #64	; 0x40
 8007746:	e787      	b.n	8007658 <UART_SetConfig+0x108>
 8007748:	2380      	movs	r3, #128	; 0x80
 800774a:	e785      	b.n	8007658 <UART_SetConfig+0x108>
 800774c:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <UART_SetConfig+0x258>)
 800774e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	2b05      	cmp	r3, #5
 8007756:	d80f      	bhi.n	8007778 <UART_SetConfig+0x228>
 8007758:	e8df f013 	tbh	[pc, r3, lsl #1]
 800775c:	01fb00d8 	.word	0x01fb00d8
 8007760:	00080006 	.word	0x00080006
 8007764:	000c000a 	.word	0x000c000a
 8007768:	2308      	movs	r3, #8
 800776a:	e775      	b.n	8007658 <UART_SetConfig+0x108>
 800776c:	2310      	movs	r3, #16
 800776e:	e773      	b.n	8007658 <UART_SetConfig+0x108>
 8007770:	2320      	movs	r3, #32
 8007772:	e771      	b.n	8007658 <UART_SetConfig+0x108>
 8007774:	2340      	movs	r3, #64	; 0x40
 8007776:	e76f      	b.n	8007658 <UART_SetConfig+0x108>
 8007778:	2380      	movs	r3, #128	; 0x80
 800777a:	e76d      	b.n	8007658 <UART_SetConfig+0x108>
 800777c:	cfff69f3 	.word	0xcfff69f3
 8007780:	58000c00 	.word	0x58000c00
 8007784:	11fff4ff 	.word	0x11fff4ff
 8007788:	40011000 	.word	0x40011000
 800778c:	40004400 	.word	0x40004400
 8007790:	40004800 	.word	0x40004800
 8007794:	40004c00 	.word	0x40004c00
 8007798:	40005000 	.word	0x40005000
 800779c:	40011400 	.word	0x40011400
 80077a0:	40007800 	.word	0x40007800
 80077a4:	40007c00 	.word	0x40007c00
 80077a8:	58024400 	.word	0x58024400
 80077ac:	4b82      	ldr	r3, [pc, #520]	; (80079b8 <UART_SetConfig+0x468>)
 80077ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077b4:	2b28      	cmp	r3, #40	; 0x28
 80077b6:	d832      	bhi.n	800781e <UART_SetConfig+0x2ce>
 80077b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80077bc:	003100aa 	.word	0x003100aa
 80077c0:	00310031 	.word	0x00310031
 80077c4:	00310031 	.word	0x00310031
 80077c8:	00310031 	.word	0x00310031
 80077cc:	003101cd 	.word	0x003101cd
 80077d0:	00310031 	.word	0x00310031
 80077d4:	00310031 	.word	0x00310031
 80077d8:	00310031 	.word	0x00310031
 80077dc:	00310029 	.word	0x00310029
 80077e0:	00310031 	.word	0x00310031
 80077e4:	00310031 	.word	0x00310031
 80077e8:	00310031 	.word	0x00310031
 80077ec:	0031002b 	.word	0x0031002b
 80077f0:	00310031 	.word	0x00310031
 80077f4:	00310031 	.word	0x00310031
 80077f8:	00310031 	.word	0x00310031
 80077fc:	0031002d 	.word	0x0031002d
 8007800:	00310031 	.word	0x00310031
 8007804:	00310031 	.word	0x00310031
 8007808:	00310031 	.word	0x00310031
 800780c:	002f      	.short	0x002f
 800780e:	2308      	movs	r3, #8
 8007810:	e722      	b.n	8007658 <UART_SetConfig+0x108>
 8007812:	2310      	movs	r3, #16
 8007814:	e720      	b.n	8007658 <UART_SetConfig+0x108>
 8007816:	2320      	movs	r3, #32
 8007818:	e71e      	b.n	8007658 <UART_SetConfig+0x108>
 800781a:	2340      	movs	r3, #64	; 0x40
 800781c:	e71c      	b.n	8007658 <UART_SetConfig+0x108>
 800781e:	2380      	movs	r3, #128	; 0x80
 8007820:	e71a      	b.n	8007658 <UART_SetConfig+0x108>
 8007822:	4b65      	ldr	r3, [pc, #404]	; (80079b8 <UART_SetConfig+0x468>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b05      	cmp	r3, #5
 800782c:	d80f      	bhi.n	800784e <UART_SetConfig+0x2fe>
 800782e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007832:	0071      	.short	0x0071
 8007834:	00060194 	.word	0x00060194
 8007838:	000a0008 	.word	0x000a0008
 800783c:	000c      	.short	0x000c
 800783e:	2308      	movs	r3, #8
 8007840:	e70a      	b.n	8007658 <UART_SetConfig+0x108>
 8007842:	2310      	movs	r3, #16
 8007844:	e708      	b.n	8007658 <UART_SetConfig+0x108>
 8007846:	2320      	movs	r3, #32
 8007848:	e706      	b.n	8007658 <UART_SetConfig+0x108>
 800784a:	2340      	movs	r3, #64	; 0x40
 800784c:	e704      	b.n	8007658 <UART_SetConfig+0x108>
 800784e:	2380      	movs	r3, #128	; 0x80
 8007850:	e702      	b.n	8007658 <UART_SetConfig+0x108>
 8007852:	4b59      	ldr	r3, [pc, #356]	; (80079b8 <UART_SetConfig+0x468>)
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b05      	cmp	r3, #5
 800785c:	d80f      	bhi.n	800787e <UART_SetConfig+0x32e>
 800785e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007862:	005b      	.short	0x005b
 8007864:	0006017e 	.word	0x0006017e
 8007868:	000a0008 	.word	0x000a0008
 800786c:	000c      	.short	0x000c
 800786e:	2308      	movs	r3, #8
 8007870:	e6f2      	b.n	8007658 <UART_SetConfig+0x108>
 8007872:	2310      	movs	r3, #16
 8007874:	e6f0      	b.n	8007658 <UART_SetConfig+0x108>
 8007876:	2320      	movs	r3, #32
 8007878:	e6ee      	b.n	8007658 <UART_SetConfig+0x108>
 800787a:	2340      	movs	r3, #64	; 0x40
 800787c:	e6ec      	b.n	8007658 <UART_SetConfig+0x108>
 800787e:	2380      	movs	r3, #128	; 0x80
 8007880:	e6ea      	b.n	8007658 <UART_SetConfig+0x108>
 8007882:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	2b05      	cmp	r3, #5
 800788e:	f200 8139 	bhi.w	8007b04 <UART_SetConfig+0x5b4>
 8007892:	e8df f003 	tbb	[pc, r3]
 8007896:	4a43      	.short	0x4a43
 8007898:	038a544f 	.word	0x038a544f
 800789c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80078a0:	e058      	b.n	8007954 <UART_SetConfig+0x404>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <UART_SetConfig+0x358>
 80078a6:	2300      	movs	r3, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 80078a8:	4944      	ldr	r1, [pc, #272]	; (80079bc <UART_SetConfig+0x46c>)
 80078aa:	428a      	cmp	r2, r1
 80078ac:	f040 8159 	bne.w	8007b62 <UART_SetConfig+0x612>
    switch (clocksource)
 80078b0:	1e9a      	subs	r2, r3, #2
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	2a1e      	cmp	r2, #30
 80078b6:	f200 8127 	bhi.w	8007b08 <UART_SetConfig+0x5b8>
 80078ba:	3b02      	subs	r3, #2
 80078bc:	2b1e      	cmp	r3, #30
 80078be:	f200 8125 	bhi.w	8007b0c <UART_SetConfig+0x5bc>
 80078c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80078c6:	002d      	.short	0x002d
 80078c8:	00320123 	.word	0x00320123
 80078cc:	01230123 	.word	0x01230123
 80078d0:	00370123 	.word	0x00370123
 80078d4:	01230123 	.word	0x01230123
 80078d8:	01230123 	.word	0x01230123
 80078dc:	01230123 	.word	0x01230123
 80078e0:	003c0123 	.word	0x003c0123
 80078e4:	01230123 	.word	0x01230123
 80078e8:	01230123 	.word	0x01230123
 80078ec:	01230123 	.word	0x01230123
 80078f0:	01230123 	.word	0x01230123
 80078f4:	01230123 	.word	0x01230123
 80078f8:	01230123 	.word	0x01230123
 80078fc:	01230123 	.word	0x01230123
 8007900:	00740123 	.word	0x00740123
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007904:	2300      	movs	r3, #0
 8007906:	e7cf      	b.n	80078a8 <UART_SetConfig+0x358>
 8007908:	2300      	movs	r3, #0
 800790a:	e7cd      	b.n	80078a8 <UART_SetConfig+0x358>
 800790c:	2300      	movs	r3, #0
 800790e:	e7cb      	b.n	80078a8 <UART_SetConfig+0x358>
 8007910:	2301      	movs	r3, #1
 8007912:	e7c9      	b.n	80078a8 <UART_SetConfig+0x358>
 8007914:	2300      	movs	r3, #0
 8007916:	e7c7      	b.n	80078a8 <UART_SetConfig+0x358>
 8007918:	2300      	movs	r3, #0
 800791a:	e7c5      	b.n	80078a8 <UART_SetConfig+0x358>
 800791c:	2302      	movs	r3, #2
 800791e:	e7c3      	b.n	80078a8 <UART_SetConfig+0x358>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007920:	f7fd fdd4 	bl	80054cc <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8007924:	b9b0      	cbnz	r0, 8007954 <UART_SetConfig+0x404>
 8007926:	2000      	movs	r0, #0
 8007928:	e0fd      	b.n	8007b26 <UART_SetConfig+0x5d6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800792a:	a803      	add	r0, sp, #12
 800792c:	f7fd fde0 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007930:	9804      	ldr	r0, [sp, #16]
        break;
 8007932:	e7f7      	b.n	8007924 <UART_SetConfig+0x3d4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007934:	4668      	mov	r0, sp
 8007936:	f7fd fed7 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800793a:	9801      	ldr	r0, [sp, #4]
        break;
 800793c:	e7f2      	b.n	8007924 <UART_SetConfig+0x3d4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800793e:	4b1e      	ldr	r3, [pc, #120]	; (80079b8 <UART_SetConfig+0x468>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f013 0f20 	tst.w	r3, #32
 8007946:	d034      	beq.n	80079b2 <UART_SetConfig+0x462>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007948:	4b1b      	ldr	r3, [pc, #108]	; (80079b8 <UART_SetConfig+0x468>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007950:	481b      	ldr	r0, [pc, #108]	; (80079c0 <UART_SetConfig+0x470>)
 8007952:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007954:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007956:	4b1b      	ldr	r3, [pc, #108]	; (80079c4 <UART_SetConfig+0x474>)
 8007958:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800795c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007960:	6865      	ldr	r5, [r4, #4]
 8007962:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007966:	4299      	cmp	r1, r3
 8007968:	f200 80d2 	bhi.w	8007b10 <UART_SetConfig+0x5c0>
 800796c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007970:	f200 80d0 	bhi.w	8007b14 <UART_SetConfig+0x5c4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007974:	2600      	movs	r6, #0
 8007976:	4633      	mov	r3, r6
 8007978:	4631      	mov	r1, r6
 800797a:	f7f8 fcad 	bl	80002d8 <__aeabi_uldivmod>
 800797e:	0209      	lsls	r1, r1, #8
 8007980:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007984:	0200      	lsls	r0, r0, #8
 8007986:	086b      	lsrs	r3, r5, #1
 8007988:	18c0      	adds	r0, r0, r3
 800798a:	462a      	mov	r2, r5
 800798c:	4633      	mov	r3, r6
 800798e:	f141 0100 	adc.w	r1, r1, #0
 8007992:	f7f8 fca1 	bl	80002d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007996:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800799a:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <UART_SetConfig+0x478>)
 800799c:	429a      	cmp	r2, r3
 800799e:	f200 80bb 	bhi.w	8007b18 <UART_SetConfig+0x5c8>
          huart->Instance->BRR = usartdiv;
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	60d8      	str	r0, [r3, #12]
 80079a6:	4630      	mov	r0, r6
 80079a8:	e0bd      	b.n	8007b26 <UART_SetConfig+0x5d6>
        pclk = (uint32_t) CSI_VALUE;
 80079aa:	4808      	ldr	r0, [pc, #32]	; (80079cc <UART_SetConfig+0x47c>)
 80079ac:	e7d2      	b.n	8007954 <UART_SetConfig+0x404>
    switch (clocksource)
 80079ae:	4807      	ldr	r0, [pc, #28]	; (80079cc <UART_SetConfig+0x47c>)
 80079b0:	e7d0      	b.n	8007954 <UART_SetConfig+0x404>
          pclk = (uint32_t) HSI_VALUE;
 80079b2:	4803      	ldr	r0, [pc, #12]	; (80079c0 <UART_SetConfig+0x470>)
 80079b4:	e7ce      	b.n	8007954 <UART_SetConfig+0x404>
 80079b6:	bf00      	nop
 80079b8:	58024400 	.word	0x58024400
 80079bc:	58000c00 	.word	0x58000c00
 80079c0:	03d09000 	.word	0x03d09000
 80079c4:	080080c8 	.word	0x080080c8
 80079c8:	000ffcff 	.word	0x000ffcff
 80079cc:	003d0900 	.word	0x003d0900
    switch (clocksource)
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d815      	bhi.n	8007a00 <UART_SetConfig+0x4b0>
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	f200 80a1 	bhi.w	8007b1c <UART_SetConfig+0x5cc>
 80079da:	e8df f003 	tbb	[pc, r3]
 80079de:	3731      	.short	0x3731
 80079e0:	9f3a9f9f 	.word	0x9f3a9f9f
 80079e4:	9f3f9f9f 	.word	0x9f3f9f9f
 80079e8:	9f9f9f9f 	.word	0x9f9f9f9f
 80079ec:	9f449f9f 	.word	0x9f449f9f
 80079f0:	9f9f9f9f 	.word	0x9f9f9f9f
 80079f4:	9f9f9f9f 	.word	0x9f9f9f9f
 80079f8:	9f9f9f9f 	.word	0x9f9f9f9f
 80079fc:	9f9f      	.short	0x9f9f
 80079fe:	50          	.byte	0x50
 80079ff:	00          	.byte	0x00
 8007a00:	2b40      	cmp	r3, #64	; 0x40
 8007a02:	d11b      	bne.n	8007a3c <UART_SetConfig+0x4ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a04:	6862      	ldr	r2, [r4, #4]
 8007a06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a08:	4b59      	ldr	r3, [pc, #356]	; (8007b70 <UART_SetConfig+0x620>)
 8007a0a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007a0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007a12:	0853      	lsrs	r3, r2, #1
 8007a14:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007a18:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a1c:	f1a0 0210 	sub.w	r2, r0, #16
 8007a20:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d87b      	bhi.n	8007b20 <UART_SetConfig+0x5d0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a28:	f020 030f 	bic.w	r3, r0, #15
 8007a2c:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8007a2e:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a30:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8007a34:	4318      	orrs	r0, r3
 8007a36:	60d0      	str	r0, [r2, #12]
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e074      	b.n	8007b26 <UART_SetConfig+0x5d6>
    switch (clocksource)
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	e072      	b.n	8007b26 <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a40:	f7fc ff24 	bl	800488c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d1dd      	bne.n	8007a04 <UART_SetConfig+0x4b4>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e06c      	b.n	8007b26 <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a4c:	f7fc ff30 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
        break;
 8007a50:	e7f8      	b.n	8007a44 <UART_SetConfig+0x4f4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a52:	a803      	add	r0, sp, #12
 8007a54:	f7fd fd4c 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a58:	9804      	ldr	r0, [sp, #16]
        break;
 8007a5a:	e7f3      	b.n	8007a44 <UART_SetConfig+0x4f4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5c:	4668      	mov	r0, sp
 8007a5e:	f7fd fe43 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a62:	9801      	ldr	r0, [sp, #4]
        break;
 8007a64:	e7ee      	b.n	8007a44 <UART_SetConfig+0x4f4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a66:	4b43      	ldr	r3, [pc, #268]	; (8007b74 <UART_SetConfig+0x624>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f013 0f20 	tst.w	r3, #32
 8007a6e:	d008      	beq.n	8007a82 <UART_SetConfig+0x532>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a70:	4b40      	ldr	r3, [pc, #256]	; (8007b74 <UART_SetConfig+0x624>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007a78:	483f      	ldr	r0, [pc, #252]	; (8007b78 <UART_SetConfig+0x628>)
 8007a7a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8007a7c:	e7c2      	b.n	8007a04 <UART_SetConfig+0x4b4>
        pclk = (uint32_t) CSI_VALUE;
 8007a7e:	483f      	ldr	r0, [pc, #252]	; (8007b7c <UART_SetConfig+0x62c>)
 8007a80:	e7c0      	b.n	8007a04 <UART_SetConfig+0x4b4>
          pclk = (uint32_t) HSI_VALUE;
 8007a82:	483d      	ldr	r0, [pc, #244]	; (8007b78 <UART_SetConfig+0x628>)
 8007a84:	e7be      	b.n	8007a04 <UART_SetConfig+0x4b4>
    switch (clocksource)
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d117      	bne.n	8007aba <UART_SetConfig+0x56a>
 8007a8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a8e:	6863      	ldr	r3, [r4, #4]
 8007a90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a92:	4a37      	ldr	r2, [pc, #220]	; (8007b70 <UART_SetConfig+0x620>)
 8007a94:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007a98:	fbb0 f0f2 	udiv	r0, r0, r2
 8007a9c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007aa0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa4:	f1a0 0210 	sub.w	r2, r0, #16
 8007aa8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d844      	bhi.n	8007b3a <UART_SetConfig+0x5ea>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	b280      	uxth	r0, r0
 8007ab4:	60d8      	str	r0, [r3, #12]
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	e035      	b.n	8007b26 <UART_SetConfig+0x5d6>
    switch (clocksource)
 8007aba:	2001      	movs	r0, #1
 8007abc:	e033      	b.n	8007b26 <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007abe:	f7fc fee5 	bl	800488c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d1e3      	bne.n	8007a8e <UART_SetConfig+0x53e>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e02d      	b.n	8007b26 <UART_SetConfig+0x5d6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aca:	f7fc fef1 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
        break;
 8007ace:	e7f8      	b.n	8007ac2 <UART_SetConfig+0x572>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad0:	a803      	add	r0, sp, #12
 8007ad2:	f7fd fd0d 	bl	80054f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ad6:	9804      	ldr	r0, [sp, #16]
        break;
 8007ad8:	e7f3      	b.n	8007ac2 <UART_SetConfig+0x572>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ada:	4668      	mov	r0, sp
 8007adc:	f7fd fe04 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ae0:	9801      	ldr	r0, [sp, #4]
        break;
 8007ae2:	e7ee      	b.n	8007ac2 <UART_SetConfig+0x572>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ae4:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <UART_SetConfig+0x624>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f013 0f20 	tst.w	r3, #32
 8007aec:	d008      	beq.n	8007b00 <UART_SetConfig+0x5b0>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <UART_SetConfig+0x624>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007af6:	4820      	ldr	r0, [pc, #128]	; (8007b78 <UART_SetConfig+0x628>)
 8007af8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8007afa:	e7c8      	b.n	8007a8e <UART_SetConfig+0x53e>
        pclk = (uint32_t) CSI_VALUE;
 8007afc:	481f      	ldr	r0, [pc, #124]	; (8007b7c <UART_SetConfig+0x62c>)
 8007afe:	e7c6      	b.n	8007a8e <UART_SetConfig+0x53e>
          pclk = (uint32_t) HSI_VALUE;
 8007b00:	481d      	ldr	r0, [pc, #116]	; (8007b78 <UART_SetConfig+0x628>)
 8007b02:	e7c4      	b.n	8007a8e <UART_SetConfig+0x53e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b04:	2001      	movs	r0, #1
 8007b06:	e00e      	b.n	8007b26 <UART_SetConfig+0x5d6>
    switch (clocksource)
 8007b08:	2001      	movs	r0, #1
 8007b0a:	e00c      	b.n	8007b26 <UART_SetConfig+0x5d6>
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	e00a      	b.n	8007b26 <UART_SetConfig+0x5d6>
        ret = HAL_ERROR;
 8007b10:	2001      	movs	r0, #1
 8007b12:	e008      	b.n	8007b26 <UART_SetConfig+0x5d6>
 8007b14:	2001      	movs	r0, #1
 8007b16:	e006      	b.n	8007b26 <UART_SetConfig+0x5d6>
          ret = HAL_ERROR;
 8007b18:	2001      	movs	r0, #1
 8007b1a:	e004      	b.n	8007b26 <UART_SetConfig+0x5d6>
    switch (clocksource)
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	e002      	b.n	8007b26 <UART_SetConfig+0x5d6>
        ret = HAL_ERROR;
 8007b20:	2001      	movs	r0, #1
 8007b22:	e000      	b.n	8007b26 <UART_SetConfig+0x5d6>
    switch (clocksource)
 8007b24:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b2c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8007b34:	6763      	str	r3, [r4, #116]	; 0x74
}
 8007b36:	b006      	add	sp, #24
 8007b38:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	e7f3      	b.n	8007b26 <UART_SetConfig+0x5d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b3e:	2304      	movs	r3, #4
 8007b40:	e58a      	b.n	8007658 <UART_SetConfig+0x108>
 8007b42:	2310      	movs	r3, #16
 8007b44:	e588      	b.n	8007658 <UART_SetConfig+0x108>
 8007b46:	2304      	movs	r3, #4
 8007b48:	e586      	b.n	8007658 <UART_SetConfig+0x108>
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	e584      	b.n	8007658 <UART_SetConfig+0x108>
 8007b4e:	2304      	movs	r3, #4
 8007b50:	e582      	b.n	8007658 <UART_SetConfig+0x108>
 8007b52:	2304      	movs	r3, #4
 8007b54:	e580      	b.n	8007658 <UART_SetConfig+0x108>
 8007b56:	2304      	movs	r3, #4
 8007b58:	e57e      	b.n	8007658 <UART_SetConfig+0x108>
 8007b5a:	2304      	movs	r3, #4
 8007b5c:	e57c      	b.n	8007658 <UART_SetConfig+0x108>
 8007b5e:	2304      	movs	r3, #4
 8007b60:	e57a      	b.n	8007658 <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b62:	69e2      	ldr	r2, [r4, #28]
 8007b64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b68:	f47f ad7b 	bne.w	8007662 <UART_SetConfig+0x112>
 8007b6c:	e732      	b.n	80079d4 <UART_SetConfig+0x484>
 8007b6e:	bf00      	nop
 8007b70:	080080c8 	.word	0x080080c8
 8007b74:	58024400 	.word	0x58024400
 8007b78:	03d09000 	.word	0x03d09000
 8007b7c:	003d0900 	.word	0x003d0900

08007b80 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b82:	f013 0f01 	tst.w	r3, #1
 8007b86:	d006      	beq.n	8007b96 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b88:	6802      	ldr	r2, [r0, #0]
 8007b8a:	6853      	ldr	r3, [r2, #4]
 8007b8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b90:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007b92:	430b      	orrs	r3, r1
 8007b94:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b98:	f013 0f02 	tst.w	r3, #2
 8007b9c:	d006      	beq.n	8007bac <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b9e:	6802      	ldr	r2, [r0, #0]
 8007ba0:	6853      	ldr	r3, [r2, #4]
 8007ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ba6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bae:	f013 0f04 	tst.w	r3, #4
 8007bb2:	d006      	beq.n	8007bc2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bb4:	6802      	ldr	r2, [r0, #0]
 8007bb6:	6853      	ldr	r3, [r2, #4]
 8007bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bbc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bc4:	f013 0f08 	tst.w	r3, #8
 8007bc8:	d006      	beq.n	8007bd8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bca:	6802      	ldr	r2, [r0, #0]
 8007bcc:	6853      	ldr	r3, [r2, #4]
 8007bce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bd2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bda:	f013 0f10 	tst.w	r3, #16
 8007bde:	d006      	beq.n	8007bee <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007be0:	6802      	ldr	r2, [r0, #0]
 8007be2:	6893      	ldr	r3, [r2, #8]
 8007be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007bea:	430b      	orrs	r3, r1
 8007bec:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bf0:	f013 0f20 	tst.w	r3, #32
 8007bf4:	d006      	beq.n	8007c04 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bf6:	6802      	ldr	r2, [r0, #0]
 8007bf8:	6893      	ldr	r3, [r2, #8]
 8007bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bfe:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007c00:	430b      	orrs	r3, r1
 8007c02:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007c0a:	d00a      	beq.n	8007c22 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c0c:	6802      	ldr	r2, [r0, #0]
 8007c0e:	6853      	ldr	r3, [r2, #4]
 8007c10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c14:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007c16:	430b      	orrs	r3, r1
 8007c18:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c20:	d00b      	beq.n	8007c3a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c28:	d006      	beq.n	8007c38 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c2a:	6802      	ldr	r2, [r0, #0]
 8007c2c:	6853      	ldr	r3, [r2, #4]
 8007c2e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007c32:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6053      	str	r3, [r2, #4]
}
 8007c38:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c3a:	6802      	ldr	r2, [r0, #0]
 8007c3c:	6853      	ldr	r3, [r2, #4]
 8007c3e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007c42:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007c44:	430b      	orrs	r3, r1
 8007c46:	6053      	str	r3, [r2, #4]
 8007c48:	e7eb      	b.n	8007c22 <UART_AdvFeatureConfig+0xa2>

08007c4a <UART_WaitOnFlagUntilTimeout>:
{
 8007c4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c4e:	4680      	mov	r8, r0
 8007c50:	460e      	mov	r6, r1
 8007c52:	4615      	mov	r5, r2
 8007c54:	4699      	mov	r9, r3
 8007c56:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c58:	f8d8 2000 	ldr.w	r2, [r8]
 8007c5c:	69d4      	ldr	r4, [r2, #28]
 8007c5e:	ea36 0304 	bics.w	r3, r6, r4
 8007c62:	bf0c      	ite	eq
 8007c64:	f04f 0c01 	moveq.w	ip, #1
 8007c68:	f04f 0c00 	movne.w	ip, #0
 8007c6c:	45ac      	cmp	ip, r5
 8007c6e:	d15a      	bne.n	8007d26 <UART_WaitOnFlagUntilTimeout+0xdc>
    if (Timeout != HAL_MAX_DELAY)
 8007c70:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007c74:	d0f2      	beq.n	8007c5c <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c76:	f7f9 fc2d 	bl	80014d4 <HAL_GetTick>
 8007c7a:	eba0 0009 	sub.w	r0, r0, r9
 8007c7e:	42b8      	cmp	r0, r7
 8007c80:	d830      	bhi.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0x9a>
 8007c82:	b37f      	cbz	r7, 8007ce4 <UART_WaitOnFlagUntilTimeout+0x9a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c84:	f8d8 3000 	ldr.w	r3, [r8]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	f012 0f04 	tst.w	r2, #4
 8007c8e:	d0e3      	beq.n	8007c58 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c90:	69da      	ldr	r2, [r3, #28]
 8007c92:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007c96:	d0df      	beq.n	8007c58 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c9c:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c9e:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	e852 3f00 	ldrex	r3, [r2]
 8007ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	e842 3100 	strex	r1, r3, [r2]
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	d1f5      	bne.n	8007c9e <UART_WaitOnFlagUntilTimeout+0x54>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb2:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	f102 0308 	add.w	r3, r2, #8
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	3208      	adds	r2, #8
 8007cc4:	e842 3100 	strex	r1, r3, [r2]
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	d1f2      	bne.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8007ccc:	2320      	movs	r3, #32
 8007cce:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007cd2:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cd6:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 8007ce0:	2003      	movs	r0, #3
 8007ce2:	e021      	b.n	8007d28 <UART_WaitOnFlagUntilTimeout+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ce4:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	e852 3f00 	ldrex	r3, [r2]
 8007cec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	e842 3100 	strex	r1, r3, [r2]
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d1f5      	bne.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0x9a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf8:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	f102 0308 	add.w	r3, r2, #8
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	3208      	adds	r2, #8
 8007d0a:	e842 3100 	strex	r1, r3, [r2]
 8007d0e:	2900      	cmp	r1, #0
 8007d10:	d1f2      	bne.n	8007cf8 <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8007d12:	2320      	movs	r3, #32
 8007d14:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d18:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 8007d22:	2003      	movs	r0, #3
 8007d24:	e000      	b.n	8007d28 <UART_WaitOnFlagUntilTimeout+0xde>
  return HAL_OK;
 8007d26:	2000      	movs	r0, #0
}
 8007d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007d2c <UART_CheckIdleState>:
{
 8007d2c:	b530      	push	{r4, r5, lr}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8007d38:	f7f9 fbcc 	bl	80014d4 <HAL_GetTick>
 8007d3c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d3e:	6822      	ldr	r2, [r4, #0]
 8007d40:	6812      	ldr	r2, [r2, #0]
 8007d42:	f012 0f08 	tst.w	r2, #8
 8007d46:	d10f      	bne.n	8007d68 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f013 0f04 	tst.w	r3, #4
 8007d50:	d118      	bne.n	8007d84 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8007d52:	2320      	movs	r3, #32
 8007d54:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007d58:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8007d60:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007d64:	b003      	add	sp, #12
 8007d66:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2200      	movs	r2, #0
 8007d72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d76:	4620      	mov	r0, r4
 8007d78:	f7ff ff67 	bl	8007c4a <UART_WaitOnFlagUntilTimeout>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d0e3      	beq.n	8007d48 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8007d80:	2003      	movs	r0, #3
 8007d82:	e7ef      	b.n	8007d64 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d92:	4620      	mov	r0, r4
 8007d94:	f7ff ff59 	bl	8007c4a <UART_WaitOnFlagUntilTimeout>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d0da      	beq.n	8007d52 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007d9c:	2003      	movs	r0, #3
 8007d9e:	e7e1      	b.n	8007d64 <UART_CheckIdleState+0x38>

08007da0 <HAL_UART_Init>:
  if (huart == NULL)
 8007da0:	b378      	cbz	r0, 8007e02 <HAL_UART_Init+0x62>
{
 8007da2:	b510      	push	{r4, lr}
 8007da4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007da6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007daa:	b30b      	cbz	r3, 8007df0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007dac:	2324      	movs	r3, #36	; 0x24
 8007dae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007db2:	6822      	ldr	r2, [r4, #0]
 8007db4:	6813      	ldr	r3, [r2, #0]
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f7ff fbc7 	bl	8007550 <UART_SetConfig>
 8007dc2:	2801      	cmp	r0, #1
 8007dc4:	d013      	beq.n	8007dee <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007dc8:	b9bb      	cbnz	r3, 8007dfa <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	6853      	ldr	r3, [r2, #4]
 8007dce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007dd2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dd4:	6822      	ldr	r2, [r4, #0]
 8007dd6:	6893      	ldr	r3, [r2, #8]
 8007dd8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007ddc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	6813      	ldr	r3, [r2, #0]
 8007de2:	f043 0301 	orr.w	r3, r3, #1
 8007de6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7ff ff9f 	bl	8007d2c <UART_CheckIdleState>
}
 8007dee:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007df0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007df4:	f7f9 f990 	bl	8001118 <HAL_UART_MspInit>
 8007df8:	e7d8      	b.n	8007dac <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f7ff fec0 	bl	8007b80 <UART_AdvFeatureConfig>
 8007e00:	e7e3      	b.n	8007dca <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8007e02:	2001      	movs	r0, #1
}
 8007e04:	4770      	bx	lr
	...

08007e08 <UART_Start_Receive_DMA>:
{
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8007e0e:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8007e10:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e1a:	2222      	movs	r2, #34	; 0x22
 8007e1c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8007e20:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007e22:	b18a      	cbz	r2, 8007e48 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e24:	4922      	ldr	r1, [pc, #136]	; (8007eb0 <UART_Start_Receive_DMA+0xa8>)
 8007e26:	63d1      	str	r1, [r2, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e28:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007e2a:	4922      	ldr	r1, [pc, #136]	; (8007eb4 <UART_Start_Receive_DMA+0xac>)
 8007e2c:	6411      	str	r1, [r2, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e2e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007e30:	4921      	ldr	r1, [pc, #132]	; (8007eb8 <UART_Start_Receive_DMA+0xb0>)
 8007e32:	64d1      	str	r1, [r2, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8007e34:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007e36:	2100      	movs	r1, #0
 8007e38:	6511      	str	r1, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e3a:	6801      	ldr	r1, [r0, #0]
 8007e3c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007e3e:	3124      	adds	r1, #36	; 0x24
 8007e40:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8007e42:	f7fa f8a5 	bl	8001f90 <HAL_DMA_Start_IT>
 8007e46:	bb38      	cbnz	r0, 8007e98 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	b143      	cbz	r3, 8007e64 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	e852 3f00 	ldrex	r3, [r2]
 8007e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	e842 3100 	strex	r1, r3, [r2]
 8007e60:	2900      	cmp	r1, #0
 8007e62:	d1f6      	bne.n	8007e52 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	f102 0308 	add.w	r3, r2, #8
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	3208      	adds	r2, #8
 8007e74:	e842 3100 	strex	r1, r3, [r2]
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	d1f3      	bne.n	8007e64 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	f102 0308 	add.w	r3, r2, #8
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	3208      	adds	r2, #8
 8007e8c:	e842 3100 	strex	r1, r3, [r2]
 8007e90:	2900      	cmp	r1, #0
 8007e92:	d1f3      	bne.n	8007e7c <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 8007e94:	2000      	movs	r0, #0
}
 8007e96:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e98:	2310      	movs	r3, #16
 8007e9a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8007ea4:	2320      	movs	r3, #32
 8007ea6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8007eaa:	2001      	movs	r0, #1
 8007eac:	e7f3      	b.n	8007e96 <UART_Start_Receive_DMA+0x8e>
 8007eae:	bf00      	nop
 8007eb0:	080074c5 	.word	0x080074c5
 8007eb4:	080074a9 	.word	0x080074a9
 8007eb8:	08007033 	.word	0x08007033

08007ebc <HAL_UART_Receive_DMA>:
{
 8007ebc:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ebe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	d11e      	bne.n	8007f04 <HAL_UART_Receive_DMA+0x48>
    if ((pData == NULL) || (Size == 0U))
 8007ec6:	b1f9      	cbz	r1, 8007f08 <HAL_UART_Receive_DMA+0x4c>
 8007ec8:	b1f2      	cbz	r2, 8007f08 <HAL_UART_Receive_DMA+0x4c>
    __HAL_LOCK(huart);
 8007eca:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d01c      	beq.n	8007f0c <HAL_UART_Receive_DMA+0x50>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007edc:	6803      	ldr	r3, [r0, #0]
 8007ede:	4c0c      	ldr	r4, [pc, #48]	; (8007f10 <HAL_UART_Receive_DMA+0x54>)
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d00c      	beq.n	8007efe <HAL_UART_Receive_DMA+0x42>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007eea:	d008      	beq.n	8007efe <HAL_UART_Receive_DMA+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eec:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eee:	e854 3f00 	ldrex	r3, [r4]
 8007ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	e844 3500 	strex	r5, r3, [r4]
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	d1f6      	bne.n	8007eec <HAL_UART_Receive_DMA+0x30>
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007efe:	f7ff ff83 	bl	8007e08 <UART_Start_Receive_DMA>
 8007f02:	e000      	b.n	8007f06 <HAL_UART_Receive_DMA+0x4a>
    return HAL_BUSY;
 8007f04:	2002      	movs	r0, #2
}
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007f08:	2001      	movs	r0, #1
 8007f0a:	e7fc      	b.n	8007f06 <HAL_UART_Receive_DMA+0x4a>
    __HAL_LOCK(huart);
 8007f0c:	2002      	movs	r0, #2
 8007f0e:	e7fa      	b.n	8007f06 <HAL_UART_Receive_DMA+0x4a>
 8007f10:	58000c00 	.word	0x58000c00

08007f14 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f14:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007f16:	b92b      	cbnz	r3, 8007f24 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f1e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8007f22:	4770      	bx	lr
{
 8007f24:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f26:	6803      	ldr	r3, [r0, #0]
 8007f28:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f2a:	6899      	ldr	r1, [r3, #8]
 8007f2c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f2e:	4d0a      	ldr	r5, [pc, #40]	; (8007f58 <UARTEx_SetNbDataToProcess+0x44>)
 8007f30:	5c6b      	ldrb	r3, [r5, r1]
 8007f32:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f34:	4c09      	ldr	r4, [pc, #36]	; (8007f5c <UARTEx_SetNbDataToProcess+0x48>)
 8007f36:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f38:	fb93 f3f1 	sdiv	r3, r3, r1
 8007f3c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f40:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8007f44:	5cab      	ldrb	r3, [r5, r2]
 8007f46:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f48:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f4e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8007f52:	bc30      	pop	{r4, r5}
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	080080e8 	.word	0x080080e8
 8007f5c:	080080e0 	.word	0x080080e0

08007f60 <HAL_UARTEx_WakeupCallback>:
}
 8007f60:	4770      	bx	lr

08007f62 <HAL_UARTEx_RxFifoFullCallback>:
}
 8007f62:	4770      	bx	lr

08007f64 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8007f64:	4770      	bx	lr

08007f66 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007f66:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d018      	beq.n	8007fa0 <HAL_UARTEx_DisableFifoMode+0x3a>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007f74:	2324      	movs	r3, #36	; 0x24
 8007f76:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f7a:	6803      	ldr	r3, [r0, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007f7e:	6819      	ldr	r1, [r3, #0]
 8007f80:	f021 0101 	bic.w	r1, r1, #1
 8007f84:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f86:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f8e:	6801      	ldr	r1, [r0, #0]
 8007f90:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007f92:	2220      	movs	r2, #32
 8007f94:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007f98:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007fa0:	2002      	movs	r0, #2
}
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007fa4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007fa6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d01d      	beq.n	8007fea <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007fae:	4604      	mov	r4, r0
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007fb6:	2324      	movs	r3, #36	; 0x24
 8007fb8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fbc:	6803      	ldr	r3, [r0, #0]
 8007fbe:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	f022 0201 	bic.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fc8:	6802      	ldr	r2, [r0, #0]
 8007fca:	6893      	ldr	r3, [r2, #8]
 8007fcc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007fd0:	4319      	orrs	r1, r3
 8007fd2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007fd4:	f7ff ff9e 	bl	8007f14 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007fdc:	2320      	movs	r3, #32
 8007fde:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007fea:	2002      	movs	r0, #2
 8007fec:	e7fc      	b.n	8007fe8 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007fee <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007fee:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007ff0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d01d      	beq.n	8008034 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008000:	2324      	movs	r3, #36	; 0x24
 8008002:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008006:	6803      	ldr	r3, [r0, #0]
 8008008:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	f022 0201 	bic.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008012:	6802      	ldr	r2, [r0, #0]
 8008014:	6893      	ldr	r3, [r2, #8]
 8008016:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800801a:	4319      	orrs	r1, r3
 800801c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800801e:	f7ff ff79 	bl	8007f14 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008026:	2320      	movs	r3, #32
 8008028:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800802c:	2000      	movs	r0, #0
 800802e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008032:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008034:	2002      	movs	r0, #2
 8008036:	e7fc      	b.n	8008032 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08008038 <__libc_init_array>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	4d0d      	ldr	r5, [pc, #52]	; (8008070 <__libc_init_array+0x38>)
 800803c:	4c0d      	ldr	r4, [pc, #52]	; (8008074 <__libc_init_array+0x3c>)
 800803e:	1b64      	subs	r4, r4, r5
 8008040:	10a4      	asrs	r4, r4, #2
 8008042:	2600      	movs	r6, #0
 8008044:	42a6      	cmp	r6, r4
 8008046:	d109      	bne.n	800805c <__libc_init_array+0x24>
 8008048:	4d0b      	ldr	r5, [pc, #44]	; (8008078 <__libc_init_array+0x40>)
 800804a:	4c0c      	ldr	r4, [pc, #48]	; (800807c <__libc_init_array+0x44>)
 800804c:	f000 f820 	bl	8008090 <_init>
 8008050:	1b64      	subs	r4, r4, r5
 8008052:	10a4      	asrs	r4, r4, #2
 8008054:	2600      	movs	r6, #0
 8008056:	42a6      	cmp	r6, r4
 8008058:	d105      	bne.n	8008066 <__libc_init_array+0x2e>
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008060:	4798      	blx	r3
 8008062:	3601      	adds	r6, #1
 8008064:	e7ee      	b.n	8008044 <__libc_init_array+0xc>
 8008066:	f855 3b04 	ldr.w	r3, [r5], #4
 800806a:	4798      	blx	r3
 800806c:	3601      	adds	r6, #1
 800806e:	e7f2      	b.n	8008056 <__libc_init_array+0x1e>
 8008070:	080080f8 	.word	0x080080f8
 8008074:	080080f8 	.word	0x080080f8
 8008078:	080080f8 	.word	0x080080f8
 800807c:	080080fc 	.word	0x080080fc

08008080 <memset>:
 8008080:	4402      	add	r2, r0
 8008082:	4603      	mov	r3, r0
 8008084:	4293      	cmp	r3, r2
 8008086:	d100      	bne.n	800808a <memset+0xa>
 8008088:	4770      	bx	lr
 800808a:	f803 1b01 	strb.w	r1, [r3], #1
 800808e:	e7f9      	b.n	8008084 <memset+0x4>

08008090 <_init>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr

0800809c <_fini>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr
