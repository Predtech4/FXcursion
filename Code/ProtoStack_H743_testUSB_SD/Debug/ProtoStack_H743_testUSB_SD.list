
ProtoStack_H743_testUSB_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dea0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800e138  0800e138  0001e138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e1c4  0800e1c4  0001e1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e1c8  0800e1c8  0001e1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000128  24000000  0800e1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000d1c  24000128  0800e2f4  00020128  2**2
                  ALLOC
  7 ._user_heap_stack 00001e04  24000e44  0800e2f4  00020e44  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b4b5  00000000  00000000  00020156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000044dc  00000000  00000000  0003b60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001438  00000000  00000000  0003fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001228  00000000  00000000  00040f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003baed  00000000  00000000  00042148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d1ab  00000000  00000000  0007dc35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015a691  00000000  00000000  0009ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f5471  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000505c  00000000  00000000  001f54c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000128 	.word	0x24000128
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e120 	.word	0x0800e120

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400012c 	.word	0x2400012c
 80002d4:	0800e120 	.word	0x0800e120

080002d8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <MX_GPIO_Init+0xcc>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a2b      	ldr	r2, [pc, #172]	; (80003a4 <MX_GPIO_Init+0xcc>)
 80002f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <MX_GPIO_Init+0xcc>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <MX_GPIO_Init+0xcc>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a24      	ldr	r2, [pc, #144]	; (80003a4 <MX_GPIO_Init+0xcc>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <MX_GPIO_Init+0xcc>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <MX_GPIO_Init+0xcc>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <MX_GPIO_Init+0xcc>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_GPIO_Init+0xcc>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_GPIO_Init+0xcc>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <MX_GPIO_Init+0xcc>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_GPIO_Init+0xcc>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035e:	f003 0308 	and.w	r3, r3, #8
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_GPIO_Init+0xcc>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <MX_GPIO_Init+0xcc>)
 800036e:	f043 0302 	orr.w	r3, r3, #2
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_GPIO_Init+0xcc>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037c:	f003 0302 	and.w	r3, r3, #2
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000384:	2301      	movs	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000388:	2300      	movs	r3, #0
 800038a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800038c:	2301      	movs	r3, #1
 800038e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000390:	f107 0314 	add.w	r3, r7, #20
 8000394:	4619      	mov	r1, r3
 8000396:	4804      	ldr	r0, [pc, #16]	; (80003a8 <MX_GPIO_Init+0xd0>)
 8000398:	f000 fc78 	bl	8000c8c <HAL_GPIO_Init>

}
 800039c:	bf00      	nop
 800039e:	3728      	adds	r7, #40	; 0x28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	58024400 	.word	0x58024400
 80003a8:	58020800 	.word	0x58020800

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b0:	f000 fa9a 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b4:	f000 f80a 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b8:	f7ff ff8e 	bl	80002d8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80003bc:	f000 f8c6 	bl	800054c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80003c0:	f009 fc48 	bl	8009c54 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80003c4:	f00d f94c 	bl	800d660 <MX_USB_DEVICE_Init>
//  __NOP();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <main+0x1c>
	...

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b09e      	sub	sp, #120	; 0x78
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003d6:	224c      	movs	r2, #76	; 0x4c
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f00d fe98 	bl	800e110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	f107 030c 	add.w	r3, r7, #12
 80003e4:	2220      	movs	r2, #32
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f00d fe91 	bl	800e110 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ee:	2002      	movs	r0, #2
 80003f0:	f002 f8fe 	bl	80025f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003f4:	2300      	movs	r3, #0
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	4b4e      	ldr	r3, [pc, #312]	; (8000534 <SystemClock_Config+0x168>)
 80003fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003fc:	4a4d      	ldr	r2, [pc, #308]	; (8000534 <SystemClock_Config+0x168>)
 80003fe:	f023 0301 	bic.w	r3, r3, #1
 8000402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000404:	4b4b      	ldr	r3, [pc, #300]	; (8000534 <SystemClock_Config+0x168>)
 8000406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <SystemClock_Config+0x16c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a49      	ldr	r2, [pc, #292]	; (8000538 <SystemClock_Config+0x16c>)
 8000414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b47      	ldr	r3, [pc, #284]	; (8000538 <SystemClock_Config+0x16c>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000426:	bf00      	nop
 8000428:	4b43      	ldr	r3, [pc, #268]	; (8000538 <SystemClock_Config+0x16c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000434:	d1f8      	bne.n	8000428 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b41      	ldr	r3, [pc, #260]	; (800053c <SystemClock_Config+0x170>)
 8000438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800043c:	4a3f      	ldr	r2, [pc, #252]	; (800053c <SystemClock_Config+0x170>)
 800043e:	f043 0302 	orr.w	r3, r3, #2
 8000442:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000446:	4b3d      	ldr	r3, [pc, #244]	; (800053c <SystemClock_Config+0x170>)
 8000448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800044c:	f003 0302 	and.w	r3, r3, #2
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000454:	2300      	movs	r3, #0
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	4b37      	ldr	r3, [pc, #220]	; (8000538 <SystemClock_Config+0x16c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a36      	ldr	r2, [pc, #216]	; (8000538 <SystemClock_Config+0x16c>)
 800045e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b34      	ldr	r3, [pc, #208]	; (8000538 <SystemClock_Config+0x16c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	4b31      	ldr	r3, [pc, #196]	; (8000534 <SystemClock_Config+0x168>)
 8000470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000472:	4a30      	ldr	r2, [pc, #192]	; (8000534 <SystemClock_Config+0x168>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	62d3      	str	r3, [r2, #44]	; 0x2c
 800047a:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <SystemClock_Config+0x168>)
 800047c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000486:	bf00      	nop
 8000488:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <SystemClock_Config+0x16c>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000494:	d1f8      	bne.n	8000488 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000496:	4b29      	ldr	r3, [pc, #164]	; (800053c <SystemClock_Config+0x170>)
 8000498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800049a:	f023 0303 	bic.w	r3, r3, #3
 800049e:	4a27      	ldr	r2, [pc, #156]	; (800053c <SystemClock_Config+0x170>)
 80004a0:	f043 0302 	orr.w	r3, r3, #2
 80004a4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004a6:	2321      	movs	r3, #33	; 0x21
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004b0:	2301      	movs	r3, #1
 80004b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b4:	2302      	movs	r3, #2
 80004b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b8:	2302      	movs	r3, #2
 80004ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004bc:	2304      	movs	r3, #4
 80004be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 80004c0:	23a0      	movs	r3, #160	; 0xa0
 80004c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004c4:	2302      	movs	r3, #2
 80004c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004c8:	2302      	movs	r3, #2
 80004ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004cc:	2302      	movs	r3, #2
 80004ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004d0:	2308      	movs	r3, #8
 80004d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004e0:	4618      	mov	r0, r3
 80004e2:	f002 f8cf 	bl	8002684 <HAL_RCC_OscConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80004ec:	f000 f828 	bl	8000540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f0:	233f      	movs	r3, #63	; 0x3f
 80004f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f4:	2303      	movs	r3, #3
 80004f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004fc:	2308      	movs	r3, #8
 80004fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000500:	2340      	movs	r3, #64	; 0x40
 8000502:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000504:	2340      	movs	r3, #64	; 0x40
 8000506:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800050e:	2340      	movs	r3, #64	; 0x40
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	2104      	movs	r1, #4
 8000518:	4618      	mov	r0, r3
 800051a:	f002 fce1 	bl	8002ee0 <HAL_RCC_ClockConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x15c>
  {
    Error_Handler();
 8000524:	f000 f80c 	bl	8000540 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000528:	f002 fe90 	bl	800324c <HAL_RCC_EnableCSS>
}
 800052c:	bf00      	nop
 800052e:	3778      	adds	r7, #120	; 0x78
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	58000400 	.word	0x58000400
 8000538:	58024800 	.word	0x58024800
 800053c:	58024400 	.word	0x58024400

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000548:	e7fe      	b.n	8000548 <Error_Handler+0x8>
	...

0800054c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <MX_SDMMC1_SD_Init+0x34>)
 8000552:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <MX_SDMMC1_SD_Init+0x38>)
 8000554:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <MX_SDMMC1_SD_Init+0x34>)
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MX_SDMMC1_SD_Init+0x34>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <MX_SDMMC1_SD_Init+0x34>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <MX_SDMMC1_SD_Init+0x34>)
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <MX_SDMMC1_SD_Init+0x34>)
 8000570:	2201      	movs	r2, #1
 8000572:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	24000144 	.word	0x24000144
 8000584:	52007000 	.word	0x52007000

08000588 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0ba      	sub	sp, #232	; 0xe8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	22bc      	movs	r2, #188	; 0xbc
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f00d fdb1 	bl	800e110 <memset>
  if(sdHandle->Instance==SDMMC1)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a43      	ldr	r2, [pc, #268]	; (80006c0 <HAL_SD_MspInit+0x138>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d17f      	bne.n	80006b8 <HAL_SD_MspInit+0x130>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 80005be:	2310      	movs	r3, #16
 80005c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 8;
 80005ce:	2308      	movs	r3, #8
 80005d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80005de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 f805 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 80005f4:	f7ff ffa4 	bl	8000540 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80005f8:	4b32      	ldr	r3, [pc, #200]	; (80006c4 <HAL_SD_MspInit+0x13c>)
 80005fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80005fe:	4a31      	ldr	r2, [pc, #196]	; (80006c4 <HAL_SD_MspInit+0x13c>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000604:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000608:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <HAL_SD_MspInit+0x13c>)
 800060a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800060e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <HAL_SD_MspInit+0x13c>)
 8000618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061c:	4a29      	ldr	r2, [pc, #164]	; (80006c4 <HAL_SD_MspInit+0x13c>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <HAL_SD_MspInit+0x13c>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <HAL_SD_MspInit+0x13c>)
 8000636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063a:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <HAL_SD_MspInit+0x13c>)
 800063c:	f043 0308 	orr.w	r3, r3, #8
 8000640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <HAL_SD_MspInit+0x13c>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000652:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800066c:	230c      	movs	r3, #12
 800066e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000672:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000676:	4619      	mov	r1, r3
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <HAL_SD_MspInit+0x140>)
 800067a:	f000 fb07 	bl	8000c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800067e:	2304      	movs	r3, #4
 8000680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068a:	2301      	movs	r3, #1
 800068c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000696:	230c      	movs	r3, #12
 8000698:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006a0:	4619      	mov	r1, r3
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <HAL_SD_MspInit+0x144>)
 80006a4:	f000 faf2 	bl	8000c8c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2031      	movs	r0, #49	; 0x31
 80006ae:	f000 fab8 	bl	8000c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80006b2:	2031      	movs	r0, #49	; 0x31
 80006b4:	f000 facf 	bl	8000c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80006b8:	bf00      	nop
 80006ba:	37e8      	adds	r7, #232	; 0xe8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	52007000 	.word	0x52007000
 80006c4:	58024400 	.word	0x58024400
 80006c8:	58020800 	.word	0x58020800
 80006cc:	58020c00 	.word	0x58020c00

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_MspInit+0x30>)
 80006d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x30>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x30>)
 80006e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006ec:	f003 0302 	and.w	r3, r3, #2
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	58024400 	.word	0x58024400

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000708:	f002 ff5a 	bl	80035c0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler+0x8>

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000754:	f000 f93a 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <SDMMC1_IRQHandler+0x10>)
 8000762:	f005 fe57 	bl	8006414 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	24000144 	.word	0x24000144

08000770 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <OTG_FS_IRQHandler+0x10>)
 8000776:	f000 fd90 	bl	800129a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	240006c0 	.word	0x240006c0

08000784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <SystemInit+0xe4>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078e:	4a36      	ldr	r2, [pc, #216]	; (8000868 <SystemInit+0xe4>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <SystemInit+0xe8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f003 030f 	and.w	r3, r3, #15
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d807      	bhi.n	80007b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <SystemInit+0xe8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f023 030f 	bic.w	r3, r3, #15
 80007ac:	4a2f      	ldr	r2, [pc, #188]	; (800086c <SystemInit+0xe8>)
 80007ae:	f043 0307 	orr.w	r3, r3, #7
 80007b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007b4:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <SystemInit+0xec>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a2d      	ldr	r2, [pc, #180]	; (8000870 <SystemInit+0xec>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <SystemInit+0xec>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <SystemInit+0xec>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4929      	ldr	r1, [pc, #164]	; (8000870 <SystemInit+0xec>)
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <SystemInit+0xf0>)
 80007ce:	4013      	ands	r3, r2
 80007d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <SystemInit+0xe8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d007      	beq.n	80007ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <SystemInit+0xe8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f023 030f 	bic.w	r3, r3, #15
 80007e6:	4a21      	ldr	r2, [pc, #132]	; (800086c <SystemInit+0xe8>)
 80007e8:	f043 0307 	orr.w	r3, r3, #7
 80007ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <SystemInit+0xec>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <SystemInit+0xec>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <SystemInit+0xec>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <SystemInit+0xec>)
 8000802:	4a1d      	ldr	r2, [pc, #116]	; (8000878 <SystemInit+0xf4>)
 8000804:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <SystemInit+0xec>)
 8000808:	4a1c      	ldr	r2, [pc, #112]	; (800087c <SystemInit+0xf8>)
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <SystemInit+0xec>)
 800080e:	4a1c      	ldr	r2, [pc, #112]	; (8000880 <SystemInit+0xfc>)
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <SystemInit+0xec>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <SystemInit+0xec>)
 800081a:	4a19      	ldr	r2, [pc, #100]	; (8000880 <SystemInit+0xfc>)
 800081c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <SystemInit+0xec>)
 8000820:	2200      	movs	r2, #0
 8000822:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <SystemInit+0xec>)
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <SystemInit+0xfc>)
 8000828:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <SystemInit+0xec>)
 800082c:	2200      	movs	r2, #0
 800082e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <SystemInit+0xec>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <SystemInit+0xec>)
 8000836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800083a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <SystemInit+0xec>)
 800083e:	2200      	movs	r2, #0
 8000840:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <SystemInit+0x100>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <SystemInit+0x104>)
 8000848:	4013      	ands	r3, r2
 800084a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800084e:	d202      	bcs.n	8000856 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <SystemInit+0x108>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <SystemInit+0x10c>)
 8000858:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800085c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00
 800086c:	52002000 	.word	0x52002000
 8000870:	58024400 	.word	0x58024400
 8000874:	eaf6ed7f 	.word	0xeaf6ed7f
 8000878:	02020200 	.word	0x02020200
 800087c:	01ff0000 	.word	0x01ff0000
 8000880:	01010280 	.word	0x01010280
 8000884:	5c001000 	.word	0x5c001000
 8000888:	ffff0000 	.word	0xffff0000
 800088c:	51008108 	.word	0x51008108
 8000890:	52004000 	.word	0x52004000

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000898:	f7ff ff74 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f00d fc01 	bl	800e0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fd71 	bl	80003ac <main>
  bx  lr
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008d4:	24000128 	.word	0x24000128
  ldr r2, =_sidata
 80008d8:	0800e1cc 	.word	0x0800e1cc
  ldr r2, =_sbss
 80008dc:	24000128 	.word	0x24000128
  ldr r4, =_ebss
 80008e0:	24000e44 	.word	0x24000e44

080008e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC3_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ee:	2003      	movs	r0, #3
 80008f0:	f000 f98c 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008f4:	f002 fcba 	bl	800326c <HAL_RCC_GetSysClockFreq>
 80008f8:	4602      	mov	r2, r0
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_Init+0x68>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	0a1b      	lsrs	r3, r3, #8
 8000900:	f003 030f 	and.w	r3, r3, #15
 8000904:	4913      	ldr	r1, [pc, #76]	; (8000954 <HAL_Init+0x6c>)
 8000906:	5ccb      	ldrb	r3, [r1, r3]
 8000908:	f003 031f 	and.w	r3, r3, #31
 800090c:	fa22 f303 	lsr.w	r3, r2, r3
 8000910:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_Init+0x68>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <HAL_Init+0x6c>)
 800091c:	5cd3      	ldrb	r3, [r2, r3]
 800091e:	f003 031f 	and.w	r3, r3, #31
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	fa22 f303 	lsr.w	r3, r2, r3
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_Init+0x70>)
 800092a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800092c:	4a0b      	ldr	r2, [pc, #44]	; (800095c <HAL_Init+0x74>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000932:	200f      	movs	r0, #15
 8000934:	f000 f814 	bl	8000960 <HAL_InitTick>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e002      	b.n	8000948 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000942:	f7ff fec5 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	58024400 	.word	0x58024400
 8000954:	0800e17c 	.word	0x0800e17c
 8000958:	24000004 	.word	0x24000004
 800095c:	24000000 	.word	0x24000000

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_InitTick+0x60>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d101      	bne.n	8000974 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	e021      	b.n	80009b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <HAL_InitTick+0x64>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_InitTick+0x60>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f971 	bl	8000c72 <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f93b 	bl	8000c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_InitTick+0x68>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2400000c 	.word	0x2400000c
 80009c4:	24000000 	.word	0x24000000
 80009c8:	24000008 	.word	0x24000008

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	2400000c 	.word	0x2400000c
 80009f0:	240001c0 	.word	0x240001c0

080009f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	240001c0 	.word	0x240001c0

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff ffee 	bl	80009f4 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffde 	bl	80009f4 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2400000c 	.word	0x2400000c

08000a54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetREVID+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	0c1b      	lsrs	r3, r3, #16
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	5c001000 	.word	0x5c001000

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <__NVIC_SetPriorityGrouping+0x40>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	4313      	orrs	r3, r2
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <__NVIC_SetPriorityGrouping+0x40>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00
 8000ab0:	05fa0000 	.word	0x05fa0000

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd8:	d301      	bcc.n	8000bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00f      	b.n	8000bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <SysTick_Config+0x40>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be6:	210f      	movs	r1, #15
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f7ff ff8e 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <SysTick_Config+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <SysTick_Config+0x40>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff29 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c30:	f7ff ff40 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ff90 	bl	8000b60 <NVIC_EncodePriority>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff5f 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff33 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffa4 	bl	8000bc8 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c9a:	4b89      	ldr	r3, [pc, #548]	; (8000ec0 <HAL_GPIO_Init+0x234>)
 8000c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c9e:	e194      	b.n	8000fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 8186 	beq.w	8000fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d005      	beq.n	8000cd0 <HAL_GPIO_Init+0x44>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d130      	bne.n	8000d32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d06:	2201      	movs	r2, #1
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	f003 0201 	and.w	r2, r3, #1
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d017      	beq.n	8000d6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d123      	bne.n	8000dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	691a      	ldr	r2, [r3, #16]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	69b9      	ldr	r1, [r7, #24]
 8000dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0203 	and.w	r2, r3, #3
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 80e0 	beq.w	8000fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_GPIO_Init+0x238>)
 8000e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <HAL_GPIO_Init+0x238>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_GPIO_Init+0x238>)
 8000e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e22:	4a29      	ldr	r2, [pc, #164]	; (8000ec8 <HAL_GPIO_Init+0x23c>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <HAL_GPIO_Init+0x240>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d052      	beq.n	8000ef4 <HAL_GPIO_Init+0x268>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <HAL_GPIO_Init+0x244>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d031      	beq.n	8000eba <HAL_GPIO_Init+0x22e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <HAL_GPIO_Init+0x248>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d02b      	beq.n	8000eb6 <HAL_GPIO_Init+0x22a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_GPIO_Init+0x24c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d025      	beq.n	8000eb2 <HAL_GPIO_Init+0x226>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <HAL_GPIO_Init+0x250>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d01f      	beq.n	8000eae <HAL_GPIO_Init+0x222>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <HAL_GPIO_Init+0x254>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d019      	beq.n	8000eaa <HAL_GPIO_Init+0x21e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <HAL_GPIO_Init+0x258>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0x21a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_GPIO_Init+0x25c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d00d      	beq.n	8000ea2 <HAL_GPIO_Init+0x216>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_GPIO_Init+0x260>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d007      	beq.n	8000e9e <HAL_GPIO_Init+0x212>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_GPIO_Init+0x264>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_GPIO_Init+0x20e>
 8000e96:	2309      	movs	r3, #9
 8000e98:	e02d      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	e02b      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	e029      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	e027      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e025      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eaa:	2305      	movs	r3, #5
 8000eac:	e023      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e021      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e01f      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e01d      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e01b      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000ebe:	bf00      	nop
 8000ec0:	58000080 	.word	0x58000080
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58000400 	.word	0x58000400
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	58020400 	.word	0x58020400
 8000ed4:	58020800 	.word	0x58020800
 8000ed8:	58020c00 	.word	0x58020c00
 8000edc:	58021000 	.word	0x58021000
 8000ee0:	58021400 	.word	0x58021400
 8000ee4:	58021800 	.word	0x58021800
 8000ee8:	58021c00 	.word	0x58021c00
 8000eec:	58022000 	.word	0x58022000
 8000ef0:	58022400 	.word	0x58022400
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	f002 0203 	and.w	r2, r2, #3
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4093      	lsls	r3, r2
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f06:	4938      	ldr	r1, [pc, #224]	; (8000fe8 <HAL_GPIO_Init+0x35c>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f47f ae63 	bne.w	8000ca0 <HAL_GPIO_Init+0x14>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3724      	adds	r7, #36	; 0x24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	58000400 	.word	0x58000400

08000fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b08f      	sub	sp, #60	; 0x3c
 8000ff0:	af0a      	add	r7, sp, #40	; 0x28
 8000ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e116      	b.n	800122c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d106      	bne.n	800101e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f00c fcff 	bl	800da1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f007 fac8 	bl	80085d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	687e      	ldr	r6, [r7, #4]
 800104a:	466d      	mov	r5, sp
 800104c:	f106 0410 	add.w	r4, r6, #16
 8001050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001060:	1d33      	adds	r3, r6, #4
 8001062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f007 f993 	bl	8008390 <USB_CoreInit>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0d7      	b.n	800122c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f007 fab6 	bl	80085f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e04a      	b.n	8001124 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	333d      	adds	r3, #61	; 0x3d
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	333c      	adds	r3, #60	; 0x3c
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	b298      	uxth	r0, r3
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	3344      	adds	r3, #68	; 0x44
 80010ca:	4602      	mov	r2, r0
 80010cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	3340      	adds	r3, #64	; 0x40
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	3348      	adds	r3, #72	; 0x48
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	334c      	adds	r3, #76	; 0x4c
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	3354      	adds	r3, #84	; 0x54
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	3301      	adds	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3af      	bcc.n	800108e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e044      	b.n	80011be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3301      	adds	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3b5      	bcc.n	8001134 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	687e      	ldr	r6, [r7, #4]
 80011d0:	466d      	mov	r5, sp
 80011d2:	f106 0410 	add.w	r4, r6, #16
 80011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e6:	1d33      	adds	r3, r6, #4
 80011e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ea:	6838      	ldr	r0, [r7, #0]
 80011ec:	f007 fa4e 	bl	800868c <USB_DevInit>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2202      	movs	r2, #2
 80011fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e014      	b.n	800122c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2b01      	cmp	r3, #1
 8001218:	d102      	bne.n	8001220 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f001 f9b8 	bl	8002590 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f008 fb9c 	bl	8009962 <USB_DevDisconnect>

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001234 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_PCD_Start+0x1c>
 800124c:	2302      	movs	r3, #2
 800124e:	e020      	b.n	8001292 <HAL_PCD_Start+0x5e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	2b01      	cmp	r3, #1
 800125e:	d109      	bne.n	8001274 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f007 f999 	bl	80085b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f008 fb4c 	bl	8009920 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800129a:	b590      	push	{r4, r7, lr}
 800129c:	b08d      	sub	sp, #52	; 0x34
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f008 fc0a 	bl	8009aca <USB_GetMode>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f040 84b7 	bne.w	8001c2c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f008 fb6e 	bl	80099a4 <USB_ReadInterrupts>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 84ad 	beq.w	8001c2a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f008 fb5b 	bl	80099a4 <USB_ReadInterrupts>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d107      	bne.n	8001308 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f002 0202 	and.w	r2, r2, #2
 8001306:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f008 fb49 	bl	80099a4 <USB_ReadInterrupts>
 8001312:	4603      	mov	r3, r0
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	2b10      	cmp	r3, #16
 800131a:	d161      	bne.n	80013e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0210 	bic.w	r2, r2, #16
 800132a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	f003 020f 	and.w	r2, r3, #15
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	3304      	adds	r3, #4
 800134a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	0c5b      	lsrs	r3, r3, #17
 8001350:	f003 030f 	and.w	r3, r3, #15
 8001354:	2b02      	cmp	r3, #2
 8001356:	d124      	bne.n	80013a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d035      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800136e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001372:	b29b      	uxth	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	6a38      	ldr	r0, [r7, #32]
 8001378:	f008 f980 	bl	800967c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001388:	441a      	add	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139a:	441a      	add	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	e016      	b.n	80013d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	0c5b      	lsrs	r3, r3, #17
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d110      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013b4:	2208      	movs	r2, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	6a38      	ldr	r0, [r7, #32]
 80013ba:	f008 f95f 	bl	800967c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ca:	441a      	add	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0210 	orr.w	r2, r2, #16
 80013de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f008 fadd 	bl	80099a4 <USB_ReadInterrupts>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013f4:	f040 80a7 	bne.w	8001546 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f008 fae2 	bl	80099ca <USB_ReadDevAllOutEpInterrupt>
 8001406:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001408:	e099      	b.n	800153e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 808e 	beq.w	8001532 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f008 fb06 	bl	8009a32 <USB_ReadDevOutEPInterrupt>
 8001426:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00c      	beq.n	800144c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	015a      	lsls	r2, r3, #5
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4413      	add	r3, r2
 800143a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143e:	461a      	mov	r2, r3
 8001440:	2301      	movs	r3, #1
 8001442:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 ff1c 	bl	8002284 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00c      	beq.n	8001470 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	015a      	lsls	r2, r3, #5
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001462:	461a      	mov	r2, r3
 8001464:	2308      	movs	r3, #8
 8001466:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fff2 	bl	8002454 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001486:	461a      	mov	r2, r3
 8001488:	2310      	movs	r3, #16
 800148a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d030      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	2b80      	cmp	r3, #128	; 0x80
 80014a0:	d109      	bne.n	80014b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d108      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2200      	movs	r2, #0
 80014d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f00c fbbf 	bl	800dc64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2302      	movs	r3, #2
 80014f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	015a      	lsls	r2, r3, #5
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150e:	461a      	mov	r2, r3
 8001510:	2320      	movs	r3, #32
 8001512:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152a:	461a      	mov	r2, r3
 800152c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001530:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3301      	adds	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	2b00      	cmp	r3, #0
 8001542:	f47f af62 	bne.w	800140a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f008 fa2a 	bl	80099a4 <USB_ReadInterrupts>
 8001550:	4603      	mov	r3, r0
 8001552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001556:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800155a:	f040 80db 	bne.w	8001714 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f008 fa4b 	bl	80099fe <USB_ReadDevAllInEpInterrupt>
 8001568:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800156e:	e0cd      	b.n	800170c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80c2 	beq.w	8001700 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f008 fa71 	bl	8009a6e <USB_ReadDevInEPInterrupt>
 800158c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d057      	beq.n	8001648 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	2201      	movs	r2, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69f9      	ldr	r1, [r7, #28]
 80015b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015b8:	4013      	ands	r3, r2
 80015ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c8:	461a      	mov	r2, r3
 80015ca:	2301      	movs	r3, #1
 80015cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d132      	bne.n	800163c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	334c      	adds	r3, #76	; 0x4c
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4403      	add	r3, r0
 80015f6:	3348      	adds	r3, #72	; 0x48
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4419      	add	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4403      	add	r3, r0
 800160a:	334c      	adds	r3, #76	; 0x4c
 800160c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	2b00      	cmp	r3, #0
 8001612:	d113      	bne.n	800163c <HAL_PCD_IRQHandler+0x3a2>
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3354      	adds	r3, #84	; 0x54
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001634:	461a      	mov	r2, r3
 8001636:	2101      	movs	r1, #1
 8001638:	f008 fa7a 	bl	8009b30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f00c fa89 	bl	800db5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165e:	461a      	mov	r2, r3
 8001660:	2308      	movs	r3, #8
 8001662:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167a:	461a      	mov	r2, r3
 800167c:	2310      	movs	r3, #16
 800167e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001696:	461a      	mov	r2, r3
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d023      	beq.n	80016ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a8:	6a38      	ldr	r0, [r7, #32]
 80016aa:	f007 f94d 	bl	8008948 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	3338      	adds	r3, #56	; 0x38
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	3304      	adds	r3, #4
 80016c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2200      	movs	r2, #0
 80016ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f00c fad6 	bl	800dc88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e8:	461a      	mov	r2, r3
 80016ea:	2302      	movs	r3, #2
 80016ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fd35 	bl	800216a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3301      	adds	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	f47f af2e 	bne.w	8001570 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f008 f943 	bl	80099a4 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001728:	d122      	bne.n	8001770 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001750:	2100      	movs	r1, #0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 ff40 	bl	80025d8 <HAL_PCDEx_LPM_Callback>
 8001758:	e002      	b.n	8001760 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f00c fa74 	bl	800dc48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800176e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f008 f915 	bl	80099a4 <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001784:	d112      	bne.n	80017ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	d102      	bne.n	800179c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f00c fa30 	bl	800dbfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f008 f8f7 	bl	80099a4 <USB_ReadInterrupts>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017c0:	d121      	bne.n	8001806 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017d0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d111      	bne.n	8001800 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	f003 020f 	and.w	r2, r3, #15
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017f6:	2101      	movs	r1, #1
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 feed 	bl	80025d8 <HAL_PCDEx_LPM_Callback>
 80017fe:	e002      	b.n	8001806 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f00c f9fb 	bl	800dbfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f008 f8ca 	bl	80099a4 <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800181a:	f040 80b7 	bne.w	800198c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2110      	movs	r1, #16
 8001838:	4618      	mov	r0, r3
 800183a:	f007 f885 	bl	8008948 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001842:	e046      	b.n	80018d2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	015a      	lsls	r2, r3, #5
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001850:	461a      	mov	r2, r3
 8001852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001856:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001868:	0151      	lsls	r1, r2, #5
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	440a      	add	r2, r1
 800186e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001876:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001884:	461a      	mov	r2, r3
 8001886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800188a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	4413      	add	r3, r2
 8001894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189c:	0151      	lsls	r1, r2, #5
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	440a      	add	r2, r1
 80018a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ae:	015a      	lsls	r2, r3, #5
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018bc:	0151      	lsls	r1, r2, #5
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	440a      	add	r2, r1
 80018c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	3301      	adds	r3, #1
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3b3      	bcc.n	8001844 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d016      	beq.n	8001926 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001908:	f043 030b 	orr.w	r3, r3, #11
 800190c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191e:	f043 030b 	orr.w	r3, r3, #11
 8001922:	6453      	str	r3, [r2, #68]	; 0x44
 8001924:	e015      	b.n	8001952 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001934:	4619      	mov	r1, r3
 8001936:	f242 032b 	movw	r3, #8235	; 0x202b
 800193a:	4313      	orrs	r3, r2
 800193c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194c:	f043 030b 	orr.w	r3, r3, #11
 8001950:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001960:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001964:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001976:	461a      	mov	r2, r3
 8001978:	f008 f8da 	bl	8009b30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800198a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f008 f807 	bl	80099a4 <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a0:	d124      	bne.n	80019ec <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f008 f89e 	bl	8009ae8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f007 f846 	bl	8008a42 <USB_GetDevSpeed>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681c      	ldr	r4, [r3, #0]
 80019c2:	f001 fdcd 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80019c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	4620      	mov	r0, r4
 80019d2:	f006 fd4b 	bl	800846c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f00c f8e7 	bl	800dbaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f007 ffd7 	bl	80099a4 <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d10a      	bne.n	8001a16 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f00c f8c4 	bl	800db8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f002 0208 	and.w	r2, r2, #8
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f007 ffc2 	bl	80099a4 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b80      	cmp	r3, #128	; 0x80
 8001a28:	d122      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a36:	2301      	movs	r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	e014      	b.n	8001a66 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fb27 	bl	80020ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3301      	adds	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d3e5      	bcc.n	8001a3c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f007 ff95 	bl	80099a4 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a84:	d13b      	bne.n	8001afe <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a86:	2301      	movs	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	e02b      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3340      	adds	r3, #64	; 0x40
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d115      	bne.n	8001ade <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ab2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da12      	bge.n	8001ade <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	333f      	adds	r3, #63	; 0x3f
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fae8 	bl	80020ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3ce      	bcc.n	8001a8c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f007 ff4e 	bl	80099a4 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b12:	d155      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b14:	2301      	movs	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
 8001b18:	e045      	b.n	8001ba6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d12e      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da2b      	bge.n	8001ba0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d121      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10a      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9c:	6053      	str	r3, [r2, #4]
            break;
 8001b9e:	e007      	b.n	8001bb0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d3b4      	bcc.n	8001b1a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f007 feed 	bl	80099a4 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d10a      	bne.n	8001bec <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f00c f868 	bl	800dcac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f007 fed7 	bl	80099a4 <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d115      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f00c f858 	bl	800dcc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	e000      	b.n	8001c2c <HAL_PCD_IRQHandler+0x992>
      return;
 8001c2a:	bf00      	nop
    }
  }
}
 8001c2c:	3734      	adds	r7, #52	; 0x34
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}

08001c32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_PCD_SetAddress+0x1a>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e013      	b.n	8001c74 <HAL_PCD_SetAddress+0x42>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f007 fe35 	bl	80098d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	70fb      	strb	r3, [r7, #3]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	803b      	strh	r3, [r7, #0]
 8001c92:	4613      	mov	r3, r2
 8001c94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	da0f      	bge.n	8001cc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 020f 	and.w	r2, r3, #15
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	3338      	adds	r3, #56	; 0x38
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	705a      	strb	r2, [r3, #1]
 8001cc0:	e00f      	b.n	8001ce2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	f003 020f 	and.w	r2, r3, #15
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3304      	adds	r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cee:	883a      	ldrh	r2, [r7, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	78ba      	ldrb	r2, [r7, #2]
 8001cf8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	785b      	ldrb	r3, [r3, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d004      	beq.n	8001d0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d0c:	78bb      	ldrb	r3, [r7, #2]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d102      	bne.n	8001d18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_PCD_EP_Open+0xaa>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e00e      	b.n	8001d44 <HAL_PCD_EP_Open+0xc8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68f9      	ldr	r1, [r7, #12]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f006 fea9 	bl	8008a8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d42:	7afb      	ldrb	r3, [r7, #11]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da0f      	bge.n	8001d80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 020f 	and.w	r2, r3, #15
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	3338      	adds	r3, #56	; 0x38
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	705a      	strb	r2, [r3, #1]
 8001d7e:	e00f      	b.n	8001da0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	3304      	adds	r3, #4
 8001d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_PCD_EP_Close+0x6e>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e00e      	b.n	8001dd8 <HAL_PCD_EP_Close+0x8c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68f9      	ldr	r1, [r7, #12]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f006 fee7 	bl	8008b9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	460b      	mov	r3, r1
 8001dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df0:	7afb      	ldrb	r3, [r7, #11]
 8001df2:	f003 020f 	and.w	r2, r3, #15
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	3304      	adds	r3, #4
 8001e08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e22:	7afb      	ldrb	r3, [r7, #11]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	6979      	ldr	r1, [r7, #20]
 8001e54:	f007 f9ce 	bl	80091f4 <USB_EP0StartXfer>
 8001e58:	e008      	b.n	8001e6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	6979      	ldr	r1, [r7, #20]
 8001e68:	f006 ff74 	bl	8008d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 020f 	and.w	r2, r3, #15
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e98:	681b      	ldr	r3, [r3, #0]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	f003 020f 	and.w	r2, r3, #15
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	3338      	adds	r3, #56	; 0x38
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	3304      	adds	r3, #4
 8001ecc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f00:	7afb      	ldrb	r3, [r7, #11]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	6979      	ldr	r1, [r7, #20]
 8001f18:	f007 f96c 	bl	80091f4 <USB_EP0StartXfer>
 8001f1c:	e008      	b.n	8001f30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6979      	ldr	r1, [r7, #20]
 8001f2c:	f006 ff12 	bl	8008d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 020f 	and.w	r2, r3, #15
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d901      	bls.n	8001f58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e050      	b.n	8001ffa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da0f      	bge.n	8001f80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	3338      	adds	r3, #56	; 0x38
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	3304      	adds	r3, #4
 8001f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	705a      	strb	r2, [r3, #1]
 8001f7e:	e00d      	b.n	8001f9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_PCD_EP_SetStall+0x82>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e01e      	b.n	8001ffa <HAL_PCD_EP_SetStall+0xc0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f007 fbae 	bl	800972c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	b2d9      	uxtb	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fea:	461a      	mov	r2, r3
 8001fec:	f007 fda0 	bl	8009b30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	f003 020f 	and.w	r2, r3, #15
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	d901      	bls.n	8002020 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e042      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002024:	2b00      	cmp	r3, #0
 8002026:	da0f      	bge.n	8002048 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3338      	adds	r3, #56	; 0x38
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	705a      	strb	r2, [r3, #1]
 8002046:	e00f      	b.n	8002068 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_EP_ClrStall+0x86>
 8002084:	2302      	movs	r3, #2
 8002086:	e00e      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	4618      	mov	r0, r3
 8002098:	f007 fbb6 	bl	8009808 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da0c      	bge.n	80020dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	f003 020f 	and.w	r2, r3, #15
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	3338      	adds	r3, #56	; 0x38
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	3304      	adds	r3, #4
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e00c      	b.n	80020f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	3304      	adds	r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68f9      	ldr	r1, [r7, #12]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f007 f9d5 	bl	80094ac <USB_EPStopXfer>
 8002102:	4603      	mov	r3, r0
 8002104:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002106:	7afb      	ldrb	r3, [r7, #11]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_PCD_EP_Flush+0x1a>
 8002126:	2302      	movs	r3, #2
 8002128:	e01b      	b.n	8002162 <HAL_PCD_EP_Flush+0x52>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002136:	2b00      	cmp	r3, #0
 8002138:	da09      	bge.n	800214e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f006 fbfe 	bl	8008948 <USB_FlushTxFifo>
 800214c:	e004      	b.n	8002158 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f006 fc2c 	bl	80089b0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b08a      	sub	sp, #40	; 0x28
 800216e:	af02      	add	r7, sp, #8
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3338      	adds	r3, #56	; 0x38
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a1a      	ldr	r2, [r3, #32]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	429a      	cmp	r2, r3
 800219c:	d901      	bls.n	80021a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06c      	b.n	800227c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d902      	bls.n	80021be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3303      	adds	r3, #3
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021c6:	e02b      	b.n	8002220 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d902      	bls.n	80021e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	3303      	adds	r3, #3
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6919      	ldr	r1, [r3, #16]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	4603      	mov	r3, r0
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f007 f9fc 	bl	8009600 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	441a      	add	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	441a      	add	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	b29b      	uxth	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	429a      	cmp	r2, r3
 8002234:	d809      	bhi.n	800224a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a1a      	ldr	r2, [r3, #32]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800223e:	429a      	cmp	r2, r3
 8002240:	d203      	bcs.n	800224a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1be      	bne.n	80021c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	429a      	cmp	r2, r3
 8002254:	d811      	bhi.n	800227a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	2201      	movs	r2, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800226a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	43db      	mvns	r3, r3
 8002270:	6939      	ldr	r1, [r7, #16]
 8002272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002276:	4013      	ands	r3, r2
 8002278:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	333c      	adds	r3, #60	; 0x3c
 800229c:	3304      	adds	r3, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d17b      	bne.n	80023b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d015      	beq.n	80022f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	4a61      	ldr	r2, [pc, #388]	; (800244c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	f240 80b9 	bls.w	8002440 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80b3 	beq.w	8002440 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e6:	461a      	mov	r2, r3
 80022e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ec:	6093      	str	r3, [r2, #8]
 80022ee:	e0a7      	b.n	8002440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002306:	461a      	mov	r2, r3
 8002308:	2320      	movs	r3, #32
 800230a:	6093      	str	r3, [r2, #8]
 800230c:	e098      	b.n	8002440 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 8093 	bne.w	8002440 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4a4b      	ldr	r2, [pc, #300]	; (800244c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d90f      	bls.n	8002342 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002338:	461a      	mov	r2, r3
 800233a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233e:	6093      	str	r3, [r2, #8]
 8002340:	e07e      	b.n	8002440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	0159      	lsls	r1, r3, #5
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	440b      	add	r3, r1
 8002364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236e:	1ad2      	subs	r2, r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d114      	bne.n	80023a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800238c:	461a      	mov	r2, r3
 800238e:	2101      	movs	r1, #1
 8002390:	f007 fbce 	bl	8009b30 <USB_EP0_OutStart>
 8002394:	e006      	b.n	80023a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	441a      	add	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f00b fbba 	bl	800db24 <HAL_PCD_DataOutStageCallback>
 80023b0:	e046      	b.n	8002440 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4a26      	ldr	r2, [pc, #152]	; (8002450 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d124      	bne.n	8002404 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d6:	6093      	str	r3, [r2, #8]
 80023d8:	e032      	b.n	8002440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f0:	461a      	mov	r2, r3
 80023f2:	2320      	movs	r3, #32
 80023f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f00b fb91 	bl	800db24 <HAL_PCD_DataOutStageCallback>
 8002402:	e01d      	b.n	8002440 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d114      	bne.n	8002434 <PCD_EP_OutXfrComplete_int+0x1b0>
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d108      	bne.n	8002434 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800242c:	461a      	mov	r2, r3
 800242e:	2100      	movs	r1, #0
 8002430:	f007 fb7e 	bl	8009b30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4619      	mov	r1, r3
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f00b fb72 	bl	800db24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3720      	adds	r7, #32
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	4f54300a 	.word	0x4f54300a
 8002450:	4f54310a 	.word	0x4f54310a

08002454 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	333c      	adds	r3, #60	; 0x3c
 800246c:	3304      	adds	r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a15      	ldr	r2, [pc, #84]	; (80024dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d90e      	bls.n	80024a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a0:	461a      	mov	r2, r3
 80024a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f00b fb29 	bl	800db00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <PCD_EP_OutSetupPacket_int+0x88>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d90c      	bls.n	80024d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d108      	bne.n	80024d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024c8:	461a      	mov	r2, r3
 80024ca:	2101      	movs	r1, #1
 80024cc:	f007 fb30 	bl	8009b30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	4f54300a 	.word	0x4f54300a

080024e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
 80024ec:	4613      	mov	r3, r2
 80024ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024fe:	883b      	ldrh	r3, [r7, #0]
 8002500:	0419      	lsls	r1, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	430a      	orrs	r2, r1
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
 800250c:	e028      	b.n	8002560 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4413      	add	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	e00d      	b.n	800253e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3340      	adds	r3, #64	; 0x40
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4413      	add	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	3b01      	subs	r3, #1
 8002544:	429a      	cmp	r2, r3
 8002546:	d3ec      	bcc.n	8002522 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002548:	883b      	ldrh	r3, [r7, #0]
 800254a:	0418      	lsls	r0, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	3b01      	subs	r3, #1
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	4302      	orrs	r2, r0
 8002558:	3340      	adds	r3, #64	; 0x40
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	10000003 	.word	0x10000003

080025d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d00a      	beq.n	800261a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e01f      	b.n	8002656 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e01d      	b.n	8002656 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	490f      	ldr	r1, [pc, #60]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4313      	orrs	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800262a:	f7fe f9e3 	bl	80009f4 <HAL_GetTick>
 800262e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002630:	e009      	b.n	8002646 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002632:	f7fe f9df 	bl	80009f4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002640:	d901      	bls.n	8002646 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e007      	b.n	8002656 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_PWREx_ConfigSupply+0x70>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002652:	d1ee      	bne.n	8002632 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	58024800 	.word	0x58024800

08002664 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800266e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	58024800 	.word	0x58024800

08002684 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f000 bc1d 	b.w	8002ed2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8087 	beq.w	80027b4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a6:	4b99      	ldr	r3, [pc, #612]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026b0:	4b96      	ldr	r3, [pc, #600]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d007      	beq.n	80026cc <HAL_RCC_OscConfig+0x48>
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	2b18      	cmp	r3, #24
 80026c0:	d110      	bne.n	80026e4 <HAL_RCC_OscConfig+0x60>
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d10b      	bne.n	80026e4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	4b8f      	ldr	r3, [pc, #572]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d06c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x12e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d168      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e3f6      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ec:	d106      	bne.n	80026fc <HAL_RCC_OscConfig+0x78>
 80026ee:	4b87      	ldr	r3, [pc, #540]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a86      	ldr	r2, [pc, #536]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e02e      	b.n	800275a <HAL_RCC_OscConfig+0xd6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x9a>
 8002704:	4b81      	ldr	r3, [pc, #516]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a80      	ldr	r2, [pc, #512]	; (800290c <HAL_RCC_OscConfig+0x288>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b7e      	ldr	r3, [pc, #504]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a7d      	ldr	r2, [pc, #500]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e01d      	b.n	800275a <HAL_RCC_OscConfig+0xd6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0xbe>
 8002728:	4b78      	ldr	r3, [pc, #480]	; (800290c <HAL_RCC_OscConfig+0x288>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a77      	ldr	r2, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x288>)
 800272e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b75      	ldr	r3, [pc, #468]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a74      	ldr	r2, [pc, #464]	; (800290c <HAL_RCC_OscConfig+0x288>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0xd6>
 8002742:	4b72      	ldr	r3, [pc, #456]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a71      	ldr	r2, [pc, #452]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d013      	beq.n	800278a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe f947 	bl	80009f4 <HAL_GetTick>
 8002766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276a:	f7fe f943 	bl	80009f4 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e3aa      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800277c:	4b63      	ldr	r3, [pc, #396]	; (800290c <HAL_RCC_OscConfig+0x288>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0xe6>
 8002788:	e014      	b.n	80027b4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe f933 	bl	80009f4 <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002792:	f7fe f92f 	bl	80009f4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	; 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e396      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027a4:	4b59      	ldr	r3, [pc, #356]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x10e>
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80cb 	beq.w	8002958 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c2:	4b52      	ldr	r3, [pc, #328]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027cc:	4b4f      	ldr	r3, [pc, #316]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_RCC_OscConfig+0x164>
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	2b18      	cmp	r3, #24
 80027dc:	d156      	bne.n	800288c <HAL_RCC_OscConfig+0x208>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d151      	bne.n	800288c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e8:	4b48      	ldr	r3, [pc, #288]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x17c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e368      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002800:	4b42      	ldr	r3, [pc, #264]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 0219 	bic.w	r2, r3, #25
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	493f      	ldr	r1, [pc, #252]	; (800290c <HAL_RCC_OscConfig+0x288>)
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002812:	f7fe f8ef 	bl	80009f4 <HAL_GetTick>
 8002816:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281a:	f7fe f8eb 	bl	80009f4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e352      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800282c:	4b37      	ldr	r3, [pc, #220]	; (800290c <HAL_RCC_OscConfig+0x288>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002838:	f7fe f90c 	bl	8000a54 <HAL_GetREVID>
 800283c:	4603      	mov	r3, r0
 800283e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002842:	4293      	cmp	r3, r2
 8002844:	d817      	bhi.n	8002876 <HAL_RCC_OscConfig+0x1f2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x1dc>
 800284e:	4b2f      	ldr	r3, [pc, #188]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002856:	4a2d      	ldr	r2, [pc, #180]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800285e:	e07b      	b.n	8002958 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	031b      	lsls	r3, r3, #12
 800286e:	4927      	ldr	r1, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002874:	e070      	b.n	8002958 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	4921      	ldr	r1, [pc, #132]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288a:	e065      	b.n	8002958 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d048      	beq.n	8002926 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 0219 	bic.w	r2, r3, #25
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	491a      	ldr	r1, [pc, #104]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe f8a5 	bl	80009f4 <HAL_GetTick>
 80028aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe f8a1 	bl	80009f4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e308      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	f7fe f8c2 	bl	8000a54 <HAL_GetREVID>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d81a      	bhi.n	8002910 <HAL_RCC_OscConfig+0x28c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d108      	bne.n	80028f4 <HAL_RCC_OscConfig+0x270>
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80028ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f0:	6053      	str	r3, [r2, #4]
 80028f2:	e031      	b.n	8002958 <HAL_RCC_OscConfig+0x2d4>
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_OscConfig+0x288>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	031b      	lsls	r3, r3, #12
 8002902:	4902      	ldr	r1, [pc, #8]	; (800290c <HAL_RCC_OscConfig+0x288>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
 8002908:	e026      	b.n	8002958 <HAL_RCC_OscConfig+0x2d4>
 800290a:	bf00      	nop
 800290c:	58024400 	.word	0x58024400
 8002910:	4b9a      	ldr	r3, [pc, #616]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	4997      	ldr	r1, [pc, #604]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
 8002924:	e018      	b.n	8002958 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002926:	4b95      	ldr	r3, [pc, #596]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a94      	ldr	r2, [pc, #592]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fe f85f 	bl	80009f4 <HAL_GetTick>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe f85b 	bl	80009f4 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e2c2      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800294c:	4b8b      	ldr	r3, [pc, #556]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f0      	bne.n	800293a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a9 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002966:	4b85      	ldr	r3, [pc, #532]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800296e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002970:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d007      	beq.n	800298c <HAL_RCC_OscConfig+0x308>
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b18      	cmp	r3, #24
 8002980:	d13a      	bne.n	80029f8 <HAL_RCC_OscConfig+0x374>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d135      	bne.n	80029f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800298c:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_OscConfig+0x320>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e296      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029a4:	f7fe f856 	bl	8000a54 <HAL_GetREVID>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d817      	bhi.n	80029e2 <HAL_RCC_OscConfig+0x35e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d108      	bne.n	80029cc <HAL_RCC_OscConfig+0x348>
 80029ba:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029c2:	4a6e      	ldr	r2, [pc, #440]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ca:	e075      	b.n	8002ab8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029cc:	4b6b      	ldr	r3, [pc, #428]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	069b      	lsls	r3, r3, #26
 80029da:	4968      	ldr	r1, [pc, #416]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029e0:	e06a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e2:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	061b      	lsls	r3, r3, #24
 80029f0:	4962      	ldr	r1, [pc, #392]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029f6:	e05f      	b.n	8002ab8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d042      	beq.n	8002a86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a00:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fd fff2 	bl	80009f4 <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a14:	f7fd ffee 	bl	80009f4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e255      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a26:	4b55      	ldr	r3, [pc, #340]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a32:	f7fe f80f 	bl	8000a54 <HAL_GetREVID>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d817      	bhi.n	8002a70 <HAL_RCC_OscConfig+0x3ec>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d108      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3d6>
 8002a48:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a50:	4a4a      	ldr	r2, [pc, #296]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a56:	6053      	str	r3, [r2, #4]
 8002a58:	e02e      	b.n	8002ab8 <HAL_RCC_OscConfig+0x434>
 8002a5a:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	069b      	lsls	r3, r3, #26
 8002a68:	4944      	ldr	r1, [pc, #272]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
 8002a6e:	e023      	b.n	8002ab8 <HAL_RCC_OscConfig+0x434>
 8002a70:	4b42      	ldr	r3, [pc, #264]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	493f      	ldr	r1, [pc, #252]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60cb      	str	r3, [r1, #12]
 8002a84:	e018      	b.n	8002ab8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a86:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3c      	ldr	r2, [pc, #240]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7fd ffaf 	bl	80009f4 <HAL_GetTick>
 8002a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a9a:	f7fd ffab 	bl	80009f4 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e212      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002aac:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d036      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d019      	beq.n	8002b00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002acc:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fd ff8c 	bl	80009f4 <HAL_GetTick>
 8002adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7fd ff88 	bl	80009f4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e1ef      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x45c>
 8002afe:	e018      	b.n	8002b32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fd ff72 	bl	80009f4 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b14:	f7fd ff6e 	bl	80009f4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1d5      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d039      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b52:	f7fd ff4f 	bl	80009f4 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b5a:	f7fd ff4b 	bl	80009f4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e1b2      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCC_OscConfig+0x4f8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4d6>
 8002b78:	e01b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x52e>
 8002b7a:	bf00      	nop
 8002b7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b80:	4b9b      	ldr	r3, [pc, #620]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a9a      	ldr	r2, [pc, #616]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b8c:	f7fd ff32 	bl	80009f4 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b94:	f7fd ff2e 	bl	80009f4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e195      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ba6:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8081 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bc0:	4b8c      	ldr	r3, [pc, #560]	; (8002df4 <HAL_RCC_OscConfig+0x770>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a8b      	ldr	r2, [pc, #556]	; (8002df4 <HAL_RCC_OscConfig+0x770>)
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bcc:	f7fd ff12 	bl	80009f4 <HAL_GetTick>
 8002bd0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7fd ff0e 	bl	80009f4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e175      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002be6:	4b83      	ldr	r3, [pc, #524]	; (8002df4 <HAL_RCC_OscConfig+0x770>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x584>
 8002bfa:	4b7d      	ldr	r3, [pc, #500]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a7c      	ldr	r2, [pc, #496]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
 8002c06:	e02d      	b.n	8002c64 <HAL_RCC_OscConfig+0x5e0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10c      	bne.n	8002c2a <HAL_RCC_OscConfig+0x5a6>
 8002c10:	4b77      	ldr	r3, [pc, #476]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a76      	ldr	r2, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	4b74      	ldr	r3, [pc, #464]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a73      	ldr	r2, [pc, #460]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	e01c      	b.n	8002c64 <HAL_RCC_OscConfig+0x5e0>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x5c8>
 8002c32:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a6b      	ldr	r2, [pc, #428]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x5e0>
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a67      	ldr	r2, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
 8002c58:	4b65      	ldr	r3, [pc, #404]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	4a64      	ldr	r2, [pc, #400]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c5e:	f023 0304 	bic.w	r3, r3, #4
 8002c62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fd fec2 	bl	80009f4 <HAL_GetTick>
 8002c70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fd febe 	bl	80009f4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e123      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c8a:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ee      	beq.n	8002c74 <HAL_RCC_OscConfig+0x5f0>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fd feac 	bl	80009f4 <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fd fea8 	bl	80009f4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e10d      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ee      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8102 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ccc:	4b48      	ldr	r3, [pc, #288]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cd4:	2b18      	cmp	r3, #24
 8002cd6:	f000 80bd 	beq.w	8002e54 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	f040 809e 	bne.w	8002e20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a41      	ldr	r2, [pc, #260]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fd fe80 	bl	80009f4 <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fd fe7c 	bl	80009f4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0e3      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d0a:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d16:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d1a:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <HAL_RCC_OscConfig+0x774>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	4931      	ldr	r1, [pc, #196]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	628b      	str	r3, [r1, #40]	; 0x28
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	3b01      	subs	r3, #1
 8002d36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	025b      	lsls	r3, r3, #9
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d60:	4923      	ldr	r1, [pc, #140]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <HAL_RCC_OscConfig+0x778>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d7e:	00d2      	lsls	r2, r2, #3
 8002d80:	491b      	ldr	r1, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	f023 020c 	bic.w	r2, r3, #12
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4917      	ldr	r1, [pc, #92]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	f023 0202 	bic.w	r2, r3, #2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	4912      	ldr	r1, [pc, #72]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_RCC_OscConfig+0x76c>)
 8002de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fd fe05 	bl	80009f4 <HAL_GetTick>
 8002dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dec:	e011      	b.n	8002e12 <HAL_RCC_OscConfig+0x78e>
 8002dee:	bf00      	nop
 8002df0:	58024400 	.word	0x58024400
 8002df4:	58024800 	.word	0x58024800
 8002df8:	fffffc0c 	.word	0xfffffc0c
 8002dfc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fd fdf8 	bl	80009f4 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e05f      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e12:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_RCC_OscConfig+0x858>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x77c>
 8002e1e:	e057      	b.n	8002ed0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HAL_RCC_OscConfig+0x858>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a2d      	ldr	r2, [pc, #180]	; (8002edc <HAL_RCC_OscConfig+0x858>)
 8002e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fd fde2 	bl	80009f4 <HAL_GetTick>
 8002e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fd fdde 	bl	80009f4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e045      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_RCC_OscConfig+0x858>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x7b0>
 8002e52:	e03d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e54:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x858>)
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_RCC_OscConfig+0x858>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d031      	beq.n	8002ecc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f003 0203 	and.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d12a      	bne.n	8002ecc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d122      	bne.n	8002ecc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d11a      	bne.n	8002ecc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	0a5b      	lsrs	r3, r3, #9
 8002e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d111      	bne.n	8002ecc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d108      	bne.n	8002ecc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	0e1b      	lsrs	r3, r3, #24
 8002ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3730      	adds	r7, #48	; 0x30
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	58024400 	.word	0x58024400

08002ee0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e19c      	b.n	800322e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b8a      	ldr	r3, [pc, #552]	; (8003120 <HAL_RCC_ClockConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d910      	bls.n	8002f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b87      	ldr	r3, [pc, #540]	; (8003120 <HAL_RCC_ClockConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 020f 	bic.w	r2, r3, #15
 8002f0a:	4985      	ldr	r1, [pc, #532]	; (8003120 <HAL_RCC_ClockConfig+0x240>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b83      	ldr	r3, [pc, #524]	; (8003120 <HAL_RCC_ClockConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e184      	b.n	800322e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d010      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d908      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	4975      	ldr	r1, [pc, #468]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d010      	beq.n	8002f80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	4b70      	ldr	r3, [pc, #448]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d908      	bls.n	8002f80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	496a      	ldr	r1, [pc, #424]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	4b64      	ldr	r3, [pc, #400]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d908      	bls.n	8002fae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f9c:	4b61      	ldr	r3, [pc, #388]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	495e      	ldr	r1, [pc, #376]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d908      	bls.n	8002fdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fca:	4b56      	ldr	r3, [pc, #344]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4953      	ldr	r1, [pc, #332]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d010      	beq.n	800300a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d908      	bls.n	800300a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b4a      	ldr	r3, [pc, #296]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f023 020f 	bic.w	r2, r3, #15
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4947      	ldr	r1, [pc, #284]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8003006:	4313      	orrs	r3, r2
 8003008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d055      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003016:	4b43      	ldr	r3, [pc, #268]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4940      	ldr	r1, [pc, #256]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8003024:	4313      	orrs	r3, r2
 8003026:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d107      	bne.n	8003040 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003030:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d121      	bne.n	8003080 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0f6      	b.n	800322e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d107      	bne.n	8003058 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003048:	4b36      	ldr	r3, [pc, #216]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d115      	bne.n	8003080 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0ea      	b.n	800322e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0de      	b.n	800322e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003070:	4b2c      	ldr	r3, [pc, #176]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0d6      	b.n	800322e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003080:	4b28      	ldr	r3, [pc, #160]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f023 0207 	bic.w	r2, r3, #7
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4925      	ldr	r1, [pc, #148]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 800308e:	4313      	orrs	r3, r2
 8003090:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003092:	f7fd fcaf 	bl	80009f4 <HAL_GetTick>
 8003096:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309a:	f7fd fcab 	bl	80009f4 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0be      	b.n	800322e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	429a      	cmp	r2, r3
 80030c0:	d1eb      	bne.n	800309a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d010      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	429a      	cmp	r2, r3
 80030dc:	d208      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f023 020f 	bic.w	r2, r3, #15
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	490e      	ldr	r1, [pc, #56]	; (8003124 <HAL_RCC_ClockConfig+0x244>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_ClockConfig+0x240>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d214      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_RCC_ClockConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 020f 	bic.w	r2, r3, #15
 8003106:	4906      	ldr	r1, [pc, #24]	; (8003120 <HAL_RCC_ClockConfig+0x240>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <HAL_RCC_ClockConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e086      	b.n	800322e <HAL_RCC_ClockConfig+0x34e>
 8003120:	52002000 	.word	0x52002000
 8003124:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003140:	429a      	cmp	r2, r3
 8003142:	d208      	bcs.n	8003156 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003144:	4b3c      	ldr	r3, [pc, #240]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	4939      	ldr	r1, [pc, #228]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 8003152:	4313      	orrs	r3, r2
 8003154:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800316e:	429a      	cmp	r2, r3
 8003170:	d208      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	492e      	ldr	r1, [pc, #184]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 8003180:	4313      	orrs	r3, r2
 8003182:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800319c:	429a      	cmp	r2, r3
 800319e:	d208      	bcs.n	80031b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4922      	ldr	r1, [pc, #136]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d010      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d208      	bcs.n	80031e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	4917      	ldr	r1, [pc, #92]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031e0:	f000 f844 	bl	800326c <HAL_RCC_GetSysClockFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	4912      	ldr	r1, [pc, #72]	; (800323c <HAL_RCC_ClockConfig+0x35c>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
 80031fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_RCC_ClockConfig+0x358>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	4a0d      	ldr	r2, [pc, #52]	; (800323c <HAL_RCC_ClockConfig+0x35c>)
 8003208:	5cd3      	ldrb	r3, [r2, r3]
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <HAL_RCC_ClockConfig+0x360>)
 8003216:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x364>)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_RCC_ClockConfig+0x368>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fb9c 	bl	8000960 <HAL_InitTick>
 8003228:	4603      	mov	r3, r0
 800322a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	58024400 	.word	0x58024400
 800323c:	0800e17c 	.word	0x0800e17c
 8003240:	24000004 	.word	0x24000004
 8003244:	24000000 	.word	0x24000000
 8003248:	24000008 	.word	0x24000008

0800324c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_EnableCSS+0x1c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_RCC_EnableCSS+0x1c>)
 8003256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	58024400 	.word	0x58024400

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003272:	4bb3      	ldr	r3, [pc, #716]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800327a:	2b18      	cmp	r3, #24
 800327c:	f200 8155 	bhi.w	800352a <HAL_RCC_GetSysClockFreq+0x2be>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032ed 	.word	0x080032ed
 800328c:	0800352b 	.word	0x0800352b
 8003290:	0800352b 	.word	0x0800352b
 8003294:	0800352b 	.word	0x0800352b
 8003298:	0800352b 	.word	0x0800352b
 800329c:	0800352b 	.word	0x0800352b
 80032a0:	0800352b 	.word	0x0800352b
 80032a4:	0800352b 	.word	0x0800352b
 80032a8:	08003313 	.word	0x08003313
 80032ac:	0800352b 	.word	0x0800352b
 80032b0:	0800352b 	.word	0x0800352b
 80032b4:	0800352b 	.word	0x0800352b
 80032b8:	0800352b 	.word	0x0800352b
 80032bc:	0800352b 	.word	0x0800352b
 80032c0:	0800352b 	.word	0x0800352b
 80032c4:	0800352b 	.word	0x0800352b
 80032c8:	08003319 	.word	0x08003319
 80032cc:	0800352b 	.word	0x0800352b
 80032d0:	0800352b 	.word	0x0800352b
 80032d4:	0800352b 	.word	0x0800352b
 80032d8:	0800352b 	.word	0x0800352b
 80032dc:	0800352b 	.word	0x0800352b
 80032e0:	0800352b 	.word	0x0800352b
 80032e4:	0800352b 	.word	0x0800352b
 80032e8:	0800331f 	.word	0x0800331f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ec:	4b94      	ldr	r3, [pc, #592]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032f8:	4b91      	ldr	r3, [pc, #580]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	08db      	lsrs	r3, r3, #3
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	4a90      	ldr	r2, [pc, #576]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
 8003308:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800330a:	e111      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800330c:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800330e:	61bb      	str	r3, [r7, #24]
    break;
 8003310:	e10e      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003314:	61bb      	str	r3, [r7, #24]
    break;
 8003316:	e10b      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003318:	4b8c      	ldr	r3, [pc, #560]	; (800354c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800331a:	61bb      	str	r3, [r7, #24]
    break;
 800331c:	e108      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003328:	4b85      	ldr	r3, [pc, #532]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003332:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003334:	4b82      	ldr	r3, [pc, #520]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800333e:	4b80      	ldr	r3, [pc, #512]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	08db      	lsrs	r3, r3, #3
 8003344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003356:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80e1 	beq.w	8003524 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b02      	cmp	r3, #2
 8003366:	f000 8083 	beq.w	8003470 <HAL_RCC_GetSysClockFreq+0x204>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b02      	cmp	r3, #2
 800336e:	f200 80a1 	bhi.w	80034b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x114>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d056      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x1c0>
 800337e:	e099      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003380:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d02d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800338c:	4b6c      	ldr	r3, [pc, #432]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	08db      	lsrs	r3, r3, #3
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	4a6b      	ldr	r2, [pc, #428]	; (8003544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b6:	4b62      	ldr	r3, [pc, #392]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80033e6:	e087      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003554 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	4b51      	ldr	r3, [pc, #324]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340a:	ed97 6a02 	vldr	s12, [r7, #8]
 800340e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800341a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800342a:	e065      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2ec>
 800343a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343e:	4b40      	ldr	r3, [pc, #256]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003452:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800345a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800346e:	e043      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800355c <HAL_RCC_GetSysClockFreq+0x2f0>
 800347e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003482:	4b2f      	ldr	r3, [pc, #188]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003492:	ed97 6a02 	vldr	s12, [r7, #8]
 8003496:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800349a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034b2:	e021      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003558 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	0a5b      	lsrs	r3, r3, #9
 80034fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003502:	3301      	adds	r3, #1
 8003504:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003510:	edd7 6a07 	vldr	s13, [r7, #28]
 8003514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351c:	ee17 3a90 	vmov	r3, s15
 8003520:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003522:	e005      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    break;
 8003528:	e002      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800352c:	61bb      	str	r3, [r7, #24]
    break;
 800352e:	bf00      	nop
  }

  return sysclockfreq;
 8003530:	69bb      	ldr	r3, [r7, #24]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3724      	adds	r7, #36	; 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	58024400 	.word	0x58024400
 8003544:	03d09000 	.word	0x03d09000
 8003548:	003d0900 	.word	0x003d0900
 800354c:	016e3600 	.word	0x016e3600
 8003550:	46000000 	.word	0x46000000
 8003554:	4c742400 	.word	0x4c742400
 8003558:	4a742400 	.word	0x4a742400
 800355c:	4bb71b00 	.word	0x4bb71b00

08003560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003566:	f7ff fe81 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	490f      	ldr	r1, [pc, #60]	; (80035b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	fa22 f303 	lsr.w	r3, r2, r3
 8003582:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800358e:	5cd3      	ldrb	r3, [r2, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800359c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800359e:	4a07      	ldr	r2, [pc, #28]	; (80035bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	58024400 	.word	0x58024400
 80035b4:	0800e17c 	.word	0x0800e17c
 80035b8:	24000004 	.word	0x24000004
 80035bc:	24000000 	.word	0x24000000

080035c0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80035c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d0:	d105      	bne.n	80035de <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80035d2:	f000 f809 	bl	80035e8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80035d6:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80035d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035dc:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	58024400 	.word	0x58024400

080035e8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003600:	2300      	movs	r3, #0
 8003602:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003604:	2300      	movs	r3, #0
 8003606:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d03f      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003618:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800361c:	d02a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800361e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003622:	d824      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003624:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003628:	d018      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800362a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800362e:	d81e      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003638:	d007      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800363a:	e018      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363c:	4ba3      	ldr	r3, [pc, #652]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	4aa2      	ldr	r2, [pc, #648]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003648:	e015      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2102      	movs	r1, #2
 8003650:	4618      	mov	r0, r3
 8003652:	f001 fff9 	bl	8005648 <RCCEx_PLL2_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800365a:	e00c      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3324      	adds	r3, #36	; 0x24
 8003660:	2102      	movs	r1, #2
 8003662:	4618      	mov	r0, r3
 8003664:	f002 f8a2 	bl	80057ac <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800366c:	e003      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
      break;
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800367c:	4b93      	ldr	r3, [pc, #588]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003688:	4990      	ldr	r1, [pc, #576]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	650b      	str	r3, [r1, #80]	; 0x50
 800368e:	e001      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d826      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036c5 	.word	0x080036c5
 80036b4:	080036d3 	.word	0x080036d3
 80036b8:	080036e5 	.word	0x080036e5
 80036bc:	080036fd 	.word	0x080036fd
 80036c0:	080036fd 	.word	0x080036fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c4:	4b81      	ldr	r3, [pc, #516]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	4a80      	ldr	r2, [pc, #512]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036d0:	e015      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3304      	adds	r3, #4
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 ffb5 	bl	8005648 <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e2:	e00c      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3324      	adds	r3, #36	; 0x24
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f002 f85e 	bl	80057ac <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036f4:	e003      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
      break;
 80036fa:	e000      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003704:	4b71      	ldr	r3, [pc, #452]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	f023 0207 	bic.w	r2, r3, #7
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	496e      	ldr	r1, [pc, #440]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	650b      	str	r3, [r1, #80]	; 0x50
 8003716:	e001      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003724:	2b00      	cmp	r3, #0
 8003726:	d042      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003730:	d02b      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003736:	d825      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003738:	2bc0      	cmp	r3, #192	; 0xc0
 800373a:	d028      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800373c:	2bc0      	cmp	r3, #192	; 0xc0
 800373e:	d821      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d016      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d81d      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d007      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003750:	e018      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003752:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	4a5d      	ldr	r2, [pc, #372]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800375e:	e017      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f001 ff6e 	bl	8005648 <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003770:	e00e      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3324      	adds	r3, #36	; 0x24
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f002 f817 	bl	80057ac <RCCEx_PLL3_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003782:	e005      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
      break;
 8003788:	e002      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800378e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003796:	4b4d      	ldr	r3, [pc, #308]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a2:	494a      	ldr	r1, [pc, #296]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	650b      	str	r3, [r1, #80]	; 0x50
 80037a8:	e001      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d049      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037c4:	d030      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80037c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ca:	d82a      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037d0:	d02c      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80037d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037d6:	d824      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037dc:	d018      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80037de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e2:	d81e      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ec:	d007      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80037ee:	e018      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	4a35      	ldr	r2, [pc, #212]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037fc:	e017      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f001 ff1f 	bl	8005648 <RCCEx_PLL2_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800380e:	e00e      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3324      	adds	r3, #36	; 0x24
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f001 ffc8 	bl	80057ac <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003820:	e005      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
      break;
 8003826:	e002      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003828:	bf00      	nop
 800382a:	e000      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800382c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003842:	4922      	ldr	r1, [pc, #136]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003844:	4313      	orrs	r3, r2
 8003846:	658b      	str	r3, [r1, #88]	; 0x58
 8003848:	e001      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003856:	2b00      	cmp	r3, #0
 8003858:	d04b      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003864:	d030      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003866:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800386a:	d82a      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800386c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003870:	d02e      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003872:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003876:	d824      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003878:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800387c:	d018      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800387e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003882:	d81e      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388c:	d007      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800388e:	e018      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800389c:	e019      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 fecf 	bl	8005648 <RCCEx_PLL2_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038ae:	e010      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3324      	adds	r3, #36	; 0x24
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 ff78 	bl	80057ac <RCCEx_PLL3_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038c0:	e007      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	75fb      	strb	r3, [r7, #23]
      break;
 80038c6:	e004      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80038c8:	bf00      	nop
 80038ca:	e002      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80038cc:	58024400 	.word	0x58024400
      break;
 80038d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038d8:	4b99      	ldr	r3, [pc, #612]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038e6:	4996      	ldr	r1, [pc, #600]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	658b      	str	r3, [r1, #88]	; 0x58
 80038ec:	e001      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d032      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	2b30      	cmp	r3, #48	; 0x30
 8003904:	d01c      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003906:	2b30      	cmp	r3, #48	; 0x30
 8003908:	d817      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800390a:	2b20      	cmp	r3, #32
 800390c:	d00c      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800390e:	2b20      	cmp	r3, #32
 8003910:	d813      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d016      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003916:	2b10      	cmp	r3, #16
 8003918:	d10f      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391a:	4b89      	ldr	r3, [pc, #548]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	4a88      	ldr	r2, [pc, #544]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003926:	e00e      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	2102      	movs	r1, #2
 800392e:	4618      	mov	r0, r3
 8003930:	f001 fe8a 	bl	8005648 <RCCEx_PLL2_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003938:	e005      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
      break;
 800393e:	e002      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003940:	bf00      	nop
 8003942:	e000      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800394c:	4b7c      	ldr	r3, [pc, #496]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800394e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003950:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003958:	4979      	ldr	r1, [pc, #484]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800395a:	4313      	orrs	r3, r2
 800395c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800395e:	e001      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d047      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003978:	d030      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800397a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800397e:	d82a      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003980:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003984:	d02c      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003986:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800398a:	d824      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800398c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003990:	d018      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	d81e      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a0:	d007      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80039a2:	e018      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a4:	4b66      	ldr	r3, [pc, #408]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4a65      	ldr	r2, [pc, #404]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039b0:	e017      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fe45 	bl	8005648 <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039c2:	e00e      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3324      	adds	r3, #36	; 0x24
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 feee 	bl	80057ac <RCCEx_PLL3_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039d4:	e005      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80039e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039e8:	4b55      	ldr	r3, [pc, #340]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	4952      	ldr	r1, [pc, #328]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	650b      	str	r3, [r1, #80]	; 0x50
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d049      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a14:	d02e      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1a:	d828      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a20:	d02a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003a22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a26:	d822      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a2c:	d026      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003a2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a32:	d81c      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a38:	d010      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a3e:	d816      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01d      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a48:	d111      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 fdf9 	bl	8005648 <RCCEx_PLL2_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a5a:	e012      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3324      	adds	r3, #36	; 0x24
 8003a60:	2101      	movs	r1, #1
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 fea2 	bl	80057ac <RCCEx_PLL3_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a6c:	e009      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
      break;
 8003a72:	e006      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a74:	bf00      	nop
 8003a76:	e004      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a78:	bf00      	nop
 8003a7a:	e002      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a7c:	bf00      	nop
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a88:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a94:	492a      	ldr	r1, [pc, #168]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	650b      	str	r3, [r1, #80]	; 0x50
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d04d      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab6:	d02e      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003abc:	d828      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac2:	d02a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d822      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003aca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ace:	d026      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003ad0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ad4:	d81c      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ada:	d010      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae0:	d816      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01d      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003ae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aea:	d111      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fda8 	bl	8005648 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003afc:	e012      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3324      	adds	r3, #36	; 0x24
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 fe51 	bl	80057ac <RCCEx_PLL3_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b0e:	e009      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
      break;
 8003b14:	e006      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b16:	bf00      	nop
 8003b18:	e004      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b38:	4901      	ldr	r1, [pc, #4]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b3e:	e003      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02f      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5c:	d00e      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b62:	d814      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d015      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003b68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6c:	d10f      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b6e:	4baf      	ldr	r3, [pc, #700]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	4aae      	ldr	r2, [pc, #696]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b7a:	e00c      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	2101      	movs	r1, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 fd60 	bl	8005648 <RCCEx_PLL2_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b8c:	e003      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
      break;
 8003b92:	e000      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b9c:	4ba3      	ldr	r3, [pc, #652]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba8:	49a0      	ldr	r1, [pc, #640]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	650b      	str	r3, [r1, #80]	; 0x50
 8003bae:	e001      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d81b      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003bc8:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003c07 	.word	0x08003c07
 8003bd4:	08003be1 	.word	0x08003be1
 8003bd8:	08003bef 	.word	0x08003bef
 8003bdc:	08003c07 	.word	0x08003c07
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be0:	4b92      	ldr	r3, [pc, #584]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	4a91      	ldr	r2, [pc, #580]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bec:	e00c      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f001 fd27 	bl	8005648 <RCCEx_PLL2_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bfe:	e003      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
      break;
 8003c04:	e000      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c0e:	4b87      	ldr	r3, [pc, #540]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	4984      	ldr	r1, [pc, #528]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c20:	e001      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8086 	beq.w	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c34:	4b7e      	ldr	r3, [pc, #504]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7d      	ldr	r2, [pc, #500]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c40:	f7fc fed8 	bl	80009f4 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c46:	e009      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c48:	f7fc fed4 	bl	80009f4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d902      	bls.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	75fb      	strb	r3, [r7, #23]
        break;
 8003c5a:	e005      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c5c:	4b74      	ldr	r3, [pc, #464]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ef      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d166      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c78:	4053      	eors	r3, r2
 8003c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d013      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c82:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c8c:	4b67      	ldr	r3, [pc, #412]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a66      	ldr	r2, [pc, #408]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c98:	4b64      	ldr	r3, [pc, #400]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4a63      	ldr	r2, [pc, #396]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ca4:	4a61      	ldr	r2, [pc, #388]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb4:	d115      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fc fe9d 	bl	80009f4 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cbc:	e00b      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fc fe99 	bl	80009f4 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d902      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	75fb      	strb	r3, [r7, #23]
            break;
 8003cd4:	e005      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd6:	4b55      	ldr	r3, [pc, #340]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ed      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d126      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d06:	0919      	lsrs	r1, r3, #4
 8003d08:	4b4a      	ldr	r3, [pc, #296]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	4947      	ldr	r1, [pc, #284]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	610b      	str	r3, [r1, #16]
 8003d12:	e005      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003d14:	4b45      	ldr	r3, [pc, #276]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	4a44      	ldr	r2, [pc, #272]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d1e:	6113      	str	r3, [r2, #16]
 8003d20:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2e:	493f      	ldr	r1, [pc, #252]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	670b      	str	r3, [r1, #112]	; 0x70
 8003d34:	e004      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	75bb      	strb	r3, [r7, #22]
 8003d3a:	e001      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8085 	beq.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d52:	2b28      	cmp	r3, #40	; 0x28
 8003d54:	d866      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003e39 	.word	0x08003e39
 8003d60:	08003e25 	.word	0x08003e25
 8003d64:	08003e25 	.word	0x08003e25
 8003d68:	08003e25 	.word	0x08003e25
 8003d6c:	08003e25 	.word	0x08003e25
 8003d70:	08003e25 	.word	0x08003e25
 8003d74:	08003e25 	.word	0x08003e25
 8003d78:	08003e25 	.word	0x08003e25
 8003d7c:	08003e01 	.word	0x08003e01
 8003d80:	08003e25 	.word	0x08003e25
 8003d84:	08003e25 	.word	0x08003e25
 8003d88:	08003e25 	.word	0x08003e25
 8003d8c:	08003e25 	.word	0x08003e25
 8003d90:	08003e25 	.word	0x08003e25
 8003d94:	08003e25 	.word	0x08003e25
 8003d98:	08003e25 	.word	0x08003e25
 8003d9c:	08003e13 	.word	0x08003e13
 8003da0:	08003e25 	.word	0x08003e25
 8003da4:	08003e25 	.word	0x08003e25
 8003da8:	08003e25 	.word	0x08003e25
 8003dac:	08003e25 	.word	0x08003e25
 8003db0:	08003e25 	.word	0x08003e25
 8003db4:	08003e25 	.word	0x08003e25
 8003db8:	08003e25 	.word	0x08003e25
 8003dbc:	08003e39 	.word	0x08003e39
 8003dc0:	08003e25 	.word	0x08003e25
 8003dc4:	08003e25 	.word	0x08003e25
 8003dc8:	08003e25 	.word	0x08003e25
 8003dcc:	08003e25 	.word	0x08003e25
 8003dd0:	08003e25 	.word	0x08003e25
 8003dd4:	08003e25 	.word	0x08003e25
 8003dd8:	08003e25 	.word	0x08003e25
 8003ddc:	08003e39 	.word	0x08003e39
 8003de0:	08003e25 	.word	0x08003e25
 8003de4:	08003e25 	.word	0x08003e25
 8003de8:	08003e25 	.word	0x08003e25
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e25 	.word	0x08003e25
 8003df4:	08003e25 	.word	0x08003e25
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e39 	.word	0x08003e39
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fc1e 	bl	8005648 <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e10:	e013      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3324      	adds	r3, #36	; 0x24
 8003e16:	2101      	movs	r1, #1
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fcc7 	bl	80057ac <RCCEx_PLL3_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e22:	e00a      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
      break;
 8003e28:	e007      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e2a:	bf00      	nop
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	58024800 	.word	0x58024800
 8003e34:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e40:	4b96      	ldr	r3, [pc, #600]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e44:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4c:	4993      	ldr	r1, [pc, #588]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	654b      	str	r3, [r1, #84]	; 0x54
 8003e52:	e001      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d038      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d821      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003eb7 	.word	0x08003eb7
 8003e78:	08003e8d 	.word	0x08003e8d
 8003e7c:	08003e9f 	.word	0x08003e9f
 8003e80:	08003eb7 	.word	0x08003eb7
 8003e84:	08003eb7 	.word	0x08003eb7
 8003e88:	08003eb7 	.word	0x08003eb7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 fbd8 	bl	8005648 <RCCEx_PLL2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e9c:	e00c      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3324      	adds	r3, #36	; 0x24
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 fc81 	bl	80057ac <RCCEx_PLL3_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003eae:	e003      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ebe:	4b77      	ldr	r3, [pc, #476]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f023 0207 	bic.w	r2, r3, #7
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	4974      	ldr	r1, [pc, #464]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	654b      	str	r3, [r1, #84]	; 0x54
 8003ed0:	e001      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d03a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d821      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f37 	.word	0x08003f37
 8003ef8:	08003f0d 	.word	0x08003f0d
 8003efc:	08003f1f 	.word	0x08003f1f
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f37 	.word	0x08003f37
 8003f08:	08003f37 	.word	0x08003f37
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 fb98 	bl	8005648 <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f1c:	e00c      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3324      	adds	r3, #36	; 0x24
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 fc41 	bl	80057ac <RCCEx_PLL3_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
      break;
 8003f34:	e000      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f3e:	4b57      	ldr	r3, [pc, #348]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f023 0207 	bic.w	r2, r3, #7
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	4953      	ldr	r1, [pc, #332]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	658b      	str	r3, [r1, #88]	; 0x58
 8003f52:	e001      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d04b      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f6e:	d02e      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f74:	d828      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7a:	d02a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d822      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f86:	d026      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003f88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f8c:	d81c      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f98:	d816      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01d      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa2:	d111      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 fb4c 	bl	8005648 <RCCEx_PLL2_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fb4:	e012      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3324      	adds	r3, #36	; 0x24
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f001 fbf5 	bl	80057ac <RCCEx_PLL3_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fc6:	e009      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
      break;
 8003fcc:	e006      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e004      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff0:	492a      	ldr	r1, [pc, #168]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	654b      	str	r3, [r1, #84]	; 0x54
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d04d      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800400e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004012:	d02e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004014:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004018:	d828      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	d02a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004024:	d822      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800402a:	d026      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800402c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004030:	d81c      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004036:	d010      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403c:	d816      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01d      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d111      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2100      	movs	r1, #0
 800404e:	4618      	mov	r0, r3
 8004050:	f001 fafa 	bl	8005648 <RCCEx_PLL2_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004058:	e012      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3324      	adds	r3, #36	; 0x24
 800405e:	2102      	movs	r1, #2
 8004060:	4618      	mov	r0, r3
 8004062:	f001 fba3 	bl	80057ac <RCCEx_PLL3_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800406a:	e009      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	75fb      	strb	r3, [r7, #23]
      break;
 8004070:	e006      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004072:	bf00      	nop
 8004074:	e004      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004076:	bf00      	nop
 8004078:	e002      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800407a:	bf00      	nop
 800407c:	e000      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800407e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004094:	4901      	ldr	r1, [pc, #4]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	658b      	str	r3, [r1, #88]	; 0x58
 800409a:	e003      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800409c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d04b      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040ba:	d02e      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80040bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040c0:	d828      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c6:	d02a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80040c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040cc:	d822      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040d2:	d026      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80040d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040d8:	d81c      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040de:	d010      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80040e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e4:	d816      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01d      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ee:	d111      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 faa6 	bl	8005648 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004100:	e012      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3324      	adds	r3, #36	; 0x24
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f001 fb4f 	bl	80057ac <RCCEx_PLL3_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004112:	e009      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	75fb      	strb	r3, [r7, #23]
      break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800411a:	bf00      	nop
 800411c:	e004      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800411e:	bf00      	nop
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800412e:	4b9d      	ldr	r3, [pc, #628]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413c:	4999      	ldr	r1, [pc, #612]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800413e:	4313      	orrs	r3, r2
 8004140:	658b      	str	r3, [r1, #88]	; 0x58
 8004142:	e001      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	7dfb      	ldrb	r3, [r7, #23]
 8004146:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	d10a      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3324      	adds	r3, #36	; 0x24
 8004164:	2102      	movs	r1, #2
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fb20 	bl	80057ac <RCCEx_PLL3_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004176:	4b8b      	ldr	r3, [pc, #556]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004184:	4987      	ldr	r1, [pc, #540]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004186:	4313      	orrs	r3, r2
 8004188:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a0:	d10a      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3324      	adds	r3, #36	; 0x24
 80041a6:	2102      	movs	r1, #2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 faff 	bl	80057ac <RCCEx_PLL3_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041b8:	4b7a      	ldr	r3, [pc, #488]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	4977      	ldr	r1, [pc, #476]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d034      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e2:	d01d      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80041e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e8:	d817      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d009      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80041f4:	e011      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fa23 	bl	8005648 <RCCEx_PLL2_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004206:	e00c      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3324      	adds	r3, #36	; 0x24
 800420c:	2102      	movs	r1, #2
 800420e:	4618      	mov	r0, r3
 8004210:	f001 facc 	bl	80057ac <RCCEx_PLL3_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
      break;
 800421e:	e000      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004228:	4b5e      	ldr	r3, [pc, #376]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004236:	495b      	ldr	r1, [pc, #364]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004238:	4313      	orrs	r3, r2
 800423a:	658b      	str	r3, [r1, #88]	; 0x58
 800423c:	e001      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d033      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004254:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004258:	d01c      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800425a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800425e:	d816      	bhi.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004264:	d003      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426a:	d007      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800426c:	e00f      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426e:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	4a4c      	ldr	r2, [pc, #304]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800427a:	e00c      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3324      	adds	r3, #36	; 0x24
 8004280:	2101      	movs	r1, #1
 8004282:	4618      	mov	r0, r3
 8004284:	f001 fa92 	bl	80057ac <RCCEx_PLL3_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800428c:	e003      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
      break;
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800429c:	4b41      	ldr	r3, [pc, #260]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042aa:	493e      	ldr	r1, [pc, #248]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	654b      	str	r3, [r1, #84]	; 0x54
 80042b0:	e001      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d029      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80042ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ce:	d007      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80042d0:	e00f      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d2:	4b34      	ldr	r3, [pc, #208]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	4a33      	ldr	r2, [pc, #204]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042de:	e00b      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	2102      	movs	r1, #2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 f9ae 	bl	8005648 <RCCEx_PLL2_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042f0:	e002      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
      break;
 80042f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004302:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	4926      	ldr	r1, [pc, #152]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800430c:	4313      	orrs	r3, r2
 800430e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004310:	e001      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3324      	adds	r3, #36	; 0x24
 8004326:	2102      	movs	r1, #2
 8004328:	4618      	mov	r0, r3
 800432a:	f001 fa3f 	bl	80057ac <RCCEx_PLL3_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d033      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434c:	d017      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800434e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004352:	d811      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004358:	d013      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800435a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435e:	d80b      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004368:	d106      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	4a0d      	ldr	r2, [pc, #52]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004374:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004376:	e007      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	75fb      	strb	r3, [r7, #23]
      break;
 800437c:	e004      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800437e:	bf00      	nop
 8004380:	e002      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10c      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800439a:	4902      	ldr	r1, [pc, #8]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800439c:	4313      	orrs	r3, r2
 800439e:	654b      	str	r3, [r1, #84]	; 0x54
 80043a0:	e004      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	492e      	ldr	r1, [pc, #184]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043d6:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043e4:	4926      	ldr	r1, [pc, #152]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043f6:	4b22      	ldr	r3, [pc, #136]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004402:	491f      	ldr	r1, [pc, #124]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004404:	4313      	orrs	r3, r2
 8004406:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00d      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004414:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	4a19      	ldr	r2, [pc, #100]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800441a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800441e:	6113      	str	r3, [r2, #16]
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800442a:	4915      	ldr	r1, [pc, #84]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800442c:	4313      	orrs	r3, r2
 800442e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	da08      	bge.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800443a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	490e      	ldr	r1, [pc, #56]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004446:	4313      	orrs	r3, r2
 8004448:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	4906      	ldr	r1, [pc, #24]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004466:	4313      	orrs	r3, r2
 8004468:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800446a:	7dbb      	ldrb	r3, [r7, #22]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	58024400 	.word	0x58024400

08004484 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b090      	sub	sp, #64	; 0x40
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004492:	f040 8095 	bne.w	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004496:	4b97      	ldr	r3, [pc, #604]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	f200 8088 	bhi.w	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044c5 	.word	0x080044c5
 80044b4:	080044ed 	.word	0x080044ed
 80044b8:	08004515 	.word	0x08004515
 80044bc:	080045b1 	.word	0x080045b1
 80044c0:	0800453d 	.word	0x0800453d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80044c4:	4b8b      	ldr	r3, [pc, #556]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044d0:	d108      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 ff64 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80044e0:	f000 bc94 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044e8:	f000 bc90 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80044ec:	4b81      	ldr	r3, [pc, #516]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f8:	d108      	bne.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044fa:	f107 0318 	add.w	r3, r7, #24
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fca8 	bl	8004e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004508:	f000 bc80 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004510:	f000 bc7c 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004514:	4b77      	ldr	r3, [pc, #476]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004520:	d108      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004522:	f107 030c 	add.w	r3, r7, #12
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fde8 	bl	80050fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004530:	f000 bc6c 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004538:	f000 bc68 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800453c:	4b6d      	ldr	r3, [pc, #436]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800453e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004544:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004546:	4b6b      	ldr	r3, [pc, #428]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b04      	cmp	r3, #4
 8004550:	d10c      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004554:	2b00      	cmp	r3, #0
 8004556:	d109      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004558:	4b66      	ldr	r3, [pc, #408]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	08db      	lsrs	r3, r3, #3
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	4a65      	ldr	r2, [pc, #404]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456a:	e01f      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800456c:	4b61      	ldr	r3, [pc, #388]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004578:	d106      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800457a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004580:	d102      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004582:	4b5e      	ldr	r3, [pc, #376]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004586:	e011      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004588:	4b5a      	ldr	r3, [pc, #360]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004594:	d106      	bne.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800459c:	d102      	bne.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800459e:	4b58      	ldr	r3, [pc, #352]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80045a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a2:	e003      	b.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80045a8:	f000 bc30 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80045ac:	f000 bc2e 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80045b0:	4b54      	ldr	r3, [pc, #336]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045b4:	f000 bc2a 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045bc:	f000 bc26 	b.w	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c6:	f040 809f 	bne.w	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80045ca:	4b4a      	ldr	r3, [pc, #296]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80045cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	d04d      	beq.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e2:	f200 8084 	bhi.w	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	2bc0      	cmp	r3, #192	; 0xc0
 80045ea:	d07d      	beq.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	2bc0      	cmp	r3, #192	; 0xc0
 80045f0:	d87d      	bhi.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d02d      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d877      	bhi.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d012      	beq.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800460a:	e070      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800460c:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004618:	d107      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800461a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fec0 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004628:	e3f0      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800462e:	e3ed      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004630:	4b30      	ldr	r3, [pc, #192]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463c:	d107      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800463e:	f107 0318 	add.w	r3, r7, #24
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fc06 	bl	8004e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800464c:	e3de      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004652:	e3db      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004654:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800465c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004660:	d107      	bne.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004662:	f107 030c 	add.w	r3, r7, #12
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fd48 	bl	80050fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004670:	e3cc      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004676:	e3c9      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004678:	4b1e      	ldr	r3, [pc, #120]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800467a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004680:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b04      	cmp	r3, #4
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004694:	4b17      	ldr	r3, [pc, #92]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	08db      	lsrs	r3, r3, #3
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046a6:	e01e      	b.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b4:	d106      	bne.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046bc:	d102      	bne.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80046be:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c2:	e010      	b.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046d8:	d102      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046de:	e002      	b.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80046e4:	e392      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80046e6:	e391      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046ec:	e38e      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046f2:	e38b      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80046f4:	58024400 	.word	0x58024400
 80046f8:	03d09000 	.word	0x03d09000
 80046fc:	003d0900 	.word	0x003d0900
 8004700:	016e3600 	.word	0x016e3600
 8004704:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	f040 809c 	bne.w	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004712:	4b9d      	ldr	r3, [pc, #628]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800471a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004722:	d054      	beq.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800472a:	f200 808b 	bhi.w	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004734:	f000 8083 	beq.w	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800473e:	f200 8081 	bhi.w	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004748:	d02f      	beq.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004750:	d878      	bhi.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800475e:	d012      	beq.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8004760:	e070      	b.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004762:	4b89      	ldr	r3, [pc, #548]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800476e:	d107      	bne.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fe15 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800477e:	e345      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004784:	e342      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004786:	4b80      	ldr	r3, [pc, #512]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800478e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004792:	d107      	bne.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004794:	f107 0318 	add.w	r3, r7, #24
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fb5b 	bl	8004e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047a2:	e333      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047a8:	e330      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b6:	d107      	bne.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047b8:	f107 030c 	add.w	r3, r7, #12
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fc9d 	bl	80050fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047c6:	e321      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047cc:	e31e      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80047ce:	4b6e      	ldr	r3, [pc, #440]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80047d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047d8:	4b6b      	ldr	r3, [pc, #428]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d10c      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80047e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047ea:	4b67      	ldr	r3, [pc, #412]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	08db      	lsrs	r3, r3, #3
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	4a65      	ldr	r2, [pc, #404]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80047f6:	fa22 f303 	lsr.w	r3, r2, r3
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fc:	e01e      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80047fe:	4b62      	ldr	r3, [pc, #392]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480a:	d106      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004812:	d102      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004814:	4b5e      	ldr	r3, [pc, #376]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004818:	e010      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800481a:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004826:	d106      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482e:	d102      	bne.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004830:	4b58      	ldr	r3, [pc, #352]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004834:	e002      	b.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800483a:	e2e7      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800483c:	e2e6      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800483e:	4b56      	ldr	r3, [pc, #344]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004842:	e2e3      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004848:	e2e0      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004850:	f040 80a7 	bne.w	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004854:	4b4c      	ldr	r3, [pc, #304]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800485c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004864:	d055      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800486c:	f200 8096 	bhi.w	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004876:	f000 8084 	beq.w	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004880:	f200 808c 	bhi.w	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800488a:	d030      	beq.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004892:	f200 8083 	bhi.w	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048a2:	d012      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80048a4:	e07a      	b.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048a6:	4b38      	ldr	r3, [pc, #224]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048b2:	d107      	bne.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fd73 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048c2:	e2a3      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048c8:	e2a0      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048ca:	4b2f      	ldr	r3, [pc, #188]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d6:	d107      	bne.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048d8:	f107 0318 	add.w	r3, r7, #24
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fab9 	bl	8004e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80048e6:	e291      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048ec:	e28e      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048fa:	d107      	bne.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048fc:	f107 030c 	add.w	r3, r7, #12
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fbfb 	bl	80050fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800490a:	e27f      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004910:	e27c      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004912:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800491a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b04      	cmp	r3, #4
 8004926:	d10c      	bne.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800492e:	4b16      	ldr	r3, [pc, #88]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	08db      	lsrs	r3, r3, #3
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	4a14      	ldr	r2, [pc, #80]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004940:	e01e      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494e:	d106      	bne.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004956:	d102      	bne.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004958:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800495a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800495c:	e010      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800496a:	d106      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004972:	d102      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004978:	e002      	b.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800497e:	e245      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004980:	e244      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004984:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004986:	e241      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004988:	58024400 	.word	0x58024400
 800498c:	03d09000 	.word	0x03d09000
 8004990:	003d0900 	.word	0x003d0900
 8004994:	016e3600 	.word	0x016e3600
 8004998:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049a0:	e234      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	f040 809c 	bne.w	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80049ac:	4b9b      	ldr	r3, [pc, #620]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80049ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80049b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049bc:	d054      	beq.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c4:	f200 808b 	bhi.w	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049ce:	f000 8083 	beq.w	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049d8:	f200 8081 	bhi.w	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e2:	d02f      	beq.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ea:	d878      	bhi.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f8:	d012      	beq.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80049fa:	e070      	b.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049fc:	4b87      	ldr	r3, [pc, #540]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a08:	d107      	bne.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fcc8 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a18:	e1f8      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a1e:	e1f5      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a20:	4b7e      	ldr	r3, [pc, #504]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a2e:	f107 0318 	add.w	r3, r7, #24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fa0e 	bl	8004e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a3c:	e1e6      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a42:	e1e3      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a44:	4b75      	ldr	r3, [pc, #468]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a50:	d107      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a52:	f107 030c 	add.w	r3, r7, #12
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fb50 	bl	80050fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a60:	e1d4      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a66:	e1d1      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a68:	4b6c      	ldr	r3, [pc, #432]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a72:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a84:	4b65      	ldr	r3, [pc, #404]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	08db      	lsrs	r3, r3, #3
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	4a64      	ldr	r2, [pc, #400]	; (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
 8004a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a96:	e01e      	b.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a98:	4b60      	ldr	r3, [pc, #384]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aac:	d102      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004aae:	4b5d      	ldr	r3, [pc, #372]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab2:	e010      	b.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ab4:	4b59      	ldr	r3, [pc, #356]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004aca:	4b57      	ldr	r3, [pc, #348]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ace:	e002      	b.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ad4:	e19a      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004ad6:	e199      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ad8:	4b54      	ldr	r3, [pc, #336]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004adc:	e196      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ae2:	e193      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004aea:	d173      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004aec:	4b4b      	ldr	r3, [pc, #300]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004afc:	d02f      	beq.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b04:	d863      	bhi.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b12:	d012      	beq.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8004b14:	e05b      	b.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b22:	d107      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b24:	f107 0318 	add.w	r3, r7, #24
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f993 	bl	8004e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b32:	e16b      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b38:	e168      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b3a:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b46:	d107      	bne.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b48:	f107 030c 	add.w	r3, r7, #12
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fad5 	bl	80050fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b56:	e159      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b5c:	e156      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b5e:	4b2f      	ldr	r3, [pc, #188]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b68:	4b2c      	ldr	r3, [pc, #176]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d10c      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8004b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b7a:	4b28      	ldr	r3, [pc, #160]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	08db      	lsrs	r3, r3, #3
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	4a26      	ldr	r2, [pc, #152]	; (8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004b86:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8c:	e01e      	b.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b8e:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9a:	d106      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ba2:	d102      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ba4:	4b1f      	ldr	r3, [pc, #124]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba8:	e010      	b.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004baa:	4b1c      	ldr	r3, [pc, #112]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb6:	d106      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bbe:	d102      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004bc0:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004bca:	e11f      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004bcc:	e11e      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bd2:	e11b      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bda:	d13e      	bne.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf2:	d01d      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004bf4:	e02e      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c02:	d107      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fbcb 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c12:	e0fb      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c18:	e0f8      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004c1a:	bf00      	nop
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	03d09000 	.word	0x03d09000
 8004c24:	003d0900 	.word	0x003d0900
 8004c28:	016e3600 	.word	0x016e3600
 8004c2c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c30:	4b79      	ldr	r3, [pc, #484]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c3e:	f107 0318 	add.w	r3, r7, #24
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f906 	bl	8004e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c4c:	e0de      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c52:	e0db      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c58:	e0d8      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c60:	f040 8085 	bne.w	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004c64:	4b6c      	ldr	r3, [pc, #432]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c74:	d06b      	beq.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c7c:	d874      	bhi.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d056      	beq.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8c:	d86c      	bhi.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c94:	d03b      	beq.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c9c:	d864      	bhi.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca4:	d021      	beq.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cac:	d85c      	bhi.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cba:	d004      	beq.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8004cbc:	e054      	b.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004cbe:	f000 f8b3 	bl	8004e28 <HAL_RCCEx_GetD3PCLK1Freq>
 8004cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004cc4:	e0a2      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cc6:	4b54      	ldr	r3, [pc, #336]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cd4:	f107 0318 	add.w	r3, r7, #24
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f8bb 	bl	8004e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ce2:	e093      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ce8:	e090      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cea:	4b4b      	ldr	r3, [pc, #300]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cf8:	f107 030c 	add.w	r3, r7, #12
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 f9fd 	bl	80050fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d06:	e081      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d0c:	e07e      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d0e:	4b42      	ldr	r3, [pc, #264]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d109      	bne.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d1a:	4b3f      	ldr	r3, [pc, #252]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	4a3d      	ldr	r2, [pc, #244]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d2c:	e06e      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d32:	e06b      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004d34:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d40:	d102      	bne.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8004d42:	4b37      	ldr	r3, [pc, #220]	; (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d46:	e061      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d4c:	e05e      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d4e:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8004d5c:	4b31      	ldr	r3, [pc, #196]	; (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d60:	e054      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d66:	e051      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d6c:	e04e      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d74:	d148      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004d76:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d86:	d02a      	beq.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8e:	d838      	bhi.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d004      	beq.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d9c:	d00d      	beq.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8004d9e:	e030      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004da0:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dac:	d102      	bne.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8004dae:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004db2:	e02b      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004db8:	e028      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dba:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fae9 	bl	80053a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dd6:	e019      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ddc:	e016      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dde:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dea:	d107      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dec:	f107 0318 	add.w	r3, r7, #24
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 f82f 	bl	8004e54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dfa:	e007      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e00:	e004      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e06:	e001      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3740      	adds	r7, #64	; 0x40
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	03d09000 	.word	0x03d09000
 8004e20:	003d0900 	.word	0x003d0900
 8004e24:	016e3600 	.word	0x016e3600

08004e28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e2c:	f7fe fb98 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	4904      	ldr	r1, [pc, #16]	; (8004e50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e3e:	5ccb      	ldrb	r3, [r1, r3]
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	0800e17c 	.word	0x0800e17c

08004e54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b089      	sub	sp, #36	; 0x24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e5c:	4ba1      	ldr	r3, [pc, #644]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004e66:	4b9f      	ldr	r3, [pc, #636]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	0b1b      	lsrs	r3, r3, #12
 8004e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e72:	4b9c      	ldr	r3, [pc, #624]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	091b      	lsrs	r3, r3, #4
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004e7e:	4b99      	ldr	r3, [pc, #612]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	08db      	lsrs	r3, r3, #3
 8004e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8111 	beq.w	80050c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	f000 8083 	beq.w	8004fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	f200 80a1 	bhi.w	8004ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d056      	beq.n	8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ebe:	e099      	b.n	8004ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ec0:	4b88      	ldr	r3, [pc, #544]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d02d      	beq.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ecc:	4b85      	ldr	r3, [pc, #532]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	08db      	lsrs	r3, r3, #3
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	4a84      	ldr	r2, [pc, #528]	; (80050e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8004edc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	ee07 3a90 	vmov	s15, r3
 8004ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef6:	4b7b      	ldr	r3, [pc, #492]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f26:	e087      	b.n	8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3a:	4b6a      	ldr	r3, [pc, #424]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f6a:	e065      	b.n	8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7e:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f92:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004faa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fae:	e043      	b.n	8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc2:	4b48      	ldr	r3, [pc, #288]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ff2:	e021      	b.n	8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005006:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005016:	ed97 6a03 	vldr	s12, [r7, #12]
 800501a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800501e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800502a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800502e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005032:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005036:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005038:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	0a5b      	lsrs	r3, r3, #9
 800503e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800504e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005052:	edd7 6a07 	vldr	s13, [r7, #28]
 8005056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800505a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505e:	ee17 2a90 	vmov	r2, s15
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005066:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005070:	ee07 3a90 	vmov	s15, r3
 8005074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800507c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005080:	edd7 6a07 	vldr	s13, [r7, #28]
 8005084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508c:	ee17 2a90 	vmov	r2, s15
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	0e1b      	lsrs	r3, r3, #24
 800509a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ba:	ee17 2a90 	vmov	r2, s15
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80050c2:	e008      	b.n	80050d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	609a      	str	r2, [r3, #8]
}
 80050d6:	bf00      	nop
 80050d8:	3724      	adds	r7, #36	; 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	58024400 	.word	0x58024400
 80050e8:	03d09000 	.word	0x03d09000
 80050ec:	46000000 	.word	0x46000000
 80050f0:	4c742400 	.word	0x4c742400
 80050f4:	4a742400 	.word	0x4a742400
 80050f8:	4bb71b00 	.word	0x4bb71b00

080050fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005104:	4ba1      	ldr	r3, [pc, #644]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800510e:	4b9f      	ldr	r3, [pc, #636]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	0d1b      	lsrs	r3, r3, #20
 8005114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005118:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800511a:	4b9c      	ldr	r3, [pc, #624]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005126:	4b99      	ldr	r3, [pc, #612]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	08db      	lsrs	r3, r3, #3
 800512c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8111 	beq.w	800536c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b02      	cmp	r3, #2
 800514e:	f000 8083 	beq.w	8005258 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	2b02      	cmp	r3, #2
 8005156:	f200 80a1 	bhi.w	800529c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d056      	beq.n	8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005166:	e099      	b.n	800529c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005168:	4b88      	ldr	r3, [pc, #544]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02d      	beq.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005174:	4b85      	ldr	r3, [pc, #532]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	08db      	lsrs	r3, r3, #3
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	4a84      	ldr	r2, [pc, #528]	; (8005390 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
 8005184:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519e:	4b7b      	ldr	r3, [pc, #492]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80051ce:	e087      	b.n	80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005398 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80051de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e2:	4b6a      	ldr	r3, [pc, #424]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005212:	e065      	b.n	80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800539c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005226:	4b59      	ldr	r3, [pc, #356]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005236:	ed97 6a03 	vldr	s12, [r7, #12]
 800523a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005256:	e043      	b.n	80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526a:	4b48      	ldr	r3, [pc, #288]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527a:	ed97 6a03 	vldr	s12, [r7, #12]
 800527e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800528e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800529a:	e021      	b.n	80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800539c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ae:	4b37      	ldr	r3, [pc, #220]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052be:	ed97 6a03 	vldr	s12, [r7, #12]
 80052c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80052e0:	4b2a      	ldr	r3, [pc, #168]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	0a5b      	lsrs	r3, r3, #9
 80052e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80052fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005306:	ee17 2a90 	vmov	r2, s15
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800530e:	4b1f      	ldr	r3, [pc, #124]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005324:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005328:	edd7 6a07 	vldr	s13, [r7, #28]
 800532c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005334:	ee17 2a90 	vmov	r2, s15
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800533c:	4b13      	ldr	r3, [pc, #76]	; (800538c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	0e1b      	lsrs	r3, r3, #24
 8005342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005356:	edd7 6a07 	vldr	s13, [r7, #28]
 800535a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005362:	ee17 2a90 	vmov	r2, s15
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800536a:	e008      	b.n	800537e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
}
 800537e:	bf00      	nop
 8005380:	3724      	adds	r7, #36	; 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400
 8005390:	03d09000 	.word	0x03d09000
 8005394:	46000000 	.word	0x46000000
 8005398:	4c742400 	.word	0x4c742400
 800539c:	4a742400 	.word	0x4a742400
 80053a0:	4bb71b00 	.word	0x4bb71b00

080053a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	; 0x24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053ac:	4ba0      	ldr	r3, [pc, #640]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80053b6:	4b9e      	ldr	r3, [pc, #632]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80053c2:	4b9b      	ldr	r3, [pc, #620]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80053cc:	4b98      	ldr	r3, [pc, #608]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	08db      	lsrs	r3, r3, #3
 80053d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	fb02 f303 	mul.w	r3, r2, r3
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8111 	beq.w	8005612 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	f000 8083 	beq.w	80054fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	f200 80a1 	bhi.w	8005542 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d056      	beq.n	80054ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800540c:	e099      	b.n	8005542 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800540e:	4b88      	ldr	r3, [pc, #544]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02d      	beq.n	8005476 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800541a:	4b85      	ldr	r3, [pc, #532]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	08db      	lsrs	r3, r3, #3
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	4a83      	ldr	r2, [pc, #524]	; (8005634 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005426:	fa22 f303 	lsr.w	r3, r2, r3
 800542a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	ee07 3a90 	vmov	s15, r3
 800543c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005444:	4b7a      	ldr	r3, [pc, #488]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005454:	ed97 6a03 	vldr	s12, [r7, #12]
 8005458:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005638 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800545c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005470:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005474:	e087      	b.n	8005586 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	ee07 3a90 	vmov	s15, r3
 800547c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005480:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800563c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005488:	4b69      	ldr	r3, [pc, #420]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005498:	ed97 6a03 	vldr	s12, [r7, #12]
 800549c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005638 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80054a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054b8:	e065      	b.n	8005586 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	ee07 3a90 	vmov	s15, r3
 80054c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005640 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80054c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054cc:	4b58      	ldr	r3, [pc, #352]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d4:	ee07 3a90 	vmov	s15, r3
 80054d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005638 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80054e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054fc:	e043      	b.n	8005586 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	ee07 3a90 	vmov	s15, r3
 8005504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005508:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800550c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005510:	4b47      	ldr	r3, [pc, #284]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005520:	ed97 6a03 	vldr	s12, [r7, #12]
 8005524:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005638 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005540:	e021      	b.n	8005586 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800563c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005554:	4b36      	ldr	r3, [pc, #216]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005564:	ed97 6a03 	vldr	s12, [r7, #12]
 8005568:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005638 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800556c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005580:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005584:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005586:	4b2a      	ldr	r3, [pc, #168]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	0a5b      	lsrs	r3, r3, #9
 800558c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005590:	ee07 3a90 	vmov	s15, r3
 8005594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800559c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ac:	ee17 2a90 	vmov	r2, s15
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80055b4:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80055d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055da:	ee17 2a90 	vmov	r2, s15
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80055e2:	4b13      	ldr	r3, [pc, #76]	; (8005630 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	0e1b      	lsrs	r3, r3, #24
 80055e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005608:	ee17 2a90 	vmov	r2, s15
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005610:	e008      	b.n	8005624 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	609a      	str	r2, [r3, #8]
}
 8005624:	bf00      	nop
 8005626:	3724      	adds	r7, #36	; 0x24
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	58024400 	.word	0x58024400
 8005634:	03d09000 	.word	0x03d09000
 8005638:	46000000 	.word	0x46000000
 800563c:	4c742400 	.word	0x4c742400
 8005640:	4a742400 	.word	0x4a742400
 8005644:	4bb71b00 	.word	0x4bb71b00

08005648 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005656:	4b53      	ldr	r3, [pc, #332]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b03      	cmp	r3, #3
 8005660:	d101      	bne.n	8005666 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e099      	b.n	800579a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005666:	4b4f      	ldr	r3, [pc, #316]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a4e      	ldr	r2, [pc, #312]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800566c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005672:	f7fb f9bf 	bl	80009f4 <HAL_GetTick>
 8005676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005678:	e008      	b.n	800568c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800567a:	f7fb f9bb 	bl	80009f4 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e086      	b.n	800579a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800568c:	4b45      	ldr	r3, [pc, #276]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f0      	bne.n	800567a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005698:	4b42      	ldr	r3, [pc, #264]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	031b      	lsls	r3, r3, #12
 80056a6:	493f      	ldr	r1, [pc, #252]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	628b      	str	r3, [r1, #40]	; 0x28
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	025b      	lsls	r3, r3, #9
 80056be:	b29b      	uxth	r3, r3
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	061b      	lsls	r3, r3, #24
 80056d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056dc:	4931      	ldr	r1, [pc, #196]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80056e2:	4b30      	ldr	r3, [pc, #192]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	492d      	ldr	r1, [pc, #180]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80056f4:	4b2b      	ldr	r3, [pc, #172]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	f023 0220 	bic.w	r2, r3, #32
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	4928      	ldr	r1, [pc, #160]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005702:	4313      	orrs	r3, r2
 8005704:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005706:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570a:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800570c:	f023 0310 	bic.w	r3, r3, #16
 8005710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005716:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <RCCEx_PLL2_Config+0x160>)
 8005718:	4013      	ands	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	69d2      	ldr	r2, [r2, #28]
 800571e:	00d2      	lsls	r2, r2, #3
 8005720:	4920      	ldr	r1, [pc, #128]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005722:	4313      	orrs	r3, r2
 8005724:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005726:	4b1f      	ldr	r3, [pc, #124]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	4a1e      	ldr	r2, [pc, #120]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800572c:	f043 0310 	orr.w	r3, r3, #16
 8005730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005738:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	4a19      	ldr	r2, [pc, #100]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800573e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005744:	e00f      	b.n	8005766 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d106      	bne.n	800575a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800574c:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005758:	e005      	b.n	8005766 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800575a:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005764:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800576c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005772:	f7fb f93f 	bl	80009f4 <HAL_GetTick>
 8005776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005778:	e008      	b.n	800578c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800577a:	f7fb f93b 	bl	80009f4 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e006      	b.n	800579a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <RCCEx_PLL2_Config+0x15c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
 80057a8:	ffff0007 	.word	0xffff0007

080057ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057ba:	4b53      	ldr	r3, [pc, #332]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d101      	bne.n	80057ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e099      	b.n	80058fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80057ca:	4b4f      	ldr	r3, [pc, #316]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a4e      	ldr	r2, [pc, #312]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80057d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d6:	f7fb f90d 	bl	80009f4 <HAL_GetTick>
 80057da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057dc:	e008      	b.n	80057f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057de:	f7fb f909 	bl	80009f4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e086      	b.n	80058fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057f0:	4b45      	ldr	r3, [pc, #276]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f0      	bne.n	80057de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80057fc:	4b42      	ldr	r3, [pc, #264]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	051b      	lsls	r3, r3, #20
 800580a:	493f      	ldr	r1, [pc, #252]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	628b      	str	r3, [r1, #40]	; 0x28
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	3b01      	subs	r3, #1
 8005816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	3b01      	subs	r3, #1
 8005820:	025b      	lsls	r3, r3, #9
 8005822:	b29b      	uxth	r3, r3
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	3b01      	subs	r3, #1
 800582c:	041b      	lsls	r3, r3, #16
 800582e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	3b01      	subs	r3, #1
 800583a:	061b      	lsls	r3, r3, #24
 800583c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005840:	4931      	ldr	r1, [pc, #196]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 8005842:	4313      	orrs	r3, r2
 8005844:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005846:	4b30      	ldr	r3, [pc, #192]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	492d      	ldr	r1, [pc, #180]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 8005854:	4313      	orrs	r3, r2
 8005856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005858:	4b2b      	ldr	r3, [pc, #172]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	4928      	ldr	r1, [pc, #160]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 8005866:	4313      	orrs	r3, r2
 8005868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800586a:	4b27      	ldr	r3, [pc, #156]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	4a26      	ldr	r2, [pc, #152]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 8005870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005876:	4b24      	ldr	r3, [pc, #144]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 8005878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800587a:	4b24      	ldr	r3, [pc, #144]	; (800590c <RCCEx_PLL3_Config+0x160>)
 800587c:	4013      	ands	r3, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	69d2      	ldr	r2, [r2, #28]
 8005882:	00d2      	lsls	r2, r2, #3
 8005884:	4920      	ldr	r1, [pc, #128]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 8005886:	4313      	orrs	r3, r2
 8005888:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800588a:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	4a1e      	ldr	r2, [pc, #120]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 8005890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800589c:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	4a19      	ldr	r2, [pc, #100]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80058a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058a8:	e00f      	b.n	80058ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d106      	bne.n	80058be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80058b0:	4b15      	ldr	r3, [pc, #84]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	4a14      	ldr	r2, [pc, #80]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80058b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058bc:	e005      	b.n	80058ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	4a11      	ldr	r2, [pc, #68]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80058c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a0e      	ldr	r2, [pc, #56]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80058d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d6:	f7fb f88d 	bl	80009f4 <HAL_GetTick>
 80058da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058dc:	e008      	b.n	80058f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80058de:	f7fb f889 	bl	80009f4 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e006      	b.n	80058fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <RCCEx_PLL3_Config+0x15c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f0      	beq.n	80058de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	58024400 	.word	0x58024400
 800590c:	ffff0007 	.word	0xffff0007

08005910 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e075      	b.n	8005a0e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7fa fe27 	bl	8000588 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2204      	movs	r2, #4
 800593e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f868 	bl	8005a18 <HAL_SD_InitCard>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e05d      	b.n	8005a0e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005952:	f107 0308 	add.w	r3, r7, #8
 8005956:	4619      	mov	r1, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 f8c1 	bl	8006ae0 <HAL_SD_GetCardStatus>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e052      	b.n	8005a0e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005968:	7e3b      	ldrb	r3, [r7, #24]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800596e:	7e7b      	ldrb	r3, [r7, #25]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	2b01      	cmp	r3, #1
 800597a:	d10a      	bne.n	8005992 <HAL_SD_Init+0x82>
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_SD_Init+0x78>
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d004      	beq.n	8005992 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598e:	659a      	str	r2, [r3, #88]	; 0x58
 8005990:	e00b      	b.n	80059aa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	2b01      	cmp	r3, #1
 8005998:	d104      	bne.n	80059a4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059a0:	659a      	str	r2, [r3, #88]	; 0x58
 80059a2:	e002      	b.n	80059aa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 f97f 	bl	8006cb4 <HAL_SD_ConfigWideBusOperation>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e026      	b.n	8005a0e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80059c0:	f7fb f818 	bl	80009f4 <HAL_GetTick>
 80059c4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80059c6:	e011      	b.n	80059ec <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80059c8:	f7fb f814 	bl	80009f4 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d109      	bne.n	80059ec <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059de:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e010      	b.n	8005a0e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fa73 	bl	8006ed8 <HAL_SD_GetCardState>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d1e7      	bne.n	80059c8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3728      	adds	r7, #40	; 0x28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b08d      	sub	sp, #52	; 0x34
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005a34:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005a38:	f7fe fd24 	bl	8004484 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a3c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a52:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e06a      	b.n	8005b2e <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	4a36      	ldr	r2, [pc, #216]	; (8005b38 <HAL_SD_InitCard+0x120>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681c      	ldr	r4, [r3, #0]
 8005a6a:	466a      	mov	r2, sp
 8005a6c:	f107 0318 	add.w	r3, r7, #24
 8005a70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a74:	e882 0003 	stmia.w	r2, {r0, r1}
 8005a78:	f107 030c 	add.w	r3, r7, #12
 8005a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f001 febc 	bl	80077fc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 feff 	bl	800788c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005a9a:	4a28      	ldr	r2, [pc, #160]	; (8005b3c <HAL_SD_InitCard+0x124>)
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fa ffb1 	bl	8000a0c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f001 fb02 	bl	80070b4 <SD_PowerON>
 8005ab0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e02e      	b.n	8005b2e <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 fa21 	bl	8006f18 <SD_InitCard>
 8005ad6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00b      	beq.n	8005af6 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e01b      	b.n	8005b2e <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 ff5a 	bl	80079b8 <SDMMC_CmdBlockLength>
 8005b04:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00f      	beq.n	8005b2c <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a0b      	ldr	r2, [pc, #44]	; (8005b40 <HAL_SD_InitCard+0x128>)
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	372c      	adds	r7, #44	; 0x2c
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd90      	pop	{r4, r7, pc}
 8005b36:	bf00      	nop
 8005b38:	014f8b59 	.word	0x014f8b59
 8005b3c:	00012110 	.word	0x00012110
 8005b40:	1fe00fff 	.word	0x1fe00fff

08005b44 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b092      	sub	sp, #72	; 0x48
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b52:	f7fa ff4f 	bl	80009f4 <HAL_GetTick>
 8005b56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d107      	bne.n	8005b76 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e167      	b.n	8005e46 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	f040 815a 	bne.w	8005e38 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	441a      	add	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d907      	bls.n	8005ba8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e14e      	b.n	8005e46 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2203      	movs	r2, #3
 8005bac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d002      	beq.n	8005bc6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	025b      	lsls	r3, r3, #9
 8005bc4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	025b      	lsls	r3, r3, #9
 8005bd0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005bd2:	2390      	movs	r3, #144	; 0x90
 8005bd4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f107 0214 	add.w	r2, r7, #20
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 feb7 	bl	8007960 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c00:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d90a      	bls.n	8005c1e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 ff15 	bl	8007a44 <SDMMC_CmdReadMultiBlock>
 8005c1a:	6478      	str	r0, [r7, #68]	; 0x44
 8005c1c:	e009      	b.n	8005c32 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 fee7 	bl	80079fe <SDMMC_CmdReadSingleBlock>
 8005c30:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d012      	beq.n	8005c5e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a84      	ldr	r2, [pc, #528]	; (8005e50 <HAL_SD_ReadBlocks+0x30c>)
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e0f3      	b.n	8005e46 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c62:	e058      	b.n	8005d16 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d033      	beq.n	8005cda <HAL_SD_ReadBlocks+0x196>
 8005c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c74:	2b1f      	cmp	r3, #31
 8005c76:	d930      	bls.n	8005cda <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7c:	e027      	b.n	8005cce <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 fde4 	bl	8007850 <SDMMC_ReadFIFO>
 8005c88:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	3301      	adds	r3, #1
 8005c96:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	0e1b      	lsrs	r3, r3, #24
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cca:	3301      	adds	r3, #1
 8005ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd0:	2b07      	cmp	r3, #7
 8005cd2:	d9d4      	bls.n	8005c7e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	3b20      	subs	r3, #32
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005cda:	f7fa fe8b 	bl	80009f4 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d902      	bls.n	8005cf0 <HAL_SD_ReadBlocks+0x1ac>
 8005cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d112      	bne.n	8005d16 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a56      	ldr	r2, [pc, #344]	; (8005e50 <HAL_SD_ReadBlocks+0x30c>)
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e097      	b.n	8005e46 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d09f      	beq.n	8005c64 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d32:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d022      	beq.n	8005d88 <HAL_SD_ReadBlocks+0x244>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d91f      	bls.n	8005d88 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d01b      	beq.n	8005d88 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fedf 	bl	8007b18 <SDMMC_CmdStopTransfer>
 8005d5a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d012      	beq.n	8005d88 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3a      	ldr	r2, [pc, #232]	; (8005e50 <HAL_SD_ReadBlocks+0x30c>)
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d70:	431a      	orrs	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e05e      	b.n	8005e46 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <HAL_SD_ReadBlocks+0x30c>)
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da2:	f043 0208 	orr.w	r2, r3, #8
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e044      	b.n	8005e46 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d012      	beq.n	8005df0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a20      	ldr	r2, [pc, #128]	; (8005e50 <HAL_SD_ReadBlocks+0x30c>)
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd6:	f043 0202 	orr.w	r2, r3, #2
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e02a      	b.n	8005e46 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d012      	beq.n	8005e24 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a13      	ldr	r2, [pc, #76]	; (8005e50 <HAL_SD_ReadBlocks+0x30c>)
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e010      	b.n	8005e46 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <HAL_SD_ReadBlocks+0x310>)
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e006      	b.n	8005e46 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
  }
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3748      	adds	r7, #72	; 0x48
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	1fe00fff 	.word	0x1fe00fff
 8005e54:	18000f3a 	.word	0x18000f3a

08005e58 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b092      	sub	sp, #72	; 0x48
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005e66:	f7fa fdc5 	bl	80009f4 <HAL_GetTick>
 8005e6a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d107      	bne.n	8005e8a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e16b      	b.n	8006162 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	f040 815e 	bne.w	8006154 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	441a      	add	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d907      	bls.n	8005ebc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e152      	b.n	8006162 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d002      	beq.n	8005eda <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	025b      	lsls	r3, r3, #9
 8005ed8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005eda:	f04f 33ff 	mov.w	r3, #4294967295
 8005ede:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	025b      	lsls	r3, r3, #9
 8005ee4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ee6:	2390      	movs	r3, #144	; 0x90
 8005ee8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005eea:	2300      	movs	r3, #0
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f107 0218 	add.w	r2, r7, #24
 8005efe:	4611      	mov	r1, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 fd2d 	bl	8007960 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f14:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d90a      	bls.n	8005f32 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 fdd1 	bl	8007ad0 <SDMMC_CmdWriteMultiBlock>
 8005f2e:	6478      	str	r0, [r7, #68]	; 0x44
 8005f30:	e009      	b.n	8005f46 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2210      	movs	r2, #16
 8005f36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fda3 	bl	8007a8a <SDMMC_CmdWriteSingleBlock>
 8005f44:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d012      	beq.n	8005f72 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a86      	ldr	r2, [pc, #536]	; (800616c <HAL_SD_WriteBlocks+0x314>)
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e0f7      	b.n	8006162 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005f76:	e05c      	b.n	8006032 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d037      	beq.n	8005ff6 <HAL_SD_WriteBlocks+0x19e>
 8005f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f88:	2b1f      	cmp	r3, #31
 8005f8a:	d934      	bls.n	8005ff6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f90:	e02b      	b.n	8005fea <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fac:	3301      	adds	r3, #1
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	041a      	lsls	r2, r3, #16
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	061a      	lsls	r2, r3, #24
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f107 0214 	add.w	r2, r7, #20
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fc43 	bl	800786a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8005fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fec:	2b07      	cmp	r3, #7
 8005fee:	d9d0      	bls.n	8005f92 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff2:	3b20      	subs	r3, #32
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005ff6:	f7fa fcfd 	bl	80009f4 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006002:	429a      	cmp	r2, r3
 8006004:	d902      	bls.n	800600c <HAL_SD_WriteBlocks+0x1b4>
 8006006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006008:	2b00      	cmp	r3, #0
 800600a:	d112      	bne.n	8006032 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a56      	ldr	r2, [pc, #344]	; (800616c <HAL_SD_WriteBlocks+0x314>)
 8006012:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601a:	431a      	orrs	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e097      	b.n	8006162 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800603c:	2b00      	cmp	r3, #0
 800603e:	d09b      	beq.n	8005f78 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d022      	beq.n	80060a4 <HAL_SD_WriteBlocks+0x24c>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d91f      	bls.n	80060a4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	2b03      	cmp	r3, #3
 800606a:	d01b      	beq.n	80060a4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f001 fd51 	bl	8007b18 <SDMMC_CmdStopTransfer>
 8006076:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607a:	2b00      	cmp	r3, #0
 800607c:	d012      	beq.n	80060a4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a3a      	ldr	r2, [pc, #232]	; (800616c <HAL_SD_WriteBlocks+0x314>)
 8006084:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608c:	431a      	orrs	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e05e      	b.n	8006162 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d012      	beq.n	80060d8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a2d      	ldr	r2, [pc, #180]	; (800616c <HAL_SD_WriteBlocks+0x314>)
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	f043 0208 	orr.w	r2, r3, #8
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e044      	b.n	8006162 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d012      	beq.n	800610c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a20      	ldr	r2, [pc, #128]	; (800616c <HAL_SD_WriteBlocks+0x314>)
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f2:	f043 0202 	orr.w	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e02a      	b.n	8006162 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b00      	cmp	r3, #0
 8006118:	d012      	beq.n	8006140 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a13      	ldr	r2, [pc, #76]	; (800616c <HAL_SD_WriteBlocks+0x314>)
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	f043 0210 	orr.w	r2, r3, #16
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e010      	b.n	8006162 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <HAL_SD_WriteBlocks+0x318>)
 8006146:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	e006      	b.n	8006162 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3748      	adds	r7, #72	; 0x48
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	1fe00fff 	.word	0x1fe00fff
 8006170:	18000f3a 	.word	0x18000f3a

08006174 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	; 0x30
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d107      	bne.n	800619c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006190:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e08d      	b.n	80062b8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	f040 8086 	bne.w	80062b6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d907      	bls.n	80061ce <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e074      	b.n	80062b8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2203      	movs	r2, #3
 80061d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2200      	movs	r2, #0
 80061dc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	025a      	lsls	r2, r3, #9
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d002      	beq.n	80061fa <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	025b      	lsls	r3, r3, #9
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061fa:	f04f 33ff 	mov.w	r3, #4294967295
 80061fe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	025b      	lsls	r3, r3, #9
 8006204:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006206:	2390      	movs	r3, #144	; 0x90
 8006208:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800620a:	2302      	movs	r3, #2
 800620c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800620e:	2300      	movs	r3, #0
 8006210:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006212:	2300      	movs	r3, #0
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f107 0210 	add.w	r2, r7, #16
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f001 fb9d 	bl	8007960 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006234:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2201      	movs	r2, #1
 8006244:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d90a      	bls.n	8006262 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2282      	movs	r2, #130	; 0x82
 8006250:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006258:	4618      	mov	r0, r3
 800625a:	f001 fbf3 	bl	8007a44 <SDMMC_CmdReadMultiBlock>
 800625e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006260:	e009      	b.n	8006276 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2281      	movs	r2, #129	; 0x81
 8006266:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800626e:	4618      	mov	r0, r3
 8006270:	f001 fbc5 	bl	80079fe <SDMMC_CmdReadSingleBlock>
 8006274:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d012      	beq.n	80062a2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a0f      	ldr	r2, [pc, #60]	; (80062c0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006282:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	431a      	orrs	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e00a      	b.n	80062b8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80062b0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e000      	b.n	80062b8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80062b6:	2302      	movs	r3, #2
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3730      	adds	r7, #48	; 0x30
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	1fe00fff 	.word	0x1fe00fff

080062c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08c      	sub	sp, #48	; 0x30
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d107      	bne.n	80062ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e08d      	b.n	8006408 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	f040 8086 	bne.w	8006406 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	441a      	add	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630a:	429a      	cmp	r2, r3
 800630c:	d907      	bls.n	800631e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e074      	b.n	8006408 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2203      	movs	r2, #3
 8006322:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	025a      	lsls	r2, r3, #9
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	2b01      	cmp	r3, #1
 8006342:	d002      	beq.n	800634a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	025b      	lsls	r3, r3, #9
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800634a:	f04f 33ff 	mov.w	r3, #4294967295
 800634e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	025b      	lsls	r3, r3, #9
 8006354:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006356:	2390      	movs	r3, #144	; 0x90
 8006358:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800635a:	2300      	movs	r3, #0
 800635c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800635e:	2300      	movs	r3, #0
 8006360:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006362:	2300      	movs	r3, #0
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f107 0210 	add.w	r2, r7, #16
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f001 faf5 	bl	8007960 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006384:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2201      	movs	r2, #1
 8006394:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d90a      	bls.n	80063b2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	22a0      	movs	r2, #160	; 0xa0
 80063a0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 fb91 	bl	8007ad0 <SDMMC_CmdWriteMultiBlock>
 80063ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063b0:	e009      	b.n	80063c6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2290      	movs	r2, #144	; 0x90
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 fb63 	bl	8007a8a <SDMMC_CmdWriteSingleBlock>
 80063c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d012      	beq.n	80063f2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	431a      	orrs	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e00a      	b.n	8006408 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006400:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e000      	b.n	8006408 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006406:	2302      	movs	r3, #2
  }
}
 8006408:	4618      	mov	r0, r3
 800640a:	3730      	adds	r7, #48	; 0x30
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	1fe00fff 	.word	0x1fe00fff

08006414 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <HAL_SD_IRQHandler+0x2e>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 f926 	bl	800768c <SD_Read_IT>
 8006440:	e19a      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80ac 	beq.w	80065aa <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800645a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b59      	ldr	r3, [pc, #356]	; (80065cc <HAL_SD_IRQHandler+0x1b8>)
 8006468:	400b      	ands	r3, r1
 800646a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800647a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800648a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d038      	beq.n	8006508 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_SD_IRQHandler+0x96>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d011      	beq.n	80064ce <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 fb32 	bl	8007b18 <SDMMC_CmdStopTransfer>
 80064b4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f95b 	bl	8006784 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a3f      	ldr	r2, [pc, #252]	; (80065d0 <HAL_SD_IRQHandler+0x1bc>)
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <HAL_SD_IRQHandler+0xe4>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f003 fc31 	bl	8009d60 <HAL_SD_RxCpltCallback>
 80064fe:	e13b      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f003 fc23 	bl	8009d4c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006506:	e137      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 8132 	beq.w	8006778 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2200      	movs	r2, #0
 800651a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2200      	movs	r2, #0
 8006522:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2200      	movs	r2, #0
 800652a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <HAL_SD_IRQHandler+0x12c>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f001 fae7 	bl	8007b18 <SDMMC_CmdStopTransfer>
 800654a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f910 	bl	8006784 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <HAL_SD_IRQHandler+0x172>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f003 fbe0 	bl	8009d4c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d105      	bne.n	80065a2 <HAL_SD_IRQHandler+0x18e>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80eb 	beq.w	8006778 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f003 fbdc 	bl	8009d60 <HAL_SD_RxCpltCallback>
}
 80065a8:	e0e6      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00d      	beq.n	80065d4 <HAL_SD_IRQHandler+0x1c0>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d008      	beq.n	80065d4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 f8a8 	bl	8007718 <SD_Write_IT>
 80065c8:	e0d6      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
 80065ca:	bf00      	nop
 80065cc:	ffff3ec5 	.word	0xffff3ec5
 80065d0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 809d 	beq.w	800671e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	f043 0202 	orr.w	r2, r3, #2
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	f043 0208 	orr.w	r2, r3, #8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662a:	f043 0220 	orr.w	r2, r3, #32
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006644:	f043 0210 	orr.w	r2, r3, #16
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a4b      	ldr	r2, [pc, #300]	; (8006780 <HAL_SD_IRQHandler+0x36c>)
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006662:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006672:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006692:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f001 fa3d 	bl	8007b18 <SDMMC_CmdStopTransfer>
 800669e:	4602      	mov	r2, r0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066b8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f851 	bl	8006784 <HAL_SD_ErrorCallback>
}
 80066e2:	e049      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d044      	beq.n	8006778 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d040      	beq.n	8006778 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006704:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f834 	bl	8006784 <HAL_SD_ErrorCallback>
}
 800671c:	e02c      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d025      	beq.n	8006778 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10c      	bne.n	800675e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f001 f84a 	bl	80077e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006754:	e010      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 f832 	bl	80077c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800675c:	e00c      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 f833 	bl	80077d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800676e:	e003      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 f81b 	bl	80077ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006776:	e7ff      	b.n	8006778 <HAL_SD_IRQHandler+0x364>
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	18000f3a 	.word	0x18000f3a

08006784 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a6:	0f9b      	lsrs	r3, r3, #30
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b2:	0e9b      	lsrs	r3, r3, #26
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c4:	0e1b      	lsrs	r3, r3, #24
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d6:	0c1b      	lsrs	r3, r3, #16
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f8:	0d1b      	lsrs	r3, r3, #20
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006804:	0c1b      	lsrs	r3, r3, #16
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	b2da      	uxtb	r2, r3
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006816:	0bdb      	lsrs	r3, r3, #15
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	b2da      	uxtb	r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006828:	0b9b      	lsrs	r3, r3, #14
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	b2da      	uxtb	r2, r3
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683a:	0b5b      	lsrs	r3, r3, #13
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684c:	0b1b      	lsrs	r3, r3, #12
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2200      	movs	r2, #0
 800685e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d163      	bne.n	8006930 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686c:	009a      	lsls	r2, r3, #2
 800686e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006872:	4013      	ands	r3, r2
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006878:	0f92      	lsrs	r2, r2, #30
 800687a:	431a      	orrs	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006884:	0edb      	lsrs	r3, r3, #27
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	b2da      	uxtb	r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006896:	0e1b      	lsrs	r3, r3, #24
 8006898:	b2db      	uxtb	r3, r3
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a8:	0d5b      	lsrs	r3, r3, #21
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ba:	0c9b      	lsrs	r3, r3, #18
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068cc:	0bdb      	lsrs	r3, r3, #15
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	7e1b      	ldrb	r3, [r3, #24]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	3302      	adds	r3, #2
 80068f0:	2201      	movs	r2, #1
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068fa:	fb03 f202 	mul.w	r2, r3, r2
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	7a1b      	ldrb	r3, [r3, #8]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	2201      	movs	r2, #1
 800690e:	409a      	lsls	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800691c:	0a52      	lsrs	r2, r2, #9
 800691e:	fb03 f202 	mul.w	r2, r3, r2
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800692c:	655a      	str	r2, [r3, #84]	; 0x54
 800692e:	e031      	b.n	8006994 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	2b01      	cmp	r3, #1
 8006936:	d11d      	bne.n	8006974 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693c:	041b      	lsls	r3, r3, #16
 800693e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	431a      	orrs	r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	3301      	adds	r3, #1
 8006954:	029a      	lsls	r2, r3, #10
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006968:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	655a      	str	r2, [r3, #84]	; 0x54
 8006972:	e00f      	b.n	8006994 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a58      	ldr	r2, [pc, #352]	; (8006adc <HAL_SD_GetCardCSD+0x344>)
 800697a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006980:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e09d      	b.n	8006ad0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006998:	0b9b      	lsrs	r3, r3, #14
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069aa:	09db      	lsrs	r3, r3, #7
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069cc:	0fdb      	lsrs	r3, r3, #31
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d8:	0f5b      	lsrs	r3, r3, #29
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ea:	0e9b      	lsrs	r3, r3, #26
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069fc:	0d9b      	lsrs	r3, r3, #22
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a0e:	0d5b      	lsrs	r3, r3, #21
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a2a:	0c1b      	lsrs	r3, r3, #16
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a3e:	0bdb      	lsrs	r3, r3, #15
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a52:	0b9b      	lsrs	r3, r3, #14
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a66:	0b5b      	lsrs	r3, r3, #13
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a7a:	0b1b      	lsrs	r3, r3, #12
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8e:	0a9b      	lsrs	r3, r3, #10
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa2:	0a1b      	lsrs	r3, r3, #8
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	1fe00fff 	.word	0x1fe00fff

08006ae0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b094      	sub	sp, #80	; 0x50
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d101      	bne.n	8006b00 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0a7      	b.n	8006c50 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006b00:	f107 0308 	add.w	r3, r7, #8
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fb62 	bl	80071d0 <SD_SendSDStatus>
 8006b0c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d011      	beq.n	8006b38 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a4f      	ldr	r2, [pc, #316]	; (8006c58 <HAL_SD_GetCardStatus+0x178>)
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006b36:	e070      	b.n	8006c1a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	099b      	lsrs	r3, r3, #6
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	0e1b      	lsrs	r3, r3, #24
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	061a      	lsls	r2, r3, #24
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b7e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006b88:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	0e1b      	lsrs	r3, r3, #24
 8006b8e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	0d1b      	lsrs	r3, r3, #20
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	0c1b      	lsrs	r3, r3, #16
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	0a9b      	lsrs	r3, r3, #10
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	0a1b      	lsrs	r3, r3, #8
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	091b      	lsrs	r3, r3, #4
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	0e1b      	lsrs	r3, r3, #24
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fec8 	bl	80079b8 <SDMMC_CmdBlockLength>
 8006c28:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a08      	ldr	r2, [pc, #32]	; (8006c58 <HAL_SD_GetCardStatus+0x178>)
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c3c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006c4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3750      	adds	r7, #80	; 0x50
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	1fe00fff 	.word	0x1fe00fff

08006c5c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006cb4:	b590      	push	{r4, r7, lr}
 8006cb6:	b08d      	sub	sp, #52	; 0x34
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2203      	movs	r2, #3
 8006ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d02e      	beq.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cde:	d106      	bne.n	8006cee <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	635a      	str	r2, [r3, #52]	; 0x34
 8006cec:	e029      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf4:	d10a      	bne.n	8006d0c <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb62 	bl	80073c0 <SD_WideBus_Enable>
 8006cfc:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	635a      	str	r2, [r3, #52]	; 0x34
 8006d0a:	e01a      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fb9f 	bl	8007456 <SD_WideBus_Disable>
 8006d18:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	635a      	str	r2, [r3, #52]	; 0x34
 8006d26:	e00c      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	635a      	str	r2, [r3, #52]	; 0x34
 8006d34:	e005      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d007      	beq.n	8006d5a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a5e      	ldr	r2, [pc, #376]	; (8006ec8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006d50:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d58:	e094      	b.n	8006e84 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006d5a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006d5e:	f7fd fb91 	bl	8004484 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d62:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8083 	beq.w	8006e72 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695a      	ldr	r2, [r3, #20]
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	4950      	ldr	r1, [pc, #320]	; (8006ecc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d8a:	fba1 1303 	umull	r1, r3, r1, r3
 8006d8e:	0e1b      	lsrs	r3, r3, #24
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d303      	bcc.n	8006d9c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e05a      	b.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da4:	d103      	bne.n	8006dae <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	e051      	b.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db6:	d126      	bne.n	8006e06 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10e      	bne.n	8006dde <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	4a43      	ldr	r2, [pc, #268]	; (8006ed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d906      	bls.n	8006dd6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	4a40      	ldr	r2, [pc, #256]	; (8006ecc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd0:	0e5b      	lsrs	r3, r3, #25
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	e03d      	b.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	e039      	b.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	6a3a      	ldr	r2, [r7, #32]
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	4a39      	ldr	r2, [pc, #228]	; (8006ed0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d906      	bls.n	8006dfe <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	4a36      	ldr	r2, [pc, #216]	; (8006ecc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006df4:	fba2 2303 	umull	r2, r3, r2, r3
 8006df8:	0e5b      	lsrs	r3, r3, #25
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	e029      	b.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	e025      	b.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10e      	bne.n	8006e2c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	4a30      	ldr	r2, [pc, #192]	; (8006ed4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d906      	bls.n	8006e24 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	4a2c      	ldr	r2, [pc, #176]	; (8006ecc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1e:	0e1b      	lsrs	r3, r3, #24
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	e016      	b.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	e012      	b.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	6a3a      	ldr	r2, [r7, #32]
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	4a26      	ldr	r2, [pc, #152]	; (8006ed4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d906      	bls.n	8006e4c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	4a22      	ldr	r2, [pc, #136]	; (8006ecc <HAL_SD_ConfigWideBusOperation+0x218>)
 8006e42:	fba2 2303 	umull	r2, r3, r2, r3
 8006e46:	0e1b      	lsrs	r3, r3, #24
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	e002      	b.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681c      	ldr	r4, [r3, #0]
 8006e56:	466a      	mov	r2, sp
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006e60:	e882 0003 	stmia.w	r2, {r0, r1}
 8006e64:	f107 0308 	add.w	r3, r7, #8
 8006e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fcc6 	bl	80077fc <SDMMC_Init>
 8006e70:	e008      	b.n	8006e84 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fd93 	bl	80079b8 <SDMMC_CmdBlockLength>
 8006e92:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00c      	beq.n	8006eb4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a0a      	ldr	r2, [pc, #40]	; (8006ec8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	372c      	adds	r7, #44	; 0x2c
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd90      	pop	{r4, r7, pc}
 8006ec8:	1fe00fff 	.word	0x1fe00fff
 8006ecc:	55e63b89 	.word	0x55e63b89
 8006ed0:	02faf080 	.word	0x02faf080
 8006ed4:	017d7840 	.word	0x017d7840

08006ed8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006ee4:	f107 030c 	add.w	r3, r7, #12
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa40 	bl	8007370 <SD_SendStatus>
 8006ef0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	0a5b      	lsrs	r3, r3, #9
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006f0e:	693b      	ldr	r3, [r7, #16]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b090      	sub	sp, #64	; 0x40
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006f24:	f7f9 fd66 	bl	80009f4 <HAL_GetTick>
 8006f28:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fcbd 	bl	80078ae <SDMMC_GetPowerState>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d102      	bne.n	8006f40 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f3e:	e0b5      	b.n	80070ac <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d02e      	beq.n	8006fa6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 ff08 	bl	8007d62 <SDMMC_CmdSendCID>
 8006f52:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <SD_InitCard+0x46>
    {
      return errorstate;
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	e0a6      	b.n	80070ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2100      	movs	r1, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fce8 	bl	800793a <SDMMC_GetResponse>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2104      	movs	r1, #4
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fcdf 	bl	800793a <SDMMC_GetResponse>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2108      	movs	r1, #8
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fcd6 	bl	800793a <SDMMC_GetResponse>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	210c      	movs	r1, #12
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 fccd 	bl	800793a <SDMMC_GetResponse>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d01d      	beq.n	8006fea <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006fae:	e019      	b.n	8006fe4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f107 020a 	add.w	r2, r7, #10
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 ff10 	bl	8007de0 <SDMMC_CmdSetRelAdd>
 8006fc0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <SD_InitCard+0xb4>
      {
        return errorstate;
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	e06f      	b.n	80070ac <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006fcc:	f7f9 fd12 	bl	80009f4 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	f241 3287 	movw	r2, #4999	; 0x1387
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d902      	bls.n	8006fe4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006fde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fe2:	e063      	b.n	80070ac <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006fe4:	897b      	ldrh	r3, [r7, #10]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0e2      	beq.n	8006fb0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d036      	beq.n	8007060 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ff2:	897b      	ldrh	r3, [r7, #10]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	4619      	mov	r1, r3
 8007006:	4610      	mov	r0, r2
 8007008:	f000 feca 	bl	8007da0 <SDMMC_CmdSendCSD>
 800700c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <SD_InitCard+0x100>
    {
      return errorstate;
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	e049      	b.n	80070ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2100      	movs	r1, #0
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fc8b 	bl	800793a <SDMMC_GetResponse>
 8007024:	4602      	mov	r2, r0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2104      	movs	r1, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fc82 	bl	800793a <SDMMC_GetResponse>
 8007036:	4602      	mov	r2, r0
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2108      	movs	r1, #8
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fc79 	bl	800793a <SDMMC_GetResponse>
 8007048:	4602      	mov	r2, r0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	210c      	movs	r1, #12
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fc70 	bl	800793a <SDMMC_GetResponse>
 800705a:	4602      	mov	r2, r0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2104      	movs	r1, #4
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fc67 	bl	800793a <SDMMC_GetResponse>
 800706c:	4603      	mov	r3, r0
 800706e:	0d1a      	lsrs	r2, r3, #20
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007074:	f107 030c 	add.w	r3, r7, #12
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff fb8c 	bl	8006798 <HAL_SD_GetCardCSD>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007086:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800708a:	e00f      	b.n	80070ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007094:	041b      	lsls	r3, r3, #16
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f000 fd79 	bl	8007b90 <SDMMC_CmdSelDesel>
 800709e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <SD_InitCard+0x192>
  {
    return errorstate;
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	e000      	b.n	80070ac <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3740      	adds	r7, #64	; 0x40
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fd82 	bl	8007bd6 <SDMMC_CmdGoIdleState>
 80070d2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <SD_PowerON+0x2a>
  {
    return errorstate;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	e072      	b.n	80071c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fd95 	bl	8007c12 <SDMMC_CmdOperCond>
 80070e8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f0:	d10d      	bne.n	800710e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fd6a 	bl	8007bd6 <SDMMC_CmdGoIdleState>
 8007102:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <SD_PowerON+0x60>
    {
      return errorstate;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	e05a      	b.n	80071c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	2b01      	cmp	r3, #1
 800711a:	d137      	bne.n	800718c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2100      	movs	r1, #0
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fd95 	bl	8007c52 <SDMMC_CmdAppCommand>
 8007128:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d02d      	beq.n	800718c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007130:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007134:	e046      	b.n	80071c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2100      	movs	r1, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fd88 	bl	8007c52 <SDMMC_CmdAppCommand>
 8007142:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <SD_PowerON+0x9a>
    {
      return errorstate;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	e03a      	b.n	80071c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	491e      	ldr	r1, [pc, #120]	; (80071cc <SD_PowerON+0x118>)
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fd9f 	bl	8007c98 <SDMMC_CmdAppOperCommand>
 800715a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007162:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007166:	e02d      	b.n	80071c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fbe3 	bl	800793a <SDMMC_GetResponse>
 8007174:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	0fdb      	lsrs	r3, r3, #31
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <SD_PowerON+0xce>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <SD_PowerON+0xd0>
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]

    count++;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3301      	adds	r3, #1
 800718a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007192:	4293      	cmp	r3, r2
 8007194:	d802      	bhi.n	800719c <SD_PowerON+0xe8>
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0cc      	beq.n	8007136 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d902      	bls.n	80071ac <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071aa:	e00b      	b.n	80071c4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	c1100000 	.word	0xc1100000

080071d0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08c      	sub	sp, #48	; 0x30
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80071da:	f7f9 fc0b 	bl	80009f4 <HAL_GetTick>
 80071de:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2100      	movs	r1, #0
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fba5 	bl	800793a <SDMMC_GetResponse>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071fa:	d102      	bne.n	8007202 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80071fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007200:	e0b0      	b.n	8007364 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2140      	movs	r1, #64	; 0x40
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fbd5 	bl	80079b8 <SDMMC_CmdBlockLength>
 800720e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	e0a0      	b.n	8007364 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	4619      	mov	r1, r3
 800722e:	4610      	mov	r0, r2
 8007230:	f000 fd0f 	bl	8007c52 <SDMMC_CmdAppCommand>
 8007234:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	e08d      	b.n	8007364 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007248:	f04f 33ff 	mov.w	r3, #4294967295
 800724c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800724e:	2340      	movs	r3, #64	; 0x40
 8007250:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007252:	2360      	movs	r3, #96	; 0x60
 8007254:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007256:	2302      	movs	r3, #2
 8007258:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800725a:	2300      	movs	r3, #0
 800725c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800725e:	2301      	movs	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f107 0208 	add.w	r2, r7, #8
 800726a:	4611      	mov	r1, r2
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fb77 	bl	8007960 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fdf7 	bl	8007e6a <SDMMC_CmdStatusRegister>
 800727c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d02b      	beq.n	80072dc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	e069      	b.n	8007364 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d013      	beq.n	80072c6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800729e:	2300      	movs	r3, #0
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a2:	e00d      	b.n	80072c0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 fad1 	bl	8007850 <SDMMC_ReadFIFO>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	601a      	str	r2, [r3, #0]
        pData++;
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	3304      	adds	r3, #4
 80072b8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	3301      	adds	r3, #1
 80072be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	2b07      	cmp	r3, #7
 80072c4:	d9ee      	bls.n	80072a4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80072c6:	f7f9 fb95 	bl	80009f4 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d102      	bne.n	80072dc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80072d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072da:	e043      	b.n	8007364 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0d2      	beq.n	8007290 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80072f8:	2308      	movs	r3, #8
 80072fa:	e033      	b.n	8007364 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800730a:	2302      	movs	r3, #2
 800730c:	e02a      	b.n	8007364 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d017      	beq.n	800734c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800731c:	2320      	movs	r3, #32
 800731e:	e021      	b.n	8007364 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fa93 	bl	8007850 <SDMMC_ReadFIFO>
 800732a:	4602      	mov	r2, r0
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	601a      	str	r2, [r3, #0]
    pData++;
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	3304      	adds	r3, #4
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007336:	f7f9 fb5d 	bl	80009f4 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007344:	d102      	bne.n	800734c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007346:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800734a:	e00b      	b.n	8007364 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e2      	bne.n	8007320 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a03      	ldr	r2, [pc, #12]	; (800736c <SD_SendSDStatus+0x19c>)
 8007360:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3730      	adds	r7, #48	; 0x30
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	18000f3a 	.word	0x18000f3a

08007370 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007384:	e018      	b.n	80073b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738e:	041b      	lsls	r3, r3, #16
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f000 fd46 	bl	8007e24 <SDMMC_CmdSendStatus>
 8007398:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	e009      	b.n	80073b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fac5 	bl	800793a <SDMMC_GetResponse>
 80073b0:	4602      	mov	r2, r0
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	2300      	movs	r3, #0
 80073ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 faaf 	bl	800793a <SDMMC_GetResponse>
 80073dc:	4603      	mov	r3, r0
 80073de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073e6:	d102      	bne.n	80073ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073ec:	e02f      	b.n	800744e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073ee:	f107 030c 	add.w	r3, r7, #12
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f879 	bl	80074ec <SD_FindSCR>
 80073fa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	e023      	b.n	800744e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01c      	beq.n	800744a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f000 fc18 	bl	8007c52 <SDMMC_CmdAppCommand>
 8007422:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	e00f      	b.n	800744e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2102      	movs	r1, #2
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fc4f 	bl	8007cd8 <SDMMC_CmdBusWidth>
 800743a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	e003      	b.n	800744e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007446:	2300      	movs	r3, #0
 8007448:	e001      	b.n	800744e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800744a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b086      	sub	sp, #24
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	2300      	movs	r3, #0
 8007464:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2100      	movs	r1, #0
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fa64 	bl	800793a <SDMMC_GetResponse>
 8007472:	4603      	mov	r3, r0
 8007474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800747c:	d102      	bne.n	8007484 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800747e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007482:	e02f      	b.n	80074e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007484:	f107 030c 	add.w	r3, r7, #12
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f82e 	bl	80074ec <SD_FindSCR>
 8007490:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	e023      	b.n	80074e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01c      	beq.n	80074e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f000 fbcd 	bl	8007c52 <SDMMC_CmdAppCommand>
 80074b8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	e00f      	b.n	80074e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2100      	movs	r1, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fc04 	bl	8007cd8 <SDMMC_CmdBusWidth>
 80074d0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	e003      	b.n	80074e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80074dc:	2300      	movs	r3, #0
 80074de:	e001      	b.n	80074e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08e      	sub	sp, #56	; 0x38
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80074f6:	f7f9 fa7d 	bl	80009f4 <HAL_GetTick>
 80074fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007500:	2300      	movs	r3, #0
 8007502:	60bb      	str	r3, [r7, #8]
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2108      	movs	r1, #8
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fa50 	bl	80079b8 <SDMMC_CmdBlockLength>
 8007518:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	e0ad      	b.n	8007680 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752c:	041b      	lsls	r3, r3, #16
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f000 fb8e 	bl	8007c52 <SDMMC_CmdAppCommand>
 8007536:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <SD_FindSCR+0x56>
  {
    return errorstate;
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	e09e      	b.n	8007680 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007542:	f04f 33ff 	mov.w	r3, #4294967295
 8007546:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007548:	2308      	movs	r3, #8
 800754a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800754c:	2330      	movs	r3, #48	; 0x30
 800754e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007550:	2302      	movs	r3, #2
 8007552:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007554:	2300      	movs	r3, #0
 8007556:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007558:	2301      	movs	r3, #1
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f107 0210 	add.w	r2, r7, #16
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f9fa 	bl	8007960 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fbd4 	bl	8007d1e <SDMMC_CmdSendSCR>
 8007576:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	2b00      	cmp	r3, #0
 800757c:	d027      	beq.n	80075ce <SD_FindSCR+0xe2>
  {
    return errorstate;
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	e07e      	b.n	8007680 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d113      	bne.n	80075b8 <SD_FindSCR+0xcc>
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	2b00      	cmp	r3, #0
 8007594:	d110      	bne.n	80075b8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f000 f958 	bl	8007850 <SDMMC_ReadFIFO>
 80075a0:	4603      	mov	r3, r0
 80075a2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f951 	bl	8007850 <SDMMC_ReadFIFO>
 80075ae:	4603      	mov	r3, r0
 80075b0:	60fb      	str	r3, [r7, #12]
      index++;
 80075b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b4:	3301      	adds	r3, #1
 80075b6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80075b8:	f7f9 fa1c 	bl	80009f4 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d102      	bne.n	80075ce <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075cc:	e058      	b.n	8007680 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075d4:	f240 532a 	movw	r3, #1322	; 0x52a
 80075d8:	4013      	ands	r3, r2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0d1      	beq.n	8007582 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2208      	movs	r2, #8
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80075f4:	2308      	movs	r3, #8
 80075f6:	e043      	b.n	8007680 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2202      	movs	r2, #2
 800760c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800760e:	2302      	movs	r3, #2
 8007610:	e036      	b.n	8007680 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2220      	movs	r2, #32
 8007626:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007628:	2320      	movs	r3, #32
 800762a:	e029      	b.n	8007680 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a15      	ldr	r2, [pc, #84]	; (8007688 <SD_FindSCR+0x19c>)
 8007632:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	061a      	lsls	r2, r3, #24
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007640:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	0a1b      	lsrs	r3, r3, #8
 8007646:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800764a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	0e1b      	lsrs	r3, r3, #24
 8007650:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	601a      	str	r2, [r3, #0]
    scr++;
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	3304      	adds	r3, #4
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	061a      	lsls	r2, r3, #24
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007668:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007672:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	0e1b      	lsrs	r3, r3, #24
 8007678:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3738      	adds	r7, #56	; 0x38
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	18000f3a 	.word	0x18000f3a

0800768c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	2b1f      	cmp	r3, #31
 80076a0:	d936      	bls.n	8007710 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	e027      	b.n	80076f8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 f8cf 	bl	8007850 <SDMMC_ReadFIFO>
 80076b2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	3301      	adds	r3, #1
 80076c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	0a1b      	lsrs	r3, r3, #8
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	3301      	adds	r3, #1
 80076d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	0c1b      	lsrs	r3, r3, #16
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	3301      	adds	r3, #1
 80076e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	0e1b      	lsrs	r3, r3, #24
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	3301      	adds	r3, #1
 80076f0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	3301      	adds	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b07      	cmp	r3, #7
 80076fc:	d9d4      	bls.n	80076a8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007708:	f1a3 0220 	sub.w	r2, r3, #32
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007710:	bf00      	nop
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	2b1f      	cmp	r3, #31
 800772c:	d93a      	bls.n	80077a4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e02b      	b.n	800778c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]
      tmp++;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	3301      	adds	r3, #1
 800773e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	021a      	lsls	r2, r3, #8
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	3301      	adds	r3, #1
 8007750:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	041a      	lsls	r2, r3, #16
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3301      	adds	r3, #1
 8007762:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	061a      	lsls	r2, r3, #24
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	3301      	adds	r3, #1
 8007774:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f107 020c 	add.w	r2, r7, #12
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f000 f872 	bl	800786a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	3301      	adds	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2b07      	cmp	r3, #7
 8007790:	d9d0      	bls.n	8007734 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	f1a3 0220 	sub.w	r2, r3, #32
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	621a      	str	r2, [r3, #32]
  }
}
 80077a4:	bf00      	nop
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80077fc:	b084      	sub	sp, #16
 80077fe:	b480      	push	{r7}
 8007800:	b085      	sub	sp, #20
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	f107 001c 	add.w	r0, r7, #28
 800780a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007812:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007814:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007816:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800781a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800781e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8007822:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	4b07      	ldr	r3, [pc, #28]	; (800784c <SDMMC_Init+0x50>)
 8007830:	4013      	ands	r3, r2
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	b004      	add	sp, #16
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	ffc02c00 	.word	0xffc02c00

08007850 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f043 0203 	orr.w	r2, r3, #3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0303 	and.w	r3, r3, #3
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80078ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80078f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80078f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	4b06      	ldr	r3, [pc, #24]	; (800791c <SDMMC_SendCommand+0x50>)
 8007904:	4013      	ands	r3, r2
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	fffee0c0 	.word	0xfffee0c0

08007920 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	b2db      	uxtb	r3, r3
}
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3314      	adds	r3, #20
 8007948:	461a      	mov	r2, r3
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	4413      	add	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007986:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800798c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007992:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0

}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80079c6:	2310      	movs	r3, #16
 80079c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079d0:	2300      	movs	r3, #0
 80079d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079da:	f107 0308 	add.w	r3, r7, #8
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff ff73 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80079e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ea:	2110      	movs	r1, #16
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa5f 	bl	8007eb0 <SDMMC_GetCmdResp1>
 80079f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079f4:	69fb      	ldr	r3, [r7, #28]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b088      	sub	sp, #32
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007a0c:	2311      	movs	r3, #17
 8007a0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a20:	f107 0308 	add.w	r3, r7, #8
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff ff50 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a30:	2111      	movs	r1, #17
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa3c 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3720      	adds	r7, #32
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007a52:	2312      	movs	r3, #18
 8007a54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ff2d 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a76:	2112      	movs	r1, #18
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fa19 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007a7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a80:	69fb      	ldr	r3, [r7, #28]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b088      	sub	sp, #32
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007a98:	2318      	movs	r3, #24
 8007a9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007aaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aac:	f107 0308 	add.w	r3, r7, #8
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff ff0a 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007abc:	2118      	movs	r1, #24
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f9f6 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007ade:	2319      	movs	r3, #25
 8007ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007af0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007af2:	f107 0308 	add.w	r3, r7, #8
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fee7 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b02:	2119      	movs	r1, #25
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f9d3 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007b0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007b24:	230c      	movs	r3, #12
 8007b26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b36:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b50:	f107 0308 	add.w	r3, r7, #8
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff feb8 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007b5c:	4a0b      	ldr	r2, [pc, #44]	; (8007b8c <SDMMC_CmdStopTransfer+0x74>)
 8007b5e:	210c      	movs	r1, #12
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f9a5 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007b66:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b7a:	d101      	bne.n	8007b80 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8007b80:	69fb      	ldr	r3, [r7, #28]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3720      	adds	r7, #32
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	05f5e100 	.word	0x05f5e100

08007b90 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007b9e:	2307      	movs	r3, #7
 8007ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bb2:	f107 0308 	add.w	r3, r7, #8
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff fe87 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc2:	2107      	movs	r1, #7
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f973 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b088      	sub	sp, #32
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007be6:	2300      	movs	r3, #0
 8007be8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bea:	2300      	movs	r3, #0
 8007bec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bf4:	f107 0308 	add.w	r3, r7, #8
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff fe66 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fb97 	bl	8008334 <SDMMC_GetCmdError>
 8007c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c08:	69fb      	ldr	r3, [r7, #28]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b088      	sub	sp, #32
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007c1a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007c1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007c20:	2308      	movs	r3, #8
 8007c22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c34:	f107 0308 	add.w	r3, r7, #8
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff fe46 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fb29 	bl	8008298 <SDMMC_GetCmdResp7>
 8007c46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c48:	69fb      	ldr	r3, [r7, #28]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b088      	sub	sp, #32
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007c60:	2337      	movs	r3, #55	; 0x37
 8007c62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c74:	f107 0308 	add.w	r3, r7, #8
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff fe26 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c84:	2137      	movs	r1, #55	; 0x37
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f912 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007c8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3720      	adds	r7, #32
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007ca6:	2329      	movs	r3, #41	; 0x29
 8007ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fe03 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa2e 	bl	8008128 <SDMMC_GetCmdResp3>
 8007ccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cce:	69fb      	ldr	r3, [r7, #28]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007ce6:	2306      	movs	r3, #6
 8007ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cfa:	f107 0308 	add.w	r3, r7, #8
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff fde3 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0a:	2106      	movs	r1, #6
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f8cf 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d14:	69fb      	ldr	r3, [r7, #28]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b088      	sub	sp, #32
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007d2a:	2333      	movs	r3, #51	; 0x33
 8007d2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fdc1 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d4e:	2133      	movs	r1, #51	; 0x33
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f8ad 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007d56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d58:	69fb      	ldr	r3, [r7, #28]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3720      	adds	r7, #32
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b088      	sub	sp, #32
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007d6e:	2302      	movs	r3, #2
 8007d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007d76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d82:	f107 0308 	add.w	r3, r7, #8
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fd9f 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f980 	bl	8008094 <SDMMC_GetCmdResp2>
 8007d94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d96:	69fb      	ldr	r3, [r7, #28]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007dae:	2309      	movs	r3, #9
 8007db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007db2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007db6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007db8:	2300      	movs	r3, #0
 8007dba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dc2:	f107 0308 	add.w	r3, r7, #8
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff fd7f 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f960 	bl	8008094 <SDMMC_GetCmdResp2>
 8007dd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dd6:	69fb      	ldr	r3, [r7, #28]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3720      	adds	r7, #32
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007dee:	2303      	movs	r3, #3
 8007df0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007df6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e02:	f107 0308 	add.w	r3, r7, #8
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fd5f 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	2103      	movs	r1, #3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f9c8 	bl	80081a8 <SDMMC_GetCmdResp6>
 8007e18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e1a:	69fb      	ldr	r3, [r7, #28]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3720      	adds	r7, #32
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007e32:	230d      	movs	r3, #13
 8007e34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e46:	f107 0308 	add.w	r3, r7, #8
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff fd3d 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e56:	210d      	movs	r1, #13
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f829 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007e5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e60:	69fb      	ldr	r3, [r7, #28]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3720      	adds	r7, #32
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b088      	sub	sp, #32
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8007e76:	230d      	movs	r3, #13
 8007e78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e80:	2300      	movs	r3, #0
 8007e82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e8a:	f107 0308 	add.w	r3, r7, #8
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff fd1b 	bl	80078cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9a:	210d      	movs	r1, #13
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f807 	bl	8007eb0 <SDMMC_GetCmdResp1>
 8007ea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007ebe:	4b70      	ldr	r3, [pc, #448]	; (8008080 <SDMMC_GetCmdResp1+0x1d0>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a70      	ldr	r2, [pc, #448]	; (8008084 <SDMMC_GetCmdResp1+0x1d4>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	0a5a      	lsrs	r2, r3, #9
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	fb02 f303 	mul.w	r3, r2, r3
 8007ed0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	1e5a      	subs	r2, r3, #1
 8007ed6:	61fa      	str	r2, [r7, #28]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ee0:	e0c9      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	4b67      	ldr	r3, [pc, #412]	; (8008088 <SDMMC_GetCmdResp1+0x1d8>)
 8007eec:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0ef      	beq.n	8007ed2 <SDMMC_GetCmdResp1+0x22>
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1ea      	bne.n	8007ed2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f0e:	2304      	movs	r3, #4
 8007f10:	e0b1      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d004      	beq.n	8007f28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e0a6      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4a58      	ldr	r2, [pc, #352]	; (800808c <SDMMC_GetCmdResp1+0x1dc>)
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f7ff fcf6 	bl	8007920 <SDMMC_GetCommandResponse>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d001      	beq.n	8007f42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e099      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007f42:	2100      	movs	r1, #0
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7ff fcf8 	bl	800793a <SDMMC_GetResponse>
 8007f4a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4b50      	ldr	r3, [pc, #320]	; (8008090 <SDMMC_GetCmdResp1+0x1e0>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007f56:	2300      	movs	r3, #0
 8007f58:	e08d      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da02      	bge.n	8007f66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f64:	e087      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007f70:	2340      	movs	r3, #64	; 0x40
 8007f72:	e080      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007f7e:	2380      	movs	r3, #128	; 0x80
 8007f80:	e079      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f90:	e071      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fa0:	e069      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fb0:	e061      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fc0:	e059      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fd0:	e051      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fe0:	e049      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007fec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ff0:	e041      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008000:	e039      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800800c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008010:	e031      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800801c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008020:	e029      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800802c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008030:	e021      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800803c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008040:	e019      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800804c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008050:	e011      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800805c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008060:	e009      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800806c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008070:	e001      	b.n	8008076 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008076:	4618      	mov	r0, r3
 8008078:	3720      	adds	r7, #32
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	24000000 	.word	0x24000000
 8008084:	10624dd3 	.word	0x10624dd3
 8008088:	00200045 	.word	0x00200045
 800808c:	002000c5 	.word	0x002000c5
 8008090:	fdffe008 	.word	0xfdffe008

08008094 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800809c:	4b1f      	ldr	r3, [pc, #124]	; (800811c <SDMMC_GetCmdResp2+0x88>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a1f      	ldr	r2, [pc, #124]	; (8008120 <SDMMC_GetCmdResp2+0x8c>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	0a5b      	lsrs	r3, r3, #9
 80080a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ac:	fb02 f303 	mul.w	r3, r2, r3
 80080b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	60fa      	str	r2, [r7, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080c0:	e026      	b.n	8008110 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0ef      	beq.n	80080b2 <SDMMC_GetCmdResp2+0x1e>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1ea      	bne.n	80080b2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2204      	movs	r2, #4
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080ee:	2304      	movs	r3, #4
 80080f0:	e00e      	b.n	8008110 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d004      	beq.n	8008108 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008104:	2301      	movs	r3, #1
 8008106:	e003      	b.n	8008110 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a06      	ldr	r2, [pc, #24]	; (8008124 <SDMMC_GetCmdResp2+0x90>)
 800810c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	24000000 	.word	0x24000000
 8008120:	10624dd3 	.word	0x10624dd3
 8008124:	002000c5 	.word	0x002000c5

08008128 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <SDMMC_GetCmdResp3+0x74>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1a      	ldr	r2, [pc, #104]	; (80081a0 <SDMMC_GetCmdResp3+0x78>)
 8008136:	fba2 2303 	umull	r2, r3, r2, r3
 800813a:	0a5b      	lsrs	r3, r3, #9
 800813c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008140:	fb02 f303 	mul.w	r3, r2, r3
 8008144:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	60fa      	str	r2, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008154:	e01b      	b.n	800818e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0ef      	beq.n	8008146 <SDMMC_GetCmdResp3+0x1e>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1ea      	bne.n	8008146 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2204      	movs	r2, #4
 8008180:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008182:	2304      	movs	r3, #4
 8008184:	e003      	b.n	800818e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a06      	ldr	r2, [pc, #24]	; (80081a4 <SDMMC_GetCmdResp3+0x7c>)
 800818a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	24000000 	.word	0x24000000
 80081a0:	10624dd3 	.word	0x10624dd3
 80081a4:	002000c5 	.word	0x002000c5

080081a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	460b      	mov	r3, r1
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80081b6:	4b35      	ldr	r3, [pc, #212]	; (800828c <SDMMC_GetCmdResp6+0xe4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a35      	ldr	r2, [pc, #212]	; (8008290 <SDMMC_GetCmdResp6+0xe8>)
 80081bc:	fba2 2303 	umull	r2, r3, r2, r3
 80081c0:	0a5b      	lsrs	r3, r3, #9
 80081c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c6:	fb02 f303 	mul.w	r3, r2, r3
 80081ca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	1e5a      	subs	r2, r3, #1
 80081d0:	61fa      	str	r2, [r7, #28]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081da:	e052      	b.n	8008282 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0ef      	beq.n	80081cc <SDMMC_GetCmdResp6+0x24>
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1ea      	bne.n	80081cc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2204      	movs	r2, #4
 8008206:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008208:	2304      	movs	r3, #4
 800820a:	e03a      	b.n	8008282 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800821e:	2301      	movs	r3, #1
 8008220:	e02f      	b.n	8008282 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff fb7c 	bl	8007920 <SDMMC_GetCommandResponse>
 8008228:	4603      	mov	r3, r0
 800822a:	461a      	mov	r2, r3
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	4293      	cmp	r3, r2
 8008230:	d001      	beq.n	8008236 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008232:	2301      	movs	r3, #1
 8008234:	e025      	b.n	8008282 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4a16      	ldr	r2, [pc, #88]	; (8008294 <SDMMC_GetCmdResp6+0xec>)
 800823a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800823c:	2100      	movs	r1, #0
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff fb7b 	bl	800793a <SDMMC_GetResponse>
 8008244:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	0c1b      	lsrs	r3, r3, #16
 8008254:	b29a      	uxth	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800825a:	2300      	movs	r3, #0
 800825c:	e011      	b.n	8008282 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800826c:	e009      	b.n	8008282 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800827c:	e001      	b.n	8008282 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800827e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008282:	4618      	mov	r0, r3
 8008284:	3720      	adds	r7, #32
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	24000000 	.word	0x24000000
 8008290:	10624dd3 	.word	0x10624dd3
 8008294:	002000c5 	.word	0x002000c5

08008298 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80082a0:	4b22      	ldr	r3, [pc, #136]	; (800832c <SDMMC_GetCmdResp7+0x94>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a22      	ldr	r2, [pc, #136]	; (8008330 <SDMMC_GetCmdResp7+0x98>)
 80082a6:	fba2 2303 	umull	r2, r3, r2, r3
 80082aa:	0a5b      	lsrs	r3, r3, #9
 80082ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b0:	fb02 f303 	mul.w	r3, r2, r3
 80082b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1e5a      	subs	r2, r3, #1
 80082ba:	60fa      	str	r2, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082c4:	e02c      	b.n	8008320 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0ef      	beq.n	80082b6 <SDMMC_GetCmdResp7+0x1e>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1ea      	bne.n	80082b6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d004      	beq.n	80082f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2204      	movs	r2, #4
 80082f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082f2:	2304      	movs	r3, #4
 80082f4:	e014      	b.n	8008320 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d004      	beq.n	800830c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008308:	2301      	movs	r3, #1
 800830a:	e009      	b.n	8008320 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2240      	movs	r2, #64	; 0x40
 800831c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800831e:	2300      	movs	r3, #0

}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	24000000 	.word	0x24000000
 8008330:	10624dd3 	.word	0x10624dd3

08008334 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800833c:	4b11      	ldr	r3, [pc, #68]	; (8008384 <SDMMC_GetCmdError+0x50>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a11      	ldr	r2, [pc, #68]	; (8008388 <SDMMC_GetCmdError+0x54>)
 8008342:	fba2 2303 	umull	r2, r3, r2, r3
 8008346:	0a5b      	lsrs	r3, r3, #9
 8008348:	f241 3288 	movw	r2, #5000	; 0x1388
 800834c:	fb02 f303 	mul.w	r3, r2, r3
 8008350:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	1e5a      	subs	r2, r3, #1
 8008356:	60fa      	str	r2, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800835c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008360:	e009      	b.n	8008376 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0f1      	beq.n	8008352 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a06      	ldr	r2, [pc, #24]	; (800838c <SDMMC_GetCmdError+0x58>)
 8008372:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	24000000 	.word	0x24000000
 8008388:	10624dd3 	.word	0x10624dd3
 800838c:	002000c5 	.word	0x002000c5

08008390 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008390:	b084      	sub	sp, #16
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	f107 001c 	add.w	r0, r7, #28
 800839e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d120      	bne.n	80083ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	4b2a      	ldr	r3, [pc, #168]	; (8008464 <USB_CoreInit+0xd4>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d105      	bne.n	80083de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 fc04 	bl	8009bec <USB_CoreReset>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]
 80083e8:	e01a      	b.n	8008420 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 fbf8 	bl	8009bec <USB_CoreReset>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d106      	bne.n	8008414 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	639a      	str	r2, [r3, #56]	; 0x38
 8008412:	e005      	b.n	8008420 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	2b01      	cmp	r3, #1
 8008424:	d116      	bne.n	8008454 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842a:	b29a      	uxth	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008434:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <USB_CoreInit+0xd8>)
 8008436:	4313      	orrs	r3, r2
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f043 0206 	orr.w	r2, r3, #6
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f043 0220 	orr.w	r2, r3, #32
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008460:	b004      	add	sp, #16
 8008462:	4770      	bx	lr
 8008464:	ffbdffbf 	.word	0xffbdffbf
 8008468:	03ee0000 	.word	0x03ee0000

0800846c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d165      	bne.n	800854c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4a41      	ldr	r2, [pc, #260]	; (8008588 <USB_SetTurnaroundTime+0x11c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d906      	bls.n	8008496 <USB_SetTurnaroundTime+0x2a>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4a40      	ldr	r2, [pc, #256]	; (800858c <USB_SetTurnaroundTime+0x120>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d202      	bcs.n	8008496 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008490:	230f      	movs	r3, #15
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	e062      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4a3c      	ldr	r2, [pc, #240]	; (800858c <USB_SetTurnaroundTime+0x120>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d306      	bcc.n	80084ac <USB_SetTurnaroundTime+0x40>
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4a3b      	ldr	r2, [pc, #236]	; (8008590 <USB_SetTurnaroundTime+0x124>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d202      	bcs.n	80084ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80084a6:	230e      	movs	r3, #14
 80084a8:	617b      	str	r3, [r7, #20]
 80084aa:	e057      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4a38      	ldr	r2, [pc, #224]	; (8008590 <USB_SetTurnaroundTime+0x124>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d306      	bcc.n	80084c2 <USB_SetTurnaroundTime+0x56>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	4a37      	ldr	r2, [pc, #220]	; (8008594 <USB_SetTurnaroundTime+0x128>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d202      	bcs.n	80084c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80084bc:	230d      	movs	r3, #13
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	e04c      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	4a33      	ldr	r2, [pc, #204]	; (8008594 <USB_SetTurnaroundTime+0x128>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d306      	bcc.n	80084d8 <USB_SetTurnaroundTime+0x6c>
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	4a32      	ldr	r2, [pc, #200]	; (8008598 <USB_SetTurnaroundTime+0x12c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d802      	bhi.n	80084d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80084d2:	230c      	movs	r3, #12
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	e041      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4a2f      	ldr	r2, [pc, #188]	; (8008598 <USB_SetTurnaroundTime+0x12c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d906      	bls.n	80084ee <USB_SetTurnaroundTime+0x82>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4a2e      	ldr	r2, [pc, #184]	; (800859c <USB_SetTurnaroundTime+0x130>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d802      	bhi.n	80084ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80084e8:	230b      	movs	r3, #11
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e036      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	4a2a      	ldr	r2, [pc, #168]	; (800859c <USB_SetTurnaroundTime+0x130>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d906      	bls.n	8008504 <USB_SetTurnaroundTime+0x98>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4a29      	ldr	r2, [pc, #164]	; (80085a0 <USB_SetTurnaroundTime+0x134>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d802      	bhi.n	8008504 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80084fe:	230a      	movs	r3, #10
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	e02b      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4a26      	ldr	r2, [pc, #152]	; (80085a0 <USB_SetTurnaroundTime+0x134>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d906      	bls.n	800851a <USB_SetTurnaroundTime+0xae>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4a25      	ldr	r2, [pc, #148]	; (80085a4 <USB_SetTurnaroundTime+0x138>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d202      	bcs.n	800851a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008514:	2309      	movs	r3, #9
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e020      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	4a21      	ldr	r2, [pc, #132]	; (80085a4 <USB_SetTurnaroundTime+0x138>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d306      	bcc.n	8008530 <USB_SetTurnaroundTime+0xc4>
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4a20      	ldr	r2, [pc, #128]	; (80085a8 <USB_SetTurnaroundTime+0x13c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d802      	bhi.n	8008530 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800852a:	2308      	movs	r3, #8
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	e015      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4a1d      	ldr	r2, [pc, #116]	; (80085a8 <USB_SetTurnaroundTime+0x13c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d906      	bls.n	8008546 <USB_SetTurnaroundTime+0xda>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	4a1c      	ldr	r2, [pc, #112]	; (80085ac <USB_SetTurnaroundTime+0x140>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d202      	bcs.n	8008546 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008540:	2307      	movs	r3, #7
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	e00a      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008546:	2306      	movs	r3, #6
 8008548:	617b      	str	r3, [r7, #20]
 800854a:	e007      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008552:	2309      	movs	r3, #9
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	e001      	b.n	800855c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008558:	2309      	movs	r3, #9
 800855a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	029b      	lsls	r3, r3, #10
 8008570:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008574:	431a      	orrs	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	00d8acbf 	.word	0x00d8acbf
 800858c:	00e4e1c0 	.word	0x00e4e1c0
 8008590:	00f42400 	.word	0x00f42400
 8008594:	01067380 	.word	0x01067380
 8008598:	011a499f 	.word	0x011a499f
 800859c:	01312cff 	.word	0x01312cff
 80085a0:	014ca43f 	.word	0x014ca43f
 80085a4:	016e3600 	.word	0x016e3600
 80085a8:	01a6ab1f 	.word	0x01a6ab1f
 80085ac:	01e84800 	.word	0x01e84800

080085b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f043 0201 	orr.w	r2, r3, #1
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f023 0201 	bic.w	r2, r3, #1
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d115      	bne.n	8008642 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008622:	2001      	movs	r0, #1
 8008624:	f7f8 f9f2 	bl	8000a0c <HAL_Delay>
      ms++;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 fa4b 	bl	8009aca <USB_GetMode>
 8008634:	4603      	mov	r3, r0
 8008636:	2b01      	cmp	r3, #1
 8008638:	d01e      	beq.n	8008678 <USB_SetCurrentMode+0x84>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b31      	cmp	r3, #49	; 0x31
 800863e:	d9f0      	bls.n	8008622 <USB_SetCurrentMode+0x2e>
 8008640:	e01a      	b.n	8008678 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d115      	bne.n	8008674 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008654:	2001      	movs	r0, #1
 8008656:	f7f8 f9d9 	bl	8000a0c <HAL_Delay>
      ms++;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 fa32 	bl	8009aca <USB_GetMode>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <USB_SetCurrentMode+0x84>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b31      	cmp	r3, #49	; 0x31
 8008670:	d9f0      	bls.n	8008654 <USB_SetCurrentMode+0x60>
 8008672:	e001      	b.n	8008678 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e005      	b.n	8008684 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b32      	cmp	r3, #50	; 0x32
 800867c:	d101      	bne.n	8008682 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800868c:	b084      	sub	sp, #16
 800868e:	b580      	push	{r7, lr}
 8008690:	b086      	sub	sp, #24
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800869a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	e009      	b.n	80086c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	3340      	adds	r3, #64	; 0x40
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	3301      	adds	r3, #1
 80086be:	613b      	str	r3, [r7, #16]
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b0e      	cmp	r3, #14
 80086c4:	d9f2      	bls.n	80086ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80086c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d11c      	bne.n	8008706 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086da:	f043 0302 	orr.w	r3, r3, #2
 80086de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e005      	b.n	8008712 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008718:	461a      	mov	r2, r3
 800871a:	2300      	movs	r3, #0
 800871c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008724:	4619      	mov	r1, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872c:	461a      	mov	r2, r3
 800872e:	680b      	ldr	r3, [r1, #0]
 8008730:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	2b01      	cmp	r3, #1
 8008736:	d10c      	bne.n	8008752 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d104      	bne.n	8008748 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800873e:	2100      	movs	r1, #0
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f965 	bl	8008a10 <USB_SetDevSpeed>
 8008746:	e008      	b.n	800875a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008748:	2101      	movs	r1, #1
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f960 	bl	8008a10 <USB_SetDevSpeed>
 8008750:	e003      	b.n	800875a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008752:	2103      	movs	r1, #3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f95b 	bl	8008a10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800875a:	2110      	movs	r1, #16
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f8f3 	bl	8008948 <USB_FlushTxFifo>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f91f 	bl	80089b0 <USB_FlushRxFifo>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008782:	461a      	mov	r2, r3
 8008784:	2300      	movs	r3, #0
 8008786:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800878e:	461a      	mov	r2, r3
 8008790:	2300      	movs	r3, #0
 8008792:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879a:	461a      	mov	r2, r3
 800879c:	2300      	movs	r3, #0
 800879e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
 80087a4:	e043      	b.n	800882e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	015a      	lsls	r2, r3, #5
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087bc:	d118      	bne.n	80087f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	461a      	mov	r2, r3
 80087d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	e013      	b.n	8008802 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e6:	461a      	mov	r2, r3
 80087e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	e008      	b.n	8008802 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fc:	461a      	mov	r2, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880e:	461a      	mov	r2, r3
 8008810:	2300      	movs	r3, #0
 8008812:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008820:	461a      	mov	r2, r3
 8008822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008826:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	3301      	adds	r3, #1
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	429a      	cmp	r2, r3
 8008834:	d3b7      	bcc.n	80087a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008836:	2300      	movs	r3, #0
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	e043      	b.n	80088c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800884e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008852:	d118      	bne.n	8008886 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10a      	bne.n	8008870 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008866:	461a      	mov	r2, r3
 8008868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	e013      	b.n	8008898 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887c:	461a      	mov	r2, r3
 800887e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	e008      	b.n	8008898 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008892:	461a      	mov	r2, r3
 8008894:	2300      	movs	r3, #0
 8008896:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a4:	461a      	mov	r2, r3
 80088a6:	2300      	movs	r3, #0
 80088a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b6:	461a      	mov	r2, r3
 80088b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	3301      	adds	r3, #1
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d3b7      	bcc.n	800883c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80088ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d105      	bne.n	8008900 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	f043 0210 	orr.w	r2, r3, #16
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	699a      	ldr	r2, [r3, #24]
 8008904:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <USB_DevInit+0x2b4>)
 8008906:	4313      	orrs	r3, r2
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800890c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f043 0208 	orr.w	r2, r3, #8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800891e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008920:	2b01      	cmp	r3, #1
 8008922:	d105      	bne.n	8008930 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	4b06      	ldr	r3, [pc, #24]	; (8008944 <USB_DevInit+0x2b8>)
 800892a:	4313      	orrs	r3, r2
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008930:	7dfb      	ldrb	r3, [r7, #23]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800893c:	b004      	add	sp, #16
 800893e:	4770      	bx	lr
 8008940:	803c3800 	.word	0x803c3800
 8008944:	40000004 	.word	0x40000004

08008948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3301      	adds	r3, #1
 800895a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4a13      	ldr	r2, [pc, #76]	; (80089ac <USB_FlushTxFifo+0x64>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d901      	bls.n	8008968 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e01b      	b.n	80089a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	daf2      	bge.n	8008956 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	019b      	lsls	r3, r3, #6
 8008978:	f043 0220 	orr.w	r2, r3, #32
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4a08      	ldr	r2, [pc, #32]	; (80089ac <USB_FlushTxFifo+0x64>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d901      	bls.n	8008992 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e006      	b.n	80089a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b20      	cmp	r3, #32
 800899c:	d0f0      	beq.n	8008980 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	00030d40 	.word	0x00030d40

080089b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3301      	adds	r3, #1
 80089c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4a11      	ldr	r2, [pc, #68]	; (8008a0c <USB_FlushRxFifo+0x5c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d901      	bls.n	80089ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e018      	b.n	8008a00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	daf2      	bge.n	80089bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2210      	movs	r2, #16
 80089de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3301      	adds	r3, #1
 80089e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4a08      	ldr	r2, [pc, #32]	; (8008a0c <USB_FlushRxFifo+0x5c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d901      	bls.n	80089f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e006      	b.n	8008a00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	2b10      	cmp	r3, #16
 80089fc:	d0f0      	beq.n	80089e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	00030d40 	.word	0x00030d40

08008a10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	78fb      	ldrb	r3, [r7, #3]
 8008a2a:	68f9      	ldr	r1, [r7, #12]
 8008a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a30:	4313      	orrs	r3, r2
 8008a32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b087      	sub	sp, #28
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f003 0306 	and.w	r3, r3, #6
 8008a5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d102      	bne.n	8008a68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
 8008a66:	e00a      	b.n	8008a7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d002      	beq.n	8008a74 <USB_GetDevSpeed+0x32>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b06      	cmp	r3, #6
 8008a72:	d102      	bne.n	8008a7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008a74:	2302      	movs	r3, #2
 8008a76:	75fb      	strb	r3, [r7, #23]
 8008a78:	e001      	b.n	8008a7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008a7a:	230f      	movs	r3, #15
 8008a7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	371c      	adds	r7, #28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	785b      	ldrb	r3, [r3, #1]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d139      	bne.n	8008b1c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aae:	69da      	ldr	r2, [r3, #28]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	f003 030f 	and.w	r3, r3, #15
 8008ab8:	2101      	movs	r1, #1
 8008aba:	fa01 f303 	lsl.w	r3, r1, r3
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	68f9      	ldr	r1, [r7, #12]
 8008ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d153      	bne.n	8008b88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	791b      	ldrb	r3, [r3, #4]
 8008afa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008afc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	059b      	lsls	r3, r3, #22
 8008b02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b04:	431a      	orrs	r2, r3
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	0159      	lsls	r1, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	440b      	add	r3, r1
 8008b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b12:	4619      	mov	r1, r3
 8008b14:	4b20      	ldr	r3, [pc, #128]	; (8008b98 <USB_ActivateEndpoint+0x10c>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	600b      	str	r3, [r1, #0]
 8008b1a:	e035      	b.n	8008b88 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b22:	69da      	ldr	r2, [r3, #28]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	f003 030f 	and.w	r3, r3, #15
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b32:	041b      	lsls	r3, r3, #16
 8008b34:	68f9      	ldr	r1, [r7, #12]
 8008b36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d119      	bne.n	8008b88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	791b      	ldrb	r3, [r3, #4]
 8008b6e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b70:	430b      	orrs	r3, r1
 8008b72:	431a      	orrs	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	0159      	lsls	r1, r3, #5
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	440b      	add	r3, r1
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b80:	4619      	mov	r1, r3
 8008b82:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <USB_ActivateEndpoint+0x10c>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	10008000 	.word	0x10008000

08008b9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	785b      	ldrb	r3, [r3, #1]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d161      	bne.n	8008c7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bce:	d11f      	bne.n	8008c10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	f003 030f 	and.w	r3, r3, #15
 8008c20:	2101      	movs	r1, #1
 8008c22:	fa01 f303 	lsl.w	r3, r1, r3
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c30:	4013      	ands	r3, r2
 8008c32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3a:	69da      	ldr	r2, [r3, #28]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	f003 030f 	and.w	r3, r3, #15
 8008c44:	2101      	movs	r1, #1
 8008c46:	fa01 f303 	lsl.w	r3, r1, r3
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	43db      	mvns	r3, r3
 8008c4e:	68f9      	ldr	r1, [r7, #12]
 8008c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c54:	4013      	ands	r3, r2
 8008c56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	0159      	lsls	r1, r3, #5
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c72:	4619      	mov	r1, r3
 8008c74:	4b35      	ldr	r3, [pc, #212]	; (8008d4c <USB_DeactivateEndpoint+0x1b0>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]
 8008c7a:	e060      	b.n	8008d3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c92:	d11f      	bne.n	8008cd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	0151      	lsls	r1, r2, #5
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	440a      	add	r2, r1
 8008caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	0151      	lsls	r1, r2, #5
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	440a      	add	r2, r1
 8008cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	f003 030f 	and.w	r3, r3, #15
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cea:	041b      	lsls	r3, r3, #16
 8008cec:	43db      	mvns	r3, r3
 8008cee:	68f9      	ldr	r1, [r7, #12]
 8008cf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfe:	69da      	ldr	r2, [r3, #28]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	2101      	movs	r1, #1
 8008d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d0e:	041b      	lsls	r3, r3, #16
 8008d10:	43db      	mvns	r3, r3
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d18:	4013      	ands	r3, r2
 8008d1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	0159      	lsls	r1, r3, #5
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	440b      	add	r3, r1
 8008d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d36:	4619      	mov	r1, r3
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <USB_DeactivateEndpoint+0x1b4>)
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	ec337800 	.word	0xec337800
 8008d50:	eff37800 	.word	0xeff37800

08008d54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08a      	sub	sp, #40	; 0x28
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	f040 8163 	bne.w	800903c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d132      	bne.n	8008de4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8a:	691a      	ldr	r2, [r3, #16]
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	0159      	lsls	r1, r3, #5
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	440b      	add	r3, r1
 8008d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4ba5      	ldr	r3, [pc, #660]	; (8009030 <USB_EPStartXfer+0x2dc>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	0151      	lsls	r1, r2, #5
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	440a      	add	r2, r1
 8008db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dcc:	691a      	ldr	r2, [r3, #16]
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	0159      	lsls	r1, r3, #5
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	440b      	add	r3, r1
 8008dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4b95      	ldr	r3, [pc, #596]	; (8009034 <USB_EPStartXfer+0x2e0>)
 8008dde:	4013      	ands	r3, r2
 8008de0:	610b      	str	r3, [r1, #16]
 8008de2:	e074      	b.n	8008ece <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df0:	691a      	ldr	r2, [r3, #16]
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	0159      	lsls	r1, r3, #5
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	440b      	add	r3, r1
 8008dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4b8c      	ldr	r3, [pc, #560]	; (8009034 <USB_EPStartXfer+0x2e0>)
 8008e02:	4013      	ands	r3, r2
 8008e04:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	0159      	lsls	r1, r3, #5
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	440b      	add	r3, r1
 8008e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e20:	4619      	mov	r1, r3
 8008e22:	4b83      	ldr	r3, [pc, #524]	; (8009030 <USB_EPStartXfer+0x2dc>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e34:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6999      	ldr	r1, [r3, #24]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	440b      	add	r3, r1
 8008e40:	1e59      	subs	r1, r3, #1
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e4a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008e4c:	4b7a      	ldr	r3, [pc, #488]	; (8009038 <USB_EPStartXfer+0x2e4>)
 8008e4e:	400b      	ands	r3, r1
 8008e50:	69b9      	ldr	r1, [r7, #24]
 8008e52:	0148      	lsls	r0, r1, #5
 8008e54:	69f9      	ldr	r1, [r7, #28]
 8008e56:	4401      	add	r1, r0
 8008e58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	691a      	ldr	r2, [r3, #16]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e76:	69b9      	ldr	r1, [r7, #24]
 8008e78:	0148      	lsls	r0, r1, #5
 8008e7a:	69f9      	ldr	r1, [r7, #28]
 8008e7c:	4401      	add	r1, r0
 8008e7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e82:	4313      	orrs	r3, r2
 8008e84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	791b      	ldrb	r3, [r3, #4]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d11f      	bne.n	8008ece <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	0151      	lsls	r1, r2, #5
 8008ea0:	69fa      	ldr	r2, [r7, #28]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ea8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008eac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	0151      	lsls	r1, r2, #5
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ecc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d14b      	bne.n	8008f6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d009      	beq.n	8008ef0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	461a      	mov	r2, r3
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	791b      	ldrb	r3, [r3, #4]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d128      	bne.n	8008f4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d110      	bne.n	8008f2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	0151      	lsls	r1, r2, #5
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	440a      	add	r2, r1
 8008f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	e00f      	b.n	8008f4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	015a      	lsls	r2, r3, #5
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	4413      	add	r3, r2
 8008f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	0151      	lsls	r1, r2, #5
 8008f3c:	69fa      	ldr	r2, [r7, #28]
 8008f3e:	440a      	add	r2, r1
 8008f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	e137      	b.n	80091dc <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	791b      	ldrb	r3, [r3, #4]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d015      	beq.n	8008fc0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 811f 	beq.w	80091dc <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	2101      	movs	r1, #1
 8008fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb4:	69f9      	ldr	r1, [r7, #28]
 8008fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	634b      	str	r3, [r1, #52]	; 0x34
 8008fbe:	e10d      	b.n	80091dc <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d110      	bne.n	8008ff2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	0151      	lsls	r1, r2, #5
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e00f      	b.n	8009012 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	0151      	lsls	r1, r2, #5
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	440a      	add	r2, r1
 8009008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800900c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009010:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6919      	ldr	r1, [r3, #16]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	781a      	ldrb	r2, [r3, #0]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	b298      	uxth	r0, r3
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	4603      	mov	r3, r0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 faea 	bl	8009600 <USB_WritePacket>
 800902c:	e0d6      	b.n	80091dc <USB_EPStartXfer+0x488>
 800902e:	bf00      	nop
 8009030:	e007ffff 	.word	0xe007ffff
 8009034:	fff80000 	.word	0xfff80000
 8009038:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009048:	691a      	ldr	r2, [r3, #16]
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	0159      	lsls	r1, r3, #5
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	440b      	add	r3, r1
 8009052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009056:	4619      	mov	r1, r3
 8009058:	4b63      	ldr	r3, [pc, #396]	; (80091e8 <USB_EPStartXfer+0x494>)
 800905a:	4013      	ands	r3, r2
 800905c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	4413      	add	r3, r2
 8009066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	0159      	lsls	r1, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	440b      	add	r3, r1
 8009074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009078:	4619      	mov	r1, r3
 800907a:	4b5c      	ldr	r3, [pc, #368]	; (80091ec <USB_EPStartXfer+0x498>)
 800907c:	4013      	ands	r3, r2
 800907e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d123      	bne.n	80090d0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009094:	691a      	ldr	r2, [r3, #16]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800909e:	69b9      	ldr	r1, [r7, #24]
 80090a0:	0148      	lsls	r0, r1, #5
 80090a2:	69f9      	ldr	r1, [r7, #28]
 80090a4:	4401      	add	r1, r0
 80090a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090aa:	4313      	orrs	r3, r2
 80090ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090cc:	6113      	str	r3, [r2, #16]
 80090ce:	e037      	b.n	8009140 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	1e5a      	subs	r2, r3, #1
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	8afa      	ldrh	r2, [r7, #22]
 80090ec:	fb03 f202 	mul.w	r2, r3, r2
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009100:	691a      	ldr	r2, [r3, #16]
 8009102:	8afb      	ldrh	r3, [r7, #22]
 8009104:	04d9      	lsls	r1, r3, #19
 8009106:	4b3a      	ldr	r3, [pc, #232]	; (80091f0 <USB_EPStartXfer+0x49c>)
 8009108:	400b      	ands	r3, r1
 800910a:	69b9      	ldr	r1, [r7, #24]
 800910c:	0148      	lsls	r0, r1, #5
 800910e:	69f9      	ldr	r1, [r7, #28]
 8009110:	4401      	add	r1, r0
 8009112:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009116:	4313      	orrs	r3, r2
 8009118:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	015a      	lsls	r2, r3, #5
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	4413      	add	r3, r2
 8009122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009126:	691a      	ldr	r2, [r3, #16]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009130:	69b9      	ldr	r1, [r7, #24]
 8009132:	0148      	lsls	r0, r1, #5
 8009134:	69f9      	ldr	r1, [r7, #28]
 8009136:	4401      	add	r1, r0
 8009138:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800913c:	4313      	orrs	r3, r2
 800913e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d10d      	bne.n	8009162 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	6919      	ldr	r1, [r3, #16]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915e:	460a      	mov	r2, r1
 8009160:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	791b      	ldrb	r3, [r3, #4]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d128      	bne.n	80091bc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009176:	2b00      	cmp	r3, #0
 8009178:	d110      	bne.n	800919c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	0151      	lsls	r1, r2, #5
 800918c:	69fa      	ldr	r2, [r7, #28]
 800918e:	440a      	add	r2, r1
 8009190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009194:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	e00f      	b.n	80091bc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	0151      	lsls	r1, r2, #5
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	440a      	add	r2, r1
 80091d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3720      	adds	r7, #32
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	fff80000 	.word	0xfff80000
 80091ec:	e007ffff 	.word	0xe007ffff
 80091f0:	1ff80000 	.word	0x1ff80000

080091f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	2b01      	cmp	r3, #1
 8009212:	f040 80ce 	bne.w	80093b2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d132      	bne.n	8009284 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922a:	691a      	ldr	r2, [r3, #16]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	0159      	lsls	r1, r3, #5
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	440b      	add	r3, r1
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	4619      	mov	r1, r3
 800923a:	4b9a      	ldr	r3, [pc, #616]	; (80094a4 <USB_EP0StartXfer+0x2b0>)
 800923c:	4013      	ands	r3, r2
 800923e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800925a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800925e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	0159      	lsls	r1, r3, #5
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	440b      	add	r3, r1
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	4619      	mov	r1, r3
 800927c:	4b8a      	ldr	r3, [pc, #552]	; (80094a8 <USB_EP0StartXfer+0x2b4>)
 800927e:	4013      	ands	r3, r2
 8009280:	610b      	str	r3, [r1, #16]
 8009282:	e04e      	b.n	8009322 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009290:	691a      	ldr	r2, [r3, #16]
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	0159      	lsls	r1, r3, #5
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	440b      	add	r3, r1
 800929a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929e:	4619      	mov	r1, r3
 80092a0:	4b81      	ldr	r3, [pc, #516]	; (80094a8 <USB_EP0StartXfer+0x2b4>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	0159      	lsls	r1, r3, #5
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	440b      	add	r3, r1
 80092bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c0:	4619      	mov	r1, r3
 80092c2:	4b78      	ldr	r3, [pc, #480]	; (80094a4 <USB_EP0StartXfer+0x2b0>)
 80092c4:	4013      	ands	r3, r2
 80092c6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d903      	bls.n	80092dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	0151      	lsls	r1, r2, #5
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	440a      	add	r2, r1
 80092f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009308:	691a      	ldr	r2, [r3, #16]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009312:	6939      	ldr	r1, [r7, #16]
 8009314:	0148      	lsls	r0, r1, #5
 8009316:	6979      	ldr	r1, [r7, #20]
 8009318:	4401      	add	r1, r0
 800931a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800931e:	4313      	orrs	r3, r2
 8009320:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d11e      	bne.n	8009366 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d009      	beq.n	8009344 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933c:	461a      	mov	r2, r3
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	e097      	b.n	8009496 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	0151      	lsls	r1, r2, #5
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	440a      	add	r2, r1
 800937c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009384:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 8083 	beq.w	8009496 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	2101      	movs	r1, #1
 80093a2:	fa01 f303 	lsl.w	r3, r1, r3
 80093a6:	6979      	ldr	r1, [r7, #20]
 80093a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093ac:	4313      	orrs	r3, r2
 80093ae:	634b      	str	r3, [r1, #52]	; 0x34
 80093b0:	e071      	b.n	8009496 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	691a      	ldr	r2, [r3, #16]
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	0159      	lsls	r1, r3, #5
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	440b      	add	r3, r1
 80093c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093cc:	4619      	mov	r1, r3
 80093ce:	4b36      	ldr	r3, [pc, #216]	; (80094a8 <USB_EP0StartXfer+0x2b4>)
 80093d0:	4013      	ands	r3, r2
 80093d2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e0:	691a      	ldr	r2, [r3, #16]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	0159      	lsls	r1, r3, #5
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	440b      	add	r3, r1
 80093ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ee:	4619      	mov	r1, r3
 80093f0:	4b2c      	ldr	r3, [pc, #176]	; (80094a4 <USB_EP0StartXfer+0x2b0>)
 80093f2:	4013      	ands	r3, r2
 80093f4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	0151      	lsls	r1, r2, #5
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	440a      	add	r2, r1
 8009424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800942c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009444:	6939      	ldr	r1, [r7, #16]
 8009446:	0148      	lsls	r0, r1, #5
 8009448:	6979      	ldr	r1, [r7, #20]
 800944a:	4401      	add	r1, r0
 800944c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009450:	4313      	orrs	r3, r2
 8009452:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d10d      	bne.n	8009476 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d009      	beq.n	8009476 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	6919      	ldr	r1, [r3, #16]
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009472:	460a      	mov	r2, r1
 8009474:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	0151      	lsls	r1, r2, #5
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	440a      	add	r2, r1
 800948c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009490:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009494:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	e007ffff 	.word	0xe007ffff
 80094a8:	fff80000 	.word	0xfff80000

080094ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d14a      	bne.n	8009560 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094e2:	f040 8086 	bne.w	80095f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	7812      	ldrb	r2, [r2, #0]
 80094fa:	0151      	lsls	r1, r2, #5
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	440a      	add	r2, r1
 8009500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009504:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009508:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	7812      	ldrb	r2, [r2, #0]
 800951e:	0151      	lsls	r1, r2, #5
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	440a      	add	r2, r1
 8009524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800952c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3301      	adds	r3, #1
 8009532:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f242 7210 	movw	r2, #10000	; 0x2710
 800953a:	4293      	cmp	r3, r2
 800953c:	d902      	bls.n	8009544 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	75fb      	strb	r3, [r7, #23]
          break;
 8009542:	e056      	b.n	80095f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800955c:	d0e7      	beq.n	800952e <USB_EPStopXfer+0x82>
 800955e:	e048      	b.n	80095f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009578:	d13b      	bne.n	80095f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	7812      	ldrb	r2, [r2, #0]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009598:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800959c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	7812      	ldrb	r2, [r2, #0]
 80095b2:	0151      	lsls	r1, r2, #5
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	440a      	add	r2, r1
 80095b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3301      	adds	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d902      	bls.n	80095d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	75fb      	strb	r3, [r7, #23]
          break;
 80095d6:	e00c      	b.n	80095f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095f0:	d0e7      	beq.n	80095c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	371c      	adds	r7, #28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009600:	b480      	push	{r7}
 8009602:	b089      	sub	sp, #36	; 0x24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	4611      	mov	r1, r2
 800960c:	461a      	mov	r2, r3
 800960e:	460b      	mov	r3, r1
 8009610:	71fb      	strb	r3, [r7, #7]
 8009612:	4613      	mov	r3, r2
 8009614:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800961e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009622:	2b00      	cmp	r3, #0
 8009624:	d123      	bne.n	800966e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009626:	88bb      	ldrh	r3, [r7, #4]
 8009628:	3303      	adds	r3, #3
 800962a:	089b      	lsrs	r3, r3, #2
 800962c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800962e:	2300      	movs	r3, #0
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	e018      	b.n	8009666 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	031a      	lsls	r2, r3, #12
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	4413      	add	r3, r2
 800963c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009640:	461a      	mov	r2, r3
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	3301      	adds	r3, #1
 800964c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	3301      	adds	r3, #1
 8009652:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	3301      	adds	r3, #1
 8009658:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	3301      	adds	r3, #1
 800965e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	3301      	adds	r3, #1
 8009664:	61bb      	str	r3, [r7, #24]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	429a      	cmp	r2, r3
 800966c:	d3e2      	bcc.n	8009634 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3724      	adds	r7, #36	; 0x24
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800967c:	b480      	push	{r7}
 800967e:	b08b      	sub	sp, #44	; 0x2c
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009692:	88fb      	ldrh	r3, [r7, #6]
 8009694:	089b      	lsrs	r3, r3, #2
 8009696:	b29b      	uxth	r3, r3
 8009698:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800969a:	88fb      	ldrh	r3, [r7, #6]
 800969c:	f003 0303 	and.w	r3, r3, #3
 80096a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80096a2:	2300      	movs	r3, #0
 80096a4:	623b      	str	r3, [r7, #32]
 80096a6:	e014      	b.n	80096d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	3301      	adds	r3, #1
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	3301      	adds	r3, #1
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	3301      	adds	r3, #1
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	3301      	adds	r3, #1
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	3301      	adds	r3, #1
 80096d0:	623b      	str	r3, [r7, #32]
 80096d2:	6a3a      	ldr	r2, [r7, #32]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d3e6      	bcc.n	80096a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80096da:	8bfb      	ldrh	r3, [r7, #30]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01e      	beq.n	800971e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ea:	461a      	mov	r2, r3
 80096ec:	f107 0310 	add.w	r3, r7, #16
 80096f0:	6812      	ldr	r2, [r2, #0]
 80096f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009700:	b2da      	uxtb	r2, r3
 8009702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009704:	701a      	strb	r2, [r3, #0]
      i++;
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	3301      	adds	r3, #1
 800970a:	623b      	str	r3, [r7, #32]
      pDest++;
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	3301      	adds	r3, #1
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009712:	8bfb      	ldrh	r3, [r7, #30]
 8009714:	3b01      	subs	r3, #1
 8009716:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009718:	8bfb      	ldrh	r3, [r7, #30]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1ea      	bne.n	80096f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009720:	4618      	mov	r0, r3
 8009722:	372c      	adds	r7, #44	; 0x2c
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	785b      	ldrb	r3, [r3, #1]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d12c      	bne.n	80097a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	db12      	blt.n	8009780 <USB_EPSetStall+0x54>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00f      	beq.n	8009780 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800977a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800977e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	0151      	lsls	r1, r2, #5
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	440a      	add	r2, r1
 8009796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800979a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	e02b      	b.n	80097fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	db12      	blt.n	80097da <USB_EPSetStall+0xae>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00f      	beq.n	80097da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	0151      	lsls	r1, r2, #5
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	440a      	add	r2, r1
 80097d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	0151      	lsls	r1, r2, #5
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	440a      	add	r2, r1
 80097f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	785b      	ldrb	r3, [r3, #1]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d128      	bne.n	8009876 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	0151      	lsls	r1, r2, #5
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	440a      	add	r2, r1
 800983a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800983e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009842:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	791b      	ldrb	r3, [r3, #4]
 8009848:	2b03      	cmp	r3, #3
 800984a:	d003      	beq.n	8009854 <USB_EPClearStall+0x4c>
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	791b      	ldrb	r3, [r3, #4]
 8009850:	2b02      	cmp	r3, #2
 8009852:	d138      	bne.n	80098c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	0151      	lsls	r1, r2, #5
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	440a      	add	r2, r1
 800986a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800986e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	e027      	b.n	80098c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	0151      	lsls	r1, r2, #5
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	440a      	add	r2, r1
 800988c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009890:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009894:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	791b      	ldrb	r3, [r3, #4]
 800989a:	2b03      	cmp	r3, #3
 800989c:	d003      	beq.n	80098a6 <USB_EPClearStall+0x9e>
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	791b      	ldrb	r3, [r3, #4]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d10f      	bne.n	80098c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80098f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	011b      	lsls	r3, r3, #4
 8009904:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009908:	68f9      	ldr	r1, [r7, #12]
 800990a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800990e:	4313      	orrs	r3, r2
 8009910:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800994e:	f023 0302 	bic.w	r3, r3, #2
 8009952:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800997c:	f023 0303 	bic.w	r3, r3, #3
 8009980:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009990:	f043 0302 	orr.w	r3, r3, #2
 8009994:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4013      	ands	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099bc:	68fb      	ldr	r3, [r7, #12]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b085      	sub	sp, #20
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	4013      	ands	r3, r2
 80099ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	0c1b      	lsrs	r3, r3, #16
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	b29b      	uxth	r3, r3
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b085      	sub	sp, #20
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a60:	68bb      	ldr	r3, [r7, #8]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b087      	sub	sp, #28
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a92:	78fb      	ldrb	r3, [r7, #3]
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9e:	01db      	lsls	r3, r3, #7
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009abc:	68bb      	ldr	r3, [r7, #8]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	371c      	adds	r7, #28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
	...

08009ae8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b02:	4619      	mov	r1, r3
 8009b04:	4b09      	ldr	r3, [pc, #36]	; (8009b2c <USB_ActivateSetup+0x44>)
 8009b06:	4013      	ands	r3, r2
 8009b08:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	fffff800 	.word	0xfffff800

08009b30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	333c      	adds	r3, #60	; 0x3c
 8009b46:	3304      	adds	r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	4a26      	ldr	r2, [pc, #152]	; (8009be8 <USB_EP0_OutStart+0xb8>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d90a      	bls.n	8009b6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b64:	d101      	bne.n	8009b6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	e037      	b.n	8009bda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b70:	461a      	mov	r2, r3
 8009b72:	2300      	movs	r3, #0
 8009b74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b98:	f043 0318 	orr.w	r3, r3, #24
 8009b9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009bb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009bb2:	7afb      	ldrb	r3, [r7, #11]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d10f      	bne.n	8009bd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009bd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	4f54300a 	.word	0x4f54300a

08009bec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <USB_CoreReset+0x64>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d901      	bls.n	8009c0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e01b      	b.n	8009c42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	daf2      	bge.n	8009bf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	f043 0201 	orr.w	r2, r3, #1
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	3301      	adds	r3, #1
 8009c26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	4a09      	ldr	r2, [pc, #36]	; (8009c50 <USB_CoreReset+0x64>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d901      	bls.n	8009c34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e006      	b.n	8009c42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d0f0      	beq.n	8009c22 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	00030d40 	.word	0x00030d40

08009c54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009c58:	4904      	ldr	r1, [pc, #16]	; (8009c6c <MX_FATFS_Init+0x18>)
 8009c5a:	4805      	ldr	r0, [pc, #20]	; (8009c70 <MX_FATFS_Init+0x1c>)
 8009c5c:	f003 fcf0 	bl	800d640 <FATFS_LinkDriver>
 8009c60:	4603      	mov	r3, r0
 8009c62:	461a      	mov	r2, r3
 8009c64:	4b03      	ldr	r3, [pc, #12]	; (8009c74 <MX_FATFS_Init+0x20>)
 8009c66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009c68:	bf00      	nop
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	240001c8 	.word	0x240001c8
 8009c70:	0800e18c 	.word	0x0800e18c
 8009c74:	240001c4 	.word	0x240001c4

08009c78 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009c82:	f000 f877 	bl	8009d74 <BSP_SD_IsDetected>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d001      	beq.n	8009c90 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	e005      	b.n	8009c9c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009c90:	4804      	ldr	r0, [pc, #16]	; (8009ca4 <BSP_SD_Init+0x2c>)
 8009c92:	f7fb fe3d 	bl	8005910 <HAL_SD_Init>
 8009c96:	4603      	mov	r3, r0
 8009c98:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009c9a:	79fb      	ldrb	r3, [r7, #7]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	24000144 	.word	0x24000144

08009ca8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	68f9      	ldr	r1, [r7, #12]
 8009cbe:	4806      	ldr	r0, [pc, #24]	; (8009cd8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009cc0:	f7fc fa58 	bl	8006174 <HAL_SD_ReadBlocks_DMA>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	24000144 	.word	0x24000144

08009cdc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	68f9      	ldr	r1, [r7, #12]
 8009cf2:	4806      	ldr	r0, [pc, #24]	; (8009d0c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009cf4:	f7fc fae6 	bl	80062c4 <HAL_SD_WriteBlocks_DMA>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	24000144 	.word	0x24000144

08009d10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009d14:	4805      	ldr	r0, [pc, #20]	; (8009d2c <BSP_SD_GetCardState+0x1c>)
 8009d16:	f7fd f8df 	bl	8006ed8 <HAL_SD_GetCardState>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b04      	cmp	r3, #4
 8009d1e:	bf14      	ite	ne
 8009d20:	2301      	movne	r3, #1
 8009d22:	2300      	moveq	r3, #0
 8009d24:	b2db      	uxtb	r3, r3
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	24000144 	.word	0x24000144

08009d30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	4803      	ldr	r0, [pc, #12]	; (8009d48 <BSP_SD_GetCardInfo+0x18>)
 8009d3c:	f7fc ff8e 	bl	8006c5c <HAL_SD_GetCardInfo>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	24000144 	.word	0x24000144

08009d4c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009d54:	f000 f984 	bl	800a060 <BSP_SD_WriteCpltCallback>
}
 8009d58:	bf00      	nop
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009d68:	f000 f986 	bl	800a078 <BSP_SD_ReadCpltCallback>
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	b2db      	uxtb	r3, r3
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009d96:	f7f6 fe2d 	bl	80009f4 <HAL_GetTick>
 8009d9a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009d9c:	e006      	b.n	8009dac <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d9e:	f7ff ffb7 	bl	8009d10 <BSP_SD_GetCardState>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	e009      	b.n	8009dc0 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009dac:	f7f6 fe22 	bl	80009f4 <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d8f0      	bhi.n	8009d9e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009dd2:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <SD_CheckStatus+0x38>)
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009dd8:	f7ff ff9a 	bl	8009d10 <BSP_SD_GetCardState>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d107      	bne.n	8009df2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009de2:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <SD_CheckStatus+0x38>)
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	f023 0301 	bic.w	r3, r3, #1
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <SD_CheckStatus+0x38>)
 8009df0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009df2:	4b03      	ldr	r3, [pc, #12]	; (8009e00 <SD_CheckStatus+0x38>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	b2db      	uxtb	r3, r3
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	2400000d 	.word	0x2400000d

08009e04 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009e0e:	f7ff ff33 	bl	8009c78 <BSP_SD_Init>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d107      	bne.n	8009e28 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff ffd4 	bl	8009dc8 <SD_CheckStatus>
 8009e20:	4603      	mov	r3, r0
 8009e22:	461a      	mov	r2, r3
 8009e24:	4b04      	ldr	r3, [pc, #16]	; (8009e38 <SD_initialize+0x34>)
 8009e26:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009e28:	4b03      	ldr	r3, [pc, #12]	; (8009e38 <SD_initialize+0x34>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b2db      	uxtb	r3, r3
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	2400000d 	.word	0x2400000d

08009e3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff ffbd 	bl	8009dc8 <SD_CheckStatus>
 8009e4e:	4603      	mov	r3, r0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60b9      	str	r1, [r7, #8]
 8009e60:	607a      	str	r2, [r7, #4]
 8009e62:	603b      	str	r3, [r7, #0]
 8009e64:	4603      	mov	r3, r0
 8009e66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009e6c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009e70:	f7ff ff8d 	bl	8009d8e <SD_CheckStatusWithTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	da01      	bge.n	8009e7e <SD_read+0x26>
  {
    return res;
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	e03b      	b.n	8009ef6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	68b8      	ldr	r0, [r7, #8]
 8009e84:	f7ff ff10 	bl	8009ca8 <BSP_SD_ReadBlocks_DMA>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d132      	bne.n	8009ef4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009e8e:	4b1c      	ldr	r3, [pc, #112]	; (8009f00 <SD_read+0xa8>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009e94:	f7f6 fdae 	bl	80009f4 <HAL_GetTick>
 8009e98:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009e9a:	bf00      	nop
 8009e9c:	4b18      	ldr	r3, [pc, #96]	; (8009f00 <SD_read+0xa8>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d108      	bne.n	8009eb6 <SD_read+0x5e>
 8009ea4:	f7f6 fda6 	bl	80009f4 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	f247 522f 	movw	r2, #29999	; 0x752f
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d9f2      	bls.n	8009e9c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009eb6:	4b12      	ldr	r3, [pc, #72]	; (8009f00 <SD_read+0xa8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]
 8009ec2:	e017      	b.n	8009ef4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009ec4:	4b0e      	ldr	r3, [pc, #56]	; (8009f00 <SD_read+0xa8>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009eca:	f7f6 fd93 	bl	80009f4 <HAL_GetTick>
 8009ece:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ed0:	e007      	b.n	8009ee2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009ed2:	f7ff ff1d 	bl	8009d10 <BSP_SD_GetCardState>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <SD_read+0x8a>
          {
            res = RES_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009ee0:	e008      	b.n	8009ef4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ee2:	f7f6 fd87 	bl	80009f4 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	f247 522f 	movw	r2, #29999	; 0x752f
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d9ee      	bls.n	8009ed2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	240001d0 	.word	0x240001d0

08009f04 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	607a      	str	r2, [r7, #4]
 8009f0e:	603b      	str	r3, [r7, #0]
 8009f10:	4603      	mov	r3, r0
 8009f12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009f18:	4b24      	ldr	r3, [pc, #144]	; (8009fac <SD_write+0xa8>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009f1e:	f247 5030 	movw	r0, #30000	; 0x7530
 8009f22:	f7ff ff34 	bl	8009d8e <SD_CheckStatusWithTimeout>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	da01      	bge.n	8009f30 <SD_write+0x2c>
  {
    return res;
 8009f2c:	7dfb      	ldrb	r3, [r7, #23]
 8009f2e:	e038      	b.n	8009fa2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	6879      	ldr	r1, [r7, #4]
 8009f34:	68b8      	ldr	r0, [r7, #8]
 8009f36:	f7ff fed1 	bl	8009cdc <BSP_SD_WriteBlocks_DMA>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d12f      	bne.n	8009fa0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009f40:	f7f6 fd58 	bl	80009f4 <HAL_GetTick>
 8009f44:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009f46:	bf00      	nop
 8009f48:	4b18      	ldr	r3, [pc, #96]	; (8009fac <SD_write+0xa8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d108      	bne.n	8009f62 <SD_write+0x5e>
 8009f50:	f7f6 fd50 	bl	80009f4 <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	f247 522f 	movw	r2, #29999	; 0x752f
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d9f2      	bls.n	8009f48 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009f62:	4b12      	ldr	r3, [pc, #72]	; (8009fac <SD_write+0xa8>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d102      	bne.n	8009f70 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	75fb      	strb	r3, [r7, #23]
 8009f6e:	e017      	b.n	8009fa0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009f70:	4b0e      	ldr	r3, [pc, #56]	; (8009fac <SD_write+0xa8>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009f76:	f7f6 fd3d 	bl	80009f4 <HAL_GetTick>
 8009f7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009f7c:	e007      	b.n	8009f8e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009f7e:	f7ff fec7 	bl	8009d10 <BSP_SD_GetCardState>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d102      	bne.n	8009f8e <SD_write+0x8a>
          {
            res = RES_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	75fb      	strb	r3, [r7, #23]
            break;
 8009f8c:	e008      	b.n	8009fa0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009f8e:	f7f6 fd31 	bl	80009f4 <HAL_GetTick>
 8009f92:	4602      	mov	r2, r0
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	f247 522f 	movw	r2, #29999	; 0x752f
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d9ee      	bls.n	8009f7e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	240001cc 	.word	0x240001cc

08009fb0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08c      	sub	sp, #48	; 0x30
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	603a      	str	r2, [r7, #0]
 8009fba:	71fb      	strb	r3, [r7, #7]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009fc6:	4b25      	ldr	r3, [pc, #148]	; (800a05c <SD_ioctl+0xac>)
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <SD_ioctl+0x28>
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e03c      	b.n	800a052 <SD_ioctl+0xa2>

  switch (cmd)
 8009fd8:	79bb      	ldrb	r3, [r7, #6]
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d834      	bhi.n	800a048 <SD_ioctl+0x98>
 8009fde:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <SD_ioctl+0x34>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	08009ff5 	.word	0x08009ff5
 8009fe8:	08009ffd 	.word	0x08009ffd
 8009fec:	0800a015 	.word	0x0800a015
 8009ff0:	0800a02f 	.word	0x0800a02f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ffa:	e028      	b.n	800a04e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ffc:	f107 0308 	add.w	r3, r7, #8
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff fe95 	bl	8009d30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a006:	6a3a      	ldr	r2, [r7, #32]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a012:	e01c      	b.n	800a04e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a014:	f107 0308 	add.w	r3, r7, #8
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff fe89 	bl	8009d30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	b29a      	uxth	r2, r3
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a02c:	e00f      	b.n	800a04e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a02e:	f107 0308 	add.w	r3, r7, #8
 800a032:	4618      	mov	r0, r3
 800a034:	f7ff fe7c 	bl	8009d30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	0a5a      	lsrs	r2, r3, #9
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a046:	e002      	b.n	800a04e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a048:	2304      	movs	r3, #4
 800a04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a04e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a052:	4618      	mov	r0, r3
 800a054:	3730      	adds	r7, #48	; 0x30
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	2400000d 	.word	0x2400000d

0800a060 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a060:	b480      	push	{r7}
 800a062:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a064:	4b03      	ldr	r3, [pc, #12]	; (800a074 <BSP_SD_WriteCpltCallback+0x14>)
 800a066:	2201      	movs	r2, #1
 800a068:	601a      	str	r2, [r3, #0]
}
 800a06a:	bf00      	nop
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	240001cc 	.word	0x240001cc

0800a078 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a07c:	4b03      	ldr	r3, [pc, #12]	; (800a08c <BSP_SD_ReadCpltCallback+0x14>)
 800a07e:	2201      	movs	r2, #1
 800a080:	601a      	str	r2, [r3, #0]
}
 800a082:	bf00      	nop
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	240001d0 	.word	0x240001d0

0800a090 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800a09c:	f44f 701d 	mov.w	r0, #628	; 0x274
 800a0a0:	f003 ffce 	bl	800e040 <USBD_static_malloc>
 800a0a4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d109      	bne.n	800a0c0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	32b0      	adds	r2, #176	; 0xb0
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e06e      	b.n	800a19e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	32b0      	adds	r2, #176	; 0xb0
 800a0ca:	68f9      	ldr	r1, [r7, #12]
 800a0cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	32b0      	adds	r2, #176	; 0xb0
 800a0da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7c1b      	ldrb	r3, [r3, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d12b      	bne.n	800a144 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a0ec:	4b2e      	ldr	r3, [pc, #184]	; (800a1a8 <USBD_MSC_Init+0x118>)
 800a0ee:	7819      	ldrb	r1, [r3, #0]
 800a0f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f003 fe5f 	bl	800ddba <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a0fc:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <USBD_MSC_Init+0x118>)
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	f003 020f 	and.w	r2, r3, #15
 800a104:	6879      	ldr	r1, [r7, #4]
 800a106:	4613      	mov	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	440b      	add	r3, r1
 800a110:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a114:	2201      	movs	r2, #1
 800a116:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a118:	4b24      	ldr	r3, [pc, #144]	; (800a1ac <USBD_MSC_Init+0x11c>)
 800a11a:	7819      	ldrb	r1, [r3, #0]
 800a11c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a120:	2202      	movs	r2, #2
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f003 fe49 	bl	800ddba <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a128:	4b20      	ldr	r3, [pc, #128]	; (800a1ac <USBD_MSC_Init+0x11c>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	f003 020f 	and.w	r2, r3, #15
 800a130:	6879      	ldr	r1, [r7, #4]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	440b      	add	r3, r1
 800a13c:	3324      	adds	r3, #36	; 0x24
 800a13e:	2201      	movs	r2, #1
 800a140:	801a      	strh	r2, [r3, #0]
 800a142:	e028      	b.n	800a196 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a144:	4b18      	ldr	r3, [pc, #96]	; (800a1a8 <USBD_MSC_Init+0x118>)
 800a146:	7819      	ldrb	r1, [r3, #0]
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	2202      	movs	r2, #2
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f003 fe34 	bl	800ddba <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a152:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <USBD_MSC_Init+0x118>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	f003 020f 	and.w	r2, r3, #15
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	4613      	mov	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	440b      	add	r3, r1
 800a166:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a16a:	2201      	movs	r2, #1
 800a16c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a16e:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <USBD_MSC_Init+0x11c>)
 800a170:	7819      	ldrb	r1, [r3, #0]
 800a172:	2340      	movs	r3, #64	; 0x40
 800a174:	2202      	movs	r2, #2
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f003 fe1f 	bl	800ddba <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a17c:	4b0b      	ldr	r3, [pc, #44]	; (800a1ac <USBD_MSC_Init+0x11c>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f003 020f 	and.w	r2, r3, #15
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	4613      	mov	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	440b      	add	r3, r1
 800a190:	3324      	adds	r3, #36	; 0x24
 800a192:	2201      	movs	r2, #1
 800a194:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fa2c 	bl	800a5f4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	24000073 	.word	0x24000073
 800a1ac:	24000072 	.word	0x24000072

0800a1b0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800a1bc:	4b26      	ldr	r3, [pc, #152]	; (800a258 <USBD_MSC_DeInit+0xa8>)
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f003 fe1f 	bl	800de06 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800a1c8:	4b23      	ldr	r3, [pc, #140]	; (800a258 <USBD_MSC_DeInit+0xa8>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	f003 020f 	and.w	r2, r3, #15
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	440b      	add	r3, r1
 800a1dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800a1e4:	4b1d      	ldr	r3, [pc, #116]	; (800a25c <USBD_MSC_DeInit+0xac>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f003 fe0b 	bl	800de06 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800a1f0:	4b1a      	ldr	r3, [pc, #104]	; (800a25c <USBD_MSC_DeInit+0xac>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	f003 020f 	and.w	r2, r3, #15
 800a1f8:	6879      	ldr	r1, [r7, #4]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	440b      	add	r3, r1
 800a204:	3324      	adds	r3, #36	; 0x24
 800a206:	2200      	movs	r2, #0
 800a208:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	32b0      	adds	r2, #176	; 0xb0
 800a214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d018      	beq.n	800a24e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fa67 	bl	800a6f0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	32b0      	adds	r2, #176	; 0xb0
 800a22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a230:	4618      	mov	r0, r3
 800a232:	f003 ff13 	bl	800e05c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	32b0      	adds	r2, #176	; 0xb0
 800a240:	2100      	movs	r1, #0
 800a242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	24000073 	.word	0x24000073
 800a25c:	24000072 	.word	0x24000072

0800a260 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	32b0      	adds	r2, #176	; 0xb0
 800a274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a278:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a288:	2303      	movs	r3, #3
 800a28a:	e0e1      	b.n	800a450 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a294:	2b00      	cmp	r3, #0
 800a296:	d053      	beq.n	800a340 <USBD_MSC_Setup+0xe0>
 800a298:	2b20      	cmp	r3, #32
 800a29a:	f040 80d1 	bne.w	800a440 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	785b      	ldrb	r3, [r3, #1]
 800a2a2:	2bfe      	cmp	r3, #254	; 0xfe
 800a2a4:	d002      	beq.n	800a2ac <USBD_MSC_Setup+0x4c>
 800a2a6:	2bff      	cmp	r3, #255	; 0xff
 800a2a8:	d02a      	beq.n	800a300 <USBD_MSC_Setup+0xa0>
 800a2aa:	e041      	b.n	800a330 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	885b      	ldrh	r3, [r3, #2]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d11e      	bne.n	800a2f2 <USBD_MSC_Setup+0x92>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	88db      	ldrh	r3, [r3, #6]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d11a      	bne.n	800a2f2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	da15      	bge.n	800a2f2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	33b0      	adds	r3, #176	; 0xb0
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	4798      	blx	r3
 800a2da:	4603      	mov	r3, r0
 800a2dc:	461a      	mov	r2, r3
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f003 f8f9 	bl	800d4e0 <USBD_CtlSendData>
 800a2ee:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2f0:	e025      	b.n	800a33e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f003 f882 	bl	800d3fe <USBD_CtlError>
            ret = USBD_FAIL;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a2fe:	e01e      	b.n	800a33e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	885b      	ldrh	r3, [r3, #2]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10c      	bne.n	800a322 <USBD_MSC_Setup+0xc2>
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	88db      	ldrh	r3, [r3, #6]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d108      	bne.n	800a322 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a316:	2b00      	cmp	r3, #0
 800a318:	db03      	blt.n	800a322 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f9b4 	bl	800a688 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a320:	e00d      	b.n	800a33e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f003 f86a 	bl	800d3fe <USBD_CtlError>
            ret = USBD_FAIL;
 800a32a:	2303      	movs	r3, #3
 800a32c:	75fb      	strb	r3, [r7, #23]
          break;
 800a32e:	e006      	b.n	800a33e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f003 f863 	bl	800d3fe <USBD_CtlError>
          ret = USBD_FAIL;
 800a338:	2303      	movs	r3, #3
 800a33a:	75fb      	strb	r3, [r7, #23]
          break;
 800a33c:	bf00      	nop
      }
      break;
 800a33e:	e086      	b.n	800a44e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	785b      	ldrb	r3, [r3, #1]
 800a344:	2b0b      	cmp	r3, #11
 800a346:	d872      	bhi.n	800a42e <USBD_MSC_Setup+0x1ce>
 800a348:	a201      	add	r2, pc, #4	; (adr r2, 800a350 <USBD_MSC_Setup+0xf0>)
 800a34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34e:	bf00      	nop
 800a350:	0800a381 	.word	0x0800a381
 800a354:	0800a3fd 	.word	0x0800a3fd
 800a358:	0800a42f 	.word	0x0800a42f
 800a35c:	0800a42f 	.word	0x0800a42f
 800a360:	0800a42f 	.word	0x0800a42f
 800a364:	0800a42f 	.word	0x0800a42f
 800a368:	0800a42f 	.word	0x0800a42f
 800a36c:	0800a42f 	.word	0x0800a42f
 800a370:	0800a42f 	.word	0x0800a42f
 800a374:	0800a42f 	.word	0x0800a42f
 800a378:	0800a3ab 	.word	0x0800a3ab
 800a37c:	0800a3d5 	.word	0x0800a3d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d107      	bne.n	800a39c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a38c:	f107 030e 	add.w	r3, r7, #14
 800a390:	2202      	movs	r2, #2
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f003 f8a3 	bl	800d4e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a39a:	e050      	b.n	800a43e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f003 f82d 	bl	800d3fe <USBD_CtlError>
            ret = USBD_FAIL;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	75fb      	strb	r3, [r7, #23]
          break;
 800a3a8:	e049      	b.n	800a43e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	d107      	bne.n	800a3c6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f003 f88e 	bl	800d4e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3c4:	e03b      	b.n	800a43e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f003 f818 	bl	800d3fe <USBD_CtlError>
            ret = USBD_FAIL;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a3d2:	e034      	b.n	800a43e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d106      	bne.n	800a3ee <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	885b      	ldrh	r3, [r3, #2]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3ec:	e027      	b.n	800a43e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f003 f804 	bl	800d3fe <USBD_CtlError>
            ret = USBD_FAIL;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a3fa:	e020      	b.n	800a43e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b03      	cmp	r3, #3
 800a406:	d119      	bne.n	800a43c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	885b      	ldrh	r3, [r3, #2]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d115      	bne.n	800a43c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	889b      	ldrh	r3, [r3, #4]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f003 fd13 	bl	800de44 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	889b      	ldrh	r3, [r3, #4]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fb2e 	bl	800aa88 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800a42c:	e006      	b.n	800a43c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f002 ffe4 	bl	800d3fe <USBD_CtlError>
          ret = USBD_FAIL;
 800a436:	2303      	movs	r3, #3
 800a438:	75fb      	strb	r3, [r7, #23]
          break;
 800a43a:	e000      	b.n	800a43e <USBD_MSC_Setup+0x1de>
          break;
 800a43c:	bf00      	nop
      }
      break;
 800a43e:	e006      	b.n	800a44e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f002 ffdb 	bl	800d3fe <USBD_CtlError>
      ret = USBD_FAIL;
 800a448:	2303      	movs	r3, #3
 800a44a:	75fb      	strb	r3, [r7, #23]
      break;
 800a44c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f959 	bl	800a720 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800a484:	78fb      	ldrb	r3, [r7, #3]
 800a486:	4619      	mov	r1, r3
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f983 	bl	800a794 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a4a0:	2181      	movs	r1, #129	; 0x81
 800a4a2:	4812      	ldr	r0, [pc, #72]	; (800a4ec <USBD_MSC_GetHSCfgDesc+0x54>)
 800a4a4:	f002 f972 	bl	800c78c <USBD_GetEpDesc>
 800a4a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	480f      	ldr	r0, [pc, #60]	; (800a4ec <USBD_MSC_GetHSCfgDesc+0x54>)
 800a4ae:	f002 f96d 	bl	800c78c <USBD_GetEpDesc>
 800a4b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d006      	beq.n	800a4c8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	711a      	strb	r2, [r3, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f042 0202 	orr.w	r2, r2, #2
 800a4c6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d006      	beq.n	800a4dc <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	711a      	strb	r2, [r3, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f042 0202 	orr.w	r2, r2, #2
 800a4da:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800a4e2:	4b02      	ldr	r3, [pc, #8]	; (800a4ec <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	24000048 	.word	0x24000048

0800a4f0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a4f8:	2181      	movs	r1, #129	; 0x81
 800a4fa:	4812      	ldr	r0, [pc, #72]	; (800a544 <USBD_MSC_GetFSCfgDesc+0x54>)
 800a4fc:	f002 f946 	bl	800c78c <USBD_GetEpDesc>
 800a500:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a502:	2101      	movs	r1, #1
 800a504:	480f      	ldr	r0, [pc, #60]	; (800a544 <USBD_MSC_GetFSCfgDesc+0x54>)
 800a506:	f002 f941 	bl	800c78c <USBD_GetEpDesc>
 800a50a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d006      	beq.n	800a520 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a51a:	711a      	strb	r2, [r3, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d006      	beq.n	800a534 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2200      	movs	r2, #0
 800a52a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a52e:	711a      	strb	r2, [r3, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800a53a:	4b02      	ldr	r3, [pc, #8]	; (800a544 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	24000048 	.word	0x24000048

0800a548 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a550:	2181      	movs	r1, #129	; 0x81
 800a552:	4812      	ldr	r0, [pc, #72]	; (800a59c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800a554:	f002 f91a 	bl	800c78c <USBD_GetEpDesc>
 800a558:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a55a:	2101      	movs	r1, #1
 800a55c:	480f      	ldr	r0, [pc, #60]	; (800a59c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800a55e:	f002 f915 	bl	800c78c <USBD_GetEpDesc>
 800a562:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d006      	beq.n	800a578 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a572:	711a      	strb	r2, [r3, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d006      	beq.n	800a58c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	2200      	movs	r2, #0
 800a582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a586:	711a      	strb	r2, [r3, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2220      	movs	r2, #32
 800a590:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800a592:	4b02      	ldr	r3, [pc, #8]	; (800a59c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	24000048 	.word	0x24000048

0800a5a0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	220a      	movs	r2, #10
 800a5ac:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800a5ae:	4b03      	ldr	r3, [pc, #12]	; (800a5bc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	24000068 	.word	0x24000068

0800a5c0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e009      	b.n	800a5e8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	33b0      	adds	r3, #176	; 0xb0
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4413      	add	r3, r2
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32b0      	adds	r2, #176	; 0xb0
 800a606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d032      	beq.n	800a678 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	33b0      	adds	r3, #176	; 0xb0
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2000      	movs	r0, #0
 800a64a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800a64c:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <MSC_BOT_Init+0x8c>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f003 fbf6 	bl	800de44 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800a658:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <MSC_BOT_Init+0x90>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f003 fbf0 	bl	800de44 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a664:	4b06      	ldr	r3, [pc, #24]	; (800a680 <MSC_BOT_Init+0x8c>)
 800a666:	7819      	ldrb	r1, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a66e:	231f      	movs	r3, #31
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f003 fcb0 	bl	800dfd6 <USBD_LL_PrepareReceive>
 800a676:	e000      	b.n	800a67a <MSC_BOT_Init+0x86>
    return;
 800a678:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	24000073 	.word	0x24000073
 800a684:	24000072 	.word	0x24000072

0800a688 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	32b0      	adds	r2, #176	; 0xb0
 800a69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d01b      	beq.n	800a6de <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	; (800a6e8 <MSC_BOT_Reset+0x60>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f003 fc01 	bl	800dec0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800a6be:	4b0b      	ldr	r3, [pc, #44]	; (800a6ec <MSC_BOT_Reset+0x64>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f003 fbfb 	bl	800dec0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a6ca:	4b08      	ldr	r3, [pc, #32]	; (800a6ec <MSC_BOT_Reset+0x64>)
 800a6cc:	7819      	ldrb	r1, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a6d4:	231f      	movs	r3, #31
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f003 fc7d 	bl	800dfd6 <USBD_LL_PrepareReceive>
 800a6dc:	e000      	b.n	800a6e0 <MSC_BOT_Reset+0x58>
    return;
 800a6de:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	24000072 	.word	0x24000072
 800a6ec:	24000073 	.word	0x24000073

0800a6f0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	32b0      	adds	r2, #176	; 0xb0
 800a702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a706:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	721a      	strb	r2, [r3, #8]
  }
}
 800a714:	bf00      	nop
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	32b0      	adds	r2, #176	; 0xb0
 800a736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d020      	beq.n	800a784 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	7a1b      	ldrb	r3, [r3, #8]
 800a746:	2b02      	cmp	r3, #2
 800a748:	d005      	beq.n	800a756 <MSC_BOT_DataIn+0x36>
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	db1c      	blt.n	800a788 <MSC_BOT_DataIn+0x68>
 800a74e:	3b03      	subs	r3, #3
 800a750:	2b01      	cmp	r3, #1
 800a752:	d819      	bhi.n	800a788 <MSC_BOT_DataIn+0x68>
 800a754:	e011      	b.n	800a77a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800a762:	461a      	mov	r2, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f9c9 	bl	800aafc <SCSI_ProcessCmd>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	da0d      	bge.n	800a78c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a770:	2101      	movs	r1, #1
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f90c 	bl	800a990 <MSC_BOT_SendCSW>
      }
      break;
 800a778:	e008      	b.n	800a78c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a77a:	2100      	movs	r1, #0
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f907 	bl	800a990 <MSC_BOT_SendCSW>
      break;
 800a782:	e004      	b.n	800a78e <MSC_BOT_DataIn+0x6e>
    return;
 800a784:	bf00      	nop
 800a786:	e002      	b.n	800a78e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800a788:	bf00      	nop
 800a78a:	e000      	b.n	800a78e <MSC_BOT_DataIn+0x6e>
      break;
 800a78c:	bf00      	nop
  }
}
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	32b0      	adds	r2, #176	; 0xb0
 800a7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d01c      	beq.n	800a7f0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	7a1b      	ldrb	r3, [r3, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d002      	beq.n	800a7c4 <MSC_BOT_DataOut+0x30>
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d004      	beq.n	800a7cc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800a7c2:	e018      	b.n	800a7f6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f819 	bl	800a7fc <MSC_BOT_CBW_Decode>
      break;
 800a7ca:	e014      	b.n	800a7f6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800a7d8:	461a      	mov	r2, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f98e 	bl	800aafc <SCSI_ProcessCmd>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	da06      	bge.n	800a7f4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f8d1 	bl	800a990 <MSC_BOT_SendCSW>
      break;
 800a7ee:	e001      	b.n	800a7f4 <MSC_BOT_DataOut+0x60>
    return;
 800a7f0:	bf00      	nop
 800a7f2:	e000      	b.n	800a7f6 <MSC_BOT_DataOut+0x62>
      break;
 800a7f4:	bf00      	nop
  }
}
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	32b0      	adds	r2, #176	; 0xb0
 800a80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a812:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d079      	beq.n	800a90e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800a832:	4b3a      	ldr	r3, [pc, #232]	; (800a91c <MSC_BOT_CBW_Decode+0x120>)
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f003 fbed 	bl	800e018 <USBD_LL_GetRxDataSize>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b1f      	cmp	r3, #31
 800a842:	d114      	bne.n	800a86e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800a84a:	4a35      	ldr	r2, [pc, #212]	; (800a920 <MSC_BOT_CBW_Decode+0x124>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d10e      	bne.n	800a86e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a856:	2b01      	cmp	r3, #1
 800a858:	d809      	bhi.n	800a86e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800a860:	2b00      	cmp	r3, #0
 800a862:	d004      	beq.n	800a86e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a86a:	2b10      	cmp	r3, #16
 800a86c:	d90e      	bls.n	800a88c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a874:	2320      	movs	r3, #32
 800a876:	2205      	movs	r2, #5
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fe28 	bl	800b4ce <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2202      	movs	r2, #2
 800a882:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f8bd 	bl	800aa04 <MSC_BOT_Abort>
 800a88a:	e043      	b.n	800a914 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800a898:	461a      	mov	r2, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f92e 	bl	800aafc <SCSI_ProcessCmd>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	da0c      	bge.n	800a8c0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	7a1b      	ldrb	r3, [r3, #8]
 800a8aa:	2b05      	cmp	r3, #5
 800a8ac:	d104      	bne.n	800a8b8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f86d 	bl	800a990 <MSC_BOT_SendCSW>
 800a8b6:	e02d      	b.n	800a914 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f8a3 	bl	800aa04 <MSC_BOT_Abort>
 800a8be:	e029      	b.n	800a914 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	7a1b      	ldrb	r3, [r3, #8]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d024      	beq.n	800a912 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d020      	beq.n	800a912 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d01c      	beq.n	800a912 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d009      	beq.n	800a8f4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f103 0110 	add.w	r1, r3, #16
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f819 	bl	800a924 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800a8f2:	e00f      	b.n	800a914 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d104      	bne.n	800a906 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f846 	bl	800a990 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800a904:	e006      	b.n	800a914 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 f87c 	bl	800aa04 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800a90c:	e002      	b.n	800a914 <MSC_BOT_CBW_Decode+0x118>
    return;
 800a90e:	bf00      	nop
 800a910:	e000      	b.n	800a914 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800a912:	bf00      	nop
    }
  }
}
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	24000073 	.word	0x24000073
 800a920:	43425355 	.word	0x43425355

0800a924 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	32b0      	adds	r2, #176	; 0xb0
 800a93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d01e      	beq.n	800a984 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	4293      	cmp	r3, r2
 800a950:	bf28      	it	cs
 800a952:	4613      	movcs	r3, r2
 800a954:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	1ad2      	subs	r2, r2, r3
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2204      	movs	r2, #4
 800a972:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <MSC_BOT_SendData+0x68>)
 800a976:	7819      	ldrb	r1, [r3, #0]
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f003 fb09 	bl	800df94 <USBD_LL_Transmit>
 800a982:	e000      	b.n	800a986 <MSC_BOT_SendData+0x62>
    return;
 800a984:	bf00      	nop
}
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	24000072 	.word	0x24000072

0800a990 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	32b0      	adds	r2, #176	; 0xb0
 800a9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9aa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d01d      	beq.n	800a9ee <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4a10      	ldr	r2, [pc, #64]	; (800a9f8 <MSC_BOT_SendCSW+0x68>)
 800a9b6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	78fa      	ldrb	r2, [r7, #3]
 800a9be:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800a9c8:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <MSC_BOT_SendCSW+0x6c>)
 800a9ca:	7819      	ldrb	r1, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800a9d2:	230d      	movs	r3, #13
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f003 fadd 	bl	800df94 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a9da:	4b09      	ldr	r3, [pc, #36]	; (800aa00 <MSC_BOT_SendCSW+0x70>)
 800a9dc:	7819      	ldrb	r1, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a9e4:	231f      	movs	r3, #31
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f003 faf5 	bl	800dfd6 <USBD_LL_PrepareReceive>
 800a9ec:	e000      	b.n	800a9f0 <MSC_BOT_SendCSW+0x60>
    return;
 800a9ee:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	53425355 	.word	0x53425355
 800a9fc:	24000072 	.word	0x24000072
 800aa00:	24000073 	.word	0x24000073

0800aa04 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	32b0      	adds	r2, #176	; 0xb0
 800aa16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d02a      	beq.n	800aa78 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10e      	bne.n	800aa4a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d009      	beq.n	800aa4a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d105      	bne.n	800aa4a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800aa3e:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <MSC_BOT_Abort+0x7c>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f003 fa1c 	bl	800de82 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800aa4a:	4b0e      	ldr	r3, [pc, #56]	; (800aa84 <MSC_BOT_Abort+0x80>)
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f003 fa16 	bl	800de82 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	7a5b      	ldrb	r3, [r3, #9]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d10d      	bne.n	800aa7a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800aa5e:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <MSC_BOT_Abort+0x80>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f003 fa0c 	bl	800de82 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800aa6a:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <MSC_BOT_Abort+0x7c>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f003 fa06 	bl	800de82 <USBD_LL_StallEP>
 800aa76:	e000      	b.n	800aa7a <MSC_BOT_Abort+0x76>
    return;
 800aa78:	bf00      	nop
  }
}
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	24000073 	.word	0x24000073
 800aa84:	24000072 	.word	0x24000072

0800aa88 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	32b0      	adds	r2, #176	; 0xb0
 800aa9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d01d      	beq.n	800aae6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	7a5b      	ldrb	r3, [r3, #9]
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d10c      	bne.n	800aacc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800aab2:	4b10      	ldr	r3, [pc, #64]	; (800aaf4 <MSC_BOT_CplClrFeature+0x6c>)
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f003 f9e2 	bl	800de82 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800aabe:	4b0e      	ldr	r3, [pc, #56]	; (800aaf8 <MSC_BOT_CplClrFeature+0x70>)
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f003 f9dc 	bl	800de82 <USBD_LL_StallEP>
 800aaca:	e00f      	b.n	800aaec <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800aacc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	da0a      	bge.n	800aaea <MSC_BOT_CplClrFeature+0x62>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	7a5b      	ldrb	r3, [r3, #9]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d006      	beq.n	800aaea <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800aadc:	2101      	movs	r1, #1
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff ff56 	bl	800a990 <MSC_BOT_SendCSW>
 800aae4:	e002      	b.n	800aaec <MSC_BOT_CplClrFeature+0x64>
    return;
 800aae6:	bf00      	nop
 800aae8:	e000      	b.n	800aaec <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800aaea:	bf00      	nop
  }
}
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	24000072 	.word	0x24000072
 800aaf8:	24000073 	.word	0x24000073

0800aafc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	460b      	mov	r3, r1
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	32b0      	adds	r2, #176	; 0xb0
 800ab14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab18:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d102      	bne.n	800ab26 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800ab20:	f04f 33ff 	mov.w	r3, #4294967295
 800ab24:	e168      	b.n	800adf8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	2baa      	cmp	r3, #170	; 0xaa
 800ab2c:	f000 8144 	beq.w	800adb8 <SCSI_ProcessCmd+0x2bc>
 800ab30:	2baa      	cmp	r3, #170	; 0xaa
 800ab32:	f300 8153 	bgt.w	800addc <SCSI_ProcessCmd+0x2e0>
 800ab36:	2ba8      	cmp	r3, #168	; 0xa8
 800ab38:	f000 812c 	beq.w	800ad94 <SCSI_ProcessCmd+0x298>
 800ab3c:	2ba8      	cmp	r3, #168	; 0xa8
 800ab3e:	f300 814d 	bgt.w	800addc <SCSI_ProcessCmd+0x2e0>
 800ab42:	2b5a      	cmp	r3, #90	; 0x5a
 800ab44:	f300 80c0 	bgt.w	800acc8 <SCSI_ProcessCmd+0x1cc>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f2c0 8147 	blt.w	800addc <SCSI_ProcessCmd+0x2e0>
 800ab4e:	2b5a      	cmp	r3, #90	; 0x5a
 800ab50:	f200 8144 	bhi.w	800addc <SCSI_ProcessCmd+0x2e0>
 800ab54:	a201      	add	r2, pc, #4	; (adr r2, 800ab5c <SCSI_ProcessCmd+0x60>)
 800ab56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5a:	bf00      	nop
 800ab5c:	0800accf 	.word	0x0800accf
 800ab60:	0800addd 	.word	0x0800addd
 800ab64:	0800addd 	.word	0x0800addd
 800ab68:	0800ace1 	.word	0x0800ace1
 800ab6c:	0800addd 	.word	0x0800addd
 800ab70:	0800addd 	.word	0x0800addd
 800ab74:	0800addd 	.word	0x0800addd
 800ab78:	0800addd 	.word	0x0800addd
 800ab7c:	0800addd 	.word	0x0800addd
 800ab80:	0800addd 	.word	0x0800addd
 800ab84:	0800addd 	.word	0x0800addd
 800ab88:	0800addd 	.word	0x0800addd
 800ab8c:	0800addd 	.word	0x0800addd
 800ab90:	0800addd 	.word	0x0800addd
 800ab94:	0800addd 	.word	0x0800addd
 800ab98:	0800addd 	.word	0x0800addd
 800ab9c:	0800addd 	.word	0x0800addd
 800aba0:	0800addd 	.word	0x0800addd
 800aba4:	0800acf3 	.word	0x0800acf3
 800aba8:	0800addd 	.word	0x0800addd
 800abac:	0800addd 	.word	0x0800addd
 800abb0:	0800addd 	.word	0x0800addd
 800abb4:	0800addd 	.word	0x0800addd
 800abb8:	0800addd 	.word	0x0800addd
 800abbc:	0800addd 	.word	0x0800addd
 800abc0:	0800addd 	.word	0x0800addd
 800abc4:	0800ad29 	.word	0x0800ad29
 800abc8:	0800ad05 	.word	0x0800ad05
 800abcc:	0800addd 	.word	0x0800addd
 800abd0:	0800addd 	.word	0x0800addd
 800abd4:	0800ad17 	.word	0x0800ad17
 800abd8:	0800addd 	.word	0x0800addd
 800abdc:	0800addd 	.word	0x0800addd
 800abe0:	0800addd 	.word	0x0800addd
 800abe4:	0800addd 	.word	0x0800addd
 800abe8:	0800ad4d 	.word	0x0800ad4d
 800abec:	0800addd 	.word	0x0800addd
 800abf0:	0800ad5f 	.word	0x0800ad5f
 800abf4:	0800addd 	.word	0x0800addd
 800abf8:	0800addd 	.word	0x0800addd
 800abfc:	0800ad83 	.word	0x0800ad83
 800ac00:	0800addd 	.word	0x0800addd
 800ac04:	0800ada7 	.word	0x0800ada7
 800ac08:	0800addd 	.word	0x0800addd
 800ac0c:	0800addd 	.word	0x0800addd
 800ac10:	0800addd 	.word	0x0800addd
 800ac14:	0800addd 	.word	0x0800addd
 800ac18:	0800adcb 	.word	0x0800adcb
 800ac1c:	0800addd 	.word	0x0800addd
 800ac20:	0800addd 	.word	0x0800addd
 800ac24:	0800addd 	.word	0x0800addd
 800ac28:	0800addd 	.word	0x0800addd
 800ac2c:	0800addd 	.word	0x0800addd
 800ac30:	0800addd 	.word	0x0800addd
 800ac34:	0800addd 	.word	0x0800addd
 800ac38:	0800addd 	.word	0x0800addd
 800ac3c:	0800addd 	.word	0x0800addd
 800ac40:	0800addd 	.word	0x0800addd
 800ac44:	0800addd 	.word	0x0800addd
 800ac48:	0800addd 	.word	0x0800addd
 800ac4c:	0800addd 	.word	0x0800addd
 800ac50:	0800addd 	.word	0x0800addd
 800ac54:	0800addd 	.word	0x0800addd
 800ac58:	0800addd 	.word	0x0800addd
 800ac5c:	0800addd 	.word	0x0800addd
 800ac60:	0800addd 	.word	0x0800addd
 800ac64:	0800addd 	.word	0x0800addd
 800ac68:	0800addd 	.word	0x0800addd
 800ac6c:	0800addd 	.word	0x0800addd
 800ac70:	0800addd 	.word	0x0800addd
 800ac74:	0800addd 	.word	0x0800addd
 800ac78:	0800addd 	.word	0x0800addd
 800ac7c:	0800addd 	.word	0x0800addd
 800ac80:	0800addd 	.word	0x0800addd
 800ac84:	0800addd 	.word	0x0800addd
 800ac88:	0800addd 	.word	0x0800addd
 800ac8c:	0800addd 	.word	0x0800addd
 800ac90:	0800addd 	.word	0x0800addd
 800ac94:	0800addd 	.word	0x0800addd
 800ac98:	0800addd 	.word	0x0800addd
 800ac9c:	0800addd 	.word	0x0800addd
 800aca0:	0800addd 	.word	0x0800addd
 800aca4:	0800addd 	.word	0x0800addd
 800aca8:	0800addd 	.word	0x0800addd
 800acac:	0800addd 	.word	0x0800addd
 800acb0:	0800addd 	.word	0x0800addd
 800acb4:	0800addd 	.word	0x0800addd
 800acb8:	0800addd 	.word	0x0800addd
 800acbc:	0800addd 	.word	0x0800addd
 800acc0:	0800addd 	.word	0x0800addd
 800acc4:	0800ad3b 	.word	0x0800ad3b
 800acc8:	2b9e      	cmp	r3, #158	; 0x9e
 800acca:	d051      	beq.n	800ad70 <SCSI_ProcessCmd+0x274>
 800accc:	e086      	b.n	800addc <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800acce:	7afb      	ldrb	r3, [r7, #11]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	4619      	mov	r1, r3
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f000 f893 	bl	800ae00 <SCSI_TestUnitReady>
 800acda:	4603      	mov	r3, r0
 800acdc:	75fb      	strb	r3, [r7, #23]
      break;
 800acde:	e089      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800ace0:	7afb      	ldrb	r3, [r7, #11]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	4619      	mov	r1, r3
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f000 fb6e 	bl	800b3c8 <SCSI_RequestSense>
 800acec:	4603      	mov	r3, r0
 800acee:	75fb      	strb	r3, [r7, #23]
      break;
 800acf0:	e080      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800acf2:	7afb      	ldrb	r3, [r7, #11]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4619      	mov	r1, r3
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f8db 	bl	800aeb4 <SCSI_Inquiry>
 800acfe:	4603      	mov	r3, r0
 800ad00:	75fb      	strb	r3, [r7, #23]
      break;
 800ad02:	e077      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800ad04:	7afb      	ldrb	r3, [r7, #11]
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f000 fc2a 	bl	800b564 <SCSI_StartStopUnit>
 800ad10:	4603      	mov	r3, r0
 800ad12:	75fb      	strb	r3, [r7, #23]
      break;
 800ad14:	e06e      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800ad16:	7afb      	ldrb	r3, [r7, #11]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 fc76 	bl	800b60e <SCSI_AllowPreventRemovable>
 800ad22:	4603      	mov	r3, r0
 800ad24:	75fb      	strb	r3, [r7, #23]
      break;
 800ad26:	e065      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800ad28:	7afb      	ldrb	r3, [r7, #11]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 faea 	bl	800b308 <SCSI_ModeSense6>
 800ad34:	4603      	mov	r3, r0
 800ad36:	75fb      	strb	r3, [r7, #23]
      break;
 800ad38:	e05c      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800ad3a:	7afb      	ldrb	r3, [r7, #11]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 fb11 	bl	800b368 <SCSI_ModeSense10>
 800ad46:	4603      	mov	r3, r0
 800ad48:	75fb      	strb	r3, [r7, #23]
      break;
 800ad4a:	e053      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	4619      	mov	r1, r3
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f000 fa5d 	bl	800b212 <SCSI_ReadFormatCapacity>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad5c:	e04a      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800ad5e:	7afb      	ldrb	r3, [r7, #11]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	4619      	mov	r1, r3
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 f923 	bl	800afb0 <SCSI_ReadCapacity10>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad6e:	e041      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	4619      	mov	r1, r3
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 f998 	bl	800b0ac <SCSI_ReadCapacity16>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad80:	e038      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800ad82:	7afb      	ldrb	r3, [r7, #11]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	4619      	mov	r1, r3
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f000 fc6d 	bl	800b668 <SCSI_Read10>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	75fb      	strb	r3, [r7, #23]
      break;
 800ad92:	e02f      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f000 fd0e 	bl	800b7bc <SCSI_Read12>
 800ada0:	4603      	mov	r3, r0
 800ada2:	75fb      	strb	r3, [r7, #23]
      break;
 800ada4:	e026      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800ada6:	7afb      	ldrb	r3, [r7, #11]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	4619      	mov	r1, r3
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 fdb9 	bl	800b924 <SCSI_Write10>
 800adb2:	4603      	mov	r3, r0
 800adb4:	75fb      	strb	r3, [r7, #23]
      break;
 800adb6:	e01d      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800adb8:	7afb      	ldrb	r3, [r7, #11]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	4619      	mov	r1, r3
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 fe86 	bl	800bad0 <SCSI_Write12>
 800adc4:	4603      	mov	r3, r0
 800adc6:	75fb      	strb	r3, [r7, #23]
      break;
 800adc8:	e014      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800adca:	7afb      	ldrb	r3, [r7, #11]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	4619      	mov	r1, r3
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 ff63 	bl	800bc9c <SCSI_Verify10>
 800add6:	4603      	mov	r3, r0
 800add8:	75fb      	strb	r3, [r7, #23]
      break;
 800adda:	e00b      	b.n	800adf4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800addc:	7af9      	ldrb	r1, [r7, #11]
 800adde:	2320      	movs	r3, #32
 800ade0:	2205      	movs	r2, #5
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f000 fb73 	bl	800b4ce <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	2202      	movs	r2, #2
 800adec:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800adee:	23ff      	movs	r3, #255	; 0xff
 800adf0:	75fb      	strb	r3, [r7, #23]
      break;
 800adf2:	bf00      	nop
  }

  return ret;
 800adf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	32b0      	adds	r2, #176	; 0xb0
 800ae18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d102      	bne.n	800ae2a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800ae24:	f04f 33ff 	mov.w	r3, #4294967295
 800ae28:	e03f      	b.n	800aeaa <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00a      	beq.n	800ae4a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ae3a:	2320      	movs	r3, #32
 800ae3c:	2205      	movs	r2, #5
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 fb45 	bl	800b4ce <SCSI_SenseCode>

    return -1;
 800ae44:	f04f 33ff 	mov.w	r3, #4294967295
 800ae48:	e02f      	b.n	800aeaa <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d10b      	bne.n	800ae6c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ae54:	7af9      	ldrb	r1, [r7, #11]
 800ae56:	233a      	movs	r3, #58	; 0x3a
 800ae58:	2202      	movs	r2, #2
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 fb37 	bl	800b4ce <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	2205      	movs	r2, #5
 800ae64:	721a      	strb	r2, [r3, #8]
    return -1;
 800ae66:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6a:	e01e      	b.n	800aeaa <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	33b0      	adds	r3, #176	; 0xb0
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	7afa      	ldrb	r2, [r7, #11]
 800ae80:	4610      	mov	r0, r2
 800ae82:	4798      	blx	r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00b      	beq.n	800aea2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ae8a:	7af9      	ldrb	r1, [r7, #11]
 800ae8c:	233a      	movs	r3, #58	; 0x3a
 800ae8e:	2202      	movs	r2, #2
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 fb1c 	bl	800b4ce <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2205      	movs	r2, #5
 800ae9a:	721a      	strb	r2, [r3, #8]

    return -1;
 800ae9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aea0:	e003      	b.n	800aeaa <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2200      	movs	r2, #0
 800aea6:	60da      	str	r2, [r3, #12]

  return 0;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	460b      	mov	r3, r1
 800aebe:	607a      	str	r2, [r7, #4]
 800aec0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	32b0      	adds	r2, #176	; 0xb0
 800aecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <SCSI_Inquiry+0x2a>
  {
    return -1;
 800aed8:	f04f 33ff 	mov.w	r3, #4294967295
 800aedc:	e05f      	b.n	800af9e <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aeee:	2320      	movs	r3, #32
 800aef0:	2205      	movs	r2, #5
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f000 faeb 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800aef8:	f04f 33ff 	mov.w	r3, #4294967295
 800aefc:	e04f      	b.n	800af9e <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3301      	adds	r3, #1
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d020      	beq.n	800af4e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3302      	adds	r3, #2
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d105      	bne.n	800af22 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800af16:	2206      	movs	r2, #6
 800af18:	4923      	ldr	r1, [pc, #140]	; (800afa8 <SCSI_Inquiry+0xf4>)
 800af1a:	69b8      	ldr	r0, [r7, #24]
 800af1c:	f001 f844 	bl	800bfa8 <SCSI_UpdateBotData>
 800af20:	e03c      	b.n	800af9c <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3302      	adds	r3, #2
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b80      	cmp	r3, #128	; 0x80
 800af2a:	d105      	bne.n	800af38 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800af2c:	2208      	movs	r2, #8
 800af2e:	491f      	ldr	r1, [pc, #124]	; (800afac <SCSI_Inquiry+0xf8>)
 800af30:	69b8      	ldr	r0, [r7, #24]
 800af32:	f001 f839 	bl	800bfa8 <SCSI_UpdateBotData>
 800af36:	e031      	b.n	800af9c <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800af3e:	2324      	movs	r3, #36	; 0x24
 800af40:	2205      	movs	r2, #5
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 fac3 	bl	800b4ce <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800af48:	f04f 33ff 	mov.w	r3, #4294967295
 800af4c:	e027      	b.n	800af9e <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	33b0      	adds	r3, #176	; 0xb0
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	69d9      	ldr	r1, [r3, #28]
 800af60:	7afa      	ldrb	r2, [r7, #11]
 800af62:	4613      	mov	r3, r2
 800af64:	00db      	lsls	r3, r3, #3
 800af66:	4413      	add	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	440b      	add	r3, r1
 800af6c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	3304      	adds	r3, #4
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	b29b      	uxth	r3, r3
 800af76:	3305      	adds	r3, #5
 800af78:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3304      	adds	r3, #4
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	b29b      	uxth	r3, r3
 800af82:	8bfa      	ldrh	r2, [r7, #30]
 800af84:	429a      	cmp	r2, r3
 800af86:	d303      	bcc.n	800af90 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3304      	adds	r3, #4
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800af90:	8bfb      	ldrh	r3, [r7, #30]
 800af92:	461a      	mov	r2, r3
 800af94:	6979      	ldr	r1, [r7, #20]
 800af96:	69b8      	ldr	r0, [r7, #24]
 800af98:	f001 f806 	bl	800bfa8 <SCSI_UpdateBotData>
  }

  return 0;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3720      	adds	r7, #32
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	24000074 	.word	0x24000074
 800afac:	2400007c 	.word	0x2400007c

0800afb0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	460b      	mov	r3, r1
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	32b0      	adds	r2, #176	; 0xb0
 800afc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afcc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d102      	bne.n	800afda <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800afd4:	f04f 33ff 	mov.w	r3, #4294967295
 800afd8:	e064      	b.n	800b0a4 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	33b0      	adds	r3, #176	; 0xb0
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4413      	add	r3, r2
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800aff8:	7af8      	ldrb	r0, [r7, #11]
 800affa:	4798      	blx	r3
 800affc:	4603      	mov	r3, r0
 800affe:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d104      	bne.n	800b012 <SCSI_ReadCapacity10+0x62>
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d108      	bne.n	800b024 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b012:	7af9      	ldrb	r1, [r7, #11]
 800b014:	233a      	movs	r3, #58	; 0x3a
 800b016:	2202      	movs	r2, #2
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 fa58 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295
 800b022:	e03f      	b.n	800b0a4 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b02a:	3b01      	subs	r3, #1
 800b02c:	0e1b      	lsrs	r3, r3, #24
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b03a:	3b01      	subs	r3, #1
 800b03c:	0c1b      	lsrs	r3, r3, #16
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b04a:	3b01      	subs	r3, #1
 800b04c:	0a1b      	lsrs	r3, r3, #8
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	3b01      	subs	r3, #1
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b06a:	161b      	asrs	r3, r3, #24
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b078:	141b      	asrs	r3, r3, #16
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b086:	0a1b      	lsrs	r3, r3, #8
 800b088:	b29b      	uxth	r3, r3
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b096:	b2da      	uxtb	r2, r3
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2208      	movs	r2, #8
 800b0a0:	60da      	str	r2, [r3, #12]

  return 0;
 800b0a2:	2300      	movs	r3, #0

}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3718      	adds	r7, #24
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	32b0      	adds	r2, #176	; 0xb0
 800b0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d102      	bne.n	800b0d6 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800b0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d4:	e099      	b.n	800b20a <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	33b0      	adds	r3, #176	; 0xb0
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	69ba      	ldr	r2, [r7, #24]
 800b0ea:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800b0ee:	69ba      	ldr	r2, [r7, #24]
 800b0f0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800b0f4:	7af8      	ldrb	r0, [r7, #11]
 800b0f6:	4798      	blx	r3
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b0fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d104      	bne.n	800b10e <SCSI_ReadCapacity16+0x62>
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d108      	bne.n	800b120 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b10e:	7af9      	ldrb	r1, [r7, #11]
 800b110:	233a      	movs	r3, #58	; 0x3a
 800b112:	2202      	movs	r2, #2
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f000 f9da 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800b11a:	f04f 33ff 	mov.w	r3, #4294967295
 800b11e:	e074      	b.n	800b20a <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	330a      	adds	r3, #10
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	330b      	adds	r3, #11
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b130:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	330c      	adds	r3, #12
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b13a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	320d      	adds	r2, #13
 800b140:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b142:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b148:	2300      	movs	r3, #0
 800b14a:	77fb      	strb	r3, [r7, #31]
 800b14c:	e007      	b.n	800b15e <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 800b14e:	7ffb      	ldrb	r3, [r7, #31]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	4413      	add	r3, r2
 800b154:	2200      	movs	r2, #0
 800b156:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b158:	7ffb      	ldrb	r3, [r7, #31]
 800b15a:	3301      	adds	r3, #1
 800b15c:	77fb      	strb	r3, [r7, #31]
 800b15e:	7ffa      	ldrb	r2, [r7, #31]
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	429a      	cmp	r2, r3
 800b166:	d3f2      	bcc.n	800b14e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b16e:	3b01      	subs	r3, #1
 800b170:	0e1b      	lsrs	r3, r3, #24
 800b172:	b2da      	uxtb	r2, r3
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b17e:	3b01      	subs	r3, #1
 800b180:	0c1b      	lsrs	r3, r3, #16
 800b182:	b2da      	uxtb	r2, r3
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b18e:	3b01      	subs	r3, #1
 800b190:	0a1b      	lsrs	r3, r3, #8
 800b192:	b2da      	uxtb	r2, r3
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1ae:	161b      	asrs	r3, r3, #24
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1bc:	141b      	asrs	r3, r3, #16
 800b1be:	b2da      	uxtb	r2, r3
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1ca:	0a1b      	lsrs	r3, r3, #8
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	330a      	adds	r3, #10
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	330b      	adds	r3, #11
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b1f0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	330c      	adds	r3, #12
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b1fa:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	320d      	adds	r2, #13
 800b200:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b202:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	60da      	str	r2, [r3, #12]

  return 0;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3720      	adds	r7, #32
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b088      	sub	sp, #32
 800b216:	af00      	add	r7, sp, #0
 800b218:	60f8      	str	r0, [r7, #12]
 800b21a:	460b      	mov	r3, r1
 800b21c:	607a      	str	r2, [r7, #4]
 800b21e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	32b0      	adds	r2, #176	; 0xb0
 800b22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d102      	bne.n	800b23c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800b236:	f04f 33ff 	mov.w	r3, #4294967295
 800b23a:	e061      	b.n	800b300 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	33b0      	adds	r3, #176	; 0xb0
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	f107 0214 	add.w	r2, r7, #20
 800b252:	f107 0110 	add.w	r1, r7, #16
 800b256:	7af8      	ldrb	r0, [r7, #11]
 800b258:	4798      	blx	r3
 800b25a:	4603      	mov	r3, r0
 800b25c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d104      	bne.n	800b270 <SCSI_ReadFormatCapacity+0x5e>
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d108      	bne.n	800b282 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b270:	7af9      	ldrb	r1, [r7, #11]
 800b272:	233a      	movs	r3, #58	; 0x3a
 800b274:	2202      	movs	r2, #2
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f000 f929 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800b27c:	f04f 33ff 	mov.w	r3, #4294967295
 800b280:	e03e      	b.n	800b300 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800b282:	2300      	movs	r3, #0
 800b284:	83fb      	strh	r3, [r7, #30]
 800b286:	e007      	b.n	800b298 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800b288:	8bfb      	ldrh	r3, [r7, #30]
 800b28a:	69ba      	ldr	r2, [r7, #24]
 800b28c:	4413      	add	r3, r2
 800b28e:	2200      	movs	r2, #0
 800b290:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800b292:	8bfb      	ldrh	r3, [r7, #30]
 800b294:	3301      	adds	r3, #1
 800b296:	83fb      	strh	r3, [r7, #30]
 800b298:	8bfb      	ldrh	r3, [r7, #30]
 800b29a:	2b0b      	cmp	r3, #11
 800b29c:	d9f4      	bls.n	800b288 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	0e1b      	lsrs	r3, r3, #24
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	0c1b      	lsrs	r3, r3, #16
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	0a1b      	lsrs	r3, r3, #8
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800b2da:	8abb      	ldrh	r3, [r7, #20]
 800b2dc:	141b      	asrs	r3, r3, #16
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b2e4:	8abb      	ldrh	r3, [r7, #20]
 800b2e6:	0a1b      	lsrs	r3, r3, #8
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800b2f0:	8abb      	ldrh	r3, [r7, #20]
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	220c      	movs	r2, #12
 800b2fc:	60da      	str	r2, [r3, #12]

  return 0;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3720      	adds	r7, #32
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	460b      	mov	r3, r1
 800b312:	607a      	str	r2, [r7, #4]
 800b314:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	32b0      	adds	r2, #176	; 0xb0
 800b320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b324:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800b326:	2317      	movs	r3, #23
 800b328:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800b330:	f04f 33ff 	mov.w	r3, #4294967295
 800b334:	e011      	b.n	800b35a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	3304      	adds	r3, #4
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	8afa      	ldrh	r2, [r7, #22]
 800b340:	429a      	cmp	r2, r3
 800b342:	d303      	bcc.n	800b34c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	3304      	adds	r3, #4
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800b34c:	8afb      	ldrh	r3, [r7, #22]
 800b34e:	461a      	mov	r2, r3
 800b350:	4904      	ldr	r1, [pc, #16]	; (800b364 <SCSI_ModeSense6+0x5c>)
 800b352:	6938      	ldr	r0, [r7, #16]
 800b354:	f000 fe28 	bl	800bfa8 <SCSI_UpdateBotData>

  return 0;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3718      	adds	r7, #24
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	24000084 	.word	0x24000084

0800b368 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	460b      	mov	r3, r1
 800b372:	607a      	str	r2, [r7, #4]
 800b374:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	32b0      	adds	r2, #176	; 0xb0
 800b380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b384:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800b386:	231b      	movs	r3, #27
 800b388:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800b390:	f04f 33ff 	mov.w	r3, #4294967295
 800b394:	e011      	b.n	800b3ba <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	3308      	adds	r3, #8
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	8afa      	ldrh	r2, [r7, #22]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d303      	bcc.n	800b3ac <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800b3ac:	8afb      	ldrh	r3, [r7, #22]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	4904      	ldr	r1, [pc, #16]	; (800b3c4 <SCSI_ModeSense10+0x5c>)
 800b3b2:	6938      	ldr	r0, [r7, #16]
 800b3b4:	f000 fdf8 	bl	800bfa8 <SCSI_UpdateBotData>

  return 0;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	2400009c 	.word	0x2400009c

0800b3c8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	32b0      	adds	r2, #176	; 0xb0
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d102      	bne.n	800b3f2 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800b3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f0:	e069      	b.n	800b4c6 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10a      	bne.n	800b412 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b402:	2320      	movs	r3, #32
 800b404:	2205      	movs	r2, #5
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f000 f861 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800b40c:	f04f 33ff 	mov.w	r3, #4294967295
 800b410:	e059      	b.n	800b4c6 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b412:	2300      	movs	r3, #0
 800b414:	75fb      	strb	r3, [r7, #23]
 800b416:	e007      	b.n	800b428 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	4413      	add	r3, r2
 800b41e:	2200      	movs	r2, #0
 800b420:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	3301      	adds	r3, #1
 800b426:	75fb      	strb	r3, [r7, #23]
 800b428:	7dfb      	ldrb	r3, [r7, #23]
 800b42a:	2b11      	cmp	r3, #17
 800b42c:	d9f4      	bls.n	800b418 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	2270      	movs	r2, #112	; 0x70
 800b432:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	220c      	movs	r2, #12
 800b438:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b446:	429a      	cmp	r2, r3
 800b448:	d02e      	beq.n	800b4a8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b450:	461a      	mov	r2, r3
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	3248      	adds	r2, #72	; 0x48
 800b456:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	3348      	adds	r3, #72	; 0x48
 800b468:	00db      	lsls	r3, r3, #3
 800b46a:	4413      	add	r3, r2
 800b46c:	791a      	ldrb	r2, [r3, #4]
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	3348      	adds	r3, #72	; 0x48
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	4413      	add	r3, r2
 800b480:	795a      	ldrb	r2, [r3, #5]
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b48c:	3301      	adds	r3, #1
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d103      	bne.n	800b4a8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	2212      	movs	r2, #18
 800b4ac:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	2b12      	cmp	r3, #18
 800b4b6:	d805      	bhi.n	800b4c4 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b085      	sub	sp, #20
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4611      	mov	r1, r2
 800b4da:	461a      	mov	r2, r3
 800b4dc:	4603      	mov	r3, r0
 800b4de:	70fb      	strb	r3, [r7, #3]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70bb      	strb	r3, [r7, #2]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	32b0      	adds	r2, #176	; 0xb0
 800b4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d02c      	beq.n	800b558 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b504:	461a      	mov	r2, r3
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3248      	adds	r2, #72	; 0x48
 800b50a:	78b9      	ldrb	r1, [r7, #2]
 800b50c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	3348      	adds	r3, #72	; 0x48
 800b51a:	00db      	lsls	r3, r3, #3
 800b51c:	4413      	add	r3, r2
 800b51e:	787a      	ldrb	r2, [r7, #1]
 800b520:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	3348      	adds	r3, #72	; 0x48
 800b52c:	00db      	lsls	r3, r3, #3
 800b52e:	4413      	add	r3, r2
 800b530:	2200      	movs	r2, #0
 800b532:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b53a:	3301      	adds	r3, #1
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	d105      	bne.n	800b55a <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800b556:	e000      	b.n	800b55a <SCSI_SenseCode+0x8c>
    return;
 800b558:	bf00      	nop
  }
}
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	460b      	mov	r3, r1
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	32b0      	adds	r2, #176	; 0xb0
 800b57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b580:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d102      	bne.n	800b58e <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800b588:	f04f 33ff 	mov.w	r3, #4294967295
 800b58c:	e03b      	b.n	800b606 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b594:	2b01      	cmp	r3, #1
 800b596:	d10f      	bne.n	800b5b8 <SCSI_StartStopUnit+0x54>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3304      	adds	r3, #4
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d108      	bne.n	800b5b8 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b5a6:	7af9      	ldrb	r1, [r7, #11]
 800b5a8:	2324      	movs	r3, #36	; 0x24
 800b5aa:	2205      	movs	r2, #5
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7ff ff8e 	bl	800b4ce <SCSI_SenseCode>

    return -1;
 800b5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b6:	e026      	b.n	800b606 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	f003 0303 	and.w	r3, r3, #3
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d104      	bne.n	800b5d0 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b5ce:	e016      	b.n	800b5fe <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	2b02      	cmp	r3, #2
 800b5dc:	d104      	bne.n	800b5e8 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b5e6:	e00a      	b.n	800b5fe <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3304      	adds	r3, #4
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	f003 0303 	and.w	r3, r3, #3
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d103      	bne.n	800b5fe <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2200      	movs	r2, #0
 800b602:	60da      	str	r2, [r3, #12]

  return 0;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b60e:	b480      	push	{r7}
 800b610:	b087      	sub	sp, #28
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	460b      	mov	r3, r1
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	32b0      	adds	r2, #176	; 0xb0
 800b626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b62a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d102      	bne.n	800b638 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800b632:	f04f 33ff 	mov.w	r3, #4294967295
 800b636:	e011      	b.n	800b65c <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3304      	adds	r3, #4
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d104      	bne.n	800b64c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b64a:	e003      	b.n	800b654 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	2200      	movs	r2, #0
 800b658:	60da      	str	r2, [r3, #12]

  return 0;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	371c      	adds	r7, #28
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	460b      	mov	r3, r1
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	32b0      	adds	r2, #176	; 0xb0
 800b680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b684:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d102      	bne.n	800b692 <SCSI_Read10+0x2a>
  {
    return -1;
 800b68c:	f04f 33ff 	mov.w	r3, #4294967295
 800b690:	e090      	b.n	800b7b4 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	7a1b      	ldrb	r3, [r3, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f040 8082 	bne.w	800b7a0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b6a2:	b25b      	sxtb	r3, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	db0a      	blt.n	800b6be <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b6ae:	2320      	movs	r3, #32
 800b6b0:	2205      	movs	r2, #5
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f7ff ff0b 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6bc:	e07a      	b.n	800b7b4 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d108      	bne.n	800b6da <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b6c8:	7af9      	ldrb	r1, [r7, #11]
 800b6ca:	233a      	movs	r3, #58	; 0x3a
 800b6cc:	2202      	movs	r2, #2
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f7ff fefd 	bl	800b4ce <SCSI_SenseCode>

      return -1;
 800b6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d8:	e06c      	b.n	800b7b4 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	33b0      	adds	r3, #176	; 0xb0
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	7afa      	ldrb	r2, [r7, #11]
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	4798      	blx	r3
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d008      	beq.n	800b70a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b6f8:	7af9      	ldrb	r1, [r7, #11]
 800b6fa:	233a      	movs	r3, #58	; 0x3a
 800b6fc:	2202      	movs	r2, #2
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f7ff fee5 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b704:	f04f 33ff 	mov.w	r3, #4294967295
 800b708:	e054      	b.n	800b7b4 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	3302      	adds	r3, #2
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3303      	adds	r3, #3
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b71a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	3304      	adds	r3, #4
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b724:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	3205      	adds	r2, #5
 800b72a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b72c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3307      	adds	r3, #7
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	021b      	lsls	r3, r3, #8
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	3208      	adds	r2, #8
 800b740:	7812      	ldrb	r2, [r2, #0]
 800b742:	431a      	orrs	r2, r3
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b756:	7af9      	ldrb	r1, [r7, #11]
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 fadc 	bl	800bd16 <SCSI_CheckAddressRange>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	da02      	bge.n	800b76a <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b764:	f04f 33ff 	mov.w	r3, #4294967295
 800b768:	e024      	b.n	800b7b4 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b776:	6979      	ldr	r1, [r7, #20]
 800b778:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b77c:	fb01 f303 	mul.w	r3, r1, r3
 800b780:	429a      	cmp	r2, r3
 800b782:	d00a      	beq.n	800b79a <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b78a:	2320      	movs	r3, #32
 800b78c:	2205      	movs	r2, #5
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f7ff fe9d 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b794:	f04f 33ff 	mov.w	r3, #4294967295
 800b798:	e00c      	b.n	800b7b4 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2202      	movs	r2, #2
 800b79e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7a6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b7a8:	7afb      	ldrb	r3, [r7, #11]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 fadf 	bl	800bd70 <SCSI_ProcessRead>
 800b7b2:	4603      	mov	r3, r0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3718      	adds	r7, #24
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	32b0      	adds	r2, #176	; 0xb0
 800b7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d102      	bne.n	800b7e6 <SCSI_Read12+0x2a>
  {
    return -1;
 800b7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e4:	e09a      	b.n	800b91c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	7a1b      	ldrb	r3, [r3, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f040 808c 	bne.w	800b908 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b7f6:	b25b      	sxtb	r3, r3
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	db0a      	blt.n	800b812 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b802:	2320      	movs	r3, #32
 800b804:	2205      	movs	r2, #5
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f7ff fe61 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b80c:	f04f 33ff 	mov.w	r3, #4294967295
 800b810:	e084      	b.n	800b91c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d108      	bne.n	800b82e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b81c:	7af9      	ldrb	r1, [r7, #11]
 800b81e:	233a      	movs	r3, #58	; 0x3a
 800b820:	2202      	movs	r2, #2
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f7ff fe53 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b828:	f04f 33ff 	mov.w	r3, #4294967295
 800b82c:	e076      	b.n	800b91c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	33b0      	adds	r3, #176	; 0xb0
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	7afa      	ldrb	r2, [r7, #11]
 800b842:	4610      	mov	r0, r2
 800b844:	4798      	blx	r3
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d008      	beq.n	800b85e <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b84c:	7af9      	ldrb	r1, [r7, #11]
 800b84e:	233a      	movs	r3, #58	; 0x3a
 800b850:	2202      	movs	r2, #2
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff fe3b 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b858:	f04f 33ff 	mov.w	r3, #4294967295
 800b85c:	e05e      	b.n	800b91c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3302      	adds	r3, #2
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	3303      	adds	r3, #3
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b86e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3304      	adds	r3, #4
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b878:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	3205      	adds	r2, #5
 800b87e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b880:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3306      	adds	r3, #6
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3307      	adds	r3, #7
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b898:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	3308      	adds	r3, #8
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b8a2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	3209      	adds	r2, #9
 800b8a8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b8aa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b8be:	7af9      	ldrb	r1, [r7, #11]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 fa28 	bl	800bd16 <SCSI_CheckAddressRange>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	da02      	bge.n	800b8d2 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d0:	e024      	b.n	800b91c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b8de:	6979      	ldr	r1, [r7, #20]
 800b8e0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b8e4:	fb01 f303 	mul.w	r3, r1, r3
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d00a      	beq.n	800b902 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b8f2:	2320      	movs	r3, #32
 800b8f4:	2205      	movs	r2, #5
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f7ff fde9 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b900:	e00c      	b.n	800b91c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2202      	movs	r2, #2
 800b906:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b90e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b910:	7afb      	ldrb	r3, [r7, #11]
 800b912:	4619      	mov	r1, r3
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 fa2b 	bl	800bd70 <SCSI_ProcessRead>
 800b91a:	4603      	mov	r3, r0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	460b      	mov	r3, r1
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	32b0      	adds	r2, #176	; 0xb0
 800b93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b940:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d102      	bne.n	800b94e <SCSI_Write10+0x2a>
  {
    return -1;
 800b948:	f04f 33ff 	mov.w	r3, #4294967295
 800b94c:	e0ba      	b.n	800bac4 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	7a1b      	ldrb	r3, [r3, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	f040 80b0 	bne.w	800bab8 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10a      	bne.n	800b978 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b968:	2320      	movs	r3, #32
 800b96a:	2205      	movs	r2, #5
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7ff fdae 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b972:	f04f 33ff 	mov.w	r3, #4294967295
 800b976:	e0a5      	b.n	800bac4 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b97e:	b25b      	sxtb	r3, r3
 800b980:	2b00      	cmp	r3, #0
 800b982:	da0a      	bge.n	800b99a <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b98a:	2320      	movs	r3, #32
 800b98c:	2205      	movs	r2, #5
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f7ff fd9d 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b994:	f04f 33ff 	mov.w	r3, #4294967295
 800b998:	e094      	b.n	800bac4 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	33b0      	adds	r3, #176	; 0xb0
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	7afa      	ldrb	r2, [r7, #11]
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4798      	blx	r3
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d008      	beq.n	800b9ca <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b9b8:	7af9      	ldrb	r1, [r7, #11]
 800b9ba:	233a      	movs	r3, #58	; 0x3a
 800b9bc:	2202      	movs	r2, #2
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f7ff fd85 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c8:	e07c      	b.n	800bac4 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	33b0      	adds	r3, #176	; 0xb0
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	7afa      	ldrb	r2, [r7, #11]
 800b9de:	4610      	mov	r0, r2
 800b9e0:	4798      	blx	r3
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d008      	beq.n	800b9fa <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b9e8:	7af9      	ldrb	r1, [r7, #11]
 800b9ea:	2327      	movs	r3, #39	; 0x27
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f7ff fd6d 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f8:	e064      	b.n	800bac4 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	3302      	adds	r3, #2
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	3303      	adds	r3, #3
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ba0a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ba14:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	3205      	adds	r2, #5
 800ba1a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ba1c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3307      	adds	r3, #7
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	3208      	adds	r2, #8
 800ba30:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ba32:	431a      	orrs	r2, r3
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ba46:	7af9      	ldrb	r1, [r7, #11]
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 f964 	bl	800bd16 <SCSI_CheckAddressRange>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	da02      	bge.n	800ba5a <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ba54:	f04f 33ff 	mov.w	r3, #4294967295
 800ba58:	e034      	b.n	800bac4 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ba66:	fb02 f303 	mul.w	r3, r2, r3
 800ba6a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ba72:	693a      	ldr	r2, [r7, #16]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d00a      	beq.n	800ba8e <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ba7e:	2320      	movs	r3, #32
 800ba80:	2205      	movs	r2, #5
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f7ff fd23 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800ba88:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8c:	e01a      	b.n	800bac4 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba94:	bf28      	it	cs
 800ba96:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ba9a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800baa2:	4b0a      	ldr	r3, [pc, #40]	; (800bacc <SCSI_Write10+0x1a8>)
 800baa4:	7819      	ldrb	r1, [r3, #0]
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	f103 0210 	add.w	r2, r3, #16
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f002 fa91 	bl	800dfd6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	e005      	b.n	800bac4 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800bab8:	7afb      	ldrb	r3, [r7, #11]
 800baba:	4619      	mov	r1, r3
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f000 f9dd 	bl	800be7c <SCSI_ProcessWrite>
 800bac2:	4603      	mov	r3, r0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	24000073 	.word	0x24000073

0800bad0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	460b      	mov	r3, r1
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	32b0      	adds	r2, #176	; 0xb0
 800bae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baec:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d102      	bne.n	800bafa <SCSI_Write12+0x2a>
  {
    return -1;
 800baf4:	f04f 33ff 	mov.w	r3, #4294967295
 800baf8:	e0ca      	b.n	800bc90 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	7a1b      	ldrb	r3, [r3, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f040 80c0 	bne.w	800bc84 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10a      	bne.n	800bb24 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb14:	2320      	movs	r3, #32
 800bb16:	2205      	movs	r2, #5
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f7ff fcd8 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800bb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb22:	e0b5      	b.n	800bc90 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800bb2a:	b25b      	sxtb	r3, r3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	da0a      	bge.n	800bb46 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb36:	2320      	movs	r3, #32
 800bb38:	2205      	movs	r2, #5
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f7ff fcc7 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800bb40:	f04f 33ff 	mov.w	r3, #4294967295
 800bb44:	e0a4      	b.n	800bc90 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	33b0      	adds	r3, #176	; 0xb0
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	7afa      	ldrb	r2, [r7, #11]
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4798      	blx	r3
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00b      	beq.n	800bb7c <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bb64:	7af9      	ldrb	r1, [r7, #11]
 800bb66:	233a      	movs	r3, #58	; 0x3a
 800bb68:	2202      	movs	r2, #2
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7ff fcaf 	bl	800b4ce <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	2205      	movs	r2, #5
 800bb74:	721a      	strb	r2, [r3, #8]
      return -1;
 800bb76:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7a:	e089      	b.n	800bc90 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	33b0      	adds	r3, #176	; 0xb0
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4413      	add	r3, r2
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	7afa      	ldrb	r2, [r7, #11]
 800bb90:	4610      	mov	r0, r2
 800bb92:	4798      	blx	r3
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00b      	beq.n	800bbb2 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800bb9a:	7af9      	ldrb	r1, [r7, #11]
 800bb9c:	2327      	movs	r3, #39	; 0x27
 800bb9e:	2202      	movs	r2, #2
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f7ff fc94 	bl	800b4ce <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	2205      	movs	r2, #5
 800bbaa:	721a      	strb	r2, [r3, #8]
      return -1;
 800bbac:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb0:	e06e      	b.n	800bc90 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	3302      	adds	r3, #2
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3303      	adds	r3, #3
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bbc2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800bbcc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	3205      	adds	r2, #5
 800bbd2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800bbd4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3306      	adds	r3, #6
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3307      	adds	r3, #7
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bbec:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800bbf6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	3209      	adds	r2, #9
 800bbfc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800bbfe:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc12:	7af9      	ldrb	r1, [r7, #11]
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 f87e 	bl	800bd16 <SCSI_CheckAddressRange>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	da02      	bge.n	800bc26 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800bc20:	f04f 33ff 	mov.w	r3, #4294967295
 800bc24:	e034      	b.n	800bc90 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bc32:	fb02 f303 	mul.w	r3, r2, r3
 800bc36:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d00a      	beq.n	800bc5a <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bc4a:	2320      	movs	r3, #32
 800bc4c:	2205      	movs	r2, #5
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f7ff fc3d 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800bc54:	f04f 33ff 	mov.w	r3, #4294967295
 800bc58:	e01a      	b.n	800bc90 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc60:	bf28      	it	cs
 800bc62:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bc66:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800bc6e:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <SCSI_Write12+0x1c8>)
 800bc70:	7819      	ldrb	r1, [r3, #0]
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f103 0210 	add.w	r2, r3, #16
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f002 f9ab 	bl	800dfd6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	e005      	b.n	800bc90 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800bc84:	7afb      	ldrb	r3, [r7, #11]
 800bc86:	4619      	mov	r1, r3
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 f8f7 	bl	800be7c <SCSI_ProcessWrite>
 800bc8e:	4603      	mov	r3, r0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	24000073 	.word	0x24000073

0800bc9c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	460b      	mov	r3, r1
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	32b0      	adds	r2, #176	; 0xb0
 800bcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <SCSI_Verify10+0x2a>
  {
    return -1;
 800bcc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc4:	e023      	b.n	800bd0e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	f003 0302 	and.w	r3, r3, #2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d008      	beq.n	800bce6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800bcd4:	7af9      	ldrb	r1, [r7, #11]
 800bcd6:	2324      	movs	r3, #36	; 0x24
 800bcd8:	2205      	movs	r2, #5
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f7ff fbf7 	bl	800b4ce <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800bce0:	f04f 33ff 	mov.w	r3, #4294967295
 800bce4:	e013      	b.n	800bd0e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bcf2:	7af9      	ldrb	r1, [r7, #11]
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f000 f80e 	bl	800bd16 <SCSI_CheckAddressRange>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	da02      	bge.n	800bd06 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800bd00:	f04f 33ff 	mov.w	r3, #4294967295
 800bd04:	e003      	b.n	800bd0e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	60da      	str	r2, [r3, #12]

  return 0;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3718      	adds	r7, #24
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b086      	sub	sp, #24
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	603b      	str	r3, [r7, #0]
 800bd22:	460b      	mov	r3, r1
 800bd24:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	32b0      	adds	r2, #176	; 0xb0
 800bd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d102      	bne.n	800bd42 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800bd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd40:	e011      	b.n	800bd66 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	441a      	add	r2, r3
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d908      	bls.n	800bd64 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800bd52:	7af9      	ldrb	r1, [r7, #11]
 800bd54:	2321      	movs	r3, #33	; 0x21
 800bd56:	2205      	movs	r2, #5
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f7ff fbb8 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800bd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd62:	e000      	b.n	800bd66 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800bd70:	b590      	push	{r4, r7, lr}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	32b0      	adds	r2, #176	; 0xb0
 800bd86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd8a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d102      	bne.n	800bd98 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800bd92:	f04f 33ff 	mov.w	r3, #4294967295
 800bd96:	e06a      	b.n	800be6e <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bda4:	fb02 f303 	mul.w	r3, r2, r3
 800bda8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdb0:	bf28      	it	cs
 800bdb2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bdb6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	33b0      	adds	r3, #176	; 0xb0
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	691c      	ldr	r4, [r3, #16]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f103 0110 	add.w	r1, r3, #16
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bddc:	4618      	mov	r0, r3
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	78f8      	ldrb	r0, [r7, #3]
 800bde8:	47a0      	blx	r4
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	da08      	bge.n	800be02 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800bdf0:	78f9      	ldrb	r1, [r7, #3]
 800bdf2:	2311      	movs	r3, #17
 800bdf4:	2204      	movs	r2, #4
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff fb69 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800bdfc:	f04f 33ff 	mov.w	r3, #4294967295
 800be00:	e035      	b.n	800be6e <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800be02:	4b1d      	ldr	r3, [pc, #116]	; (800be78 <SCSI_ProcessRead+0x108>)
 800be04:	7819      	ldrb	r1, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f103 0210 	add.w	r2, r3, #16
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f002 f8c0 	bl	800df94 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be20:	4619      	mov	r1, r3
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	fbb3 f3f1 	udiv	r3, r3, r1
 800be28:	441a      	add	r2, r3
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be3c:	4619      	mov	r1, r3
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	fbb3 f3f1 	udiv	r3, r3, r1
 800be44:	1ad2      	subs	r2, r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	1ad2      	subs	r2, r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800be62:	2b00      	cmp	r3, #0
 800be64:	d102      	bne.n	800be6c <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2203      	movs	r2, #3
 800be6a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3714      	adds	r7, #20
 800be72:	46bd      	mov	sp, r7
 800be74:	bd90      	pop	{r4, r7, pc}
 800be76:	bf00      	nop
 800be78:	24000072 	.word	0x24000072

0800be7c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800be7c:	b590      	push	{r4, r7, lr}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	32b0      	adds	r2, #176	; 0xb0
 800be92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be96:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d102      	bne.n	800bea4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800be9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bea2:	e07a      	b.n	800bf9a <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800beb0:	fb02 f303 	mul.w	r3, r2, r3
 800beb4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bebc:	bf28      	it	cs
 800bebe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bec2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	33b0      	adds	r3, #176	; 0xb0
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	695c      	ldr	r4, [r3, #20]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f103 0110 	add.w	r1, r3, #16
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bee8:	4618      	mov	r0, r3
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	78f8      	ldrb	r0, [r7, #3]
 800bef4:	47a0      	blx	r4
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	da08      	bge.n	800bf0e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800befc:	78f9      	ldrb	r1, [r7, #3]
 800befe:	2303      	movs	r3, #3
 800bf00:	2204      	movs	r2, #4
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff fae3 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800bf08:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0c:	e045      	b.n	800bf9a <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf22:	441a      	add	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bf36:	4619      	mov	r1, r3
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf3e:	1ad2      	subs	r2, r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	1ad2      	subs	r2, r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d104      	bne.n	800bf6a <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bf60:	2100      	movs	r1, #0
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7fe fd14 	bl	800a990 <MSC_BOT_SendCSW>
 800bf68:	e016      	b.n	800bf98 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bf76:	fb02 f303 	mul.w	r3, r2, r3
 800bf7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf7e:	bf28      	it	cs
 800bf80:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bf84:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800bf86:	4b07      	ldr	r3, [pc, #28]	; (800bfa4 <SCSI_ProcessWrite+0x128>)
 800bf88:	7819      	ldrb	r1, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f103 0210 	add.w	r2, r3, #16
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f002 f81f 	bl	800dfd6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd90      	pop	{r4, r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	24000073 	.word	0x24000073

0800bfa8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800bfb6:	88fb      	ldrh	r3, [r7, #6]
 800bfb8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800bfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc4:	e013      	b.n	800bfee <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800bfc6:	8afa      	ldrh	r2, [r7, #22]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800bfcc:	e00b      	b.n	800bfe6 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800bfce:	8afb      	ldrh	r3, [r7, #22]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800bfd4:	8afb      	ldrh	r3, [r7, #22]
 800bfd6:	68ba      	ldr	r2, [r7, #8]
 800bfd8:	441a      	add	r2, r3
 800bfda:	8afb      	ldrh	r3, [r7, #22]
 800bfdc:	7811      	ldrb	r1, [r2, #0]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	460a      	mov	r2, r1
 800bfe4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800bfe6:	8afb      	ldrh	r3, [r7, #22]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1f0      	bne.n	800bfce <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	371c      	adds	r7, #28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b086      	sub	sp, #24
 800bffe:	af00      	add	r7, sp, #0
 800c000:	60f8      	str	r0, [r7, #12]
 800c002:	60b9      	str	r1, [r7, #8]
 800c004:	4613      	mov	r3, r2
 800c006:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d101      	bne.n	800c012 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c00e:	2303      	movs	r3, #3
 800c010:	e01f      	b.n	800c052 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d003      	beq.n	800c038 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	79fa      	ldrb	r2, [r7, #7]
 800c044:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f001 fe4c 	bl	800dce4 <USBD_LL_Init>
 800c04c:	4603      	mov	r3, r0
 800c04e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c050:	7dfb      	ldrb	r3, [r7, #23]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3718      	adds	r7, #24
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b084      	sub	sp, #16
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c064:	2300      	movs	r3, #0
 800c066:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c06e:	2303      	movs	r3, #3
 800c070:	e025      	b.n	800c0be <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	32ae      	adds	r2, #174	; 0xae
 800c084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00f      	beq.n	800c0ae <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	32ae      	adds	r2, #174	; 0xae
 800c098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09e:	f107 020e 	add.w	r2, r7, #14
 800c0a2:	4610      	mov	r0, r2
 800c0a4:	4798      	blx	r3
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c0b4:	1c5a      	adds	r2, r3, #1
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f001 fe58 	bl	800dd84 <USBD_LL_Start>
 800c0d4:	4603      	mov	r3, r0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c0de:	b480      	push	{r7}
 800c0e0:	b083      	sub	sp, #12
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0e6:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d009      	beq.n	800c122 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	78fa      	ldrb	r2, [r7, #3]
 800c118:	4611      	mov	r1, r2
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	4798      	blx	r3
 800c11e:	4603      	mov	r3, r0
 800c120:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c122:	7bfb      	ldrb	r3, [r7, #15]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	78fa      	ldrb	r2, [r7, #3]
 800c146:	4611      	mov	r1, r2
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	4798      	blx	r3
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c152:	2303      	movs	r3, #3
 800c154:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c156:	7bfb      	ldrb	r3, [r7, #15]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	4618      	mov	r0, r3
 800c174:	f001 f909 	bl	800d38a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c186:	461a      	mov	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c194:	f003 031f 	and.w	r3, r3, #31
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d01a      	beq.n	800c1d2 <USBD_LL_SetupStage+0x72>
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d822      	bhi.n	800c1e6 <USBD_LL_SetupStage+0x86>
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <USBD_LL_SetupStage+0x4a>
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d00a      	beq.n	800c1be <USBD_LL_SetupStage+0x5e>
 800c1a8:	e01d      	b.n	800c1e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fb60 	bl	800c878 <USBD_StdDevReq>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c1bc:	e020      	b.n	800c200 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fbc8 	bl	800c95c <USBD_StdItfReq>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c1d0:	e016      	b.n	800c200 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fc2a 	bl	800ca34 <USBD_StdEPReq>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c1e4:	e00c      	b.n	800c200 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c1ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 fe44 	bl	800de82 <USBD_LL_StallEP>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1fe:	bf00      	nop
  }

  return ret;
 800c200:	7bfb      	ldrb	r3, [r7, #15]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b086      	sub	sp, #24
 800c20e:	af00      	add	r7, sp, #0
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	460b      	mov	r3, r1
 800c214:	607a      	str	r2, [r7, #4]
 800c216:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c21c:	7afb      	ldrb	r3, [r7, #11]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d16e      	bne.n	800c300 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c228:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c230:	2b03      	cmp	r3, #3
 800c232:	f040 8098 	bne.w	800c366 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	689a      	ldr	r2, [r3, #8]
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d913      	bls.n	800c26a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	1ad2      	subs	r2, r2, r3
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	68da      	ldr	r2, [r3, #12]
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	4293      	cmp	r3, r2
 800c25a:	bf28      	it	cs
 800c25c:	4613      	movcs	r3, r2
 800c25e:	461a      	mov	r2, r3
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f001 f968 	bl	800d538 <USBD_CtlContinueRx>
 800c268:	e07d      	b.n	800c366 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c270:	f003 031f 	and.w	r3, r3, #31
 800c274:	2b02      	cmp	r3, #2
 800c276:	d014      	beq.n	800c2a2 <USBD_LL_DataOutStage+0x98>
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d81d      	bhi.n	800c2b8 <USBD_LL_DataOutStage+0xae>
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d002      	beq.n	800c286 <USBD_LL_DataOutStage+0x7c>
 800c280:	2b01      	cmp	r3, #1
 800c282:	d003      	beq.n	800c28c <USBD_LL_DataOutStage+0x82>
 800c284:	e018      	b.n	800c2b8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	75bb      	strb	r3, [r7, #22]
            break;
 800c28a:	e018      	b.n	800c2be <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c292:	b2db      	uxtb	r3, r3
 800c294:	4619      	mov	r1, r3
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f000 fa5e 	bl	800c758 <USBD_CoreFindIF>
 800c29c:	4603      	mov	r3, r0
 800c29e:	75bb      	strb	r3, [r7, #22]
            break;
 800c2a0:	e00d      	b.n	800c2be <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 fa60 	bl	800c772 <USBD_CoreFindEP>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	75bb      	strb	r3, [r7, #22]
            break;
 800c2b6:	e002      	b.n	800c2be <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	75bb      	strb	r3, [r7, #22]
            break;
 800c2bc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c2be:	7dbb      	ldrb	r3, [r7, #22]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d119      	bne.n	800c2f8 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d113      	bne.n	800c2f8 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c2d0:	7dba      	ldrb	r2, [r7, #22]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	32ae      	adds	r2, #174	; 0xae
 800c2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00b      	beq.n	800c2f8 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c2e0:	7dba      	ldrb	r2, [r7, #22]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c2e8:	7dba      	ldrb	r2, [r7, #22]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	32ae      	adds	r2, #174	; 0xae
 800c2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f001 f92e 	bl	800d55a <USBD_CtlSendStatus>
 800c2fe:	e032      	b.n	800c366 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c300:	7afb      	ldrb	r3, [r7, #11]
 800c302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c306:	b2db      	uxtb	r3, r3
 800c308:	4619      	mov	r1, r3
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f000 fa31 	bl	800c772 <USBD_CoreFindEP>
 800c310:	4603      	mov	r3, r0
 800c312:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c314:	7dbb      	ldrb	r3, [r7, #22]
 800c316:	2bff      	cmp	r3, #255	; 0xff
 800c318:	d025      	beq.n	800c366 <USBD_LL_DataOutStage+0x15c>
 800c31a:	7dbb      	ldrb	r3, [r7, #22]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d122      	bne.n	800c366 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c326:	b2db      	uxtb	r3, r3
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d117      	bne.n	800c35c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c32c:	7dba      	ldrb	r2, [r7, #22]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	32ae      	adds	r2, #174	; 0xae
 800c332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00f      	beq.n	800c35c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c33c:	7dba      	ldrb	r2, [r7, #22]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c344:	7dba      	ldrb	r2, [r7, #22]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	32ae      	adds	r2, #174	; 0xae
 800c34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	7afa      	ldrb	r2, [r7, #11]
 800c352:	4611      	mov	r1, r2
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	4798      	blx	r3
 800c358:	4603      	mov	r3, r0
 800c35a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c35c:	7dfb      	ldrb	r3, [r7, #23]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c362:	7dfb      	ldrb	r3, [r7, #23]
 800c364:	e000      	b.n	800c368 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	460b      	mov	r3, r1
 800c37a:	607a      	str	r2, [r7, #4]
 800c37c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c37e:	7afb      	ldrb	r3, [r7, #11]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d16f      	bne.n	800c464 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	3314      	adds	r3, #20
 800c388:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c390:	2b02      	cmp	r3, #2
 800c392:	d15a      	bne.n	800c44a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d914      	bls.n	800c3ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	689a      	ldr	r2, [r3, #8]
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	1ad2      	subs	r2, r2, r3
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	6879      	ldr	r1, [r7, #4]
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	f001 f8ad 	bl	800d516 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3bc:	2300      	movs	r3, #0
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f001 fe07 	bl	800dfd6 <USBD_LL_PrepareReceive>
 800c3c8:	e03f      	b.n	800c44a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	68da      	ldr	r2, [r3, #12]
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d11c      	bne.n	800c410 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d316      	bcc.n	800c410 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	685a      	ldr	r2, [r3, #4]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d20f      	bcs.n	800c410 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f001 f88e 	bl	800d516 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c402:	2300      	movs	r3, #0
 800c404:	2200      	movs	r2, #0
 800c406:	2100      	movs	r1, #0
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f001 fde4 	bl	800dfd6 <USBD_LL_PrepareReceive>
 800c40e:	e01c      	b.n	800c44a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b03      	cmp	r3, #3
 800c41a:	d10f      	bne.n	800c43c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d009      	beq.n	800c43c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c43c:	2180      	movs	r1, #128	; 0x80
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f001 fd1f 	bl	800de82 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f001 f89b 	bl	800d580 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d03a      	beq.n	800c4ca <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f7ff fe42 	bl	800c0de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c462:	e032      	b.n	800c4ca <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c464:	7afb      	ldrb	r3, [r7, #11]
 800c466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	4619      	mov	r1, r3
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f000 f97f 	bl	800c772 <USBD_CoreFindEP>
 800c474:	4603      	mov	r3, r0
 800c476:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c478:	7dfb      	ldrb	r3, [r7, #23]
 800c47a:	2bff      	cmp	r3, #255	; 0xff
 800c47c:	d025      	beq.n	800c4ca <USBD_LL_DataInStage+0x15a>
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d122      	bne.n	800c4ca <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	2b03      	cmp	r3, #3
 800c48e:	d11c      	bne.n	800c4ca <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c490:	7dfa      	ldrb	r2, [r7, #23]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	32ae      	adds	r2, #174	; 0xae
 800c496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49a:	695b      	ldr	r3, [r3, #20]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d014      	beq.n	800c4ca <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c4a0:	7dfa      	ldrb	r2, [r7, #23]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c4a8:	7dfa      	ldrb	r2, [r7, #23]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	32ae      	adds	r2, #174	; 0xae
 800c4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	7afa      	ldrb	r2, [r7, #11]
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	4798      	blx	r3
 800c4bc:	4603      	mov	r3, r0
 800c4be:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c4c0:	7dbb      	ldrb	r3, [r7, #22]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c4c6:	7dbb      	ldrb	r3, [r7, #22]
 800c4c8:	e000      	b.n	800c4cc <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d014      	beq.n	800c53a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00e      	beq.n	800c53a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	6852      	ldr	r2, [r2, #4]
 800c528:	b2d2      	uxtb	r2, r2
 800c52a:	4611      	mov	r1, r2
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	4798      	blx	r3
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c536:	2303      	movs	r3, #3
 800c538:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c53a:	2340      	movs	r3, #64	; 0x40
 800c53c:	2200      	movs	r2, #0
 800c53e:	2100      	movs	r1, #0
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 fc3a 	bl	800ddba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2240      	movs	r2, #64	; 0x40
 800c552:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c556:	2340      	movs	r3, #64	; 0x40
 800c558:	2200      	movs	r2, #0
 800c55a:	2180      	movs	r1, #128	; 0x80
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f001 fc2c 	bl	800ddba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2201      	movs	r2, #1
 800c566:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2240      	movs	r2, #64	; 0x40
 800c56c:	621a      	str	r2, [r3, #32]

  return ret;
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	78fa      	ldrb	r2, [r7, #3]
 800c588:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2204      	movs	r2, #4
 800c5b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	2b04      	cmp	r3, #4
 800c5d6:	d106      	bne.n	800c5e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2b03      	cmp	r3, #3
 800c606:	d110      	bne.n	800c62a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00b      	beq.n	800c62a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c618:	69db      	ldr	r3, [r3, #28]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d005      	beq.n	800c62a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c624:	69db      	ldr	r3, [r3, #28]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	32ae      	adds	r2, #174	; 0xae
 800c64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c652:	2303      	movs	r3, #3
 800c654:	e01c      	b.n	800c690 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	2b03      	cmp	r3, #3
 800c660:	d115      	bne.n	800c68e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	32ae      	adds	r2, #174	; 0xae
 800c66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00b      	beq.n	800c68e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	32ae      	adds	r2, #174	; 0xae
 800c680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	78fa      	ldrb	r2, [r7, #3]
 800c688:	4611      	mov	r1, r2
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c68e:	2300      	movs	r3, #0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	32ae      	adds	r2, #174	; 0xae
 800c6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e01c      	b.n	800c6f4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d115      	bne.n	800c6f2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	32ae      	adds	r2, #174	; 0xae
 800c6d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00b      	beq.n	800c6f2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	32ae      	adds	r2, #174	; 0xae
 800c6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ea:	78fa      	ldrb	r2, [r7, #3]
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00e      	beq.n	800c74e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	6852      	ldr	r2, [r2, #4]
 800c73c:	b2d2      	uxtb	r2, r2
 800c73e:	4611      	mov	r1, r2
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	4798      	blx	r3
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c74a:	2303      	movs	r3, #3
 800c74c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c764:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c766:	4618      	mov	r0, r3
 800c768:	370c      	adds	r7, #12
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr

0800c772 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c772:	b480      	push	{r7}
 800c774:	b083      	sub	sp, #12
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	460b      	mov	r3, r1
 800c77c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c77e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c780:	4618      	mov	r0, r3
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b086      	sub	sp, #24
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	460b      	mov	r3, r1
 800c796:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	885b      	ldrh	r3, [r3, #2]
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d920      	bls.n	800c7f6 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c7bc:	e013      	b.n	800c7e6 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c7be:	f107 030a 	add.w	r3, r7, #10
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6978      	ldr	r0, [r7, #20]
 800c7c6:	f000 f81b 	bl	800c800 <USBD_GetNextDesc>
 800c7ca:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	785b      	ldrb	r3, [r3, #1]
 800c7d0:	2b05      	cmp	r3, #5
 800c7d2:	d108      	bne.n	800c7e6 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	789b      	ldrb	r3, [r3, #2]
 800c7dc:	78fa      	ldrb	r2, [r7, #3]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d008      	beq.n	800c7f4 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	885b      	ldrh	r3, [r3, #2]
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	897b      	ldrh	r3, [r7, #10]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d8e5      	bhi.n	800c7be <USBD_GetEpDesc+0x32>
 800c7f2:	e000      	b.n	800c7f6 <USBD_GetEpDesc+0x6a>
          break;
 800c7f4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c7f6:	693b      	ldr	r3, [r7, #16]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3718      	adds	r7, #24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	881a      	ldrh	r2, [r3, #0]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	b29b      	uxth	r3, r3
 800c818:	4413      	add	r3, r2
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	461a      	mov	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4413      	add	r3, r2
 800c82a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c82c:	68fb      	ldr	r3, [r7, #12]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c83a:	b480      	push	{r7}
 800c83c:	b087      	sub	sp, #28
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	3301      	adds	r3, #1
 800c850:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c858:	8a3b      	ldrh	r3, [r7, #16]
 800c85a:	021b      	lsls	r3, r3, #8
 800c85c:	b21a      	sxth	r2, r3
 800c85e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c862:	4313      	orrs	r3, r2
 800c864:	b21b      	sxth	r3, r3
 800c866:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c868:	89fb      	ldrh	r3, [r7, #14]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	371c      	adds	r7, #28
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
	...

0800c878 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c88e:	2b40      	cmp	r3, #64	; 0x40
 800c890:	d005      	beq.n	800c89e <USBD_StdDevReq+0x26>
 800c892:	2b40      	cmp	r3, #64	; 0x40
 800c894:	d857      	bhi.n	800c946 <USBD_StdDevReq+0xce>
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00f      	beq.n	800c8ba <USBD_StdDevReq+0x42>
 800c89a:	2b20      	cmp	r3, #32
 800c89c:	d153      	bne.n	800c946 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	32ae      	adds	r2, #174	; 0xae
 800c8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	4798      	blx	r3
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c8b8:	e04a      	b.n	800c950 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	785b      	ldrb	r3, [r3, #1]
 800c8be:	2b09      	cmp	r3, #9
 800c8c0:	d83b      	bhi.n	800c93a <USBD_StdDevReq+0xc2>
 800c8c2:	a201      	add	r2, pc, #4	; (adr r2, 800c8c8 <USBD_StdDevReq+0x50>)
 800c8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c8:	0800c91d 	.word	0x0800c91d
 800c8cc:	0800c931 	.word	0x0800c931
 800c8d0:	0800c93b 	.word	0x0800c93b
 800c8d4:	0800c927 	.word	0x0800c927
 800c8d8:	0800c93b 	.word	0x0800c93b
 800c8dc:	0800c8fb 	.word	0x0800c8fb
 800c8e0:	0800c8f1 	.word	0x0800c8f1
 800c8e4:	0800c93b 	.word	0x0800c93b
 800c8e8:	0800c913 	.word	0x0800c913
 800c8ec:	0800c905 	.word	0x0800c905
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c8f0:	6839      	ldr	r1, [r7, #0]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fa3c 	bl	800cd70 <USBD_GetDescriptor>
          break;
 800c8f8:	e024      	b.n	800c944 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fba1 	bl	800d044 <USBD_SetAddress>
          break;
 800c902:	e01f      	b.n	800c944 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fbe0 	bl	800d0cc <USBD_SetConfig>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]
          break;
 800c910:	e018      	b.n	800c944 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fc83 	bl	800d220 <USBD_GetConfig>
          break;
 800c91a:	e013      	b.n	800c944 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c91c:	6839      	ldr	r1, [r7, #0]
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fcb4 	bl	800d28c <USBD_GetStatus>
          break;
 800c924:	e00e      	b.n	800c944 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c926:	6839      	ldr	r1, [r7, #0]
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 fce3 	bl	800d2f4 <USBD_SetFeature>
          break;
 800c92e:	e009      	b.n	800c944 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 fd07 	bl	800d346 <USBD_ClrFeature>
          break;
 800c938:	e004      	b.n	800c944 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fd5e 	bl	800d3fe <USBD_CtlError>
          break;
 800c942:	bf00      	nop
      }
      break;
 800c944:	e004      	b.n	800c950 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fd58 	bl	800d3fe <USBD_CtlError>
      break;
 800c94e:	bf00      	nop
  }

  return ret;
 800c950:	7bfb      	ldrb	r3, [r7, #15]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop

0800c95c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c972:	2b40      	cmp	r3, #64	; 0x40
 800c974:	d005      	beq.n	800c982 <USBD_StdItfReq+0x26>
 800c976:	2b40      	cmp	r3, #64	; 0x40
 800c978:	d852      	bhi.n	800ca20 <USBD_StdItfReq+0xc4>
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <USBD_StdItfReq+0x26>
 800c97e:	2b20      	cmp	r3, #32
 800c980:	d14e      	bne.n	800ca20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	3b01      	subs	r3, #1
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d840      	bhi.n	800ca12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	889b      	ldrh	r3, [r3, #4]
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b01      	cmp	r3, #1
 800c998:	d836      	bhi.n	800ca08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	889b      	ldrh	r3, [r3, #4]
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7ff fed8 	bl	800c758 <USBD_CoreFindIF>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9ac:	7bbb      	ldrb	r3, [r7, #14]
 800c9ae:	2bff      	cmp	r3, #255	; 0xff
 800c9b0:	d01d      	beq.n	800c9ee <USBD_StdItfReq+0x92>
 800c9b2:	7bbb      	ldrb	r3, [r7, #14]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d11a      	bne.n	800c9ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c9b8:	7bba      	ldrb	r2, [r7, #14]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	32ae      	adds	r2, #174	; 0xae
 800c9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00f      	beq.n	800c9e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c9c8:	7bba      	ldrb	r2, [r7, #14]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c9d0:	7bba      	ldrb	r2, [r7, #14]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	32ae      	adds	r2, #174	; 0xae
 800c9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	4798      	blx	r3
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c9e6:	e004      	b.n	800c9f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c9ec:	e001      	b.n	800c9f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	88db      	ldrh	r3, [r3, #6]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d110      	bne.n	800ca1c <USBD_StdItfReq+0xc0>
 800c9fa:	7bfb      	ldrb	r3, [r7, #15]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10d      	bne.n	800ca1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 fdaa 	bl	800d55a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca06:	e009      	b.n	800ca1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ca08:	6839      	ldr	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fcf7 	bl	800d3fe <USBD_CtlError>
          break;
 800ca10:	e004      	b.n	800ca1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fcf2 	bl	800d3fe <USBD_CtlError>
          break;
 800ca1a:	e000      	b.n	800ca1e <USBD_StdItfReq+0xc2>
          break;
 800ca1c:	bf00      	nop
      }
      break;
 800ca1e:	e004      	b.n	800ca2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fceb 	bl	800d3fe <USBD_CtlError>
      break;
 800ca28:	bf00      	nop
  }

  return ret;
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	889b      	ldrh	r3, [r3, #4]
 800ca46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca50:	2b40      	cmp	r3, #64	; 0x40
 800ca52:	d007      	beq.n	800ca64 <USBD_StdEPReq+0x30>
 800ca54:	2b40      	cmp	r3, #64	; 0x40
 800ca56:	f200 817f 	bhi.w	800cd58 <USBD_StdEPReq+0x324>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d02a      	beq.n	800cab4 <USBD_StdEPReq+0x80>
 800ca5e:	2b20      	cmp	r3, #32
 800ca60:	f040 817a 	bne.w	800cd58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca64:	7bbb      	ldrb	r3, [r7, #14]
 800ca66:	4619      	mov	r1, r3
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7ff fe82 	bl	800c772 <USBD_CoreFindEP>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca72:	7b7b      	ldrb	r3, [r7, #13]
 800ca74:	2bff      	cmp	r3, #255	; 0xff
 800ca76:	f000 8174 	beq.w	800cd62 <USBD_StdEPReq+0x32e>
 800ca7a:	7b7b      	ldrb	r3, [r7, #13]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f040 8170 	bne.w	800cd62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ca82:	7b7a      	ldrb	r2, [r7, #13]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ca8a:	7b7a      	ldrb	r2, [r7, #13]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	32ae      	adds	r2, #174	; 0xae
 800ca90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	f000 8163 	beq.w	800cd62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ca9c:	7b7a      	ldrb	r2, [r7, #13]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	32ae      	adds	r2, #174	; 0xae
 800caa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	4798      	blx	r3
 800caae:	4603      	mov	r3, r0
 800cab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cab2:	e156      	b.n	800cd62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	785b      	ldrb	r3, [r3, #1]
 800cab8:	2b03      	cmp	r3, #3
 800caba:	d008      	beq.n	800cace <USBD_StdEPReq+0x9a>
 800cabc:	2b03      	cmp	r3, #3
 800cabe:	f300 8145 	bgt.w	800cd4c <USBD_StdEPReq+0x318>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f000 809b 	beq.w	800cbfe <USBD_StdEPReq+0x1ca>
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d03c      	beq.n	800cb46 <USBD_StdEPReq+0x112>
 800cacc:	e13e      	b.n	800cd4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d002      	beq.n	800cae0 <USBD_StdEPReq+0xac>
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d016      	beq.n	800cb0c <USBD_StdEPReq+0xd8>
 800cade:	e02c      	b.n	800cb3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00d      	beq.n	800cb02 <USBD_StdEPReq+0xce>
 800cae6:	7bbb      	ldrb	r3, [r7, #14]
 800cae8:	2b80      	cmp	r3, #128	; 0x80
 800caea:	d00a      	beq.n	800cb02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800caec:	7bbb      	ldrb	r3, [r7, #14]
 800caee:	4619      	mov	r1, r3
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f001 f9c6 	bl	800de82 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800caf6:	2180      	movs	r1, #128	; 0x80
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f001 f9c2 	bl	800de82 <USBD_LL_StallEP>
 800cafe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb00:	e020      	b.n	800cb44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cb02:	6839      	ldr	r1, [r7, #0]
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 fc7a 	bl	800d3fe <USBD_CtlError>
              break;
 800cb0a:	e01b      	b.n	800cb44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	885b      	ldrh	r3, [r3, #2]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10e      	bne.n	800cb32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb14:	7bbb      	ldrb	r3, [r7, #14]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00b      	beq.n	800cb32 <USBD_StdEPReq+0xfe>
 800cb1a:	7bbb      	ldrb	r3, [r7, #14]
 800cb1c:	2b80      	cmp	r3, #128	; 0x80
 800cb1e:	d008      	beq.n	800cb32 <USBD_StdEPReq+0xfe>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	88db      	ldrh	r3, [r3, #6]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d104      	bne.n	800cb32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb28:	7bbb      	ldrb	r3, [r7, #14]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f001 f9a8 	bl	800de82 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fd11 	bl	800d55a <USBD_CtlSendStatus>

              break;
 800cb38:	e004      	b.n	800cb44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fc5e 	bl	800d3fe <USBD_CtlError>
              break;
 800cb42:	bf00      	nop
          }
          break;
 800cb44:	e107      	b.n	800cd56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d002      	beq.n	800cb58 <USBD_StdEPReq+0x124>
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	d016      	beq.n	800cb84 <USBD_StdEPReq+0x150>
 800cb56:	e04b      	b.n	800cbf0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00d      	beq.n	800cb7a <USBD_StdEPReq+0x146>
 800cb5e:	7bbb      	ldrb	r3, [r7, #14]
 800cb60:	2b80      	cmp	r3, #128	; 0x80
 800cb62:	d00a      	beq.n	800cb7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb64:	7bbb      	ldrb	r3, [r7, #14]
 800cb66:	4619      	mov	r1, r3
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f001 f98a 	bl	800de82 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb6e:	2180      	movs	r1, #128	; 0x80
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f001 f986 	bl	800de82 <USBD_LL_StallEP>
 800cb76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb78:	e040      	b.n	800cbfc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fc3e 	bl	800d3fe <USBD_CtlError>
              break;
 800cb82:	e03b      	b.n	800cbfc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	885b      	ldrh	r3, [r3, #2]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d136      	bne.n	800cbfa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb8c:	7bbb      	ldrb	r3, [r7, #14]
 800cb8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d004      	beq.n	800cba0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb96:	7bbb      	ldrb	r3, [r7, #14]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f001 f990 	bl	800dec0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fcda 	bl	800d55a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff fde1 	bl	800c772 <USBD_CoreFindEP>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbb4:	7b7b      	ldrb	r3, [r7, #13]
 800cbb6:	2bff      	cmp	r3, #255	; 0xff
 800cbb8:	d01f      	beq.n	800cbfa <USBD_StdEPReq+0x1c6>
 800cbba:	7b7b      	ldrb	r3, [r7, #13]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d11c      	bne.n	800cbfa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cbc0:	7b7a      	ldrb	r2, [r7, #13]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cbc8:	7b7a      	ldrb	r2, [r7, #13]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	32ae      	adds	r2, #174	; 0xae
 800cbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d010      	beq.n	800cbfa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cbd8:	7b7a      	ldrb	r2, [r7, #13]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	32ae      	adds	r2, #174	; 0xae
 800cbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	6839      	ldr	r1, [r7, #0]
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	4798      	blx	r3
 800cbea:	4603      	mov	r3, r0
 800cbec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cbee:	e004      	b.n	800cbfa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cbf0:	6839      	ldr	r1, [r7, #0]
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fc03 	bl	800d3fe <USBD_CtlError>
              break;
 800cbf8:	e000      	b.n	800cbfc <USBD_StdEPReq+0x1c8>
              break;
 800cbfa:	bf00      	nop
          }
          break;
 800cbfc:	e0ab      	b.n	800cd56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d002      	beq.n	800cc10 <USBD_StdEPReq+0x1dc>
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d032      	beq.n	800cc74 <USBD_StdEPReq+0x240>
 800cc0e:	e097      	b.n	800cd40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d007      	beq.n	800cc26 <USBD_StdEPReq+0x1f2>
 800cc16:	7bbb      	ldrb	r3, [r7, #14]
 800cc18:	2b80      	cmp	r3, #128	; 0x80
 800cc1a:	d004      	beq.n	800cc26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cc1c:	6839      	ldr	r1, [r7, #0]
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fbed 	bl	800d3fe <USBD_CtlError>
                break;
 800cc24:	e091      	b.n	800cd4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	da0b      	bge.n	800cc46 <USBD_StdEPReq+0x212>
 800cc2e:	7bbb      	ldrb	r3, [r7, #14]
 800cc30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc34:	4613      	mov	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	3310      	adds	r3, #16
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	4413      	add	r3, r2
 800cc42:	3304      	adds	r3, #4
 800cc44:	e00b      	b.n	800cc5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc46:	7bbb      	ldrb	r3, [r7, #14]
 800cc48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	3304      	adds	r3, #4
 800cc5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2200      	movs	r2, #0
 800cc64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	2202      	movs	r2, #2
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 fc37 	bl	800d4e0 <USBD_CtlSendData>
              break;
 800cc72:	e06a      	b.n	800cd4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	da11      	bge.n	800cca0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	f003 020f 	and.w	r2, r3, #15
 800cc82:	6879      	ldr	r1, [r7, #4]
 800cc84:	4613      	mov	r3, r2
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4413      	add	r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	440b      	add	r3, r1
 800cc8e:	3324      	adds	r3, #36	; 0x24
 800cc90:	881b      	ldrh	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d117      	bne.n	800ccc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 fbb0 	bl	800d3fe <USBD_CtlError>
                  break;
 800cc9e:	e054      	b.n	800cd4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cca0:	7bbb      	ldrb	r3, [r7, #14]
 800cca2:	f003 020f 	and.w	r2, r3, #15
 800cca6:	6879      	ldr	r1, [r7, #4]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	4413      	add	r3, r2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	440b      	add	r3, r1
 800ccb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ccb6:	881b      	ldrh	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d104      	bne.n	800ccc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fb9d 	bl	800d3fe <USBD_CtlError>
                  break;
 800ccc4:	e041      	b.n	800cd4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	da0b      	bge.n	800cce6 <USBD_StdEPReq+0x2b2>
 800ccce:	7bbb      	ldrb	r3, [r7, #14]
 800ccd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	3310      	adds	r3, #16
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	4413      	add	r3, r2
 800cce2:	3304      	adds	r3, #4
 800cce4:	e00b      	b.n	800ccfe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cce6:	7bbb      	ldrb	r3, [r7, #14]
 800cce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccec:	4613      	mov	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4413      	add	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd00:	7bbb      	ldrb	r3, [r7, #14]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d002      	beq.n	800cd0c <USBD_StdEPReq+0x2d8>
 800cd06:	7bbb      	ldrb	r3, [r7, #14]
 800cd08:	2b80      	cmp	r3, #128	; 0x80
 800cd0a:	d103      	bne.n	800cd14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	e00e      	b.n	800cd32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd14:	7bbb      	ldrb	r3, [r7, #14]
 800cd16:	4619      	mov	r1, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f001 f8f0 	bl	800defe <USBD_LL_IsStallEP>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d003      	beq.n	800cd2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	2201      	movs	r2, #1
 800cd28:	601a      	str	r2, [r3, #0]
 800cd2a:	e002      	b.n	800cd32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	2202      	movs	r2, #2
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fbd1 	bl	800d4e0 <USBD_CtlSendData>
              break;
 800cd3e:	e004      	b.n	800cd4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fb5b 	bl	800d3fe <USBD_CtlError>
              break;
 800cd48:	bf00      	nop
          }
          break;
 800cd4a:	e004      	b.n	800cd56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cd4c:	6839      	ldr	r1, [r7, #0]
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fb55 	bl	800d3fe <USBD_CtlError>
          break;
 800cd54:	bf00      	nop
      }
      break;
 800cd56:	e005      	b.n	800cd64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 fb4f 	bl	800d3fe <USBD_CtlError>
      break;
 800cd60:	e000      	b.n	800cd64 <USBD_StdEPReq+0x330>
      break;
 800cd62:	bf00      	nop
  }

  return ret;
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd82:	2300      	movs	r3, #0
 800cd84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	885b      	ldrh	r3, [r3, #2]
 800cd8a:	0a1b      	lsrs	r3, r3, #8
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	2b06      	cmp	r3, #6
 800cd92:	f200 8128 	bhi.w	800cfe6 <USBD_GetDescriptor+0x276>
 800cd96:	a201      	add	r2, pc, #4	; (adr r2, 800cd9c <USBD_GetDescriptor+0x2c>)
 800cd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9c:	0800cdb9 	.word	0x0800cdb9
 800cda0:	0800cdd1 	.word	0x0800cdd1
 800cda4:	0800ce11 	.word	0x0800ce11
 800cda8:	0800cfe7 	.word	0x0800cfe7
 800cdac:	0800cfe7 	.word	0x0800cfe7
 800cdb0:	0800cf87 	.word	0x0800cf87
 800cdb4:	0800cfb3 	.word	0x0800cfb3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	7c12      	ldrb	r2, [r2, #16]
 800cdc4:	f107 0108 	add.w	r1, r7, #8
 800cdc8:	4610      	mov	r0, r2
 800cdca:	4798      	blx	r3
 800cdcc:	60f8      	str	r0, [r7, #12]
      break;
 800cdce:	e112      	b.n	800cff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	7c1b      	ldrb	r3, [r3, #16]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d10d      	bne.n	800cdf4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde0:	f107 0208 	add.w	r2, r7, #8
 800cde4:	4610      	mov	r0, r2
 800cde6:	4798      	blx	r3
 800cde8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	3301      	adds	r3, #1
 800cdee:	2202      	movs	r2, #2
 800cdf0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cdf2:	e100      	b.n	800cff6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfc:	f107 0208 	add.w	r2, r7, #8
 800ce00:	4610      	mov	r0, r2
 800ce02:	4798      	blx	r3
 800ce04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	701a      	strb	r2, [r3, #0]
      break;
 800ce0e:	e0f2      	b.n	800cff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	885b      	ldrh	r3, [r3, #2]
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b05      	cmp	r3, #5
 800ce18:	f200 80ac 	bhi.w	800cf74 <USBD_GetDescriptor+0x204>
 800ce1c:	a201      	add	r2, pc, #4	; (adr r2, 800ce24 <USBD_GetDescriptor+0xb4>)
 800ce1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce22:	bf00      	nop
 800ce24:	0800ce3d 	.word	0x0800ce3d
 800ce28:	0800ce71 	.word	0x0800ce71
 800ce2c:	0800cea5 	.word	0x0800cea5
 800ce30:	0800ced9 	.word	0x0800ced9
 800ce34:	0800cf0d 	.word	0x0800cf0d
 800ce38:	0800cf41 	.word	0x0800cf41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00b      	beq.n	800ce60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	7c12      	ldrb	r2, [r2, #16]
 800ce54:	f107 0108 	add.w	r1, r7, #8
 800ce58:	4610      	mov	r0, r2
 800ce5a:	4798      	blx	r3
 800ce5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce5e:	e091      	b.n	800cf84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 facb 	bl	800d3fe <USBD_CtlError>
            err++;
 800ce68:	7afb      	ldrb	r3, [r7, #11]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce6e:	e089      	b.n	800cf84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00b      	beq.n	800ce94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	7c12      	ldrb	r2, [r2, #16]
 800ce88:	f107 0108 	add.w	r1, r7, #8
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	4798      	blx	r3
 800ce90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce92:	e077      	b.n	800cf84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fab1 	bl	800d3fe <USBD_CtlError>
            err++;
 800ce9c:	7afb      	ldrb	r3, [r7, #11]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	72fb      	strb	r3, [r7, #11]
          break;
 800cea2:	e06f      	b.n	800cf84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00b      	beq.n	800cec8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	7c12      	ldrb	r2, [r2, #16]
 800cebc:	f107 0108 	add.w	r1, r7, #8
 800cec0:	4610      	mov	r0, r2
 800cec2:	4798      	blx	r3
 800cec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec6:	e05d      	b.n	800cf84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fa97 	bl	800d3fe <USBD_CtlError>
            err++;
 800ced0:	7afb      	ldrb	r3, [r7, #11]
 800ced2:	3301      	adds	r3, #1
 800ced4:	72fb      	strb	r3, [r7, #11]
          break;
 800ced6:	e055      	b.n	800cf84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cede:	691b      	ldr	r3, [r3, #16]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00b      	beq.n	800cefc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	7c12      	ldrb	r2, [r2, #16]
 800cef0:	f107 0108 	add.w	r1, r7, #8
 800cef4:	4610      	mov	r0, r2
 800cef6:	4798      	blx	r3
 800cef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cefa:	e043      	b.n	800cf84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cefc:	6839      	ldr	r1, [r7, #0]
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fa7d 	bl	800d3fe <USBD_CtlError>
            err++;
 800cf04:	7afb      	ldrb	r3, [r7, #11]
 800cf06:	3301      	adds	r3, #1
 800cf08:	72fb      	strb	r3, [r7, #11]
          break;
 800cf0a:	e03b      	b.n	800cf84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00b      	beq.n	800cf30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf1e:	695b      	ldr	r3, [r3, #20]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	7c12      	ldrb	r2, [r2, #16]
 800cf24:	f107 0108 	add.w	r1, r7, #8
 800cf28:	4610      	mov	r0, r2
 800cf2a:	4798      	blx	r3
 800cf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf2e:	e029      	b.n	800cf84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 fa63 	bl	800d3fe <USBD_CtlError>
            err++;
 800cf38:	7afb      	ldrb	r3, [r7, #11]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf3e:	e021      	b.n	800cf84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf46:	699b      	ldr	r3, [r3, #24]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00b      	beq.n	800cf64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	7c12      	ldrb	r2, [r2, #16]
 800cf58:	f107 0108 	add.w	r1, r7, #8
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	4798      	blx	r3
 800cf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf62:	e00f      	b.n	800cf84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fa49 	bl	800d3fe <USBD_CtlError>
            err++;
 800cf6c:	7afb      	ldrb	r3, [r7, #11]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	72fb      	strb	r3, [r7, #11]
          break;
 800cf72:	e007      	b.n	800cf84 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa41 	bl	800d3fe <USBD_CtlError>
          err++;
 800cf7c:	7afb      	ldrb	r3, [r7, #11]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cf82:	bf00      	nop
      }
      break;
 800cf84:	e037      	b.n	800cff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	7c1b      	ldrb	r3, [r3, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d109      	bne.n	800cfa2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf96:	f107 0208 	add.w	r2, r7, #8
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	4798      	blx	r3
 800cf9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfa0:	e029      	b.n	800cff6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cfa2:	6839      	ldr	r1, [r7, #0]
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fa2a 	bl	800d3fe <USBD_CtlError>
        err++;
 800cfaa:	7afb      	ldrb	r3, [r7, #11]
 800cfac:	3301      	adds	r3, #1
 800cfae:	72fb      	strb	r3, [r7, #11]
      break;
 800cfb0:	e021      	b.n	800cff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	7c1b      	ldrb	r3, [r3, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10d      	bne.n	800cfd6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc2:	f107 0208 	add.w	r2, r7, #8
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	4798      	blx	r3
 800cfca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	2207      	movs	r2, #7
 800cfd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfd4:	e00f      	b.n	800cff6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cfd6:	6839      	ldr	r1, [r7, #0]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fa10 	bl	800d3fe <USBD_CtlError>
        err++;
 800cfde:	7afb      	ldrb	r3, [r7, #11]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	72fb      	strb	r3, [r7, #11]
      break;
 800cfe4:	e007      	b.n	800cff6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fa08 	bl	800d3fe <USBD_CtlError>
      err++;
 800cfee:	7afb      	ldrb	r3, [r7, #11]
 800cff0:	3301      	adds	r3, #1
 800cff2:	72fb      	strb	r3, [r7, #11]
      break;
 800cff4:	bf00      	nop
  }

  if (err != 0U)
 800cff6:	7afb      	ldrb	r3, [r7, #11]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d11e      	bne.n	800d03a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	88db      	ldrh	r3, [r3, #6]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d016      	beq.n	800d032 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d004:	893b      	ldrh	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00e      	beq.n	800d028 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	88da      	ldrh	r2, [r3, #6]
 800d00e:	893b      	ldrh	r3, [r7, #8]
 800d010:	4293      	cmp	r3, r2
 800d012:	bf28      	it	cs
 800d014:	4613      	movcs	r3, r2
 800d016:	b29b      	uxth	r3, r3
 800d018:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d01a:	893b      	ldrh	r3, [r7, #8]
 800d01c:	461a      	mov	r2, r3
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fa5d 	bl	800d4e0 <USBD_CtlSendData>
 800d026:	e009      	b.n	800d03c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f9e7 	bl	800d3fe <USBD_CtlError>
 800d030:	e004      	b.n	800d03c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fa91 	bl	800d55a <USBD_CtlSendStatus>
 800d038:	e000      	b.n	800d03c <USBD_GetDescriptor+0x2cc>
    return;
 800d03a:	bf00      	nop
  }
}
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop

0800d044 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	889b      	ldrh	r3, [r3, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d131      	bne.n	800d0ba <USBD_SetAddress+0x76>
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	88db      	ldrh	r3, [r3, #6]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d12d      	bne.n	800d0ba <USBD_SetAddress+0x76>
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	885b      	ldrh	r3, [r3, #2]
 800d062:	2b7f      	cmp	r3, #127	; 0x7f
 800d064:	d829      	bhi.n	800d0ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	885b      	ldrh	r3, [r3, #2]
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d070:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d104      	bne.n	800d088 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f9bc 	bl	800d3fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d086:	e01d      	b.n	800d0c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	7bfa      	ldrb	r2, [r7, #15]
 800d08c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d090:	7bfb      	ldrb	r3, [r7, #15]
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 ff5e 	bl	800df56 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 fa5d 	bl	800d55a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d004      	beq.n	800d0b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ae:	e009      	b.n	800d0c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b8:	e004      	b.n	800d0c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 f99e 	bl	800d3fe <USBD_CtlError>
  }
}
 800d0c2:	bf00      	nop
 800d0c4:	bf00      	nop
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	885b      	ldrh	r3, [r3, #2]
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	4b4e      	ldr	r3, [pc, #312]	; (800d21c <USBD_SetConfig+0x150>)
 800d0e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0e4:	4b4d      	ldr	r3, [pc, #308]	; (800d21c <USBD_SetConfig+0x150>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d905      	bls.n	800d0f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 f985 	bl	800d3fe <USBD_CtlError>
    return USBD_FAIL;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e08c      	b.n	800d212 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2b02      	cmp	r3, #2
 800d102:	d002      	beq.n	800d10a <USBD_SetConfig+0x3e>
 800d104:	2b03      	cmp	r3, #3
 800d106:	d029      	beq.n	800d15c <USBD_SetConfig+0x90>
 800d108:	e075      	b.n	800d1f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d10a:	4b44      	ldr	r3, [pc, #272]	; (800d21c <USBD_SetConfig+0x150>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d020      	beq.n	800d154 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d112:	4b42      	ldr	r3, [pc, #264]	; (800d21c <USBD_SetConfig+0x150>)
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d11c:	4b3f      	ldr	r3, [pc, #252]	; (800d21c <USBD_SetConfig+0x150>)
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	4619      	mov	r1, r3
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7fe ffe6 	bl	800c0f4 <USBD_SetClassConfig>
 800d128:	4603      	mov	r3, r0
 800d12a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d008      	beq.n	800d144 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d132:	6839      	ldr	r1, [r7, #0]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 f962 	bl	800d3fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2202      	movs	r2, #2
 800d13e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d142:	e065      	b.n	800d210 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 fa08 	bl	800d55a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2203      	movs	r2, #3
 800d14e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d152:	e05d      	b.n	800d210 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fa00 	bl	800d55a <USBD_CtlSendStatus>
      break;
 800d15a:	e059      	b.n	800d210 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d15c:	4b2f      	ldr	r3, [pc, #188]	; (800d21c <USBD_SetConfig+0x150>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d112      	bne.n	800d18a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2202      	movs	r2, #2
 800d168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d16c:	4b2b      	ldr	r3, [pc, #172]	; (800d21c <USBD_SetConfig+0x150>)
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	461a      	mov	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d176:	4b29      	ldr	r3, [pc, #164]	; (800d21c <USBD_SetConfig+0x150>)
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7fe ffd5 	bl	800c12c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f9e9 	bl	800d55a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d188:	e042      	b.n	800d210 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d18a:	4b24      	ldr	r3, [pc, #144]	; (800d21c <USBD_SetConfig+0x150>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	429a      	cmp	r2, r3
 800d196:	d02a      	beq.n	800d1ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7fe ffc3 	bl	800c12c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d1a6:	4b1d      	ldr	r3, [pc, #116]	; (800d21c <USBD_SetConfig+0x150>)
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1b0:	4b1a      	ldr	r3, [pc, #104]	; (800d21c <USBD_SetConfig+0x150>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7fe ff9c 	bl	800c0f4 <USBD_SetClassConfig>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00f      	beq.n	800d1e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 f918 	bl	800d3fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7fe ffa8 	bl	800c12c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2202      	movs	r2, #2
 800d1e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d1e4:	e014      	b.n	800d210 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f9b7 	bl	800d55a <USBD_CtlSendStatus>
      break;
 800d1ec:	e010      	b.n	800d210 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f9b3 	bl	800d55a <USBD_CtlSendStatus>
      break;
 800d1f4:	e00c      	b.n	800d210 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f900 	bl	800d3fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1fe:	4b07      	ldr	r3, [pc, #28]	; (800d21c <USBD_SetConfig+0x150>)
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	4619      	mov	r1, r3
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7fe ff91 	bl	800c12c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d20a:	2303      	movs	r3, #3
 800d20c:	73fb      	strb	r3, [r7, #15]
      break;
 800d20e:	bf00      	nop
  }

  return ret;
 800d210:	7bfb      	ldrb	r3, [r7, #15]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	240001d4 	.word	0x240001d4

0800d220 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	88db      	ldrh	r3, [r3, #6]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d004      	beq.n	800d23c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f8e2 	bl	800d3fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d23a:	e023      	b.n	800d284 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b02      	cmp	r3, #2
 800d246:	dc02      	bgt.n	800d24e <USBD_GetConfig+0x2e>
 800d248:	2b00      	cmp	r3, #0
 800d24a:	dc03      	bgt.n	800d254 <USBD_GetConfig+0x34>
 800d24c:	e015      	b.n	800d27a <USBD_GetConfig+0x5a>
 800d24e:	2b03      	cmp	r3, #3
 800d250:	d00b      	beq.n	800d26a <USBD_GetConfig+0x4a>
 800d252:	e012      	b.n	800d27a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	3308      	adds	r3, #8
 800d25e:	2201      	movs	r2, #1
 800d260:	4619      	mov	r1, r3
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f93c 	bl	800d4e0 <USBD_CtlSendData>
        break;
 800d268:	e00c      	b.n	800d284 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3304      	adds	r3, #4
 800d26e:	2201      	movs	r2, #1
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f934 	bl	800d4e0 <USBD_CtlSendData>
        break;
 800d278:	e004      	b.n	800d284 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f8be 	bl	800d3fe <USBD_CtlError>
        break;
 800d282:	bf00      	nop
}
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d81e      	bhi.n	800d2e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	88db      	ldrh	r3, [r3, #6]
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	d004      	beq.n	800d2b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f8a5 	bl	800d3fe <USBD_CtlError>
        break;
 800d2b4:	e01a      	b.n	800d2ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d005      	beq.n	800d2d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	f043 0202 	orr.w	r2, r3, #2
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	330c      	adds	r3, #12
 800d2d6:	2202      	movs	r2, #2
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f900 	bl	800d4e0 <USBD_CtlSendData>
      break;
 800d2e0:	e004      	b.n	800d2ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f88a 	bl	800d3fe <USBD_CtlError>
      break;
 800d2ea:	bf00      	nop
  }
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	885b      	ldrh	r3, [r3, #2]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d107      	bne.n	800d316 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f923 	bl	800d55a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d314:	e013      	b.n	800d33e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	885b      	ldrh	r3, [r3, #2]
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d10b      	bne.n	800d336 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	889b      	ldrh	r3, [r3, #4]
 800d322:	0a1b      	lsrs	r3, r3, #8
 800d324:	b29b      	uxth	r3, r3
 800d326:	b2da      	uxtb	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f913 	bl	800d55a <USBD_CtlSendStatus>
}
 800d334:	e003      	b.n	800d33e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 f860 	bl	800d3fe <USBD_CtlError>
}
 800d33e:	bf00      	nop
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b082      	sub	sp, #8
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d356:	b2db      	uxtb	r3, r3
 800d358:	3b01      	subs	r3, #1
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d80b      	bhi.n	800d376 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	885b      	ldrh	r3, [r3, #2]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d10c      	bne.n	800d380 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f8f3 	bl	800d55a <USBD_CtlSendStatus>
      }
      break;
 800d374:	e004      	b.n	800d380 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 f840 	bl	800d3fe <USBD_CtlError>
      break;
 800d37e:	e000      	b.n	800d382 <USBD_ClrFeature+0x3c>
      break;
 800d380:	bf00      	nop
  }
}
 800d382:	bf00      	nop
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b084      	sub	sp, #16
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	781a      	ldrb	r2, [r3, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	781a      	ldrb	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f7ff fa40 	bl	800c83a <SWAPBYTE>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	461a      	mov	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f7ff fa33 	bl	800c83a <SWAPBYTE>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f7ff fa26 	bl	800c83a <SWAPBYTE>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	80da      	strh	r2, [r3, #6]
}
 800d3f6:	bf00      	nop
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b082      	sub	sp, #8
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d408:	2180      	movs	r1, #128	; 0x80
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 fd39 	bl	800de82 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d410:	2100      	movs	r1, #0
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fd35 	bl	800de82 <USBD_LL_StallEP>
}
 800d418:	bf00      	nop
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d42c:	2300      	movs	r3, #0
 800d42e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d036      	beq.n	800d4a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d43a:	6938      	ldr	r0, [r7, #16]
 800d43c:	f000 f836 	bl	800d4ac <USBD_GetLen>
 800d440:	4603      	mov	r3, r0
 800d442:	3301      	adds	r3, #1
 800d444:	b29b      	uxth	r3, r3
 800d446:	005b      	lsls	r3, r3, #1
 800d448:	b29a      	uxth	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	4413      	add	r3, r2
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	7812      	ldrb	r2, [r2, #0]
 800d458:	701a      	strb	r2, [r3, #0]
  idx++;
 800d45a:	7dfb      	ldrb	r3, [r7, #23]
 800d45c:	3301      	adds	r3, #1
 800d45e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d460:	7dfb      	ldrb	r3, [r7, #23]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	4413      	add	r3, r2
 800d466:	2203      	movs	r2, #3
 800d468:	701a      	strb	r2, [r3, #0]
  idx++;
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
 800d46c:	3301      	adds	r3, #1
 800d46e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d470:	e013      	b.n	800d49a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d472:	7dfb      	ldrb	r3, [r7, #23]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	4413      	add	r3, r2
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	7812      	ldrb	r2, [r2, #0]
 800d47c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	3301      	adds	r3, #1
 800d482:	613b      	str	r3, [r7, #16]
    idx++;
 800d484:	7dfb      	ldrb	r3, [r7, #23]
 800d486:	3301      	adds	r3, #1
 800d488:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	4413      	add	r3, r2
 800d490:	2200      	movs	r2, #0
 800d492:	701a      	strb	r2, [r3, #0]
    idx++;
 800d494:	7dfb      	ldrb	r3, [r7, #23]
 800d496:	3301      	adds	r3, #1
 800d498:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e7      	bne.n	800d472 <USBD_GetString+0x52>
 800d4a2:	e000      	b.n	800d4a6 <USBD_GetString+0x86>
    return;
 800d4a4:	bf00      	nop
  }
}
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d4bc:	e005      	b.n	800d4ca <USBD_GetLen+0x1e>
  {
    len++;
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1f5      	bne.n	800d4be <USBD_GetLen+0x12>
  }

  return len;
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2202      	movs	r2, #2
 800d4f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68ba      	ldr	r2, [r7, #8]
 800d504:	2100      	movs	r1, #0
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 fd44 	bl	800df94 <USBD_LL_Transmit>

  return USBD_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60f8      	str	r0, [r7, #12]
 800d51e:	60b9      	str	r1, [r7, #8]
 800d520:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	2100      	movs	r1, #0
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f000 fd33 	bl	800df94 <USBD_LL_Transmit>

  return USBD_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	68ba      	ldr	r2, [r7, #8]
 800d548:	2100      	movs	r1, #0
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 fd43 	bl	800dfd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b082      	sub	sp, #8
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2204      	movs	r2, #4
 800d566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d56a:	2300      	movs	r3, #0
 800d56c:	2200      	movs	r2, #0
 800d56e:	2100      	movs	r1, #0
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fd0f 	bl	800df94 <USBD_LL_Transmit>

  return USBD_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2205      	movs	r2, #5
 800d58c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d590:	2300      	movs	r3, #0
 800d592:	2200      	movs	r2, #0
 800d594:	2100      	movs	r1, #0
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fd1d 	bl	800dfd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
	...

0800d5a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b087      	sub	sp, #28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d5be:	4b1f      	ldr	r3, [pc, #124]	; (800d63c <FATFS_LinkDriverEx+0x94>)
 800d5c0:	7a5b      	ldrb	r3, [r3, #9]
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d131      	bne.n	800d62c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d5c8:	4b1c      	ldr	r3, [pc, #112]	; (800d63c <FATFS_LinkDriverEx+0x94>)
 800d5ca:	7a5b      	ldrb	r3, [r3, #9]
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	4b1a      	ldr	r3, [pc, #104]	; (800d63c <FATFS_LinkDriverEx+0x94>)
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d5d6:	4b19      	ldr	r3, [pc, #100]	; (800d63c <FATFS_LinkDriverEx+0x94>)
 800d5d8:	7a5b      	ldrb	r3, [r3, #9]
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	4a17      	ldr	r2, [pc, #92]	; (800d63c <FATFS_LinkDriverEx+0x94>)
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	4413      	add	r3, r2
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d5e6:	4b15      	ldr	r3, [pc, #84]	; (800d63c <FATFS_LinkDriverEx+0x94>)
 800d5e8:	7a5b      	ldrb	r3, [r3, #9]
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	4b13      	ldr	r3, [pc, #76]	; (800d63c <FATFS_LinkDriverEx+0x94>)
 800d5f0:	4413      	add	r3, r2
 800d5f2:	79fa      	ldrb	r2, [r7, #7]
 800d5f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d5f6:	4b11      	ldr	r3, [pc, #68]	; (800d63c <FATFS_LinkDriverEx+0x94>)
 800d5f8:	7a5b      	ldrb	r3, [r3, #9]
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	1c5a      	adds	r2, r3, #1
 800d5fe:	b2d1      	uxtb	r1, r2
 800d600:	4a0e      	ldr	r2, [pc, #56]	; (800d63c <FATFS_LinkDriverEx+0x94>)
 800d602:	7251      	strb	r1, [r2, #9]
 800d604:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d606:	7dbb      	ldrb	r3, [r7, #22]
 800d608:	3330      	adds	r3, #48	; 0x30
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	3301      	adds	r3, #1
 800d614:	223a      	movs	r2, #58	; 0x3a
 800d616:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	3302      	adds	r3, #2
 800d61c:	222f      	movs	r2, #47	; 0x2f
 800d61e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	3303      	adds	r3, #3
 800d624:	2200      	movs	r2, #0
 800d626:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d62c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	371c      	adds	r7, #28
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	240001d8 	.word	0x240001d8

0800d640 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d64a:	2200      	movs	r2, #0
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7ff ffaa 	bl	800d5a8 <FATFS_LinkDriverEx>
 800d654:	4603      	mov	r3, r0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d664:	2200      	movs	r2, #0
 800d666:	4913      	ldr	r1, [pc, #76]	; (800d6b4 <MX_USB_DEVICE_Init+0x54>)
 800d668:	4813      	ldr	r0, [pc, #76]	; (800d6b8 <MX_USB_DEVICE_Init+0x58>)
 800d66a:	f7fe fcc6 	bl	800bffa <USBD_Init>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d674:	f7f2 ff64 	bl	8000540 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800d678:	4910      	ldr	r1, [pc, #64]	; (800d6bc <MX_USB_DEVICE_Init+0x5c>)
 800d67a:	480f      	ldr	r0, [pc, #60]	; (800d6b8 <MX_USB_DEVICE_Init+0x58>)
 800d67c:	f7fe fced 	bl	800c05a <USBD_RegisterClass>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d686:	f7f2 ff5b 	bl	8000540 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800d68a:	490d      	ldr	r1, [pc, #52]	; (800d6c0 <MX_USB_DEVICE_Init+0x60>)
 800d68c:	480a      	ldr	r0, [pc, #40]	; (800d6b8 <MX_USB_DEVICE_Init+0x58>)
 800d68e:	f7fc ff97 	bl	800a5c0 <USBD_MSC_RegisterStorage>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d698:	f7f2 ff52 	bl	8000540 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d69c:	4806      	ldr	r0, [pc, #24]	; (800d6b8 <MX_USB_DEVICE_Init+0x58>)
 800d69e:	f7fe fd12 	bl	800c0c6 <USBD_Start>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d001      	beq.n	800d6ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d6a8:	f7f2 ff4a 	bl	8000540 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d6ac:	f7f4 ffda 	bl	8002664 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d6b0:	bf00      	nop
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	240000b8 	.word	0x240000b8
 800d6b8:	240001e4 	.word	0x240001e4
 800d6bc:	24000010 	.word	0x24000010
 800d6c0:	24000108 	.word	0x24000108

0800d6c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	6039      	str	r1, [r7, #0]
 800d6ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	2212      	movs	r2, #18
 800d6d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d6d6:	4b03      	ldr	r3, [pc, #12]	; (800d6e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr
 800d6e4:	240000d4 	.word	0x240000d4

0800d6e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	6039      	str	r1, [r7, #0]
 800d6f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	2204      	movs	r2, #4
 800d6f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d6fa:	4b03      	ldr	r3, [pc, #12]	; (800d708 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	240000e8 	.word	0x240000e8

0800d70c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	4603      	mov	r3, r0
 800d714:	6039      	str	r1, [r7, #0]
 800d716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d718:	79fb      	ldrb	r3, [r7, #7]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d105      	bne.n	800d72a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	4907      	ldr	r1, [pc, #28]	; (800d740 <USBD_FS_ProductStrDescriptor+0x34>)
 800d722:	4808      	ldr	r0, [pc, #32]	; (800d744 <USBD_FS_ProductStrDescriptor+0x38>)
 800d724:	f7ff fe7c 	bl	800d420 <USBD_GetString>
 800d728:	e004      	b.n	800d734 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d72a:	683a      	ldr	r2, [r7, #0]
 800d72c:	4904      	ldr	r1, [pc, #16]	; (800d740 <USBD_FS_ProductStrDescriptor+0x34>)
 800d72e:	4805      	ldr	r0, [pc, #20]	; (800d744 <USBD_FS_ProductStrDescriptor+0x38>)
 800d730:	f7ff fe76 	bl	800d420 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d734:	4b02      	ldr	r3, [pc, #8]	; (800d740 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d736:	4618      	mov	r0, r3
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	240004c0 	.word	0x240004c0
 800d744:	0800e138 	.word	0x0800e138

0800d748 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	4603      	mov	r3, r0
 800d750:	6039      	str	r1, [r7, #0]
 800d752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d754:	683a      	ldr	r2, [r7, #0]
 800d756:	4904      	ldr	r1, [pc, #16]	; (800d768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d758:	4804      	ldr	r0, [pc, #16]	; (800d76c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d75a:	f7ff fe61 	bl	800d420 <USBD_GetString>
  return USBD_StrDesc;
 800d75e:	4b02      	ldr	r3, [pc, #8]	; (800d768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d760:	4618      	mov	r0, r3
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	240004c0 	.word	0x240004c0
 800d76c:	0800e14c 	.word	0x0800e14c

0800d770 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	4603      	mov	r3, r0
 800d778:	6039      	str	r1, [r7, #0]
 800d77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	221a      	movs	r2, #26
 800d780:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d782:	f000 f843 	bl	800d80c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d786:	4b02      	ldr	r3, [pc, #8]	; (800d790 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	240000ec 	.word	0x240000ec

0800d794 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	6039      	str	r1, [r7, #0]
 800d79e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d7a0:	79fb      	ldrb	r3, [r7, #7]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d105      	bne.n	800d7b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	4907      	ldr	r1, [pc, #28]	; (800d7c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7aa:	4808      	ldr	r0, [pc, #32]	; (800d7cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7ac:	f7ff fe38 	bl	800d420 <USBD_GetString>
 800d7b0:	e004      	b.n	800d7bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	4904      	ldr	r1, [pc, #16]	; (800d7c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7b6:	4805      	ldr	r0, [pc, #20]	; (800d7cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7b8:	f7ff fe32 	bl	800d420 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7bc:	4b02      	ldr	r3, [pc, #8]	; (800d7c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	240004c0 	.word	0x240004c0
 800d7cc:	0800e160 	.word	0x0800e160

0800d7d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	6039      	str	r1, [r7, #0]
 800d7da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7dc:	79fb      	ldrb	r3, [r7, #7]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d105      	bne.n	800d7ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d7e2:	683a      	ldr	r2, [r7, #0]
 800d7e4:	4907      	ldr	r1, [pc, #28]	; (800d804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7e6:	4808      	ldr	r0, [pc, #32]	; (800d808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7e8:	f7ff fe1a 	bl	800d420 <USBD_GetString>
 800d7ec:	e004      	b.n	800d7f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	4904      	ldr	r1, [pc, #16]	; (800d804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7f2:	4805      	ldr	r0, [pc, #20]	; (800d808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7f4:	f7ff fe14 	bl	800d420 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7f8:	4b02      	ldr	r3, [pc, #8]	; (800d804 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	240004c0 	.word	0x240004c0
 800d808:	0800e16c 	.word	0x0800e16c

0800d80c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d812:	4b0f      	ldr	r3, [pc, #60]	; (800d850 <Get_SerialNum+0x44>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d818:	4b0e      	ldr	r3, [pc, #56]	; (800d854 <Get_SerialNum+0x48>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d81e:	4b0e      	ldr	r3, [pc, #56]	; (800d858 <Get_SerialNum+0x4c>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4413      	add	r3, r2
 800d82a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d009      	beq.n	800d846 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d832:	2208      	movs	r2, #8
 800d834:	4909      	ldr	r1, [pc, #36]	; (800d85c <Get_SerialNum+0x50>)
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f000 f814 	bl	800d864 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d83c:	2204      	movs	r2, #4
 800d83e:	4908      	ldr	r1, [pc, #32]	; (800d860 <Get_SerialNum+0x54>)
 800d840:	68b8      	ldr	r0, [r7, #8]
 800d842:	f000 f80f 	bl	800d864 <IntToUnicode>
  }
}
 800d846:	bf00      	nop
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	1ff1e800 	.word	0x1ff1e800
 800d854:	1ff1e804 	.word	0x1ff1e804
 800d858:	1ff1e808 	.word	0x1ff1e808
 800d85c:	240000ee 	.word	0x240000ee
 800d860:	240000fe 	.word	0x240000fe

0800d864 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d864:	b480      	push	{r7}
 800d866:	b087      	sub	sp, #28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	4613      	mov	r3, r2
 800d870:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d872:	2300      	movs	r3, #0
 800d874:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d876:	2300      	movs	r3, #0
 800d878:	75fb      	strb	r3, [r7, #23]
 800d87a:	e027      	b.n	800d8cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	0f1b      	lsrs	r3, r3, #28
 800d880:	2b09      	cmp	r3, #9
 800d882:	d80b      	bhi.n	800d89c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	0f1b      	lsrs	r3, r3, #28
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
 800d88c:	005b      	lsls	r3, r3, #1
 800d88e:	4619      	mov	r1, r3
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	440b      	add	r3, r1
 800d894:	3230      	adds	r2, #48	; 0x30
 800d896:	b2d2      	uxtb	r2, r2
 800d898:	701a      	strb	r2, [r3, #0]
 800d89a:	e00a      	b.n	800d8b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	0f1b      	lsrs	r3, r3, #28
 800d8a0:	b2da      	uxtb	r2, r3
 800d8a2:	7dfb      	ldrb	r3, [r7, #23]
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	440b      	add	r3, r1
 800d8ac:	3237      	adds	r2, #55	; 0x37
 800d8ae:	b2d2      	uxtb	r2, r2
 800d8b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	011b      	lsls	r3, r3, #4
 800d8b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d8b8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	3301      	adds	r3, #1
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	75fb      	strb	r3, [r7, #23]
 800d8cc:	7dfa      	ldrb	r2, [r7, #23]
 800d8ce:	79fb      	ldrb	r3, [r7, #7]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d3d3      	bcc.n	800d87c <IntToUnicode+0x18>
  }
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop
 800d8d8:	371c      	adds	r7, #28
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800d8e2:	b480      	push	{r7}
 800d8e4:	b083      	sub	sp, #12
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800d8ec:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	370c      	adds	r7, #12
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
	...

0800d8fc <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08e      	sub	sp, #56	; 0x38
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
 800d908:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */

#ifdef MY_SD_CARD
  HAL_SD_CardInfoTypeDef info;
  int8_t ret = -1;
 800d90a:	23ff      	movs	r3, #255	; 0xff
 800d90c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  HAL_SD_GetCardInfo(&hsd1, &info);
 800d910:	f107 0310 	add.w	r3, r7, #16
 800d914:	4619      	mov	r1, r3
 800d916:	480a      	ldr	r0, [pc, #40]	; (800d940 <STORAGE_GetCapacity_FS+0x44>)
 800d918:	f7f9 f9a0 	bl	8006c5c <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr  - 1;
 800d91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91e:	1e5a      	subs	r2, r3, #1
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 800d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d926:	b29a      	uxth	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	801a      	strh	r2, [r3, #0]
  ret = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  return ret;
 800d932:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  *block_num = STORAGE_RAM_BLK_NBR;
  *block_size =  STORAGE_BLK_SIZ;
  return 0;
#endif // MY_SD_CARD
  /* USER CODE END 3 */
}
 800d936:	4618      	mov	r0, r3
 800d938:	3738      	adds	r7, #56	; 0x38
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	24000144 	.word	0x24000144

0800d944 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	4603      	mov	r3, r0
 800d94c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
		return (USBD_OK);
 800d94e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d950:	4618      	mov	r0, r3
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	4603      	mov	r3, r0
 800d964:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800d966:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b088      	sub	sp, #32
 800d978:	af02      	add	r7, sp, #8
 800d97a:	60b9      	str	r1, [r7, #8]
 800d97c:	607a      	str	r2, [r7, #4]
 800d97e:	461a      	mov	r2, r3
 800d980:	4603      	mov	r3, r0
 800d982:	73fb      	strb	r3, [r7, #15]
 800d984:	4613      	mov	r3, r2
 800d986:	81bb      	strh	r3, [r7, #12]
#ifndef MY_SD_CARD
  memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
  return 0;
#else // MY_SD_CARD
  
   int8_t ret = -1;
 800d988:	23ff      	movs	r3, #255	; 0xff
 800d98a:	75fb      	strb	r3, [r7, #23]

  HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 800d98c:	89bb      	ldrh	r3, [r7, #12]
 800d98e:	f04f 32ff 	mov.w	r2, #4294967295
 800d992:	9200      	str	r2, [sp, #0]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	68b9      	ldr	r1, [r7, #8]
 800d998:	4808      	ldr	r0, [pc, #32]	; (800d9bc <STORAGE_Read_FS+0x48>)
 800d99a:	f7f8 f8d3 	bl	8005b44 <HAL_SD_ReadBlocks>

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER);
 800d99e:	bf00      	nop
 800d9a0:	4806      	ldr	r0, [pc, #24]	; (800d9bc <STORAGE_Read_FS+0x48>)
 800d9a2:	f7f9 fa99 	bl	8006ed8 <HAL_SD_GetCardState>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b04      	cmp	r3, #4
 800d9aa:	d1f9      	bne.n	800d9a0 <STORAGE_Read_FS+0x2c>
  ret = 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	75fb      	strb	r3, [r7, #23]
  return ret;
 800d9b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
#endif // MY_SD_CARD
  /* USER CODE END 6 */
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3718      	adds	r7, #24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	24000144 	.word	0x24000144

0800d9c0 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	af02      	add	r7, sp, #8
 800d9c6:	60b9      	str	r1, [r7, #8]
 800d9c8:	607a      	str	r2, [r7, #4]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	81bb      	strh	r3, [r7, #12]
#ifndef MY_SD_CARD
  memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
  return 0;
#else // MY_SD_CARD
  
  int8_t ret = -1;
 800d9d4:	23ff      	movs	r3, #255	; 0xff
 800d9d6:	75fb      	strb	r3, [r7, #23]

   HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 800d9d8:	89bb      	ldrh	r3, [r7, #12]
 800d9da:	f04f 32ff 	mov.w	r2, #4294967295
 800d9de:	9200      	str	r2, [sp, #0]
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	68b9      	ldr	r1, [r7, #8]
 800d9e4:	4808      	ldr	r0, [pc, #32]	; (800da08 <STORAGE_Write_FS+0x48>)
 800d9e6:	f7f8 fa37 	bl	8005e58 <HAL_SD_WriteBlocks>


  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 800d9ea:	bf00      	nop
 800d9ec:	4806      	ldr	r0, [pc, #24]	; (800da08 <STORAGE_Write_FS+0x48>)
 800d9ee:	f7f9 fa73 	bl	8006ed8 <HAL_SD_GetCardState>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b04      	cmp	r3, #4
 800d9f6:	d1f9      	bne.n	800d9ec <STORAGE_Write_FS+0x2c>
  ret = 0;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	75fb      	strb	r3, [r7, #23]
  return ret;
 800d9fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
#endif // MY_SD_CARD
  /* USER CODE END 7 */
}
 800da00:	4618      	mov	r0, r3
 800da02:	3718      	adds	r7, #24
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	24000144 	.word	0x24000144

0800da0c <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800da0c:	b480      	push	{r7}
 800da0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800da10:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800da12:	4618      	mov	r0, r3
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b0b8      	sub	sp, #224	; 0xe0
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800da28:	2200      	movs	r2, #0
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	605a      	str	r2, [r3, #4]
 800da2e:	609a      	str	r2, [r3, #8]
 800da30:	60da      	str	r2, [r3, #12]
 800da32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800da34:	f107 0310 	add.w	r3, r7, #16
 800da38:	22bc      	movs	r2, #188	; 0xbc
 800da3a:	2100      	movs	r1, #0
 800da3c:	4618      	mov	r0, r3
 800da3e:	f000 fb67 	bl	800e110 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a2b      	ldr	r2, [pc, #172]	; (800daf4 <HAL_PCD_MspInit+0xd8>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d14e      	bne.n	800daea <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800da4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800da50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800da52:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800da56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800da5a:	f107 0310 	add.w	r3, r7, #16
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f5 fdca 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800da6a:	f7f2 fd69 	bl	8000540 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800da6e:	f7f4 fdf9 	bl	8002664 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da72:	4b21      	ldr	r3, [pc, #132]	; (800daf8 <HAL_PCD_MspInit+0xdc>)
 800da74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da78:	4a1f      	ldr	r2, [pc, #124]	; (800daf8 <HAL_PCD_MspInit+0xdc>)
 800da7a:	f043 0301 	orr.w	r3, r3, #1
 800da7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800da82:	4b1d      	ldr	r3, [pc, #116]	; (800daf8 <HAL_PCD_MspInit+0xdc>)
 800da84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da88:	f003 0301 	and.w	r3, r3, #1
 800da8c:	60fb      	str	r3, [r7, #12]
 800da8e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800da90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800da94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da98:	2302      	movs	r3, #2
 800da9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800daa4:	2303      	movs	r3, #3
 800daa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800daaa:	230a      	movs	r3, #10
 800daac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dab0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800dab4:	4619      	mov	r1, r3
 800dab6:	4811      	ldr	r0, [pc, #68]	; (800dafc <HAL_PCD_MspInit+0xe0>)
 800dab8:	f7f3 f8e8 	bl	8000c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dabc:	4b0e      	ldr	r3, [pc, #56]	; (800daf8 <HAL_PCD_MspInit+0xdc>)
 800dabe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800dac2:	4a0d      	ldr	r2, [pc, #52]	; (800daf8 <HAL_PCD_MspInit+0xdc>)
 800dac4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dac8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800dacc:	4b0a      	ldr	r3, [pc, #40]	; (800daf8 <HAL_PCD_MspInit+0xdc>)
 800dace:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800dad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dad6:	60bb      	str	r3, [r7, #8]
 800dad8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dada:	2200      	movs	r2, #0
 800dadc:	2100      	movs	r1, #0
 800dade:	2065      	movs	r0, #101	; 0x65
 800dae0:	f7f3 f89f 	bl	8000c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dae4:	2065      	movs	r0, #101	; 0x65
 800dae6:	f7f3 f8b6 	bl	8000c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800daea:	bf00      	nop
 800daec:	37e0      	adds	r7, #224	; 0xe0
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	40080000 	.word	0x40080000
 800daf8:	58024400 	.word	0x58024400
 800dafc:	58020000 	.word	0x58020000

0800db00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800db14:	4619      	mov	r1, r3
 800db16:	4610      	mov	r0, r2
 800db18:	f7fe fb22 	bl	800c160 <USBD_LL_SetupStage>
}
 800db1c:	bf00      	nop
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800db36:	78fa      	ldrb	r2, [r7, #3]
 800db38:	6879      	ldr	r1, [r7, #4]
 800db3a:	4613      	mov	r3, r2
 800db3c:	00db      	lsls	r3, r3, #3
 800db3e:	4413      	add	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	440b      	add	r3, r1
 800db44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	78fb      	ldrb	r3, [r7, #3]
 800db4c:	4619      	mov	r1, r3
 800db4e:	f7fe fb5c 	bl	800c20a <USBD_LL_DataOutStage>
}
 800db52:	bf00      	nop
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b082      	sub	sp, #8
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	460b      	mov	r3, r1
 800db64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800db6c:	78fa      	ldrb	r2, [r7, #3]
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	4613      	mov	r3, r2
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	440b      	add	r3, r1
 800db7a:	334c      	adds	r3, #76	; 0x4c
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	78fb      	ldrb	r3, [r7, #3]
 800db80:	4619      	mov	r1, r3
 800db82:	f7fe fbf5 	bl	800c370 <USBD_LL_DataInStage>
}
 800db86:	bf00      	nop
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db8e:	b580      	push	{r7, lr}
 800db90:	b082      	sub	sp, #8
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fe fd29 	bl	800c5f4 <USBD_LL_SOF>
}
 800dba2:	bf00      	nop
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b084      	sub	sp, #16
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d102      	bne.n	800dbc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	73fb      	strb	r3, [r7, #15]
 800dbc2:	e008      	b.n	800dbd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d102      	bne.n	800dbd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	73fb      	strb	r3, [r7, #15]
 800dbd0:	e001      	b.n	800dbd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dbd2:	f7f2 fcb5 	bl	8000540 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dbdc:	7bfa      	ldrb	r2, [r7, #15]
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fe fcc9 	bl	800c578 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fe fc71 	bl	800c4d4 <USBD_LL_Reset>
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe fcc4 	bl	800c598 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	6812      	ldr	r2, [r2, #0]
 800dc1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a1b      	ldr	r3, [r3, #32]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d005      	beq.n	800dc3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc30:	4b04      	ldr	r3, [pc, #16]	; (800dc44 <HAL_PCD_SuspendCallback+0x48>)
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	4a03      	ldr	r2, [pc, #12]	; (800dc44 <HAL_PCD_SuspendCallback+0x48>)
 800dc36:	f043 0306 	orr.w	r3, r3, #6
 800dc3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	e000ed00 	.word	0xe000ed00

0800dc48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe fcb4 	bl	800c5c4 <USBD_LL_Resume>
}
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc76:	78fa      	ldrb	r2, [r7, #3]
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fd0c 	bl	800c698 <USBD_LL_IsoOUTIncomplete>
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc9a:	78fa      	ldrb	r2, [r7, #3]
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fcc8 	bl	800c634 <USBD_LL_IsoINIncomplete>
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fd1e 	bl	800c6fc <USBD_LL_DevConnected>
}
 800dcc0:	bf00      	nop
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe fd1b 	bl	800c712 <USBD_LL_DevDisconnected>
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d13e      	bne.n	800dd72 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dcf4:	4a21      	ldr	r2, [pc, #132]	; (800dd7c <USBD_LL_Init+0x98>)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a1f      	ldr	r2, [pc, #124]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd04:	4b1d      	ldr	r3, [pc, #116]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd06:	4a1e      	ldr	r2, [pc, #120]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800dd0a:	4b1c      	ldr	r3, [pc, #112]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd0c:	2209      	movs	r2, #9
 800dd0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dd10:	4b1a      	ldr	r3, [pc, #104]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd12:	2202      	movs	r2, #2
 800dd14:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dd16:	4b19      	ldr	r3, [pc, #100]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dd1c:	4b17      	ldr	r3, [pc, #92]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd1e:	2202      	movs	r2, #2
 800dd20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dd22:	4b16      	ldr	r3, [pc, #88]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dd28:	4b14      	ldr	r3, [pc, #80]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dd2e:	4b13      	ldr	r3, [pc, #76]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800dd34:	4b11      	ldr	r3, [pc, #68]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dd3a:	4b10      	ldr	r3, [pc, #64]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dd40:	4b0e      	ldr	r3, [pc, #56]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dd46:	480d      	ldr	r0, [pc, #52]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd48:	f7f3 f950 	bl	8000fec <HAL_PCD_Init>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800dd52:	f7f2 fbf5 	bl	8000540 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dd56:	2180      	movs	r1, #128	; 0x80
 800dd58:	4808      	ldr	r0, [pc, #32]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd5a:	f7f4 fc08 	bl	800256e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dd5e:	2240      	movs	r2, #64	; 0x40
 800dd60:	2100      	movs	r1, #0
 800dd62:	4806      	ldr	r0, [pc, #24]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd64:	f7f4 fbbc 	bl	80024e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dd68:	2280      	movs	r2, #128	; 0x80
 800dd6a:	2101      	movs	r1, #1
 800dd6c:	4803      	ldr	r0, [pc, #12]	; (800dd7c <USBD_LL_Init+0x98>)
 800dd6e:	f7f4 fbb7 	bl	80024e0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800dd72:	2300      	movs	r3, #0
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	240006c0 	.word	0x240006c0
 800dd80:	40080000 	.word	0x40080000

0800dd84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7f3 fa4a 	bl	8001234 <HAL_PCD_Start>
 800dda0:	4603      	mov	r3, r0
 800dda2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dda4:	7bfb      	ldrb	r3, [r7, #15]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f000 f962 	bl	800e070 <USBD_Get_USB_Status>
 800ddac:	4603      	mov	r3, r0
 800ddae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	4608      	mov	r0, r1
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	4603      	mov	r3, r0
 800ddca:	70fb      	strb	r3, [r7, #3]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	70bb      	strb	r3, [r7, #2]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dde2:	78bb      	ldrb	r3, [r7, #2]
 800dde4:	883a      	ldrh	r2, [r7, #0]
 800dde6:	78f9      	ldrb	r1, [r7, #3]
 800dde8:	f7f3 ff48 	bl	8001c7c <HAL_PCD_EP_Open>
 800ddec:	4603      	mov	r3, r0
 800ddee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddf0:	7bfb      	ldrb	r3, [r7, #15]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f000 f93c 	bl	800e070 <USBD_Get_USB_Status>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b084      	sub	sp, #16
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	460b      	mov	r3, r1
 800de10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de12:	2300      	movs	r3, #0
 800de14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de16:	2300      	movs	r3, #0
 800de18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de20:	78fa      	ldrb	r2, [r7, #3]
 800de22:	4611      	mov	r1, r2
 800de24:	4618      	mov	r0, r3
 800de26:	f7f3 ff91 	bl	8001d4c <HAL_PCD_EP_Close>
 800de2a:	4603      	mov	r3, r0
 800de2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
 800de30:	4618      	mov	r0, r3
 800de32:	f000 f91d 	bl	800e070 <USBD_Get_USB_Status>
 800de36:	4603      	mov	r3, r0
 800de38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	460b      	mov	r3, r1
 800de4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de50:	2300      	movs	r3, #0
 800de52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de5e:	78fa      	ldrb	r2, [r7, #3]
 800de60:	4611      	mov	r1, r2
 800de62:	4618      	mov	r0, r3
 800de64:	f7f4 f954 	bl	8002110 <HAL_PCD_EP_Flush>
 800de68:	4603      	mov	r3, r0
 800de6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
 800de6e:	4618      	mov	r0, r3
 800de70:	f000 f8fe 	bl	800e070 <USBD_Get_USB_Status>
 800de74:	4603      	mov	r3, r0
 800de76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de78:	7bbb      	ldrb	r3, [r7, #14]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b084      	sub	sp, #16
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
 800de8a:	460b      	mov	r3, r1
 800de8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de8e:	2300      	movs	r3, #0
 800de90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de92:	2300      	movs	r3, #0
 800de94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de9c:	78fa      	ldrb	r2, [r7, #3]
 800de9e:	4611      	mov	r1, r2
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7f4 f84a 	bl	8001f3a <HAL_PCD_EP_SetStall>
 800dea6:	4603      	mov	r3, r0
 800dea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
 800deac:	4618      	mov	r0, r3
 800deae:	f000 f8df 	bl	800e070 <USBD_Get_USB_Status>
 800deb2:	4603      	mov	r3, r0
 800deb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	460b      	mov	r3, r1
 800deca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800deda:	78fa      	ldrb	r2, [r7, #3]
 800dedc:	4611      	mov	r1, r2
 800dede:	4618      	mov	r0, r3
 800dee0:	f7f4 f88f 	bl	8002002 <HAL_PCD_EP_ClrStall>
 800dee4:	4603      	mov	r3, r0
 800dee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dee8:	7bfb      	ldrb	r3, [r7, #15]
 800deea:	4618      	mov	r0, r3
 800deec:	f000 f8c0 	bl	800e070 <USBD_Get_USB_Status>
 800def0:	4603      	mov	r3, r0
 800def2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800def4:	7bbb      	ldrb	r3, [r7, #14]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800defe:	b480      	push	{r7}
 800df00:	b085      	sub	sp, #20
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
 800df06:	460b      	mov	r3, r1
 800df08:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df10:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800df12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df16:	2b00      	cmp	r3, #0
 800df18:	da0b      	bge.n	800df32 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800df1a:	78fb      	ldrb	r3, [r7, #3]
 800df1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df20:	68f9      	ldr	r1, [r7, #12]
 800df22:	4613      	mov	r3, r2
 800df24:	00db      	lsls	r3, r3, #3
 800df26:	4413      	add	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	440b      	add	r3, r1
 800df2c:	333e      	adds	r3, #62	; 0x3e
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	e00b      	b.n	800df4a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800df32:	78fb      	ldrb	r3, [r7, #3]
 800df34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df38:	68f9      	ldr	r1, [r7, #12]
 800df3a:	4613      	mov	r3, r2
 800df3c:	00db      	lsls	r3, r3, #3
 800df3e:	4413      	add	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	440b      	add	r3, r1
 800df44:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800df48:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3714      	adds	r7, #20
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr

0800df56 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df56:	b580      	push	{r7, lr}
 800df58:	b084      	sub	sp, #16
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
 800df5e:	460b      	mov	r3, r1
 800df60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df62:	2300      	movs	r3, #0
 800df64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df70:	78fa      	ldrb	r2, [r7, #3]
 800df72:	4611      	mov	r1, r2
 800df74:	4618      	mov	r0, r3
 800df76:	f7f3 fe5c 	bl	8001c32 <HAL_PCD_SetAddress>
 800df7a:	4603      	mov	r3, r0
 800df7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df7e:	7bfb      	ldrb	r3, [r7, #15]
 800df80:	4618      	mov	r0, r3
 800df82:	f000 f875 	bl	800e070 <USBD_Get_USB_Status>
 800df86:	4603      	mov	r3, r0
 800df88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	607a      	str	r2, [r7, #4]
 800df9e:	603b      	str	r3, [r7, #0]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dfb2:	7af9      	ldrb	r1, [r7, #11]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	f7f3 ff75 	bl	8001ea6 <HAL_PCD_EP_Transmit>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfc0:	7dfb      	ldrb	r3, [r7, #23]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f000 f854 	bl	800e070 <USBD_Get_USB_Status>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dfcc:	7dbb      	ldrb	r3, [r7, #22]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b086      	sub	sp, #24
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	60f8      	str	r0, [r7, #12]
 800dfde:	607a      	str	r2, [r7, #4]
 800dfe0:	603b      	str	r3, [r7, #0]
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dff4:	7af9      	ldrb	r1, [r7, #11]
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	f7f3 fef1 	bl	8001de0 <HAL_PCD_EP_Receive>
 800dffe:	4603      	mov	r3, r0
 800e000:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e002:	7dfb      	ldrb	r3, [r7, #23]
 800e004:	4618      	mov	r0, r3
 800e006:	f000 f833 	bl	800e070 <USBD_Get_USB_Status>
 800e00a:	4603      	mov	r3, r0
 800e00c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e00e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	460b      	mov	r3, r1
 800e022:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e02a:	78fa      	ldrb	r2, [r7, #3]
 800e02c:	4611      	mov	r1, r2
 800e02e:	4618      	mov	r0, r3
 800e030:	f7f3 ff21 	bl	8001e76 <HAL_PCD_EP_GetRxCount>
 800e034:	4603      	mov	r3, r0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
	...

0800e040 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e048:	4b03      	ldr	r3, [pc, #12]	; (800e058 <USBD_static_malloc+0x18>)
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	370c      	adds	r7, #12
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop
 800e058:	24000bcc 	.word	0x24000bcc

0800e05c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]

}
 800e064:	bf00      	nop
 800e066:	370c      	adds	r7, #12
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
 800e076:	4603      	mov	r3, r0
 800e078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e07a:	2300      	movs	r3, #0
 800e07c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e07e:	79fb      	ldrb	r3, [r7, #7]
 800e080:	2b03      	cmp	r3, #3
 800e082:	d817      	bhi.n	800e0b4 <USBD_Get_USB_Status+0x44>
 800e084:	a201      	add	r2, pc, #4	; (adr r2, 800e08c <USBD_Get_USB_Status+0x1c>)
 800e086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08a:	bf00      	nop
 800e08c:	0800e09d 	.word	0x0800e09d
 800e090:	0800e0a3 	.word	0x0800e0a3
 800e094:	0800e0a9 	.word	0x0800e0a9
 800e098:	0800e0af 	.word	0x0800e0af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]
    break;
 800e0a0:	e00b      	b.n	800e0ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e0a6:	e008      	b.n	800e0ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e0ac:	e005      	b.n	800e0ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e0b2:	e002      	b.n	800e0ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e0b4:	2303      	movs	r3, #3
 800e0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e0b8:	bf00      	nop
  }
  return usb_status;
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3714      	adds	r7, #20
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <__libc_init_array>:
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	4d0d      	ldr	r5, [pc, #52]	; (800e100 <__libc_init_array+0x38>)
 800e0cc:	4c0d      	ldr	r4, [pc, #52]	; (800e104 <__libc_init_array+0x3c>)
 800e0ce:	1b64      	subs	r4, r4, r5
 800e0d0:	10a4      	asrs	r4, r4, #2
 800e0d2:	2600      	movs	r6, #0
 800e0d4:	42a6      	cmp	r6, r4
 800e0d6:	d109      	bne.n	800e0ec <__libc_init_array+0x24>
 800e0d8:	4d0b      	ldr	r5, [pc, #44]	; (800e108 <__libc_init_array+0x40>)
 800e0da:	4c0c      	ldr	r4, [pc, #48]	; (800e10c <__libc_init_array+0x44>)
 800e0dc:	f000 f820 	bl	800e120 <_init>
 800e0e0:	1b64      	subs	r4, r4, r5
 800e0e2:	10a4      	asrs	r4, r4, #2
 800e0e4:	2600      	movs	r6, #0
 800e0e6:	42a6      	cmp	r6, r4
 800e0e8:	d105      	bne.n	800e0f6 <__libc_init_array+0x2e>
 800e0ea:	bd70      	pop	{r4, r5, r6, pc}
 800e0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0f0:	4798      	blx	r3
 800e0f2:	3601      	adds	r6, #1
 800e0f4:	e7ee      	b.n	800e0d4 <__libc_init_array+0xc>
 800e0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0fa:	4798      	blx	r3
 800e0fc:	3601      	adds	r6, #1
 800e0fe:	e7f2      	b.n	800e0e6 <__libc_init_array+0x1e>
 800e100:	0800e1c4 	.word	0x0800e1c4
 800e104:	0800e1c4 	.word	0x0800e1c4
 800e108:	0800e1c4 	.word	0x0800e1c4
 800e10c:	0800e1c8 	.word	0x0800e1c8

0800e110 <memset>:
 800e110:	4402      	add	r2, r0
 800e112:	4603      	mov	r3, r0
 800e114:	4293      	cmp	r3, r2
 800e116:	d100      	bne.n	800e11a <memset+0xa>
 800e118:	4770      	bx	lr
 800e11a:	f803 1b01 	strb.w	r1, [r3], #1
 800e11e:	e7f9      	b.n	800e114 <memset+0x4>

0800e120 <_init>:
 800e120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e122:	bf00      	nop
 800e124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e126:	bc08      	pop	{r3}
 800e128:	469e      	mov	lr, r3
 800e12a:	4770      	bx	lr

0800e12c <_fini>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	bf00      	nop
 800e130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e132:	bc08      	pop	{r3}
 800e134:	469e      	mov	lr, r3
 800e136:	4770      	bx	lr
