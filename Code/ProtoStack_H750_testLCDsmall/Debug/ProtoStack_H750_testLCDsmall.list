
ProtoStack_H750_testLCDsmall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000210  24000000  08003ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000210  08003ef0  00020210  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400027c  08003ef0  0002027c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d4e1  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d07  00000000  00000000  0002d71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a60  00000000  00000000  0002f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000968  00000000  00000000  0002fe88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035a99  00000000  00000000  000307f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e28d  00000000  00000000  00066289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001518f1  00000000  00000000  00074516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c5e07  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028fc  00000000  00000000  001c5e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000210 	.word	0x24000210
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003c74 	.word	0x08003c74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000214 	.word	0x24000214
 80002d4:	08003c74 	.word	0x08003c74

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002de:	4b19      	ldr	r3, [pc, #100]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002e4:	4a17      	ldr	r2, [pc, #92]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_GPIO_Init+0x6c>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000302:	4a10      	ldr	r2, [pc, #64]	; (8000344 <MX_GPIO_Init+0x6c>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <MX_GPIO_Init+0x6c>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MX_GPIO_Init+0x6c>)
 800031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_GPIO_Init+0x6c>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_GPIO_Init+0x6c>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]

}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	58024400 	.word	0x58024400

08000348 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_I2C1_Init+0x74>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <MX_I2C1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_I2C1_Init+0x74>)
 8000354:	4a1b      	ldr	r2, [pc, #108]	; (80003c4 <MX_I2C1_Init+0x7c>)
 8000356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_I2C1_Init+0x74>)
 8000360:	2201      	movs	r2, #1
 8000362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_I2C1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_I2C1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_I2C1_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_I2C1_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_I2C1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000382:	480e      	ldr	r0, [pc, #56]	; (80003bc <MX_I2C1_Init+0x74>)
 8000384:	f000 fe86 	bl	8001094 <HAL_I2C_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800038e:	f000 f93b 	bl	8000608 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000392:	2100      	movs	r1, #0
 8000394:	4809      	ldr	r0, [pc, #36]	; (80003bc <MX_I2C1_Init+0x74>)
 8000396:	f001 fb67 	bl	8001a68 <HAL_I2CEx_ConfigAnalogFilter>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003a0:	f000 f932 	bl	8000608 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a4:	2100      	movs	r1, #0
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_I2C1_Init+0x74>)
 80003a8:	f001 fba9 	bl	8001afe <HAL_I2CEx_ConfigDigitalFilter>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003b2:	f000 f929 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	2400022c 	.word	0x2400022c
 80003c0:	40005400 	.word	0x40005400
 80003c4:	307075b1 	.word	0x307075b1

080003c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b0b8      	sub	sp, #224	; 0xe0
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	22bc      	movs	r2, #188	; 0xbc
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f003 fc3b 	bl	8003c64 <memset>
  if(i2cHandle->Instance==I2C1)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a24      	ldr	r2, [pc, #144]	; (8000484 <HAL_I2C_MspInit+0xbc>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d141      	bne.n	800047c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003f8:	2308      	movs	r3, #8
 80003fa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fb5e 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000412:	f000 f8f9 	bl	8000608 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <HAL_I2C_MspInit+0xc0>)
 8000418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800041c:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <HAL_I2C_MspInit+0xc0>)
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <HAL_I2C_MspInit+0xc0>)
 8000428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800042c:	f003 0302 	and.w	r3, r3, #2
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000434:	23c0      	movs	r3, #192	; 0xc0
 8000436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800043a:	2312      	movs	r3, #18
 800043c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000440:	2301      	movs	r3, #1
 8000442:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2300      	movs	r3, #0
 8000448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800044c:	2304      	movs	r3, #4
 800044e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000452:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000456:	4619      	mov	r1, r3
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <HAL_I2C_MspInit+0xc4>)
 800045a:	f000 fc6b 	bl	8000d34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_I2C_MspInit+0xc0>)
 8000460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000464:	4a08      	ldr	r2, [pc, #32]	; (8000488 <HAL_I2C_MspInit+0xc0>)
 8000466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800046a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <HAL_I2C_MspInit+0xc0>)
 8000470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800047c:	bf00      	nop
 800047e:	37e0      	adds	r7, #224	; 0xe0
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40005400 	.word	0x40005400
 8000488:	58024400 	.word	0x58024400
 800048c:	58020400 	.word	0x58020400

08000490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000494:	f000 faa8 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000498:	f000 f808 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f7ff ff1c 	bl	80002d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a0:	f7ff ff52 	bl	8000348 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1305_Init();
 80004a4:	f000 fa08 	bl	80008b8 <ssd1305_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <main+0x18>
	...

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b09e      	sub	sp, #120	; 0x78
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004b6:	224c      	movs	r2, #76	; 0x4c
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 fbd2 	bl	8003c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	2220      	movs	r2, #32
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f003 fbcb 	bl	8003c64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004ce:	2002      	movs	r0, #2
 80004d0:	f001 fb62 	bl	8001b98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d4:	2300      	movs	r3, #0
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	4b48      	ldr	r3, [pc, #288]	; (80005fc <SystemClock_Config+0x150>)
 80004da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004dc:	4a47      	ldr	r2, [pc, #284]	; (80005fc <SystemClock_Config+0x150>)
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004e4:	4b45      	ldr	r3, [pc, #276]	; (80005fc <SystemClock_Config+0x150>)
 80004e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	4b44      	ldr	r3, [pc, #272]	; (8000600 <SystemClock_Config+0x154>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a43      	ldr	r2, [pc, #268]	; (8000600 <SystemClock_Config+0x154>)
 80004f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b41      	ldr	r3, [pc, #260]	; (8000600 <SystemClock_Config+0x154>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000506:	bf00      	nop
 8000508:	4b3d      	ldr	r3, [pc, #244]	; (8000600 <SystemClock_Config+0x154>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000514:	d1f8      	bne.n	8000508 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b3b      	ldr	r3, [pc, #236]	; (8000604 <SystemClock_Config+0x158>)
 8000518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800051c:	4a39      	ldr	r2, [pc, #228]	; (8000604 <SystemClock_Config+0x158>)
 800051e:	f043 0302 	orr.w	r3, r3, #2
 8000522:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <SystemClock_Config+0x158>)
 8000528:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800052c:	f003 0302 	and.w	r3, r3, #2
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000534:	2300      	movs	r3, #0
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	4b31      	ldr	r3, [pc, #196]	; (8000600 <SystemClock_Config+0x154>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a30      	ldr	r2, [pc, #192]	; (8000600 <SystemClock_Config+0x154>)
 800053e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <SystemClock_Config+0x154>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <SystemClock_Config+0x150>)
 8000550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000552:	4a2a      	ldr	r2, [pc, #168]	; (80005fc <SystemClock_Config+0x150>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	62d3      	str	r3, [r2, #44]	; 0x2c
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0x150>)
 800055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000566:	bf00      	nop
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0x154>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000574:	d1f8      	bne.n	8000568 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000576:	2301      	movs	r3, #1
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000584:	2302      	movs	r3, #2
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 800058c:	23a0      	movs	r3, #160	; 0xa0
 800058e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000594:	2302      	movs	r3, #2
 8000596:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000598:	2302      	movs	r3, #2
 800059a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800059c:	2308      	movs	r3, #8
 800059e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fb2d 	bl	8001c0c <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x110>
  {
    Error_Handler();
 80005b8:	f000 f826 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	233f      	movs	r3, #63	; 0x3f
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2303      	movs	r3, #3
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005c8:	2308      	movs	r3, #8
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005cc:	2340      	movs	r3, #64	; 0x40
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2104      	movs	r1, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 ff3f 	bl	8002468 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80005f0:	f000 f80a 	bl	8000608 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3778      	adds	r7, #120	; 0x78
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	58000400 	.word	0x58000400
 8000600:	58024800 	.word	0x58024800
 8000604:	58024400 	.word	0x58024400

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_MspInit+0x30>)
 800061c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <HAL_MspInit+0x30>)
 8000622:	f043 0302 	orr.w	r3, r3, #2
 8000626:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_MspInit+0x30>)
 800062c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	58024400 	.word	0x58024400

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 fa1a 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <SystemInit+0xe4>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a36      	ldr	r2, [pc, #216]	; (8000780 <SystemInit+0xe4>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0xe8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b31      	ldr	r3, [pc, #196]	; (8000784 <SystemInit+0xe8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a2f      	ldr	r2, [pc, #188]	; (8000784 <SystemInit+0xe8>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0xec>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a2d      	ldr	r2, [pc, #180]	; (8000788 <SystemInit+0xec>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0xec>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <SystemInit+0xec>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4929      	ldr	r1, [pc, #164]	; (8000788 <SystemInit+0xec>)
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0xf0>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0xe8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d007      	beq.n	8000706 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0xe8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemInit+0xe8>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0xec>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0xec>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0xec>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0xec>)
 800071a:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <SystemInit+0xf4>)
 800071c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0xec>)
 8000720:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <SystemInit+0xf8>)
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0xec>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0xfc>)
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0xec>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0xec>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0xfc>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0xec>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0xec>)
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <SystemInit+0xfc>)
 8000740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <SystemInit+0xec>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0xec>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <SystemInit+0xec>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <SystemInit+0xec>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <SystemInit+0x100>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <SystemInit+0x104>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <SystemInit+0x108>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <SystemInit+0x10c>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b0:	f7ff ff74 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f003 fa1f 	bl	8003c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007de:	f7ff fe57 	bl	8000490 <main>
  bx  lr
 80007e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007ec:	24000210 	.word	0x24000210
  ldr r2, =_sidata
 80007f0:	08003ce0 	.word	0x08003ce0
  ldr r2, =_sbss
 80007f4:	24000210 	.word	0x24000210
  ldr r4, =_ebss
 80007f8:	2400027c 	.word	0x2400027c

080007fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC3_IRQHandler>
	...

08000800 <oled_command>:
0x81,0xBF,0xBE,0x80,0x9E,0xBF,0xA1,0xB3,0x92,0x80,0xBF,0xBF,0x81,0x81,0xBF,0xBE,
0x80,0x9E,0xBF,0xA5,0xA5,0xB7,0x96,0x80,0x96,0xB7,0xAD,0xAD,0xBB,0x9A,0x80,0xFF
};


void oled_command(uint8_t cmd) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af04      	add	r7, sp, #16
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpcmd = cmd;
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	73bb      	strb	r3, [r7, #14]
	uint8_t ctrl = { SSD1305_NOCONTINUE_BIT | SSD1305_CMD_BIT }; // Co = 1, D/C = 0
 800080e:	2300      	movs	r3, #0
 8000810:	73fb      	strb	r3, [r7, #15]
	while (HAL_OK != HAL_I2C_Mem_Write(&hi2c1, SSD1305_ADDRESS, ctrl, I2C_MEMADD_SIZE_8BIT, &tmpcmd, 1, 1))
 8000812:	bf00      	nop
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	b29a      	uxth	r2, r3
 8000818:	2301      	movs	r3, #1
 800081a:	9302      	str	r3, [sp, #8]
 800081c:	2301      	movs	r3, #1
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	f107 030e 	add.w	r3, r7, #14
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2178      	movs	r1, #120	; 0x78
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <oled_command+0x40>)
 800082c:	f000 fdb6 	bl	800139c <HAL_I2C_Mem_Write>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1ee      	bne.n	8000814 <oled_command+0x14>
		;
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2400022c 	.word	0x2400022c

08000844 <oled_commandList>:

void oled_commandList(uint8_t *c, uint8_t n) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
	while (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, SSD1305_ADDRESS, c, n, 10))
 8000850:	bf00      	nop
 8000852:	78fb      	ldrb	r3, [r7, #3]
 8000854:	b29b      	uxth	r3, r3
 8000856:	220a      	movs	r2, #10
 8000858:	9200      	str	r2, [sp, #0]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	2178      	movs	r1, #120	; 0x78
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <oled_commandList+0x30>)
 8000860:	f000 fca8 	bl	80011b4 <HAL_I2C_Master_Transmit>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f3      	bne.n	8000852 <oled_commandList+0xe>
		;
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2400022c 	.word	0x2400022c

08000878 <oled_data>:

void oled_data(uint8_t* pData, uint16_t size) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af04      	add	r7, sp, #16
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	807b      	strh	r3, [r7, #2]
	uint8_t ctrl = SSD1305_NOCONTINUE_BIT | SSD1305_DATA_BIT; // Co = 0, D/C = 1
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	73fb      	strb	r3, [r7, #15]
	while (HAL_OK != HAL_I2C_Mem_Write(&hi2c1, SSD1305_ADDRESS, ctrl, I2C_MEMADD_SIZE_8BIT, pData, size, 200))
 8000888:	bf00      	nop
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	b29a      	uxth	r2, r3
 800088e:	23c8      	movs	r3, #200	; 0xc8
 8000890:	9302      	str	r3, [sp, #8]
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2301      	movs	r3, #1
 800089c:	2178      	movs	r1, #120	; 0x78
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <oled_data+0x3c>)
 80008a0:	f000 fd7c 	bl	800139c <HAL_I2C_Mem_Write>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1ef      	bne.n	800088a <oled_data+0x12>
		;
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2400022c 	.word	0x2400022c

080008b8 <ssd1305_Init>:
//void oled_data_stream(const uint8_t d) {
//	uint8_t tmp[2] = {SSD1305_NOCONTINUE_BIT | SSD1305_DATA_BIT, d}; // Co = 0, D/C = 0
//	HAL_I2C_Master_Transmit(&hi2c1, SSD1305_ADDR_WRITE, tmp, 2, 1);
//}

void ssd1305_Init(void) {
 80008b8:	b5b0      	push	{r4, r5, r7, lr}
 80008ba:	b090      	sub	sp, #64	; 0x40
 80008bc:	af00      	add	r7, sp, #0
	// Init sequence, make sure its under 32 bytes, or split into multiples!
	uint8_t init_128x32[] = {
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <ssd1305_Init+0x44>)
 80008c0:	1d3c      	adds	r4, r7, #4
 80008c2:	461d      	mov	r5, r3
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d4:	c403      	stmia	r4!, {r0, r1}
 80008d6:	8022      	strh	r2, [r4, #0]
			0x80,
			0xaf
			};


	oled_commandList(init_128x32, sizeof(init_128x32));
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	213a      	movs	r1, #58	; 0x3a
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ffb1 	bl	8000844 <oled_commandList>

	HAL_Delay(100);                      		// 100ms delay recommended
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f000 f912 	bl	8000b0c <HAL_Delay>
	oled_command(SSD1305_DISPLAYON); 			// 0xaf
 80008e8:	20af      	movs	r0, #175	; 0xaf
 80008ea:	f7ff ff89 	bl	8000800 <oled_command>
//  setContrast(0x2F);
	// fill
//	for (int i = 0; i < (132 * 32); i++)
//		oled_data(0xFF);
	//drawBitmap((SSD1305_HEIGHT - splash2_width) / 2, (SSD1305_HEIGHT - splash2_height) / 2, splash2_data, splash2_width, splash2_height, 1);
	Display_Picture(picture);
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <ssd1305_Init+0x48>)
 80008f0:	f000 f808 	bl	8000904 <Display_Picture>
}
 80008f4:	bf00      	nop
 80008f6:	3740      	adds	r7, #64	; 0x40
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bdb0      	pop	{r4, r5, r7, pc}
 80008fc:	08003c8c 	.word	0x08003c8c
 8000900:	24000008 	.word	0x24000008

08000904 <Display_Picture>:

void Display_Picture(uint8_t* pic)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0a4      	sub	sp, #144	; 0x90
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    uint8_t i,j=0;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    uint8_t pictmp[0x80];
	for(i=0;i<0x04;i++)
 8000912:	2300      	movs	r3, #0
 8000914:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000918:	e02f      	b.n	800097a <Display_Picture+0x76>
	{
	Set_Page_Address(i);
 800091a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f833 	bl	800098a <Set_Page_Address>
    Set_Column_Address(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f000 f841 	bl	80009ac <Set_Column_Address>
        for(j=0;j<0x80;j++)
 800092a:	2300      	movs	r3, #0
 800092c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000930:	e014      	b.n	800095c <Display_Picture+0x58>
		{
        	pictmp[j] = pic[i*0x80+j];
 8000932:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000936:	01da      	lsls	r2, r3, #7
 8000938:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800093c:	4413      	add	r3, r2
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	441a      	add	r2, r3
 8000944:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	3390      	adds	r3, #144	; 0x90
 800094c:	443b      	add	r3, r7
 800094e:	f803 2c84 	strb.w	r2, [r3, #-132]
        for(j=0;j<0x80;j++)
 8000952:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000956:	3301      	adds	r3, #1
 8000958:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800095c:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8000960:	2b00      	cmp	r3, #0
 8000962:	dae6      	bge.n	8000932 <Display_Picture+0x2e>
		}
        oled_data(pictmp,0x80);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff84 	bl	8000878 <oled_data>
	for(i=0;i<0x04;i++)
 8000970:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000974:	3301      	adds	r3, #1
 8000976:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800097a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800097e:	2b03      	cmp	r3, #3
 8000980:	d9cb      	bls.n	800091a <Display_Picture+0x16>
//		tmp[i] = 0xff;
//	}
//		Set_Page_Address(0x00);
//	    Set_Column_Address(0x00);
//	oled_data(tmp,sz);
    return;
 8000982:	bf00      	nop
}
 8000984:	3790      	adds	r7, #144	; 0x90
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <Set_Page_Address>:

// Set page address 0~4
void Set_Page_Address(uint8_t add)
{	add=0xb0|add;
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800099a:	71fb      	strb	r3, [r7, #7]
 	oled_command(add);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff2e 	bl	8000800 <oled_command>
	return;
 80009a4:	bf00      	nop
}
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Set_Column_Address>:

void Set_Column_Address(uint8_t add)
{	uint8_t tmp = (0x10|(add>>4));
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	091b      	lsrs	r3, r3, #4
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	73fb      	strb	r3, [r7, #15]
	oled_command(tmp);
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff1b 	bl	8000800 <oled_command>
	tmp = (0x0f&add)|0x04;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 030b 	and.w	r3, r3, #11
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	73fb      	strb	r3, [r7, #15]
	oled_command(tmp);
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff10 	bl	8000800 <oled_command>
	return;
 80009e0:	bf00      	nop
}
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f96e 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009f4:	f001 feee 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80009f8:	4602      	mov	r2, r0
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_Init+0x68>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	0a1b      	lsrs	r3, r3, #8
 8000a00:	f003 030f 	and.w	r3, r3, #15
 8000a04:	4913      	ldr	r1, [pc, #76]	; (8000a54 <HAL_Init+0x6c>)
 8000a06:	5ccb      	ldrb	r3, [r1, r3]
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_Init+0x68>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_Init+0x6c>)
 8000a1c:	5cd3      	ldrb	r3, [r2, r3]
 8000a1e:	f003 031f 	and.w	r3, r3, #31
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	fa22 f303 	lsr.w	r3, r2, r3
 8000a28:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <HAL_Init+0x70>)
 8000a2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <HAL_Init+0x74>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a32:	200f      	movs	r0, #15
 8000a34:	f000 f814 	bl	8000a60 <HAL_InitTick>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e002      	b.n	8000a48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a42:	f7ff fde7 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58024400 	.word	0x58024400
 8000a54:	08003cc8 	.word	0x08003cc8
 8000a58:	24000004 	.word	0x24000004
 8000a5c:	24000000 	.word	0x24000000

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_InitTick+0x60>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e021      	b.n	8000ab8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <HAL_InitTick+0x64>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_InitTick+0x60>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f945 	bl	8000d1a <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f000 f91d 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x68>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2400020c 	.word	0x2400020c
 8000ac4:	24000000 	.word	0x24000000
 8000ac8:	24000208 	.word	0x24000208

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	2400020c 	.word	0x2400020c
 8000af0:	24000278 	.word	0x24000278

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	24000278 	.word	0x24000278

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff ffee 	bl	8000af4 <HAL_GetTick>
 8000b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_Delay+0x44>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b32:	bf00      	nop
 8000b34:	f7ff ffde 	bl	8000af4 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2400020c 	.word	0x2400020c

08000b54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetREVID+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	0c1b      	lsrs	r3, r3, #16
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	5c001000 	.word	0x5c001000

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <__NVIC_SetPriorityGrouping+0x40>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x40>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	05fa0000 	.word	0x05fa0000

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff47 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff5e 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff90 	bl	8000c24 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5f 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffb2 	bl	8000c8c <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d42:	4b89      	ldr	r3, [pc, #548]	; (8000f68 <HAL_GPIO_Init+0x234>)
 8000d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d46:	e194      	b.n	8001072 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 8186 	beq.w	800106c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d005      	beq.n	8000d78 <HAL_GPIO_Init+0x44>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d017      	beq.n	8000e16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d123      	bne.n	8000e6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	69b9      	ldr	r1, [r7, #24]
 8000e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0203 	and.w	r2, r3, #3
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80e0 	beq.w	800106c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <HAL_GPIO_Init+0x238>)
 8000eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb2:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <HAL_GPIO_Init+0x238>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_GPIO_Init+0x238>)
 8000ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <HAL_GPIO_Init+0x23c>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <HAL_GPIO_Init+0x240>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d052      	beq.n	8000f9c <HAL_GPIO_Init+0x268>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <HAL_GPIO_Init+0x244>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d031      	beq.n	8000f62 <HAL_GPIO_Init+0x22e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_GPIO_Init+0x248>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d02b      	beq.n	8000f5e <HAL_GPIO_Init+0x22a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <HAL_GPIO_Init+0x24c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d025      	beq.n	8000f5a <HAL_GPIO_Init+0x226>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_GPIO_Init+0x250>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x222>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_GPIO_Init+0x254>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x21e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <HAL_GPIO_Init+0x258>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x21a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x25c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x216>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_GPIO_Init+0x260>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_GPIO_Init+0x264>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x20e>
 8000f3e:	2309      	movs	r3, #9
 8000f40:	e02d      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f42:	230a      	movs	r3, #10
 8000f44:	e02b      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f46:	2308      	movs	r3, #8
 8000f48:	e029      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e027      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e025      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f52:	2305      	movs	r3, #5
 8000f54:	e023      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f56:	2304      	movs	r3, #4
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e01f      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e01d      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e01b      	b.n	8000f9e <HAL_GPIO_Init+0x26a>
 8000f66:	bf00      	nop
 8000f68:	58000080 	.word	0x58000080
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	58000400 	.word	0x58000400
 8000f74:	58020000 	.word	0x58020000
 8000f78:	58020400 	.word	0x58020400
 8000f7c:	58020800 	.word	0x58020800
 8000f80:	58020c00 	.word	0x58020c00
 8000f84:	58021000 	.word	0x58021000
 8000f88:	58021400 	.word	0x58021400
 8000f8c:	58021800 	.word	0x58021800
 8000f90:	58021c00 	.word	0x58021c00
 8000f94:	58022000 	.word	0x58022000
 8000f98:	58022400 	.word	0x58022400
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fae:	4938      	ldr	r1, [pc, #224]	; (8001090 <HAL_GPIO_Init+0x35c>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	3301      	adds	r3, #1
 8001070:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	f47f ae63 	bne.w	8000d48 <HAL_GPIO_Init+0x14>
  }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3724      	adds	r7, #36	; 0x24
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	58000400 	.word	0x58000400

08001094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e07f      	b.n	80011a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d106      	bne.n	80010c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff f984 	bl	80003c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2224      	movs	r2, #36	; 0x24
 80010c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	e006      	b.n	800111c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800111a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d104      	bne.n	800112e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800112c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6859      	ldr	r1, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_I2C_Init+0x11c>)
 800113a:	430b      	orrs	r3, r1
 800113c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800114c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69d9      	ldr	r1, [r3, #28]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2220      	movs	r2, #32
 8001192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	02008000 	.word	0x02008000

080011b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	461a      	mov	r2, r3
 80011c0:	460b      	mov	r3, r1
 80011c2:	817b      	strh	r3, [r7, #10]
 80011c4:	4613      	mov	r3, r2
 80011c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	f040 80da 	bne.w	800138a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_I2C_Master_Transmit+0x30>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e0d3      	b.n	800138c <HAL_I2C_Master_Transmit+0x1d8>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011ec:	f7ff fc82 	bl	8000af4 <HAL_GetTick>
 80011f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2319      	movs	r3, #25
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 fa58 	bl	80016b4 <I2C_WaitOnFlagUntilTimeout>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e0be      	b.n	800138c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2221      	movs	r2, #33	; 0x21
 8001212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2210      	movs	r2, #16
 800121a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	893a      	ldrh	r2, [r7, #8]
 800122e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123a:	b29b      	uxth	r3, r3
 800123c:	2bff      	cmp	r3, #255	; 0xff
 800123e:	d90e      	bls.n	800125e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	22ff      	movs	r2, #255	; 0xff
 8001244:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124a:	b2da      	uxtb	r2, r3
 800124c:	8979      	ldrh	r1, [r7, #10]
 800124e:	4b51      	ldr	r3, [pc, #324]	; (8001394 <HAL_I2C_Master_Transmit+0x1e0>)
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 fbd4 	bl	8001a04 <I2C_TransferConfig>
 800125c:	e06c      	b.n	8001338 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001262:	b29a      	uxth	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126c:	b2da      	uxtb	r2, r3
 800126e:	8979      	ldrh	r1, [r7, #10]
 8001270:	4b48      	ldr	r3, [pc, #288]	; (8001394 <HAL_I2C_Master_Transmit+0x1e0>)
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 fbc3 	bl	8001a04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800127e:	e05b      	b.n	8001338 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	6a39      	ldr	r1, [r7, #32]
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fa55 	bl	8001734 <I2C_WaitOnTXISFlagUntilTimeout>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e07b      	b.n	800138c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012bc:	3b01      	subs	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d034      	beq.n	8001338 <HAL_I2C_Master_Transmit+0x184>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d130      	bne.n	8001338 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	2200      	movs	r2, #0
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 f9e7 	bl	80016b4 <I2C_WaitOnFlagUntilTimeout>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e04d      	b.n	800138c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	2bff      	cmp	r3, #255	; 0xff
 80012f8:	d90e      	bls.n	8001318 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	22ff      	movs	r2, #255	; 0xff
 80012fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001304:	b2da      	uxtb	r2, r3
 8001306:	8979      	ldrh	r1, [r7, #10]
 8001308:	2300      	movs	r3, #0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f000 fb77 	bl	8001a04 <I2C_TransferConfig>
 8001316:	e00f      	b.n	8001338 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001326:	b2da      	uxtb	r2, r3
 8001328:	8979      	ldrh	r1, [r7, #10]
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 fb66 	bl	8001a04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133c:	b29b      	uxth	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d19e      	bne.n	8001280 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	6a39      	ldr	r1, [r7, #32]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 fa34 	bl	80017b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e01a      	b.n	800138c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2220      	movs	r2, #32
 800135c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_I2C_Master_Transmit+0x1e4>)
 800136a:	400b      	ands	r3, r1
 800136c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2220      	movs	r2, #32
 8001372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800138a:	2302      	movs	r3, #2
  }
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	80002000 	.word	0x80002000
 8001398:	fe00e800 	.word	0xfe00e800

0800139c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	817b      	strh	r3, [r7, #10]
 80013ae:	460b      	mov	r3, r1
 80013b0:	813b      	strh	r3, [r7, #8]
 80013b2:	4613      	mov	r3, r2
 80013b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b20      	cmp	r3, #32
 80013c0:	f040 80f9 	bne.w	80015b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <HAL_I2C_Mem_Write+0x34>
 80013ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0ed      	b.n	80015b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_I2C_Mem_Write+0x4e>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e0e6      	b.n	80015b8 <HAL_I2C_Mem_Write+0x21c>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013f2:	f7ff fb7f 	bl	8000af4 <HAL_GetTick>
 80013f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2319      	movs	r3, #25
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 f955 	bl	80016b4 <I2C_WaitOnFlagUntilTimeout>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0d1      	b.n	80015b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2221      	movs	r2, #33	; 0x21
 8001418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2240      	movs	r2, #64	; 0x40
 8001420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a3a      	ldr	r2, [r7, #32]
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2200      	movs	r2, #0
 800143a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800143c:	88f8      	ldrh	r0, [r7, #6]
 800143e:	893a      	ldrh	r2, [r7, #8]
 8001440:	8979      	ldrh	r1, [r7, #10]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4603      	mov	r3, r0
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 f8b9 	bl	80015c4 <I2C_RequestMemoryWrite>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0a9      	b.n	80015b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001468:	b29b      	uxth	r3, r3
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d90e      	bls.n	800148c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001478:	b2da      	uxtb	r2, r3
 800147a:	8979      	ldrh	r1, [r7, #10]
 800147c:	2300      	movs	r3, #0
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f000 fabd 	bl	8001a04 <I2C_TransferConfig>
 800148a:	e00f      	b.n	80014ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149a:	b2da      	uxtb	r2, r3
 800149c:	8979      	ldrh	r1, [r7, #10]
 800149e:	2300      	movs	r3, #0
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 faac 	bl	8001a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f93f 	bl	8001734 <I2C_WaitOnTXISFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e07b      	b.n	80015b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d034      	beq.n	8001564 <HAL_I2C_Mem_Write+0x1c8>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d130      	bne.n	8001564 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	2200      	movs	r2, #0
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 f8d1 	bl	80016b4 <I2C_WaitOnFlagUntilTimeout>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e04d      	b.n	80015b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	2bff      	cmp	r3, #255	; 0xff
 8001524:	d90e      	bls.n	8001544 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	22ff      	movs	r2, #255	; 0xff
 800152a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	b2da      	uxtb	r2, r3
 8001532:	8979      	ldrh	r1, [r7, #10]
 8001534:	2300      	movs	r3, #0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fa61 	bl	8001a04 <I2C_TransferConfig>
 8001542:	e00f      	b.n	8001564 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001548:	b29a      	uxth	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001552:	b2da      	uxtb	r2, r3
 8001554:	8979      	ldrh	r1, [r7, #10]
 8001556:	2300      	movs	r3, #0
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 fa50 	bl	8001a04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d19e      	bne.n	80014ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f91e 	bl	80017b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e01a      	b.n	80015b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2220      	movs	r2, #32
 8001588:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_I2C_Mem_Write+0x224>)
 8001596:	400b      	ands	r3, r1
 8001598:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015b6:	2302      	movs	r3, #2
  }
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	fe00e800 	.word	0xfe00e800

080015c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4603      	mov	r3, r0
 80015d4:	817b      	strh	r3, [r7, #10]
 80015d6:	460b      	mov	r3, r1
 80015d8:	813b      	strh	r3, [r7, #8]
 80015da:	4613      	mov	r3, r2
 80015dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	8979      	ldrh	r1, [r7, #10]
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <I2C_RequestMemoryWrite+0xa4>)
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 fa09 	bl	8001a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	69b9      	ldr	r1, [r7, #24]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 f89c 	bl	8001734 <I2C_WaitOnTXISFlagUntilTimeout>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e02c      	b.n	8001660 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800160c:	893b      	ldrh	r3, [r7, #8]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
 8001616:	e015      	b.n	8001644 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001618:	893b      	ldrh	r3, [r7, #8]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b29b      	uxth	r3, r3
 800161e:	b2da      	uxtb	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	69b9      	ldr	r1, [r7, #24]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f882 	bl	8001734 <I2C_WaitOnTXISFlagUntilTimeout>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e012      	b.n	8001660 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800163a:	893b      	ldrh	r3, [r7, #8]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2200      	movs	r2, #0
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 f830 	bl	80016b4 <I2C_WaitOnFlagUntilTimeout>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	80002000 	.word	0x80002000

0800166c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d103      	bne.n	800168a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d007      	beq.n	80016a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	619a      	str	r2, [r3, #24]
  }
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016c4:	e022      	b.n	800170c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d01e      	beq.n	800170c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ce:	f7ff fa11 	bl	8000af4 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d302      	bcc.n	80016e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d113      	bne.n	800170c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f043 0220 	orr.w	r2, r3, #32
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2220      	movs	r2, #32
 80016f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e00f      	b.n	800172c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4013      	ands	r3, r2
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	429a      	cmp	r2, r3
 800171a:	bf0c      	ite	eq
 800171c:	2301      	moveq	r3, #1
 800171e:	2300      	movne	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	429a      	cmp	r2, r3
 8001728:	d0cd      	beq.n	80016c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001740:	e02c      	b.n	800179c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f870 	bl	800182c <I2C_IsErrorOccurred>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e02a      	b.n	80017ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d01e      	beq.n	800179c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800175e:	f7ff f9c9 	bl	8000af4 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	429a      	cmp	r2, r3
 800176c:	d302      	bcc.n	8001774 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d113      	bne.n	800179c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	f043 0220 	orr.w	r2, r3, #32
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2220      	movs	r2, #32
 8001784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e007      	b.n	80017ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d1cb      	bne.n	8001742 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017c0:	e028      	b.n	8001814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f830 	bl	800182c <I2C_IsErrorOccurred>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e026      	b.n	8001824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d6:	f7ff f98d 	bl	8000af4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d302      	bcc.n	80017ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d113      	bne.n	8001814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	f043 0220 	orr.w	r2, r3, #32
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e007      	b.n	8001824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	2b20      	cmp	r3, #32
 8001820:	d1cf      	bne.n	80017c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b00      	cmp	r3, #0
 8001856:	d075      	beq.n	8001944 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2210      	movs	r2, #16
 800185e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001860:	e056      	b.n	8001910 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d052      	beq.n	8001910 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800186a:	f7ff f943 	bl	8000af4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	429a      	cmp	r2, r3
 8001878:	d302      	bcc.n	8001880 <I2C_IsErrorOccurred+0x54>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d147      	bne.n	8001910 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001892:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800189e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018a2:	d12e      	bne.n	8001902 <I2C_IsErrorOccurred+0xd6>
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018aa:	d02a      	beq.n	8001902 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80018ac:	7cfb      	ldrb	r3, [r7, #19]
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d027      	beq.n	8001902 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018c0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018c2:	f7ff f917 	bl	8000af4 <HAL_GetTick>
 80018c6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c8:	e01b      	b.n	8001902 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018ca:	f7ff f913 	bl	8000af4 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b19      	cmp	r3, #25
 80018d6:	d914      	bls.n	8001902 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f043 0220 	orr.w	r2, r3, #32
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b20      	cmp	r3, #32
 800190e:	d1dc      	bne.n	80018ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	2b20      	cmp	r3, #32
 800191c:	d003      	beq.n	8001926 <I2C_IsErrorOccurred+0xfa>
 800191e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001922:	2b00      	cmp	r3, #0
 8001924:	d09d      	beq.n	8001862 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2220      	movs	r2, #32
 8001934:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00b      	beq.n	8001990 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80019b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01c      	beq.n	80019f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff fe56 	bl	800166c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <I2C_IsErrorOccurred+0x1d4>)
 80019cc:	400b      	ands	r3, r1
 80019ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80019f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	fe00e800 	.word	0xfe00e800

08001a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	817b      	strh	r3, [r7, #10]
 8001a12:	4613      	mov	r3, r2
 8001a14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a16:	897b      	ldrh	r3, [r7, #10]
 8001a18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a1c:	7a7b      	ldrb	r3, [r7, #9]
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a24:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a32:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	0d5b      	lsrs	r3, r3, #21
 8001a3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <I2C_TransferConfig+0x60>)
 8001a44:	430b      	orrs	r3, r1
 8001a46:	43db      	mvns	r3, r3
 8001a48:	ea02 0103 	and.w	r1, r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	03ff63ff 	.word	0x03ff63ff

08001a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d138      	bne.n	8001af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e032      	b.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d139      	bne.n	8001b88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e033      	b.n	8001b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2224      	movs	r2, #36	; 0x24
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_PWREx_ConfigSupply+0x70>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d00a      	beq.n	8001bc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_PWREx_ConfigSupply+0x70>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d001      	beq.n	8001bbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e01f      	b.n	8001bfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e01d      	b.n	8001bfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_PWREx_ConfigSupply+0x70>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	490f      	ldr	r1, [pc, #60]	; (8001c08 <HAL_PWREx_ConfigSupply+0x70>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001bd2:	f7fe ff8f 	bl	8000af4 <HAL_GetTick>
 8001bd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bd8:	e009      	b.n	8001bee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bda:	f7fe ff8b 	bl	8000af4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001be8:	d901      	bls.n	8001bee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e007      	b.n	8001bfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_PWREx_ConfigSupply+0x70>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bfa:	d1ee      	bne.n	8001bda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	58024800 	.word	0x58024800

08001c0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f000 bc1d 	b.w	800245a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8087 	beq.w	8001d3c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2e:	4b99      	ldr	r3, [pc, #612]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c38:	4b96      	ldr	r3, [pc, #600]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	2b10      	cmp	r3, #16
 8001c42:	d007      	beq.n	8001c54 <HAL_RCC_OscConfig+0x48>
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	2b18      	cmp	r3, #24
 8001c48:	d110      	bne.n	8001c6c <HAL_RCC_OscConfig+0x60>
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d10b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	4b8f      	ldr	r3, [pc, #572]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d06c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x12e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d168      	bne.n	8001d3a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e3f6      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d106      	bne.n	8001c84 <HAL_RCC_OscConfig+0x78>
 8001c76:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a86      	ldr	r2, [pc, #536]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e02e      	b.n	8001ce2 <HAL_RCC_OscConfig+0xd6>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x9a>
 8001c8c:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a80      	ldr	r2, [pc, #512]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a7d      	ldr	r2, [pc, #500]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	e01d      	b.n	8001ce2 <HAL_RCC_OscConfig+0xd6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0xbe>
 8001cb0:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a77      	ldr	r2, [pc, #476]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001cb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a74      	ldr	r2, [pc, #464]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCC_OscConfig+0xd6>
 8001cca:	4b72      	ldr	r3, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a71      	ldr	r2, [pc, #452]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6e      	ldr	r2, [pc, #440]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d013      	beq.n	8001d12 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7fe ff03 	bl	8000af4 <HAL_GetTick>
 8001cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf2:	f7fe feff 	bl	8000af4 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b64      	cmp	r3, #100	; 0x64
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e3aa      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0xe6>
 8001d10:	e014      	b.n	8001d3c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7fe feef 	bl	8000af4 <HAL_GetTick>
 8001d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1a:	f7fe feeb 	bl	8000af4 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	; 0x64
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e396      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x10e>
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80cb 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4a:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d52:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d54:	4b4f      	ldr	r3, [pc, #316]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_RCC_OscConfig+0x164>
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	2b18      	cmp	r3, #24
 8001d64:	d156      	bne.n	8001e14 <HAL_RCC_OscConfig+0x208>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d151      	bne.n	8001e14 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x17c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e368      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d88:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 0219 	bic.w	r2, r3, #25
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	493f      	ldr	r1, [pc, #252]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d9a:	f7fe feab 	bl	8000af4 <HAL_GetTick>
 8001d9e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da2:	f7fe fea7 	bl	8000af4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e352      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db4:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	f7fe fec8 	bl	8000b54 <HAL_GetREVID>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d817      	bhi.n	8001dfe <HAL_RCC_OscConfig+0x1f2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d108      	bne.n	8001de8 <HAL_RCC_OscConfig+0x1dc>
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001dde:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de6:	e07b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	031b      	lsls	r3, r3, #12
 8001df6:	4927      	ldr	r1, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	e070      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	061b      	lsls	r3, r3, #24
 8001e0c:	4921      	ldr	r1, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e12:	e065      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d048      	beq.n	8001eae <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 0219 	bic.w	r2, r3, #25
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	491a      	ldr	r1, [pc, #104]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7fe fe61 	bl	8000af4 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e36:	f7fe fe5d 	bl	8000af4 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e308      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	f7fe fe7e 	bl	8000b54 <HAL_GetREVID>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d81a      	bhi.n	8001e98 <HAL_RCC_OscConfig+0x28c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d108      	bne.n	8001e7c <HAL_RCC_OscConfig+0x270>
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	6053      	str	r3, [r2, #4]
 8001e7a:	e031      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2d4>
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	031b      	lsls	r3, r3, #12
 8001e8a:	4902      	ldr	r1, [pc, #8]	; (8001e94 <HAL_RCC_OscConfig+0x288>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e026      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2d4>
 8001e92:	bf00      	nop
 8001e94:	58024400 	.word	0x58024400
 8001e98:	4b9a      	ldr	r3, [pc, #616]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	4997      	ldr	r1, [pc, #604]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
 8001eac:	e018      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eae:	4b95      	ldr	r3, [pc, #596]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a94      	ldr	r2, [pc, #592]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7fe fe1b 	bl	8000af4 <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7fe fe17 	bl	8000af4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e2c2      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ed4:	4b8b      	ldr	r3, [pc, #556]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80a9 	beq.w	8002040 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eee:	4b85      	ldr	r3, [pc, #532]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ef6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ef8:	4b82      	ldr	r3, [pc, #520]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d007      	beq.n	8001f14 <HAL_RCC_OscConfig+0x308>
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b18      	cmp	r3, #24
 8001f08:	d13a      	bne.n	8001f80 <HAL_RCC_OscConfig+0x374>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d135      	bne.n	8001f80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f14:	4b7b      	ldr	r3, [pc, #492]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_OscConfig+0x320>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b80      	cmp	r3, #128	; 0x80
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e296      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f2c:	f7fe fe12 	bl	8000b54 <HAL_GetREVID>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d817      	bhi.n	8001f6a <HAL_RCC_OscConfig+0x35e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d108      	bne.n	8001f54 <HAL_RCC_OscConfig+0x348>
 8001f42:	4b70      	ldr	r3, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f4a:	4a6e      	ldr	r2, [pc, #440]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001f4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f52:	e075      	b.n	8002040 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f54:	4b6b      	ldr	r3, [pc, #428]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	069b      	lsls	r3, r3, #26
 8001f62:	4968      	ldr	r1, [pc, #416]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f68:	e06a      	b.n	8002040 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f6a:	4b66      	ldr	r3, [pc, #408]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	061b      	lsls	r3, r3, #24
 8001f78:	4962      	ldr	r1, [pc, #392]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f7e:	e05f      	b.n	8002040 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d042      	beq.n	800200e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f88:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe fdae 	bl	8000af4 <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f9c:	f7fe fdaa 	bl	8000af4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e255      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fae:	4b55      	ldr	r3, [pc, #340]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fba:	f7fe fdcb 	bl	8000b54 <HAL_GetREVID>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d817      	bhi.n	8001ff8 <HAL_RCC_OscConfig+0x3ec>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d108      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3d6>
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fd8:	4a4a      	ldr	r2, [pc, #296]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fde:	6053      	str	r3, [r2, #4]
 8001fe0:	e02e      	b.n	8002040 <HAL_RCC_OscConfig+0x434>
 8001fe2:	4b48      	ldr	r3, [pc, #288]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	069b      	lsls	r3, r3, #26
 8001ff0:	4944      	ldr	r1, [pc, #272]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
 8001ff6:	e023      	b.n	8002040 <HAL_RCC_OscConfig+0x434>
 8001ff8:	4b42      	ldr	r3, [pc, #264]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	493f      	ldr	r1, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8002008:	4313      	orrs	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
 800200c:	e018      	b.n	8002040 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800200e:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3c      	ldr	r2, [pc, #240]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8002014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7fe fd6b 	bl	8000af4 <HAL_GetTick>
 800201e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002022:	f7fe fd67 	bl	8000af4 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e212      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002034:	4b33      	ldr	r3, [pc, #204]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d036      	beq.n	80020ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d019      	beq.n	8002088 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8002056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002058:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7fe fd48 	bl	8000af4 <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002068:	f7fe fd44 	bl	8000af4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1ef      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x45c>
 8002086:	e018      	b.n	80020ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 800208a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe fd2e 	bl	8000af4 <HAL_GetTick>
 8002098:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe fd2a 	bl	8000af4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1d5      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d039      	beq.n	800213a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01c      	beq.n	8002108 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 80020d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020da:	f7fe fd0b 	bl	8000af4 <HAL_GetTick>
 80020de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80020e2:	f7fe fd07 	bl	8000af4 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1b2      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x4d6>
 8002100:	e01b      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
 8002102:	bf00      	nop
 8002104:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002108:	4b9b      	ldr	r3, [pc, #620]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a9a      	ldr	r2, [pc, #616]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800210e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002112:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002114:	f7fe fcee 	bl	8000af4 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800211c:	f7fe fcea 	bl	8000af4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e195      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800212e:	4b92      	ldr	r3, [pc, #584]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8081 	beq.w	800224a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002148:	4b8c      	ldr	r3, [pc, #560]	; (800237c <HAL_RCC_OscConfig+0x770>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a8b      	ldr	r2, [pc, #556]	; (800237c <HAL_RCC_OscConfig+0x770>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002154:	f7fe fcce 	bl	8000af4 <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800215c:	f7fe fcca 	bl	8000af4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e175      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800216e:	4b83      	ldr	r3, [pc, #524]	; (800237c <HAL_RCC_OscConfig+0x770>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d106      	bne.n	8002190 <HAL_RCC_OscConfig+0x584>
 8002182:	4b7d      	ldr	r3, [pc, #500]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	4a7c      	ldr	r2, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6713      	str	r3, [r2, #112]	; 0x70
 800218e:	e02d      	b.n	80021ec <HAL_RCC_OscConfig+0x5e0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5a6>
 8002198:	4b77      	ldr	r3, [pc, #476]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a76      	ldr	r2, [pc, #472]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
 80021a4:	4b74      	ldr	r3, [pc, #464]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a73      	ldr	r2, [pc, #460]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
 80021b0:	e01c      	b.n	80021ec <HAL_RCC_OscConfig+0x5e0>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5c8>
 80021ba:	4b6f      	ldr	r3, [pc, #444]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a6e      	ldr	r2, [pc, #440]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
 80021c6:	4b6c      	ldr	r3, [pc, #432]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a6b      	ldr	r2, [pc, #428]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0x5e0>
 80021d4:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a67      	ldr	r2, [pc, #412]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021da:	f023 0301 	bic.w	r3, r3, #1
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	4b65      	ldr	r3, [pc, #404]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	4a64      	ldr	r2, [pc, #400]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80021e6:	f023 0304 	bic.w	r3, r3, #4
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d015      	beq.n	8002220 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7fe fc7e 	bl	8000af4 <HAL_GetTick>
 80021f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe fc7a 	bl	8000af4 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e123      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002212:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0ee      	beq.n	80021fc <HAL_RCC_OscConfig+0x5f0>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7fe fc68 	bl	8000af4 <HAL_GetTick>
 8002224:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7fe fc64 	bl	8000af4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e10d      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800223e:	4b4e      	ldr	r3, [pc, #312]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1ee      	bne.n	8002228 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8102 	beq.w	8002458 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002254:	4b48      	ldr	r3, [pc, #288]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800225c:	2b18      	cmp	r3, #24
 800225e:	f000 80bd 	beq.w	80023dc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	2b02      	cmp	r3, #2
 8002268:	f040 809e 	bne.w	80023a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	4b42      	ldr	r3, [pc, #264]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a41      	ldr	r2, [pc, #260]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fc3c 	bl	8000af4 <HAL_GetTick>
 800227c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fc38 	bl	8000af4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0e3      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002292:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80022a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022a2:	4b37      	ldr	r3, [pc, #220]	; (8002380 <HAL_RCC_OscConfig+0x774>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	430a      	orrs	r2, r1
 80022b2:	4931      	ldr	r1, [pc, #196]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	628b      	str	r3, [r1, #40]	; 0x28
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	3b01      	subs	r3, #1
 80022be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	3b01      	subs	r3, #1
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	3b01      	subs	r3, #1
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	3b01      	subs	r3, #1
 80022e2:	061b      	lsls	r3, r3, #24
 80022e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022e8:	4923      	ldr	r1, [pc, #140]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80022ee:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	4a21      	ldr	r2, [pc, #132]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 80022fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <HAL_RCC_OscConfig+0x778>)
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	491b      	ldr	r1, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f023 020c 	bic.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4917      	ldr	r1, [pc, #92]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800231c:	4313      	orrs	r3, r2
 800231e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f023 0202 	bic.w	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	4912      	ldr	r1, [pc, #72]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800232e:	4313      	orrs	r3, r2
 8002330:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_RCC_OscConfig+0x76c>)
 8002368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800236c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fe fbc1 	bl	8000af4 <HAL_GetTick>
 8002372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002374:	e011      	b.n	800239a <HAL_RCC_OscConfig+0x78e>
 8002376:	bf00      	nop
 8002378:	58024400 	.word	0x58024400
 800237c:	58024800 	.word	0x58024800
 8002380:	fffffc0c 	.word	0xfffffc0c
 8002384:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fbb4 	bl	8000af4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e05f      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_RCC_OscConfig+0x858>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x77c>
 80023a6:	e057      	b.n	8002458 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_RCC_OscConfig+0x858>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x858>)
 80023ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fb9e 	bl	8000af4 <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023bc:	f7fe fb9a 	bl	8000af4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e045      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_OscConfig+0x858>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x7b0>
 80023da:	e03d      	b.n	8002458 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_RCC_OscConfig+0x858>)
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCC_OscConfig+0x858>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d031      	beq.n	8002454 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0203 	and.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d12a      	bne.n	8002454 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d122      	bne.n	8002454 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d11a      	bne.n	8002454 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	0a5b      	lsrs	r3, r3, #9
 8002422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d111      	bne.n	8002454 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d108      	bne.n	8002454 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0e1b      	lsrs	r3, r3, #24
 8002446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3730      	adds	r7, #48	; 0x30
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	58024400 	.word	0x58024400

08002468 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e19c      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b8a      	ldr	r3, [pc, #552]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d910      	bls.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b87      	ldr	r3, [pc, #540]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 020f 	bic.w	r2, r3, #15
 8002492:	4985      	ldr	r1, [pc, #532]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b83      	ldr	r3, [pc, #524]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e184      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	4b7b      	ldr	r3, [pc, #492]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d908      	bls.n	80024da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024c8:	4b78      	ldr	r3, [pc, #480]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	4975      	ldr	r1, [pc, #468]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d908      	bls.n	8002508 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	496a      	ldr	r1, [pc, #424]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002504:	4313      	orrs	r3, r2
 8002506:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002520:	429a      	cmp	r2, r3
 8002522:	d908      	bls.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002524:	4b61      	ldr	r3, [pc, #388]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	495e      	ldr	r1, [pc, #376]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002532:	4313      	orrs	r3, r2
 8002534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800254e:	429a      	cmp	r2, r3
 8002550:	d908      	bls.n	8002564 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002552:	4b56      	ldr	r3, [pc, #344]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4953      	ldr	r1, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002560:	4313      	orrs	r3, r2
 8002562:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d010      	beq.n	8002592 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	429a      	cmp	r2, r3
 800257e:	d908      	bls.n	8002592 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f023 020f 	bic.w	r2, r3, #15
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4947      	ldr	r1, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800258e:	4313      	orrs	r3, r2
 8002590:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d055      	beq.n	800264a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800259e:	4b43      	ldr	r3, [pc, #268]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4940      	ldr	r1, [pc, #256]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b8:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d121      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0f6      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d115      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0ea      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0de      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0d6      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f023 0207 	bic.w	r2, r3, #7
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4925      	ldr	r1, [pc, #148]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002616:	4313      	orrs	r3, r2
 8002618:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fa6b 	bl	8000af4 <HAL_GetTick>
 800261e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002620:	e00a      	b.n	8002638 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002622:	f7fe fa67 	bl	8000af4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0be      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	429a      	cmp	r2, r3
 8002648:	d1eb      	bne.n	8002622 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d010      	beq.n	8002678 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	429a      	cmp	r2, r3
 8002664:	d208      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f023 020f 	bic.w	r2, r3, #15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x244>)
 8002674:	4313      	orrs	r3, r2
 8002676:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d214      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 020f 	bic.w	r2, r3, #15
 800268e:	4906      	ldr	r1, [pc, #24]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <HAL_RCC_ClockConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e086      	b.n	80027b6 <HAL_RCC_ClockConfig+0x34e>
 80026a8:	52002000 	.word	0x52002000
 80026ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d010      	beq.n	80026de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d208      	bcs.n	80026de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026cc:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	4939      	ldr	r1, [pc, #228]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d208      	bcs.n	800270c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	492e      	ldr	r1, [pc, #184]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002708:	4313      	orrs	r3, r2
 800270a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	d010      	beq.n	800273a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002724:	429a      	cmp	r2, r3
 8002726:	d208      	bcs.n	800273a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4922      	ldr	r1, [pc, #136]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002736:	4313      	orrs	r3, r2
 8002738:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002752:	429a      	cmp	r2, r3
 8002754:	d208      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4917      	ldr	r1, [pc, #92]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002764:	4313      	orrs	r3, r2
 8002766:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002768:	f000 f834 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	4912      	ldr	r1, [pc, #72]	; (80027c4 <HAL_RCC_ClockConfig+0x35c>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
 8002784:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x358>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <HAL_RCC_ClockConfig+0x35c>)
 8002790:	5cd3      	ldrb	r3, [r2, r3]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x360>)
 800279e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x364>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x368>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe f958 	bl	8000a60 <HAL_InitTick>
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	58024400 	.word	0x58024400
 80027c4:	08003cc8 	.word	0x08003cc8
 80027c8:	24000004 	.word	0x24000004
 80027cc:	24000000 	.word	0x24000000
 80027d0:	24000208 	.word	0x24000208

080027d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027da:	4bb3      	ldr	r3, [pc, #716]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e2:	2b18      	cmp	r3, #24
 80027e4:	f200 8155 	bhi.w	8002a92 <HAL_RCC_GetSysClockFreq+0x2be>
 80027e8:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002855 	.word	0x08002855
 80027f4:	08002a93 	.word	0x08002a93
 80027f8:	08002a93 	.word	0x08002a93
 80027fc:	08002a93 	.word	0x08002a93
 8002800:	08002a93 	.word	0x08002a93
 8002804:	08002a93 	.word	0x08002a93
 8002808:	08002a93 	.word	0x08002a93
 800280c:	08002a93 	.word	0x08002a93
 8002810:	0800287b 	.word	0x0800287b
 8002814:	08002a93 	.word	0x08002a93
 8002818:	08002a93 	.word	0x08002a93
 800281c:	08002a93 	.word	0x08002a93
 8002820:	08002a93 	.word	0x08002a93
 8002824:	08002a93 	.word	0x08002a93
 8002828:	08002a93 	.word	0x08002a93
 800282c:	08002a93 	.word	0x08002a93
 8002830:	08002881 	.word	0x08002881
 8002834:	08002a93 	.word	0x08002a93
 8002838:	08002a93 	.word	0x08002a93
 800283c:	08002a93 	.word	0x08002a93
 8002840:	08002a93 	.word	0x08002a93
 8002844:	08002a93 	.word	0x08002a93
 8002848:	08002a93 	.word	0x08002a93
 800284c:	08002a93 	.word	0x08002a93
 8002850:	08002887 	.word	0x08002887
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002854:	4b94      	ldr	r3, [pc, #592]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d009      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002860:	4b91      	ldr	r3, [pc, #580]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	4a90      	ldr	r2, [pc, #576]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
 8002870:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002872:	e111      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002874:	4b8d      	ldr	r3, [pc, #564]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002876:	61bb      	str	r3, [r7, #24]
    break;
 8002878:	e10e      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800287a:	4b8d      	ldr	r3, [pc, #564]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800287c:	61bb      	str	r3, [r7, #24]
    break;
 800287e:	e10b      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002880:	4b8c      	ldr	r3, [pc, #560]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002882:	61bb      	str	r3, [r7, #24]
    break;
 8002884:	e108      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002886:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002890:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800289a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800289c:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80028a6:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	08db      	lsrs	r3, r3, #3
 80028ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80e1 	beq.w	8002a8c <HAL_RCC_GetSysClockFreq+0x2b8>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	f000 8083 	beq.w	80029d8 <HAL_RCC_GetSysClockFreq+0x204>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	f200 80a1 	bhi.w	8002a1c <HAL_RCC_GetSysClockFreq+0x248>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x114>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d056      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028e6:	e099      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028e8:	4b6f      	ldr	r3, [pc, #444]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d02d      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028f4:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	4a6b      	ldr	r2, [pc, #428]	; (8002aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
 8002904:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800291e:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800292e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002932:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800293a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800293e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800294e:	e087      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002abc <HAL_RCC_GetSysClockFreq+0x2e8>
 800295e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002962:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002972:	ed97 6a02 	vldr	s12, [r7, #8]
 8002976:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800297a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800297e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800298a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002992:	e065      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	ee07 3a90 	vmov	s15, r3
 800299a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029a6:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029d6:	e043      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ac4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80029fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a1a:	e021      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a5e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	0a5b      	lsrs	r3, r3, #9
 8002a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a84:	ee17 3a90 	vmov	r3, s15
 8002a88:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002a8a:	e005      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
    break;
 8002a90:	e002      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a94:	61bb      	str	r3, [r7, #24]
    break;
 8002a96:	bf00      	nop
  }

  return sysclockfreq;
 8002a98:	69bb      	ldr	r3, [r7, #24]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	03d09000 	.word	0x03d09000
 8002ab0:	003d0900 	.word	0x003d0900
 8002ab4:	016e3600 	.word	0x016e3600
 8002ab8:	46000000 	.word	0x46000000
 8002abc:	4c742400 	.word	0x4c742400
 8002ac0:	4a742400 	.word	0x4a742400
 8002ac4:	4bb71b00 	.word	0x4bb71b00

08002ac8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d03f      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002aec:	d02a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002af2:	d824      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002af8:	d018      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002afe:	d81e      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b08:	d007      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b0a:	e018      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b0c:	4ba3      	ldr	r3, [pc, #652]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	4aa2      	ldr	r2, [pc, #648]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b18:	e015      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2102      	movs	r1, #2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 ff17 	bl	8003954 <RCCEx_PLL2_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b2a:	e00c      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3324      	adds	r3, #36	; 0x24
 8002b30:	2102      	movs	r1, #2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 ffc0 	bl	8003ab8 <RCCEx_PLL3_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b3c:	e003      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
      break;
 8002b42:	e000      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b4c:	4b93      	ldr	r3, [pc, #588]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b58:	4990      	ldr	r1, [pc, #576]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8002b5e:	e001      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d03d      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d826      	bhi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b78:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7e:	bf00      	nop
 8002b80:	08002b95 	.word	0x08002b95
 8002b84:	08002ba3 	.word	0x08002ba3
 8002b88:	08002bb5 	.word	0x08002bb5
 8002b8c:	08002bcd 	.word	0x08002bcd
 8002b90:	08002bcd 	.word	0x08002bcd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b94:	4b81      	ldr	r3, [pc, #516]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	4a80      	ldr	r2, [pc, #512]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ba0:	e015      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fed3 	bl	8003954 <RCCEx_PLL2_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bb2:	e00c      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3324      	adds	r3, #36	; 0x24
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 ff7c 	bl	8003ab8 <RCCEx_PLL3_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bc4:	e003      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bca:	e000      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bd4:	4b71      	ldr	r3, [pc, #452]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd8:	f023 0207 	bic.w	r2, r3, #7
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	496e      	ldr	r1, [pc, #440]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	650b      	str	r3, [r1, #80]	; 0x50
 8002be6:	e001      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d042      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c00:	d02b      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c06:	d825      	bhi.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c08:	2bc0      	cmp	r3, #192	; 0xc0
 8002c0a:	d028      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c0c:	2bc0      	cmp	r3, #192	; 0xc0
 8002c0e:	d821      	bhi.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d016      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d81d      	bhi.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d007      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002c20:	e018      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c22:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	4a5d      	ldr	r2, [pc, #372]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c2e:	e017      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3304      	adds	r3, #4
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fe8c 	bl	8003954 <RCCEx_PLL2_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c40:	e00e      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3324      	adds	r3, #36	; 0x24
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 ff35 	bl	8003ab8 <RCCEx_PLL3_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002c52:	e005      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	75fb      	strb	r3, [r7, #23]
      break;
 8002c58:	e002      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c66:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	494a      	ldr	r1, [pc, #296]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	650b      	str	r3, [r1, #80]	; 0x50
 8002c78:	e001      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d049      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c94:	d030      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002c96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c9a:	d82a      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ca0:	d02c      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002ca2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ca6:	d824      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cac:	d018      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb2:	d81e      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cbc:	d007      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002cbe:	e018      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc0:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	4a35      	ldr	r2, [pc, #212]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ccc:	e017      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fe3d 	bl	8003954 <RCCEx_PLL2_Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002cde:	e00e      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3324      	adds	r3, #36	; 0x24
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fee6 	bl	8003ab8 <RCCEx_PLL3_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cf0:	e005      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002cf8:	bf00      	nop
 8002cfa:	e000      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d04:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d12:	4922      	ldr	r1, [pc, #136]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	658b      	str	r3, [r1, #88]	; 0x58
 8002d18:	e001      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d04b      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d34:	d030      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002d36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d3a:	d82a      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d40:	d02e      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002d42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d46:	d824      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d4c:	d018      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002d4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d52:	d81e      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5c:	d007      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002d5e:	e018      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d60:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d6c:	e019      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fded 	bl	8003954 <RCCEx_PLL2_Config>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d7e:	e010      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3324      	adds	r3, #36	; 0x24
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fe96 	bl	8003ab8 <RCCEx_PLL3_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d90:	e007      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	75fb      	strb	r3, [r7, #23]
      break;
 8002d96:	e004      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002d98:	bf00      	nop
 8002d9a:	e002      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002d9c:	58024400 	.word	0x58024400
      break;
 8002da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002da8:	4b99      	ldr	r3, [pc, #612]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002db6:	4996      	ldr	r1, [pc, #600]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	658b      	str	r3, [r1, #88]	; 0x58
 8002dbc:	e001      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d032      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd2:	2b30      	cmp	r3, #48	; 0x30
 8002dd4:	d01c      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002dd6:	2b30      	cmp	r3, #48	; 0x30
 8002dd8:	d817      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d00c      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	d813      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d10f      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dea:	4b89      	ldr	r3, [pc, #548]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	4a88      	ldr	r2, [pc, #544]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002df6:	e00e      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fda8 	bl	8003954 <RCCEx_PLL2_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e08:	e005      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e10:	bf00      	nop
 8002e12:	e000      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e1c:	4b7c      	ldr	r3, [pc, #496]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	4979      	ldr	r1, [pc, #484]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e2e:	e001      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d047      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e48:	d030      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e4e:	d82a      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e54:	d02c      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e5a:	d824      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d018      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e66:	d81e      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e70:	d007      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002e72:	e018      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e74:	4b66      	ldr	r3, [pc, #408]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	4a65      	ldr	r2, [pc, #404]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e80:	e017      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fd63 	bl	8003954 <RCCEx_PLL2_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e92:	e00e      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3324      	adds	r3, #36	; 0x24
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fe0c 	bl	8003ab8 <RCCEx_PLL3_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ea4:	e005      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002eb8:	4b55      	ldr	r3, [pc, #340]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	4952      	ldr	r1, [pc, #328]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	650b      	str	r3, [r1, #80]	; 0x50
 8002eca:	e001      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d049      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee4:	d02e      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ee6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eea:	d828      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002eec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ef0:	d02a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ef6:	d822      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ef8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002efc:	d026      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002efe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f02:	d81c      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f08:	d010      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f0e:	d816      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01d      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d111      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fd17 	bl	8003954 <RCCEx_PLL2_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f2a:	e012      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3324      	adds	r3, #36	; 0x24
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fdc0 	bl	8003ab8 <RCCEx_PLL3_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002f3c:	e009      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
      break;
 8002f42:	e006      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f44:	bf00      	nop
 8002f46:	e004      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f48:	bf00      	nop
 8002f4a:	e002      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f58:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	492a      	ldr	r1, [pc, #168]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	650b      	str	r3, [r1, #80]	; 0x50
 8002f6a:	e001      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d04d      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f86:	d02e      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f8c:	d828      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d02a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f98:	d822      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f9e:	d026      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002fa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fa4:	d81c      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002faa:	d010      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb0:	d816      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fba:	d111      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fcc6 	bl	8003954 <RCCEx_PLL2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002fcc:	e012      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3324      	adds	r3, #36	; 0x24
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fd6f 	bl	8003ab8 <RCCEx_PLL3_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002fde:	e009      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe4:	e006      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fea:	bf00      	nop
 8002fec:	e002      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003008:	4901      	ldr	r1, [pc, #4]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800300a:	4313      	orrs	r3, r2
 800300c:	658b      	str	r3, [r1, #88]	; 0x58
 800300e:	e003      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d02f      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800302c:	d00e      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800302e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003032:	d814      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d015      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800303c:	d10f      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800303e:	4baf      	ldr	r3, [pc, #700]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	4aae      	ldr	r2, [pc, #696]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003048:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800304a:	e00c      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fc7e 	bl	8003954 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800305c:	e003      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
      break;
 8003062:	e000      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800306c:	4ba3      	ldr	r3, [pc, #652]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800306e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003070:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003078:	49a0      	ldr	r1, [pc, #640]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800307a:	4313      	orrs	r3, r2
 800307c:	650b      	str	r3, [r1, #80]	; 0x50
 800307e:	e001      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d032      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	2b03      	cmp	r3, #3
 8003096:	d81b      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030d7 	.word	0x080030d7
 80030a4:	080030b1 	.word	0x080030b1
 80030a8:	080030bf 	.word	0x080030bf
 80030ac:	080030d7 	.word	0x080030d7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b0:	4b92      	ldr	r3, [pc, #584]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	4a91      	ldr	r2, [pc, #580]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030bc:	e00c      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2102      	movs	r1, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fc45 	bl	8003954 <RCCEx_PLL2_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80030ce:	e003      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	75fb      	strb	r3, [r7, #23]
      break;
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80030d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030de:	4b87      	ldr	r3, [pc, #540]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4984      	ldr	r1, [pc, #528]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030f0:	e001      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8086 	beq.w	8003210 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003104:	4b7e      	ldr	r3, [pc, #504]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a7d      	ldr	r2, [pc, #500]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003110:	f7fd fcf0 	bl	8000af4 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003116:	e009      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003118:	f7fd fcec 	bl	8000af4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d902      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	75fb      	strb	r3, [r7, #23]
        break;
 800312a:	e005      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800312c:	4b74      	ldr	r3, [pc, #464]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ef      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d166      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800313e:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003148:	4053      	eors	r3, r2
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	2b00      	cmp	r3, #0
 8003150:	d013      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003152:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800315c:	4b67      	ldr	r3, [pc, #412]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4a66      	ldr	r2, [pc, #408]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003168:	4b64      	ldr	r3, [pc, #400]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a63      	ldr	r2, [pc, #396]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003174:	4a61      	ldr	r2, [pc, #388]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d115      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fd fcb5 	bl	8000af4 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318c:	e00b      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fd fcb1 	bl	8000af4 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d902      	bls.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	75fb      	strb	r3, [r7, #23]
            break;
 80031a4:	e005      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a6:	4b55      	ldr	r3, [pc, #340]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ed      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d126      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031d6:	0919      	lsrs	r1, r3, #4
 80031d8:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80031da:	400b      	ands	r3, r1
 80031dc:	4947      	ldr	r1, [pc, #284]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	610b      	str	r3, [r1, #16]
 80031e2:	e005      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80031e4:	4b45      	ldr	r3, [pc, #276]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	4a44      	ldr	r2, [pc, #272]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031ee:	6113      	str	r3, [r2, #16]
 80031f0:	4b42      	ldr	r3, [pc, #264]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fe:	493f      	ldr	r1, [pc, #252]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003200:	4313      	orrs	r3, r2
 8003202:	670b      	str	r3, [r1, #112]	; 0x70
 8003204:	e004      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	75bb      	strb	r3, [r7, #22]
 800320a:	e001      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8085 	beq.w	8003328 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003222:	2b28      	cmp	r3, #40	; 0x28
 8003224:	d866      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003309 	.word	0x08003309
 8003230:	080032f5 	.word	0x080032f5
 8003234:	080032f5 	.word	0x080032f5
 8003238:	080032f5 	.word	0x080032f5
 800323c:	080032f5 	.word	0x080032f5
 8003240:	080032f5 	.word	0x080032f5
 8003244:	080032f5 	.word	0x080032f5
 8003248:	080032f5 	.word	0x080032f5
 800324c:	080032d1 	.word	0x080032d1
 8003250:	080032f5 	.word	0x080032f5
 8003254:	080032f5 	.word	0x080032f5
 8003258:	080032f5 	.word	0x080032f5
 800325c:	080032f5 	.word	0x080032f5
 8003260:	080032f5 	.word	0x080032f5
 8003264:	080032f5 	.word	0x080032f5
 8003268:	080032f5 	.word	0x080032f5
 800326c:	080032e3 	.word	0x080032e3
 8003270:	080032f5 	.word	0x080032f5
 8003274:	080032f5 	.word	0x080032f5
 8003278:	080032f5 	.word	0x080032f5
 800327c:	080032f5 	.word	0x080032f5
 8003280:	080032f5 	.word	0x080032f5
 8003284:	080032f5 	.word	0x080032f5
 8003288:	080032f5 	.word	0x080032f5
 800328c:	08003309 	.word	0x08003309
 8003290:	080032f5 	.word	0x080032f5
 8003294:	080032f5 	.word	0x080032f5
 8003298:	080032f5 	.word	0x080032f5
 800329c:	080032f5 	.word	0x080032f5
 80032a0:	080032f5 	.word	0x080032f5
 80032a4:	080032f5 	.word	0x080032f5
 80032a8:	080032f5 	.word	0x080032f5
 80032ac:	08003309 	.word	0x08003309
 80032b0:	080032f5 	.word	0x080032f5
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	080032f5 	.word	0x080032f5
 80032c0:	080032f5 	.word	0x080032f5
 80032c4:	080032f5 	.word	0x080032f5
 80032c8:	080032f5 	.word	0x080032f5
 80032cc:	08003309 	.word	0x08003309
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fb3c 	bl	8003954 <RCCEx_PLL2_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80032e0:	e013      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3324      	adds	r3, #36	; 0x24
 80032e6:	2101      	movs	r1, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fbe5 	bl	8003ab8 <RCCEx_PLL3_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80032f2:	e00a      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
      break;
 80032f8:	e007      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032fa:	bf00      	nop
 80032fc:	58024400 	.word	0x58024400
 8003300:	58024800 	.word	0x58024800
 8003304:	00ffffcf 	.word	0x00ffffcf
      break;
 8003308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003310:	4b96      	ldr	r3, [pc, #600]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331c:	4993      	ldr	r1, [pc, #588]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	654b      	str	r3, [r1, #84]	; 0x54
 8003322:	e001      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d038      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003338:	2b05      	cmp	r3, #5
 800333a:	d821      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003387 	.word	0x08003387
 8003348:	0800335d 	.word	0x0800335d
 800334c:	0800336f 	.word	0x0800336f
 8003350:	08003387 	.word	0x08003387
 8003354:	08003387 	.word	0x08003387
 8003358:	08003387 	.word	0x08003387
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	2101      	movs	r1, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f000 faf6 	bl	8003954 <RCCEx_PLL2_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800336c:	e00c      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3324      	adds	r3, #36	; 0x24
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fb9f 	bl	8003ab8 <RCCEx_PLL3_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800337e:	e003      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
      break;
 8003384:	e000      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800338e:	4b77      	ldr	r3, [pc, #476]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f023 0207 	bic.w	r2, r3, #7
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339a:	4974      	ldr	r1, [pc, #464]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800339c:	4313      	orrs	r3, r2
 800339e:	654b      	str	r3, [r1, #84]	; 0x54
 80033a0:	e001      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d03a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d821      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	08003407 	.word	0x08003407
 80033c8:	080033dd 	.word	0x080033dd
 80033cc:	080033ef 	.word	0x080033ef
 80033d0:	08003407 	.word	0x08003407
 80033d4:	08003407 	.word	0x08003407
 80033d8:	08003407 	.word	0x08003407
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fab6 	bl	8003954 <RCCEx_PLL2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80033ec:	e00c      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3324      	adds	r3, #36	; 0x24
 80033f2:	2101      	movs	r1, #1
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fb5f 	bl	8003ab8 <RCCEx_PLL3_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80033fe:	e003      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	75fb      	strb	r3, [r7, #23]
      break;
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800340e:	4b57      	ldr	r3, [pc, #348]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	f023 0207 	bic.w	r2, r3, #7
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	4953      	ldr	r1, [pc, #332]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800341e:	4313      	orrs	r3, r2
 8003420:	658b      	str	r3, [r1, #88]	; 0x58
 8003422:	e001      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d04b      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800343a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800343e:	d02e      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003444:	d828      	bhi.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344a:	d02a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d822      	bhi.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003456:	d026      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003458:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800345c:	d81c      	bhi.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800345e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003462:	d010      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003468:	d816      	bhi.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01d      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800346e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003472:	d111      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fa6a 	bl	8003954 <RCCEx_PLL2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003484:	e012      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3324      	adds	r3, #36	; 0x24
 800348a:	2102      	movs	r1, #2
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fb13 	bl	8003ab8 <RCCEx_PLL3_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003496:	e009      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	75fb      	strb	r3, [r7, #23]
      break;
 800349c:	e006      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800349e:	bf00      	nop
 80034a0:	e004      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034a2:	bf00      	nop
 80034a4:	e002      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80034aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034b2:	4b2e      	ldr	r3, [pc, #184]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c0:	492a      	ldr	r1, [pc, #168]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	654b      	str	r3, [r1, #84]	; 0x54
 80034c6:	e001      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d04d      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034e2:	d02e      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80034e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034e8:	d828      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ee:	d02a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80034f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f4:	d822      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80034f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034fa:	d026      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80034fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003500:	d81c      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003506:	d010      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800350c:	d816      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01d      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003516:	d111      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fa18 	bl	8003954 <RCCEx_PLL2_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003528:	e012      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3324      	adds	r3, #36	; 0x24
 800352e:	2102      	movs	r1, #2
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fac1 	bl	8003ab8 <RCCEx_PLL3_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800353a:	e009      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	75fb      	strb	r3, [r7, #23]
      break;
 8003540:	e006      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003542:	bf00      	nop
 8003544:	e004      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800354e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10c      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003564:	4901      	ldr	r1, [pc, #4]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	658b      	str	r3, [r1, #88]	; 0x58
 800356a:	e003      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800356c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	d04b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003586:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800358a:	d02e      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800358c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003590:	d828      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003596:	d02a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359c:	d822      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800359e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035a2:	d026      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80035a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035a8:	d81c      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ae:	d010      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80035b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b4:	d816      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01d      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035be:	d111      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f9c4 	bl	8003954 <RCCEx_PLL2_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035d0:	e012      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3324      	adds	r3, #36	; 0x24
 80035d6:	2102      	movs	r1, #2
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fa6d 	bl	8003ab8 <RCCEx_PLL3_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80035e2:	e009      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
      break;
 80035e8:	e006      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035ea:	bf00      	nop
 80035ec:	e004      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80035f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80035fe:	4b9d      	ldr	r3, [pc, #628]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800360c:	4999      	ldr	r1, [pc, #612]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800360e:	4313      	orrs	r3, r2
 8003610:	658b      	str	r3, [r1, #88]	; 0x58
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362e:	d10a      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3324      	adds	r3, #36	; 0x24
 8003634:	2102      	movs	r1, #2
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fa3e 	bl	8003ab8 <RCCEx_PLL3_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003646:	4b8b      	ldr	r3, [pc, #556]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003654:	4987      	ldr	r1, [pc, #540]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003656:	4313      	orrs	r3, r2
 8003658:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003670:	d10a      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3324      	adds	r3, #36	; 0x24
 8003676:	2102      	movs	r1, #2
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fa1d 	bl	8003ab8 <RCCEx_PLL3_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003688:	4b7a      	ldr	r3, [pc, #488]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003696:	4977      	ldr	r1, [pc, #476]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003698:	4313      	orrs	r3, r2
 800369a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d034      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036b2:	d01d      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80036b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036b8:	d817      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d009      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80036c4:	e011      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f941 	bl	8003954 <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80036d6:	e00c      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3324      	adds	r3, #36	; 0x24
 80036dc:	2102      	movs	r1, #2
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f9ea 	bl	8003ab8 <RCCEx_PLL3_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
      break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80036f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036f8:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003706:	495b      	ldr	r1, [pc, #364]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003708:	4313      	orrs	r3, r2
 800370a:	658b      	str	r3, [r1, #88]	; 0x58
 800370c:	e001      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d033      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003728:	d01c      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800372a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800372e:	d816      	bhi.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003734:	d003      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800373a:	d007      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800373c:	e00f      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373e:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	4a4c      	ldr	r2, [pc, #304]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800374a:	e00c      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3324      	adds	r3, #36	; 0x24
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f9b0 	bl	8003ab8 <RCCEx_PLL3_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800375c:	e003      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
      break;
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377a:	493e      	ldr	r1, [pc, #248]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800377c:	4313      	orrs	r3, r2
 800377e:	654b      	str	r3, [r1, #84]	; 0x54
 8003780:	e001      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d029      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800379a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379e:	d007      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80037a0:	e00f      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a2:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	4a33      	ldr	r2, [pc, #204]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037ae:	e00b      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	2102      	movs	r1, #2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f8cc 	bl	8003954 <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
      break;
 80037c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	4926      	ldr	r1, [pc, #152]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037e0:	e001      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3324      	adds	r3, #36	; 0x24
 80037f6:	2102      	movs	r1, #2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f95d 	bl	8003ab8 <RCCEx_PLL3_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d033      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800381c:	d017      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800381e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003822:	d811      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d013      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800382a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382e:	d80b      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003838:	d106      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003844:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003846:	e007      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
      break;
 800384c:	e004      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003858:	7dfb      	ldrb	r3, [r7, #23]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10c      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800386a:	4902      	ldr	r1, [pc, #8]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800386c:	4313      	orrs	r3, r2
 800386e:	654b      	str	r3, [r1, #84]	; 0x54
 8003870:	e004      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003872:	bf00      	nop
 8003874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003888:	4b31      	ldr	r3, [pc, #196]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	492e      	ldr	r1, [pc, #184]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003896:	4313      	orrs	r3, r2
 8003898:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038b4:	4926      	ldr	r1, [pc, #152]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d2:	491f      	ldr	r1, [pc, #124]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038ee:	6113      	str	r3, [r2, #16]
 80038f0:	4b17      	ldr	r3, [pc, #92]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80038fa:	4915      	ldr	r1, [pc, #84]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	da08      	bge.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800390a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	490e      	ldr	r1, [pc, #56]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003916:	4313      	orrs	r3, r2
 8003918:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	4906      	ldr	r1, [pc, #24]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003936:	4313      	orrs	r3, r2
 8003938:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800393a:	7dbb      	ldrb	r3, [r7, #22]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	58024400 	.word	0x58024400

08003954 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003962:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b03      	cmp	r3, #3
 800396c:	d101      	bne.n	8003972 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e099      	b.n	8003aa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003972:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a4e      	ldr	r2, [pc, #312]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003978:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800397c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397e:	f7fd f8b9 	bl	8000af4 <HAL_GetTick>
 8003982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003984:	e008      	b.n	8003998 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003986:	f7fd f8b5 	bl	8000af4 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e086      	b.n	8003aa6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003998:	4b45      	ldr	r3, [pc, #276]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f0      	bne.n	8003986 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80039a4:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	031b      	lsls	r3, r3, #12
 80039b2:	493f      	ldr	r1, [pc, #252]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	628b      	str	r3, [r1, #40]	; 0x28
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	3b01      	subs	r3, #1
 80039be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	025b      	lsls	r3, r3, #9
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	041b      	lsls	r3, r3, #16
 80039d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	061b      	lsls	r3, r3, #24
 80039e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039e8:	4931      	ldr	r1, [pc, #196]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039ee:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	492d      	ldr	r1, [pc, #180]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a00:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f023 0220 	bic.w	r2, r3, #32
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	4928      	ldr	r1, [pc, #160]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a12:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	4a26      	ldr	r2, [pc, #152]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a18:	f023 0310 	bic.w	r3, r3, #16
 8003a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a22:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <RCCEx_PLL2_Config+0x160>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	69d2      	ldr	r2, [r2, #28]
 8003a2a:	00d2      	lsls	r2, r2, #3
 8003a2c:	4920      	ldr	r1, [pc, #128]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a38:	f043 0310 	orr.w	r3, r3, #16
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a50:	e00f      	b.n	8003a72 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d106      	bne.n	8003a66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a64:	e005      	b.n	8003a72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	4a11      	ldr	r2, [pc, #68]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a0e      	ldr	r2, [pc, #56]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7e:	f7fd f839 	bl	8000af4 <HAL_GetTick>
 8003a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a84:	e008      	b.n	8003a98 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a86:	f7fd f835 	bl	8000af4 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e006      	b.n	8003aa6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <RCCEx_PLL2_Config+0x15c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	58024400 	.word	0x58024400
 8003ab4:	ffff0007 	.word	0xffff0007

08003ab8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ac6:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d101      	bne.n	8003ad6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e099      	b.n	8003c0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ad6:	4b4f      	ldr	r3, [pc, #316]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a4e      	ldr	r2, [pc, #312]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae2:	f7fd f807 	bl	8000af4 <HAL_GetTick>
 8003ae6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ae8:	e008      	b.n	8003afc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003aea:	f7fd f803 	bl	8000af4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e086      	b.n	8003c0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003afc:	4b45      	ldr	r3, [pc, #276]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b08:	4b42      	ldr	r3, [pc, #264]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	051b      	lsls	r3, r3, #20
 8003b16:	493f      	ldr	r1, [pc, #252]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	628b      	str	r3, [r1, #40]	; 0x28
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	025b      	lsls	r3, r3, #9
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b4c:	4931      	ldr	r1, [pc, #196]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b52:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	492d      	ldr	r1, [pc, #180]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	4928      	ldr	r1, [pc, #160]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b76:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <RCCEx_PLL3_Config+0x160>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	69d2      	ldr	r2, [r2, #28]
 8003b8e:	00d2      	lsls	r2, r2, #3
 8003b90:	4920      	ldr	r1, [pc, #128]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bb4:	e00f      	b.n	8003bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d106      	bne.n	8003bca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003bbc:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003bc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bc8:	e005      	b.n	8003bd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003bd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a0e      	ldr	r2, [pc, #56]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be2:	f7fc ff87 	bl	8000af4 <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003be8:	e008      	b.n	8003bfc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bea:	f7fc ff83 	bl	8000af4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e006      	b.n	8003c0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <RCCEx_PLL3_Config+0x15c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	58024400 	.word	0x58024400
 8003c18:	ffff0007 	.word	0xffff0007

08003c1c <__libc_init_array>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4d0d      	ldr	r5, [pc, #52]	; (8003c54 <__libc_init_array+0x38>)
 8003c20:	4c0d      	ldr	r4, [pc, #52]	; (8003c58 <__libc_init_array+0x3c>)
 8003c22:	1b64      	subs	r4, r4, r5
 8003c24:	10a4      	asrs	r4, r4, #2
 8003c26:	2600      	movs	r6, #0
 8003c28:	42a6      	cmp	r6, r4
 8003c2a:	d109      	bne.n	8003c40 <__libc_init_array+0x24>
 8003c2c:	4d0b      	ldr	r5, [pc, #44]	; (8003c5c <__libc_init_array+0x40>)
 8003c2e:	4c0c      	ldr	r4, [pc, #48]	; (8003c60 <__libc_init_array+0x44>)
 8003c30:	f000 f820 	bl	8003c74 <_init>
 8003c34:	1b64      	subs	r4, r4, r5
 8003c36:	10a4      	asrs	r4, r4, #2
 8003c38:	2600      	movs	r6, #0
 8003c3a:	42a6      	cmp	r6, r4
 8003c3c:	d105      	bne.n	8003c4a <__libc_init_array+0x2e>
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c44:	4798      	blx	r3
 8003c46:	3601      	adds	r6, #1
 8003c48:	e7ee      	b.n	8003c28 <__libc_init_array+0xc>
 8003c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4e:	4798      	blx	r3
 8003c50:	3601      	adds	r6, #1
 8003c52:	e7f2      	b.n	8003c3a <__libc_init_array+0x1e>
 8003c54:	08003cd8 	.word	0x08003cd8
 8003c58:	08003cd8 	.word	0x08003cd8
 8003c5c:	08003cd8 	.word	0x08003cd8
 8003c60:	08003cdc 	.word	0x08003cdc

08003c64 <memset>:
 8003c64:	4402      	add	r2, r0
 8003c66:	4603      	mov	r3, r0
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <memset+0xa>
 8003c6c:	4770      	bx	lr
 8003c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c72:	e7f9      	b.n	8003c68 <memset+0x4>

08003c74 <_init>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr

08003c80 <_fini>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	bf00      	nop
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr
