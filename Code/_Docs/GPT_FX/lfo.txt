write simple lfo in c++
ChatGPT
Here's an example implementation of a simple low-frequency oscillator (LFO) in C++:

cpp
Copy code
class LFO {
public:
    enum Waveform {
        Sine,
        Triangle,
        Sawtooth,
        Square
    };

    LFO(float frequency, float sampleRate, Waveform waveform) :
        frequency_(frequency),
        sampleRate_(sampleRate),
        waveform_(waveform),
        phase_(0.0f),
        phaseIncrement_(frequency / sampleRate)
    {
    }

    void setFrequency(float frequency) {
        frequency_ = frequency;
        phaseIncrement_ = frequency / sampleRate_;
    }

    void setWaveform(Waveform waveform) {
        waveform_ = waveform;
    }

    float generate() {
        float output = 0.0f;

        switch (waveform_) {
            case Sine:
                output = std::sin(2.0f * M_PI * phase_);
                break;
            case Triangle:
                output = generateTriangle();
                break;
            case Sawtooth:
                output = generateSawtooth();
                break;
            case Square:
                output = generateSquare();
                break;
        }

        phase_ += phaseIncrement_;

        // Wrap phase between 0 and 1
        if (phase_ >= 1.0f)
            phase_ -= 1.0f;

        return output;
    }

private:
    float frequency_;
    float sampleRate_;
    Waveform waveform_;
    float phase_;
    float phaseIncrement_;

    float generateTriangle() {
        float phaseMod = phase_ < 0.5f ? phase_ : 1.0f - phase_;
        return 1.0f - 4.0f * std::abs(phaseMod - 0.5f);
    }

    float generateSawtooth() {
        return 2.0f * phase_ - 1.0f;
    }

    float generateSquare() {
        return phase_ < 0.5f ? -1.0f : 1.0f;
    }
};
The LFO class represents a low-frequency oscillator. It takes a frequency, sample rate, and waveform type as parameters in the constructor. The oscillator generates a single output value at a time using the generate method.

The setFrequency method allows you to dynamically change the frequency of the oscillator. The setWaveform method sets the waveform type.

The generate method generates an output value based on the current phase and waveform type. The phase is incremented based on the frequency and sample rate to control the speed of the oscillator. The method selects the appropriate waveform calculation based on the waveform type specified and returns the generated output value.

The available waveform types in the Waveform enum are:

Sine: Generates a sine wave.
Triangle: Generates a triangle wave.
Sawtooth: Generates a sawtooth wave.
Square: Generates a square wave.
You can create an instance of the LFO class, set the desired frequency and waveform type, and then call the generate method to obtain the output value of the LFO at each desired time step.