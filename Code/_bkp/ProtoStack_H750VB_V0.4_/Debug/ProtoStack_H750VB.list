
ProtoStack_H750VB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a120  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0800a3c0  0800a3c0  0001a3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000003d2  0800ae48  0800ae48  0001ae48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000024  0800b21c  0800b21c  0001b21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  0800b240  0800b240  0001b240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000007c  24000000  0800b258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000954  2400007c  0800b2d4  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  240009d0  0800b2d4  000209d0  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .ramd1        00000490  24000fd0  24000fd0  00020fd0  2**2
                  ALLOC
 12 .ramd2        00000000  30000000  30000000  000200aa  2**0
                  CONTENTS
 13 .ramd3        00000000  38000000  38000000  000200aa  2**0
                  CONTENTS
 14 .dtcm         00000000  20000000  20000000  000200aa  2**0
                  CONTENTS
 15 .itcm         00000000  00000000  00000000  000200aa  2**0
                  CONTENTS
 16 .debug_info   0003d8e2  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008455  00000000  00000000  0005d98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001b38  00000000  00000000  00065de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000019f8  00000000  00000000  00067920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000418a0  00000000  00000000  00069318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00032ae1  00000000  00000000  000aabb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00174a9d  00000000  00000000  000dd699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00252136  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000056dc  00000000  00000000  00252208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000161fe  00000000  00000000  002578e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a3a8 	.word	0x0800a3a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800a3a8 	.word	0x0800a3a8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000380:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000382:	4808      	ldr	r0, [pc, #32]	; (80003a4 <MX_CRC_Init+0x24>)
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_CRC_Init+0x28>)
 8000386:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800038c:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800038e:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000390:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000392:	2301      	movs	r3, #1
 8000394:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000396:	f001 f989 	bl	80016ac <HAL_CRC_Init>
 800039a:	b900      	cbnz	r0, 800039e <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800039c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800039e:	f000 fa95 	bl	80008cc <Error_Handler>
}
 80003a2:	e7fb      	b.n	800039c <MX_CRC_Init+0x1c>
 80003a4:	24000098 	.word	0x24000098
 80003a8:	58024c00 	.word	0x58024c00

080003ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80003ac:	6802      	ldr	r2, [r0, #0]
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <HAL_CRC_MspInit+0x2c>)
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d000      	beq.n	80003b6 <HAL_CRC_MspInit+0xa>
 80003b4:	4770      	bx	lr
{
 80003b6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003b8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80003bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80003c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80003d4:	b002      	add	sp, #8
 80003d6:	4770      	bx	lr
 80003d8:	58024c00 	.word	0x58024c00

080003dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003dc:	b500      	push	{lr}
 80003de:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <MX_DMA_Init+0x84>)
 80003e2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80003e6:	f042 0201 	orr.w	r2, r2, #1
 80003ea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80003ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	4611      	mov	r1, r2
 80003fe:	200b      	movs	r0, #11
 8000400:	f001 f8e0 	bl	80015c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000404:	200b      	movs	r0, #11
 8000406:	f001 f911 	bl	800162c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	4611      	mov	r1, r2
 800040e:	200c      	movs	r0, #12
 8000410:	f001 f8d8 	bl	80015c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000414:	200c      	movs	r0, #12
 8000416:	f001 f909 	bl	800162c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	4611      	mov	r1, r2
 800041e:	200d      	movs	r0, #13
 8000420:	f001 f8d0 	bl	80015c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000424:	200d      	movs	r0, #13
 8000426:	f001 f901 	bl	800162c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	4611      	mov	r1, r2
 800042e:	200e      	movs	r0, #14
 8000430:	f001 f8c8 	bl	80015c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000434:	200e      	movs	r0, #14
 8000436:	f001 f8f9 	bl	800162c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	4611      	mov	r1, r2
 800043e:	200f      	movs	r0, #15
 8000440:	f001 f8c0 	bl	80015c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000444:	200f      	movs	r0, #15
 8000446:	f001 f8f1 	bl	800162c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	4611      	mov	r1, r2
 800044e:	2010      	movs	r0, #16
 8000450:	f001 f8b8 	bl	80015c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000454:	2010      	movs	r0, #16
 8000456:	f001 f8e9 	bl	800162c <HAL_NVIC_EnableIRQ>

}
 800045a:	b003      	add	sp, #12
 800045c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000460:	58024400 	.word	0x58024400

08000464 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000468:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	2400      	movs	r4, #0
 800046c:	9405      	str	r4, [sp, #20]
 800046e:	9406      	str	r4, [sp, #24]
 8000470:	9407      	str	r4, [sp, #28]
 8000472:	9408      	str	r4, [sp, #32]
 8000474:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000476:	4b35      	ldr	r3, [pc, #212]	; (800054c <MX_GPIO_Init+0xe8>)
 8000478:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800047c:	f042 0210 	orr.w	r2, r2, #16
 8000480:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000484:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000488:	f002 0210 	and.w	r2, r2, #16
 800048c:	9200      	str	r2, [sp, #0]
 800048e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000490:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000494:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000498:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800049c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004a0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80004a4:	9201      	str	r2, [sp, #4]
 80004a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004ac:	f042 0204 	orr.w	r2, r2, #4
 80004b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80004b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004b8:	f002 0204 	and.w	r2, r2, #4
 80004bc:	9202      	str	r2, [sp, #8]
 80004be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004c4:	f042 0201 	orr.w	r2, r2, #1
 80004c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80004cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004d0:	f002 0201 	and.w	r2, r2, #1
 80004d4:	9203      	str	r2, [sp, #12]
 80004d6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80004dc:	f042 0208 	orr.w	r2, r2, #8
 80004e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80004e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	9304      	str	r3, [sp, #16]
 80004ee:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
 80004f0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8000554 <MX_GPIO_Init+0xf0>
 80004f4:	4622      	mov	r2, r4
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	4640      	mov	r0, r8
 80004fc:	f003 f970 	bl	80037e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FREE_USER_LED_GPIO_Port, FREE_USER_LED_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
 8000500:	4d13      	ldr	r5, [pc, #76]	; (8000550 <MX_GPIO_Init+0xec>)
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000508:	4628      	mov	r0, r5
 800050a:	f003 f969 	bl	80037e0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FREE_USER_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8000512:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(FREE_USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000514:	2601      	movs	r6, #1
 8000516:	9606      	str	r6, [sp, #24]

 8000518:	9407      	str	r4, [sp, #28]
  /*Configure GPIO pin : PtPin */
 800051a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = FREE_USER_LED_Pin;
 800051c:	a905      	add	r1, sp, #20
 800051e:	4640      	mov	r0, r8
 8000520:	f003 f840 	bl	80035a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000528:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(FREE_USER_LED_GPIO_Port, &GPIO_InitStruct);
 800052a:	9406      	str	r4, [sp, #24]

 800052c:	9407      	str	r4, [sp, #28]
}
 800052e:	a905      	add	r1, sp, #20
 8000530:	4628      	mov	r0, r5
 8000532:	f003 f837 	bl	80035a4 <HAL_GPIO_Init>

/* USER CODE BEGIN 2 */

 8000536:	9705      	str	r7, [sp, #20]
/* USER CODE END 2 */
 8000538:	9606      	str	r6, [sp, #24]
 800053a:	9407      	str	r4, [sp, #28]
 800053c:	9408      	str	r4, [sp, #32]
 800053e:	a905      	add	r1, sp, #20
 8000540:	4628      	mov	r0, r5
 8000542:	f003 f82f 	bl	80035a4 <HAL_GPIO_Init>
 8000546:	b00a      	add	sp, #40	; 0x28
 8000548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800054c:	58024400 	.word	0x58024400
 8000550:	58020000 	.word	0x58020000
 8000554:	58020c00 	.word	0x58020c00

08000558 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000558:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800055a:	4815      	ldr	r0, [pc, #84]	; (80005b0 <MX_I2C4_Init+0x58>)
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <MX_I2C4_Init+0x5c>)
 800055e:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000560:	f1a3 531e 	sub.w	r3, r3, #662700032	; 0x27800000
 8000564:	f5a3 237a 	sub.w	r3, r3, #1024000	; 0xfa000
 8000568:	f2a3 634f 	subw	r3, r3, #1615	; 0x64f
 800056c:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	6083      	str	r3, [r0, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000572:	2201      	movs	r2, #1
 8000574:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000576:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000578:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800057a:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800057c:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800057e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000580:	f003 fac0 	bl	8003b04 <HAL_I2C_Init>
 8000584:	b950      	cbnz	r0, 800059c <MX_I2C4_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	2100      	movs	r1, #0
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <MX_I2C4_Init+0x58>)
 800058a:	f003 fbed 	bl	8003d68 <HAL_I2CEx_ConfigAnalogFilter>
 800058e:	b940      	cbnz	r0, 80005a2 <MX_I2C4_Init+0x4a>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000590:	2100      	movs	r1, #0
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <MX_I2C4_Init+0x58>)
 8000594:	f003 fc16 	bl	8003dc4 <HAL_I2CEx_ConfigDigitalFilter>
 8000598:	b930      	cbnz	r0, 80005a8 <MX_I2C4_Init+0x50>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800059a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800059c:	f000 f996 	bl	80008cc <Error_Handler>
 80005a0:	e7f1      	b.n	8000586 <MX_I2C4_Init+0x2e>
    Error_Handler();
 80005a2:	f000 f993 	bl	80008cc <Error_Handler>
 80005a6:	e7f3      	b.n	8000590 <MX_I2C4_Init+0x38>
    Error_Handler();
 80005a8:	f000 f990 	bl	80008cc <Error_Handler>
}
 80005ac:	e7f5      	b.n	800059a <MX_I2C4_Init+0x42>
 80005ae:	bf00      	nop
 80005b0:	240000bc 	.word	0x240000bc
 80005b4:	58001c00 	.word	0x58001c00

080005b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005b8:	b510      	push	{r4, lr}
 80005ba:	b0b6      	sub	sp, #216	; 0xd8
 80005bc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	2100      	movs	r1, #0
 80005c0:	9131      	str	r1, [sp, #196]	; 0xc4
 80005c2:	9132      	str	r1, [sp, #200]	; 0xc8
 80005c4:	9133      	str	r1, [sp, #204]	; 0xcc
 80005c6:	9134      	str	r1, [sp, #208]	; 0xd0
 80005c8:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ca:	22bc      	movs	r2, #188	; 0xbc
 80005cc:	a802      	add	r0, sp, #8
 80005ce:	f008 fec7 	bl	8009360 <memset>
  if(i2cHandle->Instance==I2C4)
 80005d2:	6822      	ldr	r2, [r4, #0]
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <HAL_I2C_MspInit+0x88>)
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80005da:	b036      	add	sp, #216	; 0xd8
 80005dc:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80005de:	2310      	movs	r3, #16
 80005e0:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005e2:	a802      	add	r0, sp, #8
 80005e4:	f004 faf8 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	bb38      	cbnz	r0, 800063a <HAL_I2C_MspInit+0x82>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4c16      	ldr	r4, [pc, #88]	; (8000644 <HAL_I2C_MspInit+0x8c>)
 80005ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80005f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000604:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000608:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800060a:	2312      	movs	r3, #18
 800060c:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000614:	2304      	movs	r3, #4
 8000616:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000618:	a931      	add	r1, sp, #196	; 0xc4
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <HAL_I2C_MspInit+0x90>)
 800061c:	f002 ffc2 	bl	80035a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000620:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000628:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800062c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8000630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	9b01      	ldr	r3, [sp, #4]
}
 8000638:	e7cf      	b.n	80005da <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800063a:	f000 f947 	bl	80008cc <Error_Handler>
 800063e:	e7d4      	b.n	80005ea <HAL_I2C_MspInit+0x32>
 8000640:	58001c00 	.word	0x58001c00
 8000644:	58024400 	.word	0x58024400
 8000648:	58020c00 	.word	0x58020c00

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000650:	f000 f933 	bl	80008ba <_ZL10MPU_Configv>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000654:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <main+0xc8>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf14      	ite	ne
 8000660:	2301      	movne	r3, #1
 8000662:	2300      	moveq	r3, #0
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d11b      	bne.n	80006a2 <main+0x56>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800066a:	f3bf 8f4f 	dsb	sy
}
 800066e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000670:	f3bf 8f6f 	isb	sy
}
 8000674:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <main+0xc8>)
 8000678:	2200      	movs	r2, #0
 800067a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800067e:	f3bf 8f4f 	dsb	sy
}
 8000682:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000684:	f3bf 8f6f 	isb	sy
}
 8000688:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <main+0xc8>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a21      	ldr	r2, [pc, #132]	; (8000714 <main+0xc8>)
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069c:	f3bf 8f6f 	isb	sy
}
 80006a0:	e000      	b.n	80006a4 <main+0x58>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006a2:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 ff22 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f83c 	bl	8000724 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ac:	f000 f8d2 	bl	8000854 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f7ff fed8 	bl	8000464 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b4:	f7ff fe92 	bl	80003dc <MX_DMA_Init>
  MX_CRC_Init();
 80006b8:	f7ff fe62 	bl	8000380 <MX_CRC_Init>
  MX_SAI2_Init();
 80006bc:	f000 f97c 	bl	80009b8 <MX_SAI2_Init>
  MX_SAI1_Init();
 80006c0:	f000 f946 	bl	8000950 <MX_SAI1_Init>
  MX_RNG_Init();
 80006c4:	f000 f908 	bl	80008d8 <MX_RNG_Init>
  MX_TIM2_Init();
 80006c8:	f000 fd40 	bl	800114c <MX_TIM2_Init>
  MX_I2C4_Init();
 80006cc:	f7ff ff44 	bl	8000558 <MX_I2C4_Init>
  MX_SPI1_Init();
 80006d0:	f000 fb2c 	bl	8000d2c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	CodecPowerUp(CODEC_ADDRESS_1);
 80006d4:	2036      	movs	r0, #54	; 0x36
 80006d6:	f000 fe8e 	bl	80013f6 <CodecPowerUp>
	SetHPGain(-8,CODEC_ADDRESS_1);
 80006da:	2136      	movs	r1, #54	; 0x36
 80006dc:	f06f 0007 	mvn.w	r0, #7
 80006e0:	f000 fe70 	bl	80013c4 <SetHPGain>

	CodecPowerUp(CODEC_ADDRESS_0);
 80006e4:	2034      	movs	r0, #52	; 0x34
 80006e6:	f000 fe86 	bl	80013f6 <CodecPowerUp>
	SetHPGain(-8,CODEC_ADDRESS_0);
 80006ea:	2134      	movs	r1, #52	; 0x34
 80006ec:	f06f 0007 	mvn.w	r0, #7
 80006f0:	f000 fe68 	bl	80013c4 <SetHPGain>


	saiAdapter_Init(&sai2adapter,HW_SAI2);
 80006f4:	2102      	movs	r1, #2
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <main+0xcc>)
 80006f8:	f000 fdae 	bl	8001258 <saiAdapter_Init>
	saiAdapter_Init(&sai1adapter,HW_SAI1);
 80006fc:	2101      	movs	r1, #1
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <main+0xd0>)
 8000700:	f000 fdaa 	bl	8001258 <saiAdapter_Init>
//uint16_t rxbuf[256 + 2];
//PsramRead(rxbuf, 256,0);
//HAL_Delay(1);


	audioSystem.includeModules();
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <main+0xd4>)
 8000706:	f007 fa43 	bl	8007b90 <_ZN8AudioSys14includeModulesEv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  audioSystem.update();
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <main+0xd4>)
 800070c:	f007 f90f 	bl	800792e <_ZN8AudioSys6updateEv>
 8000710:	e7fb      	b.n	800070a <main+0xbe>
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00
 8000718:	24000754 	.word	0x24000754
 800071c:	2400072c 	.word	0x2400072c
 8000720:	24000fd0 	.word	0x24000fd0

08000724 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09c      	sub	sp, #112	; 0x70
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072e:	224c      	movs	r2, #76	; 0x4c
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f008 fe14 	bl	8009360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2220      	movs	r2, #32
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f008 fe0e 	bl	8009360 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000744:	2002      	movs	r0, #2
 8000746:	f003 fb69 	bl	8003e1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <_Z18SystemClock_Configv+0x124>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a3d      	ldr	r2, [pc, #244]	; (8000848 <_Z18SystemClock_Configv+0x124>)
 8000754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <_Z18SystemClock_Configv+0x124>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <_Z18SystemClock_Configv+0x128>)
 8000766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000768:	4a38      	ldr	r2, [pc, #224]	; (800084c <_Z18SystemClock_Configv+0x128>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <_Z18SystemClock_Configv+0x128>)
 8000772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800077c:	4b32      	ldr	r3, [pc, #200]	; (8000848 <_Z18SystemClock_Configv+0x124>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000788:	bf14      	ite	ne
 800078a:	2301      	movne	r3, #1
 800078c:	2300      	moveq	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d000      	beq.n	8000796 <_Z18SystemClock_Configv+0x72>
 8000794:	e7f2      	b.n	800077c <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <_Z18SystemClock_Configv+0x12c>)
 8000798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079a:	f023 0303 	bic.w	r3, r3, #3
 800079e:	4a2c      	ldr	r2, [pc, #176]	; (8000850 <_Z18SystemClock_Configv+0x12c>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007a6:	2321      	movs	r3, #33	; 0x21
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80007c8:	2314      	movs	r3, #20
 80007ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 10;
 80007cc:	230a      	movs	r3, #10
 80007ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007d0:	2308      	movs	r3, #8
 80007d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fb43 	bl	8003e6c <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bf14      	ite	ne
 80007ec:	2301      	movne	r3, #1
 80007ee:	2300      	moveq	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80007f6:	f000 f869 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	233f      	movs	r3, #63	; 0x3f
 80007fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2303      	movs	r3, #3
 8000800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000806:	2308      	movs	r3, #8
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800080a:	2340      	movs	r3, #64	; 0x40
 800080c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000818:	2340      	movs	r3, #64	; 0x40
 800081a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2104      	movs	r1, #4
 8000820:	4618      	mov	r0, r3
 8000822:	f003 ff5b 	bl	80046dc <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	bf14      	ite	ne
 800082c:	2301      	movne	r3, #1
 800082e:	2300      	moveq	r3, #0
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <_Z18SystemClock_Configv+0x116>
  {
    Error_Handler();
 8000836:	f000 f849 	bl	80008cc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800083a:	f003 fe4f 	bl	80044dc <HAL_RCC_EnableCSS>
}
 800083e:	bf00      	nop
 8000840:	3770      	adds	r7, #112	; 0x70
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	58024800 	.word	0x58024800
 800084c:	58000400 	.word	0x58000400
 8000850:	58024400 	.word	0x58024400

08000854 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0b0      	sub	sp, #192	; 0xc0
 8000858:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	22bc      	movs	r2, #188	; 0xbc
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f008 fd7d 	bl	8009360 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2;
 8000866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800086a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL3.PLL3M = 10;
 800086c:	230a      	movs	r3, #10
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 128;
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 25;
 8000874:	2319      	movs	r3, #25
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 16;
 8000878:	2310      	movs	r3, #16
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800087c:	2302      	movs	r3, #2
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8000880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000886:	2300      	movs	r3, #0
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 800088e:	2302      	movs	r3, #2
 8000890:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL3;
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4618      	mov	r0, r3
 800089a:	f004 f99d 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bf14      	ite	ne
 80008a4:	2301      	movne	r3, #1
 80008a6:	2300      	moveq	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <_Z24PeriphCommonClock_Configv+0x5e>
  {
    Error_Handler();
 80008ae:	f000 f80d 	bl	80008cc <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	37c0      	adds	r7, #192	; 0xc0
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008be:	f000 fed7 	bl	8001670 <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008c2:	2004      	movs	r0, #4
 80008c4:	f000 fee2 	bl	800168c <HAL_MPU_Enable>

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80008d8:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_RNG_Init+0x1c>)
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_RNG_Init+0x20>)
 80008de:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008e4:	f005 fc5e 	bl	80061a4 <HAL_RNG_Init>
 80008e8:	b900      	cbnz	r0, 80008ec <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008ea:	bd08      	pop	{r3, pc}
    Error_Handler();
 80008ec:	f7ff ffee 	bl	80008cc <Error_Handler>
}
 80008f0:	e7fb      	b.n	80008ea <MX_RNG_Init+0x12>
 80008f2:	bf00      	nop
 80008f4:	24000108 	.word	0x24000108
 80008f8:	48021800 	.word	0x48021800

080008fc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80008fc:	b510      	push	{r4, lr}
 80008fe:	b0b0      	sub	sp, #192	; 0xc0
 8000900:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000902:	22bc      	movs	r2, #188	; 0xbc
 8000904:	2100      	movs	r1, #0
 8000906:	a801      	add	r0, sp, #4
 8000908:	f008 fd2a 	bl	8009360 <memset>
  if(rngHandle->Instance==RNG)
 800090c:	6822      	ldr	r2, [r4, #0]
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_RNG_MspInit+0x4c>)
 8000910:	429a      	cmp	r2, r3
 8000912:	d001      	beq.n	8000918 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000914:	b030      	add	sp, #192	; 0xc0
 8000916:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800091c:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091e:	a801      	add	r0, sp, #4
 8000920:	f004 f95a 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000924:	b968      	cbnz	r0, 8000942 <HAL_RNG_MspInit+0x46>
    __HAL_RCC_RNG_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_RNG_MspInit+0x50>)
 8000928:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800092c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000930:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000934:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	9b00      	ldr	r3, [sp, #0]
}
 8000940:	e7e8      	b.n	8000914 <HAL_RNG_MspInit+0x18>
      Error_Handler();
 8000942:	f7ff ffc3 	bl	80008cc <Error_Handler>
 8000946:	e7ee      	b.n	8000926 <HAL_RNG_MspInit+0x2a>
 8000948:	48021800 	.word	0x48021800
 800094c:	58024400 	.word	0x58024400

08000950 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000950:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000952:	4815      	ldr	r0, [pc, #84]	; (80009a8 <MX_SAI1_Init+0x58>)
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_SAI1_Init+0x5c>)
 8000956:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000958:	2303      	movs	r3, #3
 800095a:	6043      	str	r3, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800095c:	2100      	movs	r1, #0
 800095e:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000960:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000962:	61c1      	str	r1, [r0, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_OUTBLOCKA_ENABLE;
 8000964:	2201      	movs	r2, #1
 8000966:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000968:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800096a:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800096c:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BITEXTENDED, 2) != HAL_OK)
 800096e:	2302      	movs	r3, #2
 8000970:	f005 fe76 	bl	8006660 <HAL_SAI_InitProtocol>
 8000974:	b988      	cbnz	r0, 800099a <MX_SAI1_Init+0x4a>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_SAI1_Init+0x60>)
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SAI1_Init+0x64>)
 800097a:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
 800097c:	2302      	movs	r3, #2
 800097e:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000980:	2201      	movs	r2, #1
 8000982:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000984:	2100      	movs	r1, #0
 8000986:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000988:	61c1      	str	r1, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_OUTBLOCKA_ENABLE;
 800098a:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800098c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800098e:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000990:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BITEXTENDED, 2) != HAL_OK)
 8000992:	f005 fe65 	bl	8006660 <HAL_SAI_InitProtocol>
 8000996:	b918      	cbnz	r0, 80009a0 <MX_SAI1_Init+0x50>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000998:	bd08      	pop	{r3, pc}
    Error_Handler();
 800099a:	f7ff ff97 	bl	80008cc <Error_Handler>
 800099e:	e7ea      	b.n	8000976 <MX_SAI1_Init+0x26>
    Error_Handler();
 80009a0:	f7ff ff94 	bl	80008cc <Error_Handler>
}
 80009a4:	e7f8      	b.n	8000998 <MX_SAI1_Init+0x48>
 80009a6:	bf00      	nop
 80009a8:	24000304 	.word	0x24000304
 80009ac:	40015804 	.word	0x40015804
 80009b0:	24000434 	.word	0x24000434
 80009b4:	40015824 	.word	0x40015824

080009b8 <MX_SAI2_Init>:
/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80009b8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 80009ba:	4814      	ldr	r0, [pc, #80]	; (8000a0c <MX_SAI2_Init+0x54>)
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_SAI2_Init+0x58>)
 80009be:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODESLAVE_RX;
 80009c0:	2303      	movs	r3, #3
 80009c2:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_SYNCHRONOUS_EXT_SAI1;
 80009c4:	2302      	movs	r3, #2
 80009c6:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009c8:	2100      	movs	r1, #0
 80009ca:	6141      	str	r1, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80009cc:	61c1      	str	r1, [r0, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80009ce:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80009d0:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009d2:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BITEXTENDED, 2) != HAL_OK)
 80009d4:	2201      	movs	r2, #1
 80009d6:	f005 fe43 	bl	8006660 <HAL_SAI_InitProtocol>
 80009da:	b980      	cbnz	r0, 80009fe <MX_SAI2_Init+0x46>
  {
    Error_Handler();
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_SAI2_Init+0x5c>)
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_SAI2_Init+0x60>)
 80009e0:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_TX;
 80009e2:	2302      	movs	r3, #2
 80009e4:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80009e6:	2201      	movs	r2, #1
 80009e8:	6082      	str	r2, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009ea:	2100      	movs	r1, #0
 80009ec:	6141      	str	r1, [r0, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80009ee:	61c1      	str	r1, [r0, #28]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80009f0:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80009f2:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009f4:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BITEXTENDED, 2) != HAL_OK)
 80009f6:	f005 fe33 	bl	8006660 <HAL_SAI_InitProtocol>
 80009fa:	b918      	cbnz	r0, 8000a04 <MX_SAI2_Init+0x4c>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80009fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009fe:	f7ff ff65 	bl	80008cc <Error_Handler>
 8000a02:	e7eb      	b.n	80009dc <MX_SAI2_Init+0x24>
    Error_Handler();
 8000a04:	f7ff ff62 	bl	80008cc <Error_Handler>
}
 8000a08:	e7f8      	b.n	80009fc <MX_SAI2_Init+0x44>
 8000a0a:	bf00      	nop
 8000a0c:	2400039c 	.word	0x2400039c
 8000a10:	40015c04 	.word	0x40015c04
 8000a14:	240004cc 	.word	0x240004cc
 8000a18:	40015c24 	.word	0x40015c24

08000a1c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	b08b      	sub	sp, #44	; 0x2c
 8000a20:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000a22:	6802      	ldr	r2, [r0, #0]
 8000a24:	4ba0      	ldr	r3, [pc, #640]	; (8000ca8 <HAL_SAI_MspInit+0x28c>)
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d00f      	beq.n	8000a4a <HAL_SAI_MspInit+0x2e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8000a2a:	6822      	ldr	r2, [r4, #0]
 8000a2c:	4b9f      	ldr	r3, [pc, #636]	; (8000cac <HAL_SAI_MspInit+0x290>)
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d063      	beq.n	8000afa <HAL_SAI_MspInit+0xde>
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000a32:	6822      	ldr	r2, [r4, #0]
 8000a34:	4b9e      	ldr	r3, [pc, #632]	; (8000cb0 <HAL_SAI_MspInit+0x294>)
 8000a36:	429a      	cmp	r2, r3
 8000a38:	f000 80af 	beq.w	8000b9a <HAL_SAI_MspInit+0x17e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000a3c:	6822      	ldr	r2, [r4, #0]
 8000a3e:	4b9d      	ldr	r3, [pc, #628]	; (8000cb4 <HAL_SAI_MspInit+0x298>)
 8000a40:	429a      	cmp	r2, r3
 8000a42:	f000 80f8 	beq.w	8000c36 <HAL_SAI_MspInit+0x21a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
    }
}
 8000a46:	b00b      	add	sp, #44	; 0x2c
 8000a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 8000a4a:	4b9b      	ldr	r3, [pc, #620]	; (8000cb8 <HAL_SAI_MspInit+0x29c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d03a      	beq.n	8000ac8 <HAL_SAI_MspInit+0xac>
    SAI1_client ++;
 8000a52:	4a99      	ldr	r2, [pc, #612]	; (8000cb8 <HAL_SAI_MspInit+0x29c>)
 8000a54:	6813      	ldr	r3, [r2, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a5a:	2330      	movs	r3, #48	; 0x30
 8000a5c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2602      	movs	r6, #2
 8000a60:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2500      	movs	r5, #0
 8000a64:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000a68:	2706      	movs	r7, #6
 8000a6a:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a6c:	a905      	add	r1, sp, #20
 8000a6e:	4893      	ldr	r0, [pc, #588]	; (8000cbc <HAL_SAI_MspInit+0x2a0>)
 8000a70:	f002 fd98 	bl	80035a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a74:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000a7c:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	a905      	add	r1, sp, #20
 8000a80:	488f      	ldr	r0, [pc, #572]	; (8000cc0 <HAL_SAI_MspInit+0x2a4>)
 8000a82:	f002 fd8f 	bl	80035a4 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream0;
 8000a86:	488f      	ldr	r0, [pc, #572]	; (8000cc4 <HAL_SAI_MspInit+0x2a8>)
 8000a88:	4b8f      	ldr	r3, [pc, #572]	; (8000cc8 <HAL_SAI_MspInit+0x2ac>)
 8000a8a:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8000a8c:	2357      	movs	r3, #87	; 0x57
 8000a8e:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a90:	6085      	str	r5, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a98:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a9e:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aaa:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8000aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab0:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000ab4:	f001 f8de 	bl	8001c74 <HAL_DMA_Init>
 8000ab8:	b9e0      	cbnz	r0, 8000af4 <HAL_SAI_MspInit+0xd8>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8000aba:	4b82      	ldr	r3, [pc, #520]	; (8000cc4 <HAL_SAI_MspInit+0x2a8>)
 8000abc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8000ac0:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8000ac2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8000ac6:	e7b0      	b.n	8000a2a <HAL_SAI_MspInit+0xe>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000ac8:	4b80      	ldr	r3, [pc, #512]	; (8000ccc <HAL_SAI_MspInit+0x2b0>)
 8000aca:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000ace:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000ad2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	2057      	movs	r0, #87	; 0x57
 8000ae8:	f000 fd6c 	bl	80015c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8000aec:	2057      	movs	r0, #87	; 0x57
 8000aee:	f000 fd9d 	bl	800162c <HAL_NVIC_EnableIRQ>
 8000af2:	e7ae      	b.n	8000a52 <HAL_SAI_MspInit+0x36>
      Error_Handler();
 8000af4:	f7ff feea 	bl	80008cc <Error_Handler>
 8000af8:	e7df      	b.n	8000aba <HAL_SAI_MspInit+0x9e>
      if (SAI1_client == 0)
 8000afa:	4b6f      	ldr	r3, [pc, #444]	; (8000cb8 <HAL_SAI_MspInit+0x29c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d032      	beq.n	8000b68 <HAL_SAI_MspInit+0x14c>
    SAI1_client ++;
 8000b02:	4a6d      	ldr	r2, [pc, #436]	; (8000cb8 <HAL_SAI_MspInit+0x29c>)
 8000b04:	6813      	ldr	r3, [r2, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2500      	movs	r5, #0
 8000b14:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000b18:	2306      	movs	r3, #6
 8000b1a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1c:	a905      	add	r1, sp, #20
 8000b1e:	4867      	ldr	r0, [pc, #412]	; (8000cbc <HAL_SAI_MspInit+0x2a0>)
 8000b20:	f002 fd40 	bl	80035a4 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream1;
 8000b24:	486a      	ldr	r0, [pc, #424]	; (8000cd0 <HAL_SAI_MspInit+0x2b4>)
 8000b26:	4b6b      	ldr	r3, [pc, #428]	; (8000cd4 <HAL_SAI_MspInit+0x2b8>)
 8000b28:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8000b2a:	2358      	movs	r3, #88	; 0x58
 8000b2c:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b2e:	2340      	movs	r3, #64	; 0x40
 8000b30:	6083      	str	r3, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b32:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8000b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b38:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b3e:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8000b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4a:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 8000b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b50:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b52:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8000b54:	f001 f88e 	bl	8001c74 <HAL_DMA_Init>
 8000b58:	b9e0      	cbnz	r0, 8000b94 <HAL_SAI_MspInit+0x178>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8000b5a:	4b5d      	ldr	r3, [pc, #372]	; (8000cd0 <HAL_SAI_MspInit+0x2b4>)
 8000b5c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8000b60:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8000b62:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8000b66:	e764      	b.n	8000a32 <HAL_SAI_MspInit+0x16>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000b68:	4b58      	ldr	r3, [pc, #352]	; (8000ccc <HAL_SAI_MspInit+0x2b0>)
 8000b6a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000b6e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000b72:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	9b02      	ldr	r3, [sp, #8]
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	4611      	mov	r1, r2
 8000b86:	2057      	movs	r0, #87	; 0x57
 8000b88:	f000 fd1c 	bl	80015c4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8000b8c:	2057      	movs	r0, #87	; 0x57
 8000b8e:	f000 fd4d 	bl	800162c <HAL_NVIC_EnableIRQ>
 8000b92:	e7b6      	b.n	8000b02 <HAL_SAI_MspInit+0xe6>
      Error_Handler();
 8000b94:	f7ff fe9a 	bl	80008cc <Error_Handler>
 8000b98:	e7df      	b.n	8000b5a <HAL_SAI_MspInit+0x13e>
    if (SAI2_client == 0)
 8000b9a:	4b4f      	ldr	r3, [pc, #316]	; (8000cd8 <HAL_SAI_MspInit+0x2bc>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d030      	beq.n	8000c04 <HAL_SAI_MspInit+0x1e8>
    SAI2_client ++;
 8000ba2:	4a4d      	ldr	r2, [pc, #308]	; (8000cd8 <HAL_SAI_MspInit+0x2bc>)
 8000ba4:	6813      	ldr	r3, [r2, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000baa:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8000bae:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2500      	movs	r5, #0
 8000bb6:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bba:	230a      	movs	r3, #10
 8000bbc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbe:	a905      	add	r1, sp, #20
 8000bc0:	4846      	ldr	r0, [pc, #280]	; (8000cdc <HAL_SAI_MspInit+0x2c0>)
 8000bc2:	f002 fcef 	bl	80035a4 <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA1_Stream2;
 8000bc6:	4846      	ldr	r0, [pc, #280]	; (8000ce0 <HAL_SAI_MspInit+0x2c4>)
 8000bc8:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <HAL_SAI_MspInit+0x2c8>)
 8000bca:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_SAI2_A;
 8000bcc:	2359      	movs	r3, #89	; 0x59
 8000bce:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd0:	6085      	str	r5, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd2:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd8:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bda:	6146      	str	r6, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be0:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be6:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bec:	6203      	str	r3, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bee:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000bf0:	f001 f840 	bl	8001c74 <HAL_DMA_Init>
 8000bf4:	b9e0      	cbnz	r0, 8000c30 <HAL_SAI_MspInit+0x214>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000bf6:	4b3a      	ldr	r3, [pc, #232]	; (8000ce0 <HAL_SAI_MspInit+0x2c4>)
 8000bf8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8000bfc:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000bfe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8000c02:	e71b      	b.n	8000a3c <HAL_SAI_MspInit+0x20>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000c04:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <HAL_SAI_MspInit+0x2b0>)
 8000c06:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000c0a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c0e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c1a:	9303      	str	r3, [sp, #12]
 8000c1c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4611      	mov	r1, r2
 8000c22:	205b      	movs	r0, #91	; 0x5b
 8000c24:	f000 fcce 	bl	80015c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000c28:	205b      	movs	r0, #91	; 0x5b
 8000c2a:	f000 fcff 	bl	800162c <HAL_NVIC_EnableIRQ>
 8000c2e:	e7b8      	b.n	8000ba2 <HAL_SAI_MspInit+0x186>
      Error_Handler();
 8000c30:	f7ff fe4c 	bl	80008cc <Error_Handler>
 8000c34:	e7df      	b.n	8000bf6 <HAL_SAI_MspInit+0x1da>
      if (SAI2_client == 0)
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_SAI_MspInit+0x2bc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d05a      	beq.n	8000cf4 <HAL_SAI_MspInit+0x2d8>
    SAI2_client ++;
 8000c3e:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <HAL_SAI_MspInit+0x2bc>)
 8000c40:	6813      	ldr	r3, [r2, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c46:	2301      	movs	r3, #1
 8000c48:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2500      	movs	r5, #0
 8000c50:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c54:	230a      	movs	r3, #10
 8000c56:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	a905      	add	r1, sp, #20
 8000c5a:	4823      	ldr	r0, [pc, #140]	; (8000ce8 <HAL_SAI_MspInit+0x2cc>)
 8000c5c:	f002 fca2 	bl	80035a4 <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA1_Stream3;
 8000c60:	4822      	ldr	r0, [pc, #136]	; (8000cec <HAL_SAI_MspInit+0x2d0>)
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_SAI_MspInit+0x2d4>)
 8000c64:	6003      	str	r3, [r0, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_SAI2_B;
 8000c66:	235a      	movs	r3, #90	; 0x5a
 8000c68:	6043      	str	r3, [r0, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c6a:	2340      	movs	r3, #64	; 0x40
 8000c6c:	6083      	str	r3, [r0, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6e:	60c5      	str	r5, [r0, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c74:	6103      	str	r3, [r0, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c7a:	6143      	str	r3, [r0, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c80:	6183      	str	r3, [r0, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c86:	61c3      	str	r3, [r0, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8c:	6203      	str	r3, [r0, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c8e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000c90:	f000 fff0 	bl	8001c74 <HAL_DMA_Init>
 8000c94:	2800      	cmp	r0, #0
 8000c96:	d143      	bne.n	8000d20 <HAL_SAI_MspInit+0x304>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_SAI_MspInit+0x2d0>)
 8000c9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8000c9e:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000ca0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8000ca4:	e6cf      	b.n	8000a46 <HAL_SAI_MspInit+0x2a>
 8000ca6:	bf00      	nop
 8000ca8:	40015804 	.word	0x40015804
 8000cac:	40015824 	.word	0x40015824
 8000cb0:	40015c04 	.word	0x40015c04
 8000cb4:	40015c24 	.word	0x40015c24
 8000cb8:	2400011c 	.word	0x2400011c
 8000cbc:	58021000 	.word	0x58021000
 8000cc0:	58020800 	.word	0x58020800
 8000cc4:	24000124 	.word	0x24000124
 8000cc8:	40020010 	.word	0x40020010
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	2400019c 	.word	0x2400019c
 8000cd4:	40020028 	.word	0x40020028
 8000cd8:	24000120 	.word	0x24000120
 8000cdc:	58020c00 	.word	0x58020c00
 8000ce0:	24000214 	.word	0x24000214
 8000ce4:	40020040 	.word	0x40020040
 8000ce8:	58020000 	.word	0x58020000
 8000cec:	2400028c 	.word	0x2400028c
 8000cf0:	40020058 	.word	0x40020058
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_SAI_MspInit+0x30c>)
 8000cf6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000cfa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000cfe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d0a:	9304      	str	r3, [sp, #16]
 8000d0c:	9b04      	ldr	r3, [sp, #16]
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4611      	mov	r1, r2
 8000d12:	205b      	movs	r0, #91	; 0x5b
 8000d14:	f000 fc56 	bl	80015c4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d18:	205b      	movs	r0, #91	; 0x5b
 8000d1a:	f000 fc87 	bl	800162c <HAL_NVIC_EnableIRQ>
 8000d1e:	e78e      	b.n	8000c3e <HAL_SAI_MspInit+0x222>
      Error_Handler();
 8000d20:	f7ff fdd4 	bl	80008cc <Error_Handler>
 8000d24:	e7b8      	b.n	8000c98 <HAL_SAI_MspInit+0x27c>
 8000d26:	bf00      	nop
 8000d28:	58024400 	.word	0x58024400

08000d2c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d2c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d2e:	4814      	ldr	r0, [pc, #80]	; (8000d80 <MX_SPI1_Init+0x54>)
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_SPI1_Init+0x58>)
 8000d32:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d38:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 8000d3e:	220f      	movs	r2, #15
 8000d40:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d42:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d44:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d4a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d50:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d52:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d54:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d56:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d58:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5e:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d60:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d62:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d64:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d66:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d68:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d6a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d6c:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d6e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d70:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d72:	f006 f8d1 	bl	8006f18 <HAL_SPI_Init>
 8000d76:	b900      	cbnz	r0, 8000d7a <MX_SPI1_Init+0x4e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d78:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d7a:	f7ff fda7 	bl	80008cc <Error_Handler>
}
 8000d7e:	e7fb      	b.n	8000d78 <MX_SPI1_Init+0x4c>
 8000d80:	24000654 	.word	0x24000654
 8000d84:	40013000 	.word	0x40013000

08000d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d8c:	b0b6      	sub	sp, #216	; 0xd8
 8000d8e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	2100      	movs	r1, #0
 8000d92:	9131      	str	r1, [sp, #196]	; 0xc4
 8000d94:	9132      	str	r1, [sp, #200]	; 0xc8
 8000d96:	9133      	str	r1, [sp, #204]	; 0xcc
 8000d98:	9134      	str	r1, [sp, #208]	; 0xd0
 8000d9a:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	22bc      	movs	r2, #188	; 0xbc
 8000d9e:	a802      	add	r0, sp, #8
 8000da0:	f008 fade 	bl	8009360 <memset>
  if(spiHandle->Instance==SPI1)
 8000da4:	6822      	ldr	r2, [r4, #0]
 8000da6:	4b47      	ldr	r3, [pc, #284]	; (8000ec4 <HAL_SPI_MspInit+0x13c>)
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d002      	beq.n	8000db2 <HAL_SPI_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dac:	b036      	add	sp, #216	; 0xd8
 8000dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000db8:	2204      	movs	r2, #4
 8000dba:	9203      	str	r2, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 108;
 8000dbc:	226c      	movs	r2, #108	; 0x6c
 8000dbe:	9204      	str	r2, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	9205      	str	r2, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	9206      	str	r2, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000dc8:	2203      	movs	r2, #3
 8000dca:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000dd0:	9319      	str	r3, [sp, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd2:	a802      	add	r0, sp, #8
 8000dd4:	f003 ff00 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	d16a      	bne.n	8000eb2 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <HAL_SPI_MspInit+0x140>)
 8000dde:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000de2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000de6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000dea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8000dee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000df2:	9200      	str	r2, [sp, #0]
 8000df4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dfa:	f042 0201 	orr.w	r2, r2, #1
 8000dfe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e0e:	2310      	movs	r3, #16
 8000e10:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2502      	movs	r5, #2
 8000e14:	9532      	str	r5, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	f04f 0803 	mov.w	r8, #3
 8000e1e:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2705      	movs	r7, #5
 8000e24:	9735      	str	r7, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	4e29      	ldr	r6, [pc, #164]	; (8000ecc <HAL_SPI_MspInit+0x144>)
 8000e28:	a931      	add	r1, sp, #196	; 0xc4
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	f002 fbba 	bl	80035a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e30:	23e0      	movs	r3, #224	; 0xe0
 8000e32:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	9532      	str	r5, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2500      	movs	r5, #0
 8000e38:	9533      	str	r5, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3e:	9735      	str	r7, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	a931      	add	r1, sp, #196	; 0xc4
 8000e42:	4630      	mov	r0, r6
 8000e44:	f002 fbae 	bl	80035a4 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8000e48:	4821      	ldr	r0, [pc, #132]	; (8000ed0 <HAL_SPI_MspInit+0x148>)
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_SPI_MspInit+0x14c>)
 8000e4c:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000e4e:	2325      	movs	r3, #37	; 0x25
 8000e50:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e52:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e54:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5a:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e5c:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e5e:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000e60:	61c5      	str	r5, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e62:	6205      	str	r5, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e64:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e66:	f000 ff05 	bl	8001c74 <HAL_DMA_Init>
 8000e6a:	bb28      	cbnz	r0, 8000eb8 <HAL_SPI_MspInit+0x130>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_SPI_MspInit+0x148>)
 8000e6e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8000e70:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8000e72:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <HAL_SPI_MspInit+0x150>)
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_SPI_MspInit+0x154>)
 8000e76:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000e78:	2326      	movs	r3, #38	; 0x26
 8000e7a:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e7c:	2340      	movs	r3, #64	; 0x40
 8000e7e:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e88:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e8a:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e8c:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e8e:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e90:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e92:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e94:	f000 feee 	bl	8001c74 <HAL_DMA_Init>
 8000e98:	b988      	cbnz	r0, 8000ebe <HAL_SPI_MspInit+0x136>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_SPI_MspInit+0x150>)
 8000e9c:	67a3      	str	r3, [r4, #120]	; 0x78
 8000e9e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	2023      	movs	r0, #35	; 0x23
 8000ea6:	f000 fb8d 	bl	80015c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000eaa:	2023      	movs	r0, #35	; 0x23
 8000eac:	f000 fbbe 	bl	800162c <HAL_NVIC_EnableIRQ>
}
 8000eb0:	e77c      	b.n	8000dac <HAL_SPI_MspInit+0x24>
      Error_Handler();
 8000eb2:	f7ff fd0b 	bl	80008cc <Error_Handler>
 8000eb6:	e791      	b.n	8000ddc <HAL_SPI_MspInit+0x54>
      Error_Handler();
 8000eb8:	f7ff fd08 	bl	80008cc <Error_Handler>
 8000ebc:	e7d6      	b.n	8000e6c <HAL_SPI_MspInit+0xe4>
      Error_Handler();
 8000ebe:	f7ff fd05 	bl	80008cc <Error_Handler>
 8000ec2:	e7ea      	b.n	8000e9a <HAL_SPI_MspInit+0x112>
 8000ec4:	40013000 	.word	0x40013000
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	24000564 	.word	0x24000564
 8000ed4:	40020070 	.word	0x40020070
 8000ed8:	240005dc 	.word	0x240005dc
 8000edc:	40020088 	.word	0x40020088

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HAL_MspInit+0x20>)
 8000ee4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ee8:	f042 0202 	orr.w	r2, r2, #2
 8000eec:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efc:	b002      	add	sp, #8
 8000efe:	4770      	bx	lr
 8000f00:	58024400 	.word	0x58024400

08000f04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler>

08000f06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler>

08000f08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler>

08000f0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler>

08000f0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler>

08000f0e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f16:	f000 fb17 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1a:	bd08      	pop	{r3, pc}

08000f1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000f1e:	4802      	ldr	r0, [pc, #8]	; (8000f28 <DMA1_Stream0_IRQHandler+0xc>)
 8000f20:	f001 fe82 	bl	8002c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f24:	bd08      	pop	{r3, pc}
 8000f26:	bf00      	nop
 8000f28:	24000124 	.word	0x24000124

08000f2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8000f2e:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DMA1_Stream1_IRQHandler+0xc>)
 8000f30:	f001 fe7a 	bl	8002c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f34:	bd08      	pop	{r3, pc}
 8000f36:	bf00      	nop
 8000f38:	2400019c 	.word	0x2400019c

08000f3c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000f3e:	4802      	ldr	r0, [pc, #8]	; (8000f48 <DMA1_Stream2_IRQHandler+0xc>)
 8000f40:	f001 fe72 	bl	8002c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000f44:	bd08      	pop	{r3, pc}
 8000f46:	bf00      	nop
 8000f48:	24000214 	.word	0x24000214

08000f4c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000f4e:	4802      	ldr	r0, [pc, #8]	; (8000f58 <DMA1_Stream3_IRQHandler+0xc>)
 8000f50:	f001 fe6a 	bl	8002c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f54:	bd08      	pop	{r3, pc}
 8000f56:	bf00      	nop
 8000f58:	2400028c 	.word	0x2400028c

08000f5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f5e:	4802      	ldr	r0, [pc, #8]	; (8000f68 <DMA1_Stream4_IRQHandler+0xc>)
 8000f60:	f001 fe62 	bl	8002c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f64:	bd08      	pop	{r3, pc}
 8000f66:	bf00      	nop
 8000f68:	24000564 	.word	0x24000564

08000f6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f6e:	4802      	ldr	r0, [pc, #8]	; (8000f78 <DMA1_Stream5_IRQHandler+0xc>)
 8000f70:	f001 fe5a 	bl	8002c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f74:	bd08      	pop	{r3, pc}
 8000f76:	bf00      	nop
 8000f78:	240005dc 	.word	0x240005dc

08000f7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f7e:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM2_IRQHandler+0xc>)
 8000f80:	f006 f9b8 	bl	80072f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f84:	bd08      	pop	{r3, pc}
 8000f86:	bf00      	nop
 8000f88:	240006e0 	.word	0x240006e0

08000f8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f8e:	4802      	ldr	r0, [pc, #8]	; (8000f98 <SPI1_IRQHandler+0xc>)
 8000f90:	f006 f878 	bl	8007084 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f94:	bd08      	pop	{r3, pc}
 8000f96:	bf00      	nop
 8000f98:	24000654 	.word	0x24000654

08000f9c <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8000f9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <SAI1_IRQHandler+0x10>)
 8000fa0:	f005 fe06 	bl	8006bb0 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <SAI1_IRQHandler+0x14>)
 8000fa6:	f005 fe03 	bl	8006bb0 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8000faa:	bd08      	pop	{r3, pc}
 8000fac:	24000304 	.word	0x24000304
 8000fb0:	24000434 	.word	0x24000434

08000fb4 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8000fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8000fb6:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <SAI2_IRQHandler+0x10>)
 8000fb8:	f005 fdfa 	bl	8006bb0 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <SAI2_IRQHandler+0x14>)
 8000fbe:	f005 fdf7 	bl	8006bb0 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8000fc2:	bd08      	pop	{r3, pc}
 8000fc4:	2400039c 	.word	0x2400039c
 8000fc8:	240004cc 	.word	0x240004cc

08000fcc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000fcc:	2001      	movs	r0, #1
 8000fce:	4770      	bx	lr

08000fd0 <_kill>:

int _kill(int pid, int sig)
{
 8000fd0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000fd2:	f008 f979 	bl	80092c8 <__errno>
 8000fd6:	2316      	movs	r3, #22
 8000fd8:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	bd08      	pop	{r3, pc}

08000fe0 <_exit>:

void _exit (int status)
{
 8000fe0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000fe2:	f008 f971 	bl	80092c8 <__errno>
 8000fe6:	2316      	movs	r3, #22
 8000fe8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000fea:	e7fe      	b.n	8000fea <_exit+0xa>

08000fec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	1e16      	subs	r6, r2, #0
 8000ff0:	dd07      	ble.n	8001002 <_read+0x16>
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000ff6:	f3af 8000 	nop.w
 8000ffa:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	42a5      	cmp	r5, r4
 8001000:	d1f9      	bne.n	8000ff6 <_read+0xa>
	}

return len;
}
 8001002:	4630      	mov	r0, r6
 8001004:	bd70      	pop	{r4, r5, r6, pc}

08001006 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001006:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	1e16      	subs	r6, r2, #0
 800100a:	dd07      	ble.n	800101c <_write+0x16>
 800100c:	460c      	mov	r4, r1
 800100e:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001010:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001014:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	42a5      	cmp	r5, r4
 800101a:	d1f9      	bne.n	8001010 <_write+0xa>
	}
	return len;
}
 800101c:	4630      	mov	r0, r6
 800101e:	bd70      	pop	{r4, r5, r6, pc}

08001020 <_close>:

int _close(int file)
{
	return -1;
}
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	4770      	bx	lr

08001026 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800102c:	2000      	movs	r0, #0
 800102e:	4770      	bx	lr

08001030 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001030:	2001      	movs	r0, #1
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001034:	2000      	movs	r0, #0
 8001036:	4770      	bx	lr

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b508      	push	{r3, lr}
 800103a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <_sbrk+0x38>)
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	b152      	cbz	r2, 8001058 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <_sbrk+0x38>)
 8001044:	6810      	ldr	r0, [r2, #0]
 8001046:	4403      	add	r3, r0
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <_sbrk+0x3c>)
 800104a:	490b      	ldr	r1, [pc, #44]	; (8001078 <_sbrk+0x40>)
 800104c:	1a52      	subs	r2, r2, r1
 800104e:	4293      	cmp	r3, r2
 8001050:	d806      	bhi.n	8001060 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <_sbrk+0x38>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001056:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x38>)
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <_sbrk+0x44>)
 800105c:	6011      	str	r1, [r2, #0]
 800105e:	e7f0      	b.n	8001042 <_sbrk+0xa>
    errno = ENOMEM;
 8001060:	f008 f932 	bl	80092c8 <__errno>
 8001064:	230c      	movs	r3, #12
 8001066:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	e7f3      	b.n	8001056 <_sbrk+0x1e>
 800106e:	bf00      	nop
 8001070:	240006dc 	.word	0x240006dc
 8001074:	24080000 	.word	0x24080000
 8001078:	00000400 	.word	0x00000400
 800107c:	240009d0 	.word	0x240009d0

08001080 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001080:	4a27      	ldr	r2, [pc, #156]	; (8001120 <SystemInit+0xa0>)
 8001082:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001086:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <SystemInit+0xa4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	2b06      	cmp	r3, #6
 8001098:	d806      	bhi.n	80010a8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800109a:	4a22      	ldr	r2, [pc, #136]	; (8001124 <SystemInit+0xa4>)
 800109c:	6813      	ldr	r3, [r2, #0]
 800109e:	f023 030f 	bic.w	r3, r3, #15
 80010a2:	f043 0307 	orr.w	r3, r3, #7
 80010a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <SystemInit+0xa8>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	f042 0201 	orr.w	r2, r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010b6:	6819      	ldr	r1, [r3, #0]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <SystemInit+0xac>)
 80010ba:	400a      	ands	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <SystemInit+0xa4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f013 0f08 	tst.w	r3, #8
 80010c6:	d006      	beq.n	80010d6 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010c8:	4a16      	ldr	r2, [pc, #88]	; (8001124 <SystemInit+0xa4>)
 80010ca:	6813      	ldr	r3, [r2, #0]
 80010cc:	f023 030f 	bic.w	r3, r3, #15
 80010d0:	f043 0307 	orr.w	r3, r3, #7
 80010d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <SystemInit+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010e0:	4913      	ldr	r1, [pc, #76]	; (8001130 <SystemInit+0xb0>)
 80010e2:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010e4:	4913      	ldr	r1, [pc, #76]	; (8001134 <SystemInit+0xb4>)
 80010e6:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010e8:	4913      	ldr	r1, [pc, #76]	; (8001138 <SystemInit+0xb8>)
 80010ea:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010ee:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010f2:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80010fc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010fe:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <SystemInit+0xbc>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <SystemInit+0xc0>)
 8001106:	4013      	ands	r3, r2
 8001108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800110c:	d203      	bcs.n	8001116 <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <SystemInit+0xc4>)
 8001110:	2201      	movs	r2, #1
 8001112:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <SystemInit+0xc8>)
 8001118:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800111c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00
 8001124:	52002000 	.word	0x52002000
 8001128:	58024400 	.word	0x58024400
 800112c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001130:	02020200 	.word	0x02020200
 8001134:	01ff0000 	.word	0x01ff0000
 8001138:	01010280 	.word	0x01010280
 800113c:	5c001000 	.word	0x5c001000
 8001140:	ffff0000 	.word	0xffff0000
 8001144:	51008000 	.word	0x51008000
 8001148:	52004000 	.word	0x52004000

0800114c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800114c:	b500      	push	{lr}
 800114e:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001150:	2300      	movs	r3, #0
 8001152:	9304      	str	r3, [sp, #16]
 8001154:	9305      	str	r3, [sp, #20]
 8001156:	9306      	str	r3, [sp, #24]
 8001158:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001160:	4815      	ldr	r0, [pc, #84]	; (80011b8 <MX_TIM2_Init+0x6c>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001166:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001168:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800116a:	2210      	movs	r2, #16
 800116c:	6082      	str	r2, [r0, #8]
  htim2.Init.Period = 139999999;
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <MX_TIM2_Init+0x70>)
 8001170:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001176:	6102      	str	r2, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800117a:	f006 f9fb 	bl	8007574 <HAL_TIM_Base_Init>
 800117e:	b990      	cbnz	r0, 80011a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001186:	a904      	add	r1, sp, #16
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <MX_TIM2_Init+0x6c>)
 800118a:	f006 fa31 	bl	80075f0 <HAL_TIM_ConfigClockSource>
 800118e:	b968      	cbnz	r0, 80011ac <MX_TIM2_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001196:	a901      	add	r1, sp, #4
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <MX_TIM2_Init+0x6c>)
 800119a:	f006 fafb 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	b940      	cbnz	r0, 80011b2 <MX_TIM2_Init+0x66>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a0:	b009      	add	sp, #36	; 0x24
 80011a2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011a6:	f7ff fb91 	bl	80008cc <Error_Handler>
 80011aa:	e7e9      	b.n	8001180 <MX_TIM2_Init+0x34>
    Error_Handler();
 80011ac:	f7ff fb8e 	bl	80008cc <Error_Handler>
 80011b0:	e7ee      	b.n	8001190 <MX_TIM2_Init+0x44>
    Error_Handler();
 80011b2:	f7ff fb8b 	bl	80008cc <Error_Handler>
}
 80011b6:	e7f3      	b.n	80011a0 <MX_TIM2_Init+0x54>
 80011b8:	240006e0 	.word	0x240006e0
 80011bc:	08583aff 	.word	0x08583aff

080011c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80011c0:	6803      	ldr	r3, [r0, #0]
 80011c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c6:	d000      	beq.n	80011ca <HAL_TIM_Base_MspInit+0xa>
 80011c8:	4770      	bx	lr
{
 80011ca:	b500      	push	{lr}
 80011cc:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_TIM_Base_MspInit+0x40>)
 80011d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011d4:	f042 0201 	orr.w	r2, r2, #1
 80011d8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80011dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	4611      	mov	r1, r2
 80011ec:	201c      	movs	r0, #28
 80011ee:	f000 f9e9 	bl	80015c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011f2:	201c      	movs	r0, #28
 80011f4:	f000 fa1a 	bl	800162c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011f8:	b003      	add	sp, #12
 80011fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80011fe:	bf00      	nop
 8001200:	58024400 	.word	0x58024400

08001204 <Reset_Handler>:
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopFillZerobss+0xe>
 8001208:	f7ff ff3a 	bl	8001080 <SystemInit>
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopFillZerobss+0x12>)
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopFillZerobss+0x1a>)
 8001212:	2300      	movs	r3, #0
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:
 8001216:	58d4      	ldr	r4, [r2, r3]
 8001218:	50c4      	str	r4, [r0, r3]
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:
 800121c:	18c4      	adds	r4, r0, r3
 800121e:	428c      	cmp	r4, r1
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopFillZerobss+0x1e>)
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopFillZerobss+0x22>)
 8001226:	2300      	movs	r3, #0
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:
 800122e:	42a2      	cmp	r2, r4
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>
 8001232:	f008 f861 	bl	80092f8 <__libc_init_array>
 8001236:	f7ff fa09 	bl	800064c <main>
 800123a:	4770      	bx	lr
 800123c:	24080000 	.word	0x24080000
 8001240:	24000000 	.word	0x24000000
 8001244:	2400007c 	.word	0x2400007c
 8001248:	0800b258 	.word	0x0800b258
 800124c:	2400007c 	.word	0x2400007c
 8001250:	240009d0 	.word	0x240009d0

08001254 <ADC3_IRQHandler>:
 8001254:	e7fe      	b.n	8001254 <ADC3_IRQHandler>
	...

08001258 <saiAdapter_Init>:


SAIadapter_TypeDef sai1adapter;		// global adapter instances
SAIadapter_TypeDef sai2adapter;

void saiAdapter_Init(SAIadapter_TypeDef* adapter, HW_SAI_Instance sai_instatnce) {
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4604      	mov	r4, r0
 800125c:	460d      	mov	r5, r1
	// enable SAI rx tx (sai1 A-rx, B-tx, sai2 A-rx, B-tx)
	if(sai_instatnce == HW_SAI1) {
 800125e:	2901      	cmp	r1, #1
 8001260:	d013      	beq.n	800128a <saiAdapter_Init+0x32>
		HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*) adapter->TxData, SAI_IO_BUF_SIZE);
	}
	if(sai_instatnce == HW_SAI2) {
		HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t*) adapter->RxData, SAI_IO_BUF_SIZE);
		HAL_SAI_Transmit_DMA(&hsai_BlockB2, (uint8_t*) adapter->TxData, SAI_IO_BUF_SIZE);
	}
 8001262:	2902      	cmp	r1, #2
 8001264:	d01e      	beq.n	80012a4 <saiAdapter_Init+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001266:	b672      	cpsid	i
	adapter->saiInstance = sai_instatnce;
	adapter->RxFlag = 0;			// rx & tx at the same time -> use only rx flags
	adapter->RxHalfFlag = 0;
	adapter->BufOffset = 0;
	adapter->rxBufPosition = 0;
	adapter->txBufPosition = 0;
 8001268:	7025      	strb	r5, [r4, #0]
	for(int i = 0; i < SAI_IO_BUF_SIZE; i++) {
 800126a:	2300      	movs	r3, #0
 800126c:	60e3      	str	r3, [r4, #12]
		adapter->RxData[i] = 0;
 800126e:	6123      	str	r3, [r4, #16]
		adapter->TxData[i] = 0;
 8001270:	7523      	strb	r3, [r4, #20]
	}
 8001272:	7563      	strb	r3, [r4, #21]
	__enable_irq();
 8001274:	75a3      	strb	r3, [r4, #22]


 8001276:	8323      	strh	r3, [r4, #24]
}
 8001278:	8423      	strh	r3, [r4, #32]

 800127a:	8363      	strh	r3, [r4, #26]
}
 800127c:	8463      	strh	r3, [r4, #34]	; 0x22

 800127e:	83a3      	strh	r3, [r4, #28]
}
 8001280:	84a3      	strh	r3, [r4, #36]	; 0x24

 8001282:	83e3      	strh	r3, [r4, #30]
}
 8001284:	84e3      	strh	r3, [r4, #38]	; 0x26
  __ASM volatile ("cpsie i" : : : "memory");
 8001286:	b662      	cpsie	i



int16_t saiAdapter_getNextSample(SAIadapter_TypeDef* adapter) {
	int16_t tmp =  adapter->RxData[adapter->BufOffset + adapter->rxBufPosition];
 8001288:	bd38      	pop	{r3, r4, r5, pc}
		HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*) adapter->RxData, SAI_IO_BUF_SIZE);
 800128a:	2204      	movs	r2, #4
 800128c:	f100 0118 	add.w	r1, r0, #24
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <saiAdapter_Init+0x68>)
 8001292:	f005 fbc3 	bl	8006a1c <HAL_SAI_Receive_DMA>
		HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*) adapter->TxData, SAI_IO_BUF_SIZE);
 8001296:	2204      	movs	r2, #4
 8001298:	f104 0120 	add.w	r1, r4, #32
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <saiAdapter_Init+0x6c>)
 800129e:	f005 fb3b 	bl	8006918 <HAL_SAI_Transmit_DMA>
	}
 80012a2:	e7e0      	b.n	8001266 <saiAdapter_Init+0xe>

 80012a4:	2204      	movs	r2, #4
 80012a6:	f100 0118 	add.w	r1, r0, #24
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <saiAdapter_Init+0x70>)
 80012ac:	f005 fbb6 	bl	8006a1c <HAL_SAI_Receive_DMA>
	// disable irq and init all rx flags
 80012b0:	2204      	movs	r2, #4
 80012b2:	f104 0120 	add.w	r1, r4, #32
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <saiAdapter_Init+0x74>)
 80012b8:	f005 fb2e 	bl	8006918 <HAL_SAI_Transmit_DMA>
 80012bc:	e7d3      	b.n	8001266 <saiAdapter_Init+0xe>
 80012be:	bf00      	nop
 80012c0:	24000304 	.word	0x24000304
 80012c4:	24000434 	.word	0x24000434
 80012c8:	2400039c 	.word	0x2400039c
 80012cc:	240004cc 	.word	0x240004cc

080012d0 <saiAdapter_getNextSample>:
	adapter->rxBufPosition+=1;
	if(adapter->rxBufPosition >= SAI_HALF_BUF) {
		adapter->rxBufPosition = 0;
	}
 80012d0:	4602      	mov	r2, r0
	return tmp;
 80012d2:	7d43      	ldrb	r3, [r0, #21]
 80012d4:	7d01      	ldrb	r1, [r0, #20]
 80012d6:	4419      	add	r1, r3
 80012d8:	310c      	adds	r1, #12
 80012da:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
}
 80012de:	3301      	adds	r3, #1
 80012e0:	b2db      	uxtb	r3, r3

 80012e2:	2b01      	cmp	r3, #1
void saiAdapter_setNextSample(SAIadapter_TypeDef* adapter, int16_t sample) {
 80012e4:	bf88      	it	hi
 80012e6:	2300      	movhi	r3, #0
 80012e8:	7553      	strb	r3, [r2, #21]
	adapter->TxData[adapter->BufOffset + adapter->txBufPosition] = sample;
	adapter->txBufPosition+=1;
	if(adapter->txBufPosition >= SAI_HALF_BUF) {
 80012ea:	4770      	bx	lr

080012ec <saiAdapter_setNextSample>:
		adapter->txBufPosition = 0;
	}
}
 80012ec:	7d83      	ldrb	r3, [r0, #22]
 80012ee:	7d02      	ldrb	r2, [r0, #20]
 80012f0:	441a      	add	r2, r3
 80012f2:	3210      	adds	r2, #16
 80012f4:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]

 80012f8:	3301      	adds	r3, #1
 80012fa:	b2db      	uxtb	r3, r3
HW_SAI_UpdateStatus saiAdapterCheckUpdate(SAIadapter_TypeDef* adapter) {
 80012fc:	2b01      	cmp	r3, #1
	if(adapter->RxHalfFlag) {
 80012fe:	bf88      	it	hi
 8001300:	2300      	movhi	r3, #0
 8001302:	7583      	strb	r3, [r0, #22]
		adapter->RxHalfFlag = 0;
		adapter->BufOffset = 0;
 8001304:	4770      	bx	lr

08001306 <saiAdapterCheckUpdate>:
		return HW_SAI_SWITCH_BUF;
	}
	if(adapter->RxFlag) {
 8001306:	6903      	ldr	r3, [r0, #16]
 8001308:	b91b      	cbnz	r3, 8001312 <saiAdapterCheckUpdate+0xc>
		adapter->RxFlag = 0;
		adapter->BufOffset = SAI_HALF_BUF;
		return HW_SAI_SWITCH_BUF;
	}
	return HW_SAI_CURRENT_BUF;
 800130a:	68c3      	ldr	r3, [r0, #12]
 800130c:	b933      	cbnz	r3, 800131c <saiAdapterCheckUpdate+0x16>
}

/////////////// SAI cplt & halfCplt callbacks ///////////////

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 800130e:	2000      	movs	r0, #0
	if(hsai == &hsai_BlockA1) {
 8001310:	4770      	bx	lr
		adapter->RxFlag = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	6103      	str	r3, [r0, #16]
		adapter->BufOffset = SAI_HALF_BUF;
 8001316:	7503      	strb	r3, [r0, #20]
		return HW_SAI_SWITCH_BUF;
 8001318:	2001      	movs	r0, #1
 800131a:	4770      	bx	lr
}
 800131c:	2300      	movs	r3, #0
 800131e:	60c3      	str	r3, [r0, #12]

 8001320:	2302      	movs	r3, #2
 8001322:	7503      	strb	r3, [r0, #20]
/////////////// SAI cplt & halfCplt callbacks ///////////////
 8001324:	2001      	movs	r0, #1
 8001326:	4770      	bx	lr

08001328 <HAL_SAI_RxHalfCpltCallback>:
		sai1adapter.RxHalfFlag=1;//++;
	}
	if(hsai == &hsai_BlockA2) {
		sai2adapter.RxHalfFlag=1;//++;
	}
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_SAI_RxHalfCpltCallback+0x20>)
 800132a:	4298      	cmp	r0, r3
 800132c:	d003      	beq.n	8001336 <HAL_SAI_RxHalfCpltCallback+0xe>
}

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <HAL_SAI_RxHalfCpltCallback+0x24>)
 8001330:	4298      	cmp	r0, r3
 8001332:	d004      	beq.n	800133e <HAL_SAI_RxHalfCpltCallback+0x16>
	if(hsai == &hsai_BlockA1) {
		sai1adapter.RxFlag=1;//++;
	}
 8001334:	4770      	bx	lr
}
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_SAI_RxHalfCpltCallback+0x28>)
 8001338:	2201      	movs	r2, #1
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	e7f7      	b.n	800132e <HAL_SAI_RxHalfCpltCallback+0x6>
	if(hsai == &hsai_BlockA1) {
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_SAI_RxHalfCpltCallback+0x2c>)
 8001340:	2201      	movs	r2, #1
 8001342:	611a      	str	r2, [r3, #16]
	}
 8001344:	e7f6      	b.n	8001334 <HAL_SAI_RxHalfCpltCallback+0xc>
 8001346:	bf00      	nop
 8001348:	24000304 	.word	0x24000304
 800134c:	2400039c 	.word	0x2400039c
 8001350:	2400072c 	.word	0x2400072c
 8001354:	24000754 	.word	0x24000754

08001358 <HAL_SAI_RxCpltCallback>:
	if(hsai == &hsai_BlockA2) {
		sai2adapter.RxFlag=1;//++;
	}
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_SAI_RxCpltCallback+0x20>)
 800135a:	4298      	cmp	r0, r3
 800135c:	d003      	beq.n	8001366 <HAL_SAI_RxCpltCallback+0xe>


}
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_SAI_RxCpltCallback+0x24>)
 8001360:	4298      	cmp	r0, r3
 8001362:	d004      	beq.n	800136e <HAL_SAI_RxCpltCallback+0x16>

 8001364:	4770      	bx	lr

 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_SAI_RxCpltCallback+0x28>)
 8001368:	2201      	movs	r2, #1
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	e7f7      	b.n	800135e <HAL_SAI_RxCpltCallback+0x6>

 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_SAI_RxCpltCallback+0x2c>)
 8001370:	2201      	movs	r2, #1
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	e7f6      	b.n	8001364 <HAL_SAI_RxCpltCallback+0xc>
 8001376:	bf00      	nop
 8001378:	24000304 	.word	0x24000304
 800137c:	2400039c 	.word	0x2400039c
 8001380:	2400072c 	.word	0x2400072c
 8001384:	24000754 	.word	0x24000754

08001388 <CodecRegWrite>:
 *      Author: romte
 */

#include "wm8731.h"

void CodecRegWrite(uint16_t regAddr, uint16_t regData, uint8_t codecAddr) {
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	b087      	sub	sp, #28
	regAddr = (regAddr << 1) | ((regData >> 8) & 0x01);
 800138c:	f3c1 2400 	ubfx	r4, r1, #8, #1
 8001390:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 8001394:	b2a4      	uxth	r4, r4
	uint8_t regData_ = regData & 0xFF;
 8001396:	f88d 1017 	strb.w	r1, [sp, #23]
	while (HAL_OK != HAL_I2C_Mem_Write(&hi2c4, codecAddr, regAddr,
 800139a:	4615      	mov	r5, r2
 800139c:	4f08      	ldr	r7, [pc, #32]	; (80013c0 <CodecRegWrite+0x38>)
 800139e:	260a      	movs	r6, #10
 80013a0:	9602      	str	r6, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f10d 0017 	add.w	r0, sp, #23
 80013aa:	9000      	str	r0, [sp, #0]
 80013ac:	4622      	mov	r2, r4
 80013ae:	4629      	mov	r1, r5
 80013b0:	4638      	mov	r0, r7
 80013b2:	f002 fc01 	bl	8003bb8 <HAL_I2C_Mem_Write>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d1f2      	bne.n	80013a0 <CodecRegWrite+0x18>
	CODEC_MEMADD_SIZE, &regData_, 1, CODEC_I2C_TIMEOUT))
		;
}
 80013ba:	b007      	add	sp, #28
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	bf00      	nop
 80013c0:	240000bc 	.word	0x240000bc

080013c4 <SetHPGain>:
	CodecRegWrite(CODEC_REG_LEFT_LINE_IN, gain, codecAddr);
	CodecRegWrite(CODEC_REG_RIGHT_LINE_IN, gain, codecAddr);
}

// +6dB to -73dB in 1dB steps
void SetHPGain(int gain, uint8_t codecAddr) {
 80013c4:	b538      	push	{r3, r4, r5, lr}
 80013c6:	460d      	mov	r5, r1
	if ((gain <= 6) && (gain >= -73))
 80013c8:	f100 0349 	add.w	r3, r0, #73	; 0x49
 80013cc:	2b4f      	cmp	r3, #79	; 0x4f
 80013ce:	d80d      	bhi.n	80013ec <SetHPGain+0x28>
		gain = gain + 73 + 0x30;  // 0011 0000 = 0x30 = -73dB
 80013d0:	f100 0479 	add.w	r4, r0, #121	; 0x79
	else if (gain > 6)
		gain = 0x7F;              // +6dB
	else
		gain = 0;                 // MUTE
	CodecRegWrite(CODEC_REG_LEFT_HEADPHONES_OUT, gain, codecAddr);
 80013d4:	b2a4      	uxth	r4, r4
 80013d6:	462a      	mov	r2, r5
 80013d8:	4621      	mov	r1, r4
 80013da:	2002      	movs	r0, #2
 80013dc:	f7ff ffd4 	bl	8001388 <CodecRegWrite>
	CodecRegWrite(CODEC_REG_RIGHT_HEADPHONES_OUT, gain, codecAddr);
 80013e0:	462a      	mov	r2, r5
 80013e2:	4621      	mov	r1, r4
 80013e4:	2003      	movs	r0, #3
 80013e6:	f7ff ffcf 	bl	8001388 <CodecRegWrite>
}
 80013ea:	bd38      	pop	{r3, r4, r5, pc}
		gain = 0;                 // MUTE
 80013ec:	2806      	cmp	r0, #6
 80013ee:	bfcc      	ite	gt
 80013f0:	247f      	movgt	r4, #127	; 0x7f
 80013f2:	2400      	movle	r4, #0
 80013f4:	e7ee      	b.n	80013d4 <SetHPGain+0x10>

080013f6 <CodecPowerUp>:

void CodecPowerUp(uint8_t codecAddr) {
 80013f6:	b510      	push	{r4, lr}
 80013f8:	4604      	mov	r4, r0
	// Power up analog & digital 3v3 LDO for codec
	HAL_Delay(100);
 80013fa:	2064      	movs	r0, #100	; 0x64
 80013fc:	f000 f8b6 	bl	800156c <HAL_Delay>
	// Codec reset
	CodecRegWrite(CODEC_REG_RESET, 0, codecAddr);
 8001400:	4622      	mov	r2, r4
 8001402:	2100      	movs	r1, #0
 8001404:	200f      	movs	r0, #15
 8001406:	f7ff ffbf 	bl	8001388 <CodecRegWrite>

	//enable all exept OUTPUT
	CodecRegWrite(CODEC_REG_POWER_MANAGEMENT, CODEC_POWER_DOWN_LINE_OUT,
 800140a:	4622      	mov	r2, r4
 800140c:	2110      	movs	r1, #16
 800140e:	2006      	movs	r0, #6
 8001410:	f7ff ffba 	bl	8001388 <CodecRegWrite>
			codecAddr);

	// Configure L&R inputs
	CodecRegWrite(CODEC_REG_LEFT_LINE_IN, CODEC_INPUT_0_DB, codecAddr);
 8001414:	4622      	mov	r2, r4
 8001416:	2117      	movs	r1, #23
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff ffb5 	bl	8001388 <CodecRegWrite>
	CodecRegWrite(CODEC_REG_RIGHT_LINE_IN, CODEC_INPUT_0_DB, codecAddr);
 800141e:	4622      	mov	r2, r4
 8001420:	2117      	movs	r1, #23
 8001422:	2001      	movs	r0, #1
 8001424:	f7ff ffb0 	bl	8001388 <CodecRegWrite>

	// Configure L&R headphone outputs
	CodecRegWrite(CODEC_REG_LEFT_HEADPHONES_OUT, CODEC_HEADPHONES_0_DB,
 8001428:	4622      	mov	r2, r4
 800142a:	2179      	movs	r1, #121	; 0x79
 800142c:	2002      	movs	r0, #2
 800142e:	f7ff ffab 	bl	8001388 <CodecRegWrite>
			codecAddr);
	CodecRegWrite(CODEC_REG_RIGHT_HEADPHONES_OUT, CODEC_HEADPHONES_0_DB,
 8001432:	4622      	mov	r2, r4
 8001434:	2179      	movs	r1, #121	; 0x79
 8001436:	2003      	movs	r0, #3
 8001438:	f7ff ffa6 	bl	8001388 <CodecRegWrite>
			codecAddr);

	// Configure analog routing
	CodecRegWrite(
 800143c:	4622      	mov	r2, r4
 800143e:	2112      	movs	r1, #18
 8001440:	2004      	movs	r0, #4
 8001442:	f7ff ffa1 	bl	8001388 <CodecRegWrite>
	CODEC_REG_ANALOGUE_ROUTING,
	CODEC_MIC_MUTE | CODEC_ADC_LINE | CODEC_OUTPUT_DAC_ENABLE , codecAddr); //| CODEC_OUTPUT_FROM_LINE);

	// Configure digital routing
	CodecRegWrite(CODEC_REG_DIGITAL_ROUTING, CODEC_DEEMPHASIS_48K, codecAddr);
 8001446:	4622      	mov	r2, r4
 8001448:	2103      	movs	r1, #3
 800144a:	2005      	movs	r0, #5
 800144c:	f7ff ff9c 	bl	8001388 <CodecRegWrite>


	if (codecAddr == CODEC_ADDRESS_0) {
 8001450:	2c34      	cmp	r4, #52	; 0x34
 8001452:	d014      	beq.n	800147e <CodecPowerUp+0x88>
		// Configure power management
		CodecRegWrite(CODEC_REG_POWER_MANAGEMENT,
		CODEC_POWER_DOWN_MIC, codecAddr); //| CODEC_POWER_DOWN_CLOCK_OUTPUT| CODEC_POWER_DOWN_OSCILLATOR);
	}	else {
		// Configure digital audio format & LR swap
		CodecRegWrite(CODEC_REG_DIGITAL_FORMAT,	CODEC_PROTOCOL_MASK_PHILIPS | CODEC_FORMAT_MASK_16_BIT | CODEC_FORMAT_SLAVE, codecAddr);
 8001454:	4622      	mov	r2, r4
 8001456:	2102      	movs	r1, #2
 8001458:	2007      	movs	r0, #7
 800145a:	f7ff ff95 	bl	8001388 <CodecRegWrite>
		// Configure sample rate
		CodecRegWrite(CODEC_REG_SAMPLE_RATE,CODEC_RATE_48K_48K/* | CODEC_MCLK_DIV2 | CODEC_CLKO_DIV2*/,	codecAddr);
 800145e:	4622      	mov	r2, r4
 8001460:	2100      	movs	r1, #0
 8001462:	2008      	movs	r0, #8
 8001464:	f7ff ff90 	bl	8001388 <CodecRegWrite>
		// Configure power management
		CodecRegWrite(CODEC_REG_POWER_MANAGEMENT,
 8001468:	4622      	mov	r2, r4
 800146a:	2162      	movs	r1, #98	; 0x62
 800146c:	2006      	movs	r0, #6
 800146e:	f7ff ff8b 	bl	8001388 <CodecRegWrite>
		CODEC_POWER_DOWN_MIC | CODEC_POWER_DOWN_CLOCK_OUTPUT  | CODEC_POWER_DOWN_OSCILLATOR, codecAddr);
	}


	// Now codec is active.
	CodecRegWrite(CODEC_REG_ACTIVE, CODEC_ACTIVE, codecAddr);
 8001472:	4622      	mov	r2, r4
 8001474:	2101      	movs	r1, #1
 8001476:	2009      	movs	r0, #9
 8001478:	f7ff ff86 	bl	8001388 <CodecRegWrite>
}
 800147c:	bd10      	pop	{r4, pc}
		CodecRegWrite(CODEC_REG_DIGITAL_FORMAT,	CODEC_PROTOCOL_MASK_PHILIPS | CODEC_FORMAT_MASK_16_BIT | CODEC_FORMAT_MASTER, codecAddr);
 800147e:	2234      	movs	r2, #52	; 0x34
 8001480:	2142      	movs	r1, #66	; 0x42
 8001482:	2007      	movs	r0, #7
 8001484:	f7ff ff80 	bl	8001388 <CodecRegWrite>
		CodecRegWrite(CODEC_REG_SAMPLE_RATE, CODEC_RATE_48K_48K | CODEC_MCLK_DIV2 /*| CODEC_CLKO_DIV2*/, codecAddr);
 8001488:	2234      	movs	r2, #52	; 0x34
 800148a:	2140      	movs	r1, #64	; 0x40
 800148c:	2008      	movs	r0, #8
 800148e:	f7ff ff7b 	bl	8001388 <CodecRegWrite>
		CodecRegWrite(CODEC_REG_POWER_MANAGEMENT,
 8001492:	2234      	movs	r2, #52	; 0x34
 8001494:	2102      	movs	r1, #2
 8001496:	2006      	movs	r0, #6
 8001498:	f7ff ff76 	bl	8001388 <CodecRegWrite>
 800149c:	e7e9      	b.n	8001472 <CodecPowerUp+0x7c>
	...

080014a0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_InitTick+0x40>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b90b      	cbnz	r3, 80014aa <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014a8:	4770      	bx	lr
{
 80014aa:	b510      	push	{r4, lr}
 80014ac:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_InitTick+0x44>)
 80014b8:	6810      	ldr	r0, [r2, #0]
 80014ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80014be:	f000 f8c3 	bl	8001648 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	2c0f      	cmp	r4, #15
 80014c4:	d800      	bhi.n	80014c8 <HAL_InitTick+0x28>
 80014c6:	b108      	cbz	r0, 80014cc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80014c8:	2001      	movs	r0, #1
}
 80014ca:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	4621      	mov	r1, r4
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f000 f876 	bl	80015c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_InitTick+0x48>)
 80014da:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80014dc:	2000      	movs	r0, #0
 80014de:	e7f4      	b.n	80014ca <HAL_InitTick+0x2a>
 80014e0:	24000008 	.word	0x24000008
 80014e4:	24000000 	.word	0x24000000
 80014e8:	2400000c 	.word	0x2400000c

080014ec <HAL_Init>:
{
 80014ec:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f000 f856 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014f4:	f002 fffa 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 80014f8:	490f      	ldr	r1, [pc, #60]	; (8001538 <HAL_Init+0x4c>)
 80014fa:	698b      	ldr	r3, [r1, #24]
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_Init+0x50>)
 80014fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800150a:	698b      	ldr	r3, [r1, #24]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	5cd3      	ldrb	r3, [r2, r3]
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	fa20 f303 	lsr.w	r3, r0, r3
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_Init+0x54>)
 800151c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_Init+0x58>)
 8001520:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001522:	200f      	movs	r0, #15
 8001524:	f7ff ffbc 	bl	80014a0 <HAL_InitTick>
 8001528:	b110      	cbz	r0, 8001530 <HAL_Init+0x44>
    return HAL_ERROR;
 800152a:	2401      	movs	r4, #1
}
 800152c:	4620      	mov	r0, r4
 800152e:	bd10      	pop	{r4, pc}
 8001530:	4604      	mov	r4, r0
  HAL_MspInit();
 8001532:	f7ff fcd5 	bl	8000ee0 <HAL_MspInit>
  return HAL_OK;
 8001536:	e7f9      	b.n	800152c <HAL_Init+0x40>
 8001538:	58024400 	.word	0x58024400
 800153c:	0800a664 	.word	0x0800a664
 8001540:	24000004 	.word	0x24000004
 8001544:	24000000 	.word	0x24000000

08001548 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001548:	4a03      	ldr	r2, [pc, #12]	; (8001558 <HAL_IncTick+0x10>)
 800154a:	6811      	ldr	r1, [r2, #0]
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_IncTick+0x14>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	440b      	add	r3, r1
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	2400077c 	.word	0x2400077c
 800155c:	24000008 	.word	0x24000008

08001560 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001560:	4b01      	ldr	r3, [pc, #4]	; (8001568 <HAL_GetTick+0x8>)
 8001562:	6818      	ldr	r0, [r3, #0]
}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2400077c 	.word	0x2400077c

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b538      	push	{r3, r4, r5, lr}
 800156e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff fff6 	bl	8001560 <HAL_GetTick>
 8001574:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	f1b4 3fff 	cmp.w	r4, #4294967295
 800157a:	d002      	beq.n	8001582 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_Delay+0x24>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001582:	f7ff ffed 	bl	8001560 <HAL_GetTick>
 8001586:	1b40      	subs	r0, r0, r5
 8001588:	42a0      	cmp	r0, r4
 800158a:	d3fa      	bcc.n	8001582 <HAL_Delay+0x16>
  {
  }
}
 800158c:	bd38      	pop	{r3, r4, r5, pc}
 800158e:	bf00      	nop
 8001590:	24000008 	.word	0x24000008

08001594 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001594:	4b01      	ldr	r3, [pc, #4]	; (800159c <HAL_GetREVID+0x8>)
 8001596:	6818      	ldr	r0, [r3, #0]
}
 8001598:	0c00      	lsrs	r0, r0, #16
 800159a:	4770      	bx	lr
 800159c:	5c001000 	.word	0x5c001000

080015a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80015a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	0200      	lsls	r0, r0, #8
 80015a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80015b4:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80015b8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	05fa0000 	.word	0x05fa0000

080015c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_NVIC_SetPriority+0x5c>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ce:	f1c3 0c07 	rsb	ip, r3, #7
 80015d2:	f1bc 0f04 	cmp.w	ip, #4
 80015d6:	bf28      	it	cs
 80015d8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015dc:	f103 0e04 	add.w	lr, r3, #4
 80015e0:	f1be 0f06 	cmp.w	lr, #6
 80015e4:	bf8c      	ite	hi
 80015e6:	3b03      	subhi	r3, #3
 80015e8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ea:	f04f 3eff 	mov.w	lr, #4294967295
 80015ee:	fa0e fc0c 	lsl.w	ip, lr, ip
 80015f2:	ea21 010c 	bic.w	r1, r1, ip
 80015f6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	fa0e f303 	lsl.w	r3, lr, r3
 80015fc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001602:	2800      	cmp	r0, #0
 8001604:	db05      	blt.n	8001612 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	0109      	lsls	r1, r1, #4
 8001608:	b2c9      	uxtb	r1, r1
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_NVIC_SetPriority+0x60>)
 800160c:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800160e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	f000 000f 	and.w	r0, r0, #15
 8001616:	0109      	lsls	r1, r1, #4
 8001618:	b2c9      	uxtb	r1, r1
 800161a:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_NVIC_SetPriority+0x64>)
 800161c:	5419      	strb	r1, [r3, r0]
 800161e:	e7f6      	b.n	800160e <HAL_NVIC_SetPriority+0x4a>
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	e000e400 	.word	0xe000e400
 8001628:	e000ed14 	.word	0xe000ed14

0800162c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800162c:	2800      	cmp	r0, #0
 800162e:	db08      	blt.n	8001642 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001630:	0942      	lsrs	r2, r0, #5
 8001632:	f000 001f 	and.w	r0, r0, #31
 8001636:	2301      	movs	r3, #1
 8001638:	fa03 f000 	lsl.w	r0, r3, r0
 800163c:	4b01      	ldr	r3, [pc, #4]	; (8001644 <HAL_NVIC_EnableIRQ+0x18>)
 800163e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100

08001648 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	3801      	subs	r0, #1
 800164a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800164e:	d20b      	bcs.n	8001668 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001650:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001654:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_SYSTICK_Config+0x24>)
 8001658:	21f0      	movs	r1, #240	; 0xf0
 800165a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165e:	2000      	movs	r0, #0
 8001660:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	2207      	movs	r2, #7
 8001664:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001666:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001668:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001670:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <HAL_MPU_Disable+0x18>)
 8001676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001678:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800167c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800167e:	2200      	movs	r2, #0
 8001680:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800168c:	f040 0001 	orr.w	r0, r0, #1
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_MPU_Enable+0x1c>)
 8001692:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001698:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800169e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016a2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d038      	beq.n	8001722 <HAL_CRC_Init+0x76>
{
 80016b0:	b510      	push	{r4, lr}
 80016b2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016b4:	7f43      	ldrb	r3, [r0, #29]
 80016b6:	b31b      	cbz	r3, 8001700 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80016b8:	2302      	movs	r3, #2
 80016ba:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80016bc:	7923      	ldrb	r3, [r4, #4]
 80016be:	bb1b      	cbnz	r3, 8001708 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	4a19      	ldr	r2, [pc, #100]	; (8001728 <HAL_CRC_Init+0x7c>)
 80016c4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80016c6:	6822      	ldr	r2, [r4, #0]
 80016c8:	6893      	ldr	r3, [r2, #8]
 80016ca:	f023 0318 	bic.w	r3, r3, #24
 80016ce:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016d0:	7963      	ldrb	r3, [r4, #5]
 80016d2:	bb13      	cbnz	r3, 800171a <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	f04f 32ff 	mov.w	r2, #4294967295
 80016da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016dc:	6822      	ldr	r2, [r4, #0]
 80016de:	6893      	ldr	r3, [r2, #8]
 80016e0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80016e4:	6961      	ldr	r1, [r4, #20]
 80016e6:	430b      	orrs	r3, r1
 80016e8:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016ea:	6822      	ldr	r2, [r4, #0]
 80016ec:	6893      	ldr	r3, [r2, #8]
 80016ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016f2:	69a1      	ldr	r1, [r4, #24]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016f8:	2301      	movs	r3, #1
 80016fa:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80016fc:	2000      	movs	r0, #0
}
 80016fe:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001700:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001702:	f7fe fe53 	bl	80003ac <HAL_CRC_MspInit>
 8001706:	e7d7      	b.n	80016b8 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001708:	68e2      	ldr	r2, [r4, #12]
 800170a:	68a1      	ldr	r1, [r4, #8]
 800170c:	4620      	mov	r0, r4
 800170e:	f000 f80d 	bl	800172c <HAL_CRCEx_Polynomial_Set>
 8001712:	2800      	cmp	r0, #0
 8001714:	d0dc      	beq.n	80016d0 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 8001716:	2001      	movs	r0, #1
 8001718:	e7f1      	b.n	80016fe <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	6922      	ldr	r2, [r4, #16]
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	e7dc      	b.n	80016dc <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 8001722:	2001      	movs	r0, #1
}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	04c11db7 	.word	0x04c11db7

0800172c <HAL_CRCEx_Polynomial_Set>:
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800172c:	f04f 0c1e 	mov.w	ip, #30
 8001730:	f00c 031f 	and.w	r3, ip, #31
 8001734:	fa21 f303 	lsr.w	r3, r1, r3
 8001738:	f013 0f01 	tst.w	r3, #1
 800173c:	d10b      	bne.n	8001756 <HAL_CRCEx_Polynomial_Set+0x2a>
 800173e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001742:	f1bc 3fff 	cmp.w	ip, #4294967295
 8001746:	d1f3      	bne.n	8001730 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001748:	2a10      	cmp	r2, #16
 800174a:	d030      	beq.n	80017ae <HAL_CRCEx_Polynomial_Set+0x82>
 800174c:	2a18      	cmp	r2, #24
 800174e:	d030      	beq.n	80017b2 <HAL_CRCEx_Polynomial_Set+0x86>
 8001750:	b1aa      	cbz	r2, 800177e <HAL_CRCEx_Polynomial_Set+0x52>
 8001752:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8001754:	4770      	bx	lr
  switch (PolyLength)
 8001756:	2a18      	cmp	r2, #24
 8001758:	d825      	bhi.n	80017a6 <HAL_CRCEx_Polynomial_Set+0x7a>
 800175a:	e8df f002 	tbb	[pc, r2]
 800175e:	2410      	.short	0x2410
 8001760:	24242424 	.word	0x24242424
 8001764:	241f2424 	.word	0x241f2424
 8001768:	24242424 	.word	0x24242424
 800176c:	241a2424 	.word	0x241a2424
 8001770:	24242424 	.word	0x24242424
 8001774:	2424      	.short	0x2424
 8001776:	0d          	.byte	0x0d
 8001777:	00          	.byte	0x00
      if (msb >= HAL_CRC_LENGTH_7B)
 8001778:	f1bc 0f06 	cmp.w	ip, #6
 800177c:	d815      	bhi.n	80017aa <HAL_CRCEx_Polynomial_Set+0x7e>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800177e:	6803      	ldr	r3, [r0, #0]
 8001780:	6159      	str	r1, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001782:	6801      	ldr	r1, [r0, #0]
 8001784:	688b      	ldr	r3, [r1, #8]
 8001786:	f023 0318 	bic.w	r3, r3, #24
 800178a:	431a      	orrs	r2, r3
 800178c:	608a      	str	r2, [r1, #8]
 800178e:	2000      	movs	r0, #0
 8001790:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 8001792:	f1bc 0f07 	cmp.w	ip, #7
 8001796:	d9f2      	bls.n	800177e <HAL_CRCEx_Polynomial_Set+0x52>
        status =   HAL_ERROR;
 8001798:	2001      	movs	r0, #1
 800179a:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 800179c:	f1bc 0f0f 	cmp.w	ip, #15
 80017a0:	d9ed      	bls.n	800177e <HAL_CRCEx_Polynomial_Set+0x52>
        status =   HAL_ERROR;
 80017a2:	2001      	movs	r0, #1
 80017a4:	4770      	bx	lr
  switch (PolyLength)
 80017a6:	2001      	movs	r0, #1
 80017a8:	4770      	bx	lr
        status =   HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
 80017ac:	4770      	bx	lr
        status =   HAL_ERROR;
 80017ae:	2001      	movs	r0, #1
 80017b0:	4770      	bx	lr
        status =   HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
 80017b4:	4770      	bx	lr
	...

080017b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b8:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ba:	6d86      	ldr	r6, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017bc:	6805      	ldr	r5, [r0, #0]
 80017be:	4c91      	ldr	r4, [pc, #580]	; (8001a04 <DMA_SetConfig+0x24c>)
 80017c0:	4f91      	ldr	r7, [pc, #580]	; (8001a08 <DMA_SetConfig+0x250>)
 80017c2:	42bd      	cmp	r5, r7
 80017c4:	bf18      	it	ne
 80017c6:	42a5      	cmpne	r5, r4
 80017c8:	bf0c      	ite	eq
 80017ca:	2401      	moveq	r4, #1
 80017cc:	2400      	movne	r4, #0
 80017ce:	3718      	adds	r7, #24
 80017d0:	42bd      	cmp	r5, r7
 80017d2:	bf08      	it	eq
 80017d4:	f044 0401 	orreq.w	r4, r4, #1
 80017d8:	3718      	adds	r7, #24
 80017da:	42bd      	cmp	r5, r7
 80017dc:	bf08      	it	eq
 80017de:	f044 0401 	orreq.w	r4, r4, #1
 80017e2:	3718      	adds	r7, #24
 80017e4:	42bd      	cmp	r5, r7
 80017e6:	bf08      	it	eq
 80017e8:	f044 0401 	orreq.w	r4, r4, #1
 80017ec:	3718      	adds	r7, #24
 80017ee:	42bd      	cmp	r5, r7
 80017f0:	bf08      	it	eq
 80017f2:	f044 0401 	orreq.w	r4, r4, #1
 80017f6:	3718      	adds	r7, #24
 80017f8:	42bd      	cmp	r5, r7
 80017fa:	bf08      	it	eq
 80017fc:	f044 0401 	orreq.w	r4, r4, #1
 8001800:	3718      	adds	r7, #24
 8001802:	42bd      	cmp	r5, r7
 8001804:	bf08      	it	eq
 8001806:	f044 0401 	orreq.w	r4, r4, #1
 800180a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800180e:	42bd      	cmp	r5, r7
 8001810:	bf08      	it	eq
 8001812:	f044 0401 	orreq.w	r4, r4, #1
 8001816:	3718      	adds	r7, #24
 8001818:	42bd      	cmp	r5, r7
 800181a:	bf08      	it	eq
 800181c:	f044 0401 	orreq.w	r4, r4, #1
 8001820:	3718      	adds	r7, #24
 8001822:	42bd      	cmp	r5, r7
 8001824:	bf08      	it	eq
 8001826:	f044 0401 	orreq.w	r4, r4, #1
 800182a:	3718      	adds	r7, #24
 800182c:	42bd      	cmp	r5, r7
 800182e:	bf08      	it	eq
 8001830:	f044 0401 	orreq.w	r4, r4, #1
 8001834:	3718      	adds	r7, #24
 8001836:	42bd      	cmp	r5, r7
 8001838:	bf08      	it	eq
 800183a:	f044 0401 	orreq.w	r4, r4, #1
 800183e:	3718      	adds	r7, #24
 8001840:	42bd      	cmp	r5, r7
 8001842:	bf08      	it	eq
 8001844:	f044 0401 	orreq.w	r4, r4, #1
 8001848:	3718      	adds	r7, #24
 800184a:	42bd      	cmp	r5, r7
 800184c:	bf08      	it	eq
 800184e:	f044 0401 	orreq.w	r4, r4, #1
 8001852:	3718      	adds	r7, #24
 8001854:	42bd      	cmp	r5, r7
 8001856:	bf08      	it	eq
 8001858:	f044 0401 	orreq.w	r4, r4, #1
 800185c:	4f6b      	ldr	r7, [pc, #428]	; (8001a0c <DMA_SetConfig+0x254>)
 800185e:	42bd      	cmp	r5, r7
 8001860:	bf08      	it	eq
 8001862:	f044 0401 	orreq.w	r4, r4, #1
 8001866:	3714      	adds	r7, #20
 8001868:	42bd      	cmp	r5, r7
 800186a:	bf08      	it	eq
 800186c:	f044 0401 	orreq.w	r4, r4, #1
 8001870:	3714      	adds	r7, #20
 8001872:	42bd      	cmp	r5, r7
 8001874:	bf08      	it	eq
 8001876:	f044 0401 	orreq.w	r4, r4, #1
 800187a:	3714      	adds	r7, #20
 800187c:	42bd      	cmp	r5, r7
 800187e:	bf08      	it	eq
 8001880:	f044 0401 	orreq.w	r4, r4, #1
 8001884:	3714      	adds	r7, #20
 8001886:	42bd      	cmp	r5, r7
 8001888:	bf08      	it	eq
 800188a:	f044 0401 	orreq.w	r4, r4, #1
 800188e:	3714      	adds	r7, #20
 8001890:	42bd      	cmp	r5, r7
 8001892:	bf08      	it	eq
 8001894:	f044 0401 	orreq.w	r4, r4, #1
 8001898:	3714      	adds	r7, #20
 800189a:	42bd      	cmp	r5, r7
 800189c:	bf08      	it	eq
 800189e:	f044 0401 	orreq.w	r4, r4, #1
 80018a2:	b914      	cbnz	r4, 80018aa <DMA_SetConfig+0xf2>
 80018a4:	4c5a      	ldr	r4, [pc, #360]	; (8001a10 <DMA_SetConfig+0x258>)
 80018a6:	42a5      	cmp	r5, r4
 80018a8:	d107      	bne.n	80018ba <DMA_SetConfig+0x102>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018aa:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80018ac:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80018ae:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018b0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80018b2:	b114      	cbz	r4, 80018ba <DMA_SetConfig+0x102>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018b4:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80018b6:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80018b8:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018ba:	6805      	ldr	r5, [r0, #0]
 80018bc:	4c51      	ldr	r4, [pc, #324]	; (8001a04 <DMA_SetConfig+0x24c>)
 80018be:	4f52      	ldr	r7, [pc, #328]	; (8001a08 <DMA_SetConfig+0x250>)
 80018c0:	42bd      	cmp	r5, r7
 80018c2:	bf18      	it	ne
 80018c4:	42a5      	cmpne	r5, r4
 80018c6:	bf0c      	ite	eq
 80018c8:	2401      	moveq	r4, #1
 80018ca:	2400      	movne	r4, #0
 80018cc:	3718      	adds	r7, #24
 80018ce:	42bd      	cmp	r5, r7
 80018d0:	bf08      	it	eq
 80018d2:	f044 0401 	orreq.w	r4, r4, #1
 80018d6:	3718      	adds	r7, #24
 80018d8:	42bd      	cmp	r5, r7
 80018da:	bf08      	it	eq
 80018dc:	f044 0401 	orreq.w	r4, r4, #1
 80018e0:	3718      	adds	r7, #24
 80018e2:	42bd      	cmp	r5, r7
 80018e4:	bf08      	it	eq
 80018e6:	f044 0401 	orreq.w	r4, r4, #1
 80018ea:	3718      	adds	r7, #24
 80018ec:	42bd      	cmp	r5, r7
 80018ee:	bf08      	it	eq
 80018f0:	f044 0401 	orreq.w	r4, r4, #1
 80018f4:	3718      	adds	r7, #24
 80018f6:	42bd      	cmp	r5, r7
 80018f8:	bf08      	it	eq
 80018fa:	f044 0401 	orreq.w	r4, r4, #1
 80018fe:	3718      	adds	r7, #24
 8001900:	42bd      	cmp	r5, r7
 8001902:	bf08      	it	eq
 8001904:	f044 0401 	orreq.w	r4, r4, #1
 8001908:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800190c:	42bd      	cmp	r5, r7
 800190e:	bf08      	it	eq
 8001910:	f044 0401 	orreq.w	r4, r4, #1
 8001914:	3718      	adds	r7, #24
 8001916:	42bd      	cmp	r5, r7
 8001918:	bf08      	it	eq
 800191a:	f044 0401 	orreq.w	r4, r4, #1
 800191e:	3718      	adds	r7, #24
 8001920:	42bd      	cmp	r5, r7
 8001922:	bf08      	it	eq
 8001924:	f044 0401 	orreq.w	r4, r4, #1
 8001928:	3718      	adds	r7, #24
 800192a:	42bd      	cmp	r5, r7
 800192c:	bf08      	it	eq
 800192e:	f044 0401 	orreq.w	r4, r4, #1
 8001932:	3718      	adds	r7, #24
 8001934:	42bd      	cmp	r5, r7
 8001936:	bf08      	it	eq
 8001938:	f044 0401 	orreq.w	r4, r4, #1
 800193c:	3718      	adds	r7, #24
 800193e:	42bd      	cmp	r5, r7
 8001940:	bf08      	it	eq
 8001942:	f044 0401 	orreq.w	r4, r4, #1
 8001946:	3718      	adds	r7, #24
 8001948:	42bd      	cmp	r5, r7
 800194a:	bf08      	it	eq
 800194c:	f044 0401 	orreq.w	r4, r4, #1
 8001950:	b914      	cbnz	r4, 8001958 <DMA_SetConfig+0x1a0>
 8001952:	4c30      	ldr	r4, [pc, #192]	; (8001a14 <DMA_SetConfig+0x25c>)
 8001954:	42a5      	cmp	r5, r4
 8001956:	d115      	bne.n	8001984 <DMA_SetConfig+0x1cc>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001958:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800195a:	f004 051f 	and.w	r5, r4, #31
 800195e:	243f      	movs	r4, #63	; 0x3f
 8001960:	40ac      	lsls	r4, r5
 8001962:	60b4      	str	r4, [r6, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001964:	6805      	ldr	r5, [r0, #0]
 8001966:	682c      	ldr	r4, [r5, #0]
 8001968:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800196c:	602c      	str	r4, [r5, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800196e:	6804      	ldr	r4, [r0, #0]
 8001970:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001972:	6883      	ldr	r3, [r0, #8]
 8001974:	2b40      	cmp	r3, #64	; 0x40
 8001976:	d03a      	beq.n	80019ee <DMA_SetConfig+0x236>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8001978:	6803      	ldr	r3, [r0, #0]
 800197a:	6099      	str	r1, [r3, #8]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800197c:	6803      	ldr	r3, [r0, #0]
 800197e:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001980:	bcf0      	pop	{r4, r5, r6, r7}
 8001982:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001984:	4c21      	ldr	r4, [pc, #132]	; (8001a0c <DMA_SetConfig+0x254>)
 8001986:	4f24      	ldr	r7, [pc, #144]	; (8001a18 <DMA_SetConfig+0x260>)
 8001988:	42bd      	cmp	r5, r7
 800198a:	bf18      	it	ne
 800198c:	42a5      	cmpne	r5, r4
 800198e:	bf0c      	ite	eq
 8001990:	2401      	moveq	r4, #1
 8001992:	2400      	movne	r4, #0
 8001994:	3714      	adds	r7, #20
 8001996:	42bd      	cmp	r5, r7
 8001998:	bf08      	it	eq
 800199a:	f044 0401 	orreq.w	r4, r4, #1
 800199e:	3714      	adds	r7, #20
 80019a0:	42bd      	cmp	r5, r7
 80019a2:	bf08      	it	eq
 80019a4:	f044 0401 	orreq.w	r4, r4, #1
 80019a8:	3714      	adds	r7, #20
 80019aa:	42bd      	cmp	r5, r7
 80019ac:	bf08      	it	eq
 80019ae:	f044 0401 	orreq.w	r4, r4, #1
 80019b2:	3714      	adds	r7, #20
 80019b4:	42bd      	cmp	r5, r7
 80019b6:	bf08      	it	eq
 80019b8:	f044 0401 	orreq.w	r4, r4, #1
 80019bc:	3714      	adds	r7, #20
 80019be:	42bd      	cmp	r5, r7
 80019c0:	bf08      	it	eq
 80019c2:	f044 0401 	orreq.w	r4, r4, #1
 80019c6:	b914      	cbnz	r4, 80019ce <DMA_SetConfig+0x216>
 80019c8:	4c11      	ldr	r4, [pc, #68]	; (8001a10 <DMA_SetConfig+0x258>)
 80019ca:	42a5      	cmp	r5, r4
 80019cc:	d1d8      	bne.n	8001980 <DMA_SetConfig+0x1c8>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80019ce:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80019d0:	f004 051f 	and.w	r5, r4, #31
 80019d4:	2401      	movs	r4, #1
 80019d6:	40ac      	lsls	r4, r5
 80019d8:	6074      	str	r4, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80019da:	6804      	ldr	r4, [r0, #0]
 80019dc:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019de:	6883      	ldr	r3, [r0, #8]
 80019e0:	2b40      	cmp	r3, #64	; 0x40
 80019e2:	d009      	beq.n	80019f8 <DMA_SetConfig+0x240>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80019e4:	6803      	ldr	r3, [r0, #0]
 80019e6:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80019e8:	6803      	ldr	r3, [r0, #0]
 80019ea:	60da      	str	r2, [r3, #12]
}
 80019ec:	e7c8      	b.n	8001980 <DMA_SetConfig+0x1c8>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80019ee:	6803      	ldr	r3, [r0, #0]
 80019f0:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80019f2:	6803      	ldr	r3, [r0, #0]
 80019f4:	60d9      	str	r1, [r3, #12]
 80019f6:	e7c3      	b.n	8001980 <DMA_SetConfig+0x1c8>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80019f8:	6803      	ldr	r3, [r0, #0]
 80019fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80019fc:	6803      	ldr	r3, [r0, #0]
 80019fe:	60d9      	str	r1, [r3, #12]
 8001a00:	e7be      	b.n	8001980 <DMA_SetConfig+0x1c8>
 8001a02:	bf00      	nop
 8001a04:	40020010 	.word	0x40020010
 8001a08:	40020028 	.word	0x40020028
 8001a0c:	58025408 	.word	0x58025408
 8001a10:	58025494 	.word	0x58025494
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	5802541c 	.word	0x5802541c

08001a1c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a1c:	6802      	ldr	r2, [r0, #0]
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <DMA_CalcBaseAndBitshift+0xd4>)
 8001a20:	4934      	ldr	r1, [pc, #208]	; (8001af4 <DMA_CalcBaseAndBitshift+0xd8>)
 8001a22:	428a      	cmp	r2, r1
 8001a24:	bf18      	it	ne
 8001a26:	429a      	cmpne	r2, r3
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	3118      	adds	r1, #24
 8001a30:	428a      	cmp	r2, r1
 8001a32:	bf08      	it	eq
 8001a34:	f043 0301 	orreq.w	r3, r3, #1
 8001a38:	3118      	adds	r1, #24
 8001a3a:	428a      	cmp	r2, r1
 8001a3c:	bf08      	it	eq
 8001a3e:	f043 0301 	orreq.w	r3, r3, #1
 8001a42:	3118      	adds	r1, #24
 8001a44:	428a      	cmp	r2, r1
 8001a46:	bf08      	it	eq
 8001a48:	f043 0301 	orreq.w	r3, r3, #1
 8001a4c:	3118      	adds	r1, #24
 8001a4e:	428a      	cmp	r2, r1
 8001a50:	bf08      	it	eq
 8001a52:	f043 0301 	orreq.w	r3, r3, #1
 8001a56:	3118      	adds	r1, #24
 8001a58:	428a      	cmp	r2, r1
 8001a5a:	bf08      	it	eq
 8001a5c:	f043 0301 	orreq.w	r3, r3, #1
 8001a60:	3118      	adds	r1, #24
 8001a62:	428a      	cmp	r2, r1
 8001a64:	bf08      	it	eq
 8001a66:	f043 0301 	orreq.w	r3, r3, #1
 8001a6a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001a6e:	428a      	cmp	r2, r1
 8001a70:	bf08      	it	eq
 8001a72:	f043 0301 	orreq.w	r3, r3, #1
 8001a76:	3118      	adds	r1, #24
 8001a78:	428a      	cmp	r2, r1
 8001a7a:	bf08      	it	eq
 8001a7c:	f043 0301 	orreq.w	r3, r3, #1
 8001a80:	3118      	adds	r1, #24
 8001a82:	428a      	cmp	r2, r1
 8001a84:	bf08      	it	eq
 8001a86:	f043 0301 	orreq.w	r3, r3, #1
 8001a8a:	3118      	adds	r1, #24
 8001a8c:	428a      	cmp	r2, r1
 8001a8e:	bf08      	it	eq
 8001a90:	f043 0301 	orreq.w	r3, r3, #1
 8001a94:	3118      	adds	r1, #24
 8001a96:	428a      	cmp	r2, r1
 8001a98:	bf08      	it	eq
 8001a9a:	f043 0301 	orreq.w	r3, r3, #1
 8001a9e:	3118      	adds	r1, #24
 8001aa0:	428a      	cmp	r2, r1
 8001aa2:	bf08      	it	eq
 8001aa4:	f043 0301 	orreq.w	r3, r3, #1
 8001aa8:	3118      	adds	r1, #24
 8001aaa:	428a      	cmp	r2, r1
 8001aac:	bf08      	it	eq
 8001aae:	f043 0301 	orreq.w	r3, r3, #1
 8001ab2:	b913      	cbnz	r3, 8001aba <DMA_CalcBaseAndBitshift+0x9e>
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <DMA_CalcBaseAndBitshift+0xdc>)
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d115      	bne.n	8001ae6 <DMA_CalcBaseAndBitshift+0xca>
{
 8001aba:	b410      	push	{r4}
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001abc:	b2d1      	uxtb	r1, r2
 8001abe:	3910      	subs	r1, #16
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <DMA_CalcBaseAndBitshift+0xe0>)
 8001ac2:	fba3 4301 	umull	r4, r3, r3, r1

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001ac6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001aca:	4c0d      	ldr	r4, [pc, #52]	; (8001b00 <DMA_CalcBaseAndBitshift+0xe4>)
 8001acc:	5ce3      	ldrb	r3, [r4, r3]
 8001ace:	65c3      	str	r3, [r0, #92]	; 0x5c

    if (stream_number > 3U)
 8001ad0:	295f      	cmp	r1, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <DMA_CalcBaseAndBitshift+0xe8>)
 8001ad4:	ea03 0302 	and.w	r3, r3, r2
 8001ad8:	bf88      	it	hi
 8001ada:	3304      	addhi	r3, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001adc:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8001ade:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ae4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001ae6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001aea:	6582      	str	r2, [r0, #88]	; 0x58
}
 8001aec:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001aee:	4770      	bx	lr
 8001af0:	40020010 	.word	0x40020010
 8001af4:	40020028 	.word	0x40020028
 8001af8:	400204b8 	.word	0x400204b8
 8001afc:	aaaaaaab 	.word	0xaaaaaaab
 8001b00:	0800a674 	.word	0x0800a674
 8001b04:	fffffc00 	.word	0xfffffc00

08001b08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001b08:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b0a:	4a28      	ldr	r2, [pc, #160]	; (8001bac <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8001b0c:	4928      	ldr	r1, [pc, #160]	; (8001bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001b0e:	428b      	cmp	r3, r1
 8001b10:	bf18      	it	ne
 8001b12:	4293      	cmpne	r3, r2
 8001b14:	bf0c      	ite	eq
 8001b16:	2201      	moveq	r2, #1
 8001b18:	2200      	movne	r2, #0
 8001b1a:	3114      	adds	r1, #20
 8001b1c:	428b      	cmp	r3, r1
 8001b1e:	bf08      	it	eq
 8001b20:	f042 0201 	orreq.w	r2, r2, #1
 8001b24:	3114      	adds	r1, #20
 8001b26:	428b      	cmp	r3, r1
 8001b28:	bf08      	it	eq
 8001b2a:	f042 0201 	orreq.w	r2, r2, #1
 8001b2e:	3114      	adds	r1, #20
 8001b30:	428b      	cmp	r3, r1
 8001b32:	bf08      	it	eq
 8001b34:	f042 0201 	orreq.w	r2, r2, #1
 8001b38:	3114      	adds	r1, #20
 8001b3a:	428b      	cmp	r3, r1
 8001b3c:	bf08      	it	eq
 8001b3e:	f042 0201 	orreq.w	r2, r2, #1
 8001b42:	3114      	adds	r1, #20
 8001b44:	428b      	cmp	r3, r1
 8001b46:	bf08      	it	eq
 8001b48:	f042 0201 	orreq.w	r2, r2, #1
 8001b4c:	b912      	cbnz	r2, 8001b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>
 8001b4e:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d112      	bne.n	8001b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3b08      	subs	r3, #8
 8001b58:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001b5e:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8001b60:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001b68:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8001b6a:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b6c:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8001b70:	2201      	movs	r2, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	6683      	str	r3, [r0, #104]	; 0x68
 8001b78:	4770      	bx	lr
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	3a10      	subs	r2, #16
 8001b7e:	4911      	ldr	r1, [pc, #68]	; (8001bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8001b80:	fba1 1202 	umull	r1, r2, r1, r2
 8001b84:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b86:	4910      	ldr	r1, [pc, #64]	; (8001bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8001b88:	4419      	add	r1, r3
 8001b8a:	29a8      	cmp	r1, #168	; 0xa8
 8001b8c:	d90c      	bls.n	8001ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
 8001b98:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b9a:	f002 021f 	and.w	r2, r2, #31
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	fa03 f202 	lsl.w	r2, r3, r2
 8001ba4:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8001ba6:	4770      	bx	lr
      stream_number += 8U;
 8001ba8:	3208      	adds	r2, #8
 8001baa:	e7f0      	b.n	8001b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
 8001bac:	58025408 	.word	0x58025408
 8001bb0:	5802541c 	.word	0x5802541c
 8001bb4:	58025494 	.word	0x58025494
 8001bb8:	cccccccd 	.word	0xcccccccd
 8001bbc:	16009600 	.word	0x16009600
 8001bc0:	58025880 	.word	0x58025880
 8001bc4:	aaaaaaab 	.word	0xaaaaaaab
 8001bc8:	bffdfbf0 	.word	0xbffdfbf0
 8001bcc:	10008200 	.word	0x10008200
 8001bd0:	40020880 	.word	0x40020880

08001bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bd4:	f890 c004 	ldrb.w	ip, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001bd8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001bdc:	2907      	cmp	r1, #7
 8001bde:	d83a      	bhi.n	8001c56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x82>
{
 8001be0:	b410      	push	{r4}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001be2:	6802      	ldr	r2, [r0, #0]
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x84>)
 8001be6:	4c1d      	ldr	r4, [pc, #116]	; (8001c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x88>)
 8001be8:	42a2      	cmp	r2, r4
 8001bea:	bf18      	it	ne
 8001bec:	429a      	cmpne	r2, r3
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	3414      	adds	r4, #20
 8001bf6:	42a2      	cmp	r2, r4
 8001bf8:	bf08      	it	eq
 8001bfa:	f043 0301 	orreq.w	r3, r3, #1
 8001bfe:	3414      	adds	r4, #20
 8001c00:	42a2      	cmp	r2, r4
 8001c02:	bf08      	it	eq
 8001c04:	f043 0301 	orreq.w	r3, r3, #1
 8001c08:	3414      	adds	r4, #20
 8001c0a:	42a2      	cmp	r2, r4
 8001c0c:	bf08      	it	eq
 8001c0e:	f043 0301 	orreq.w	r3, r3, #1
 8001c12:	3414      	adds	r4, #20
 8001c14:	42a2      	cmp	r2, r4
 8001c16:	bf08      	it	eq
 8001c18:	f043 0301 	orreq.w	r3, r3, #1
 8001c1c:	3414      	adds	r4, #20
 8001c1e:	42a2      	cmp	r2, r4
 8001c20:	bf08      	it	eq
 8001c22:	f043 0301 	orreq.w	r3, r3, #1
 8001c26:	b913      	cbnz	r3, 8001c2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5a>
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>)
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d10c      	bne.n	8001c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x90>)
 8001c30:	4463      	add	r3, ip
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x94>)
 8001c38:	6703      	str	r3, [r0, #112]	; 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	fa03 f101 	lsl.w	r1, r3, r1
 8001c40:	6741      	str	r1, [r0, #116]	; 0x74
  }
}
 8001c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c46:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x98>)
 8001c4a:	4463      	add	r3, ip
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x9c>)
 8001c52:	6703      	str	r3, [r0, #112]	; 0x70
 8001c54:	e7f1      	b.n	8001c3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x66>
 8001c56:	4770      	bx	lr
 8001c58:	58025408 	.word	0x58025408
 8001c5c:	5802541c 	.word	0x5802541c
 8001c60:	58025494 	.word	0x58025494
 8001c64:	1600963f 	.word	0x1600963f
 8001c68:	58025940 	.word	0x58025940
 8001c6c:	1000823f 	.word	0x1000823f
 8001c70:	40020940 	.word	0x40020940

08001c74 <HAL_DMA_Init>:
{
 8001c74:	b538      	push	{r3, r4, r5, lr}
 8001c76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff fc72 	bl	8001560 <HAL_GetTick>
  if(hdma == NULL)
 8001c7c:	2c00      	cmp	r4, #0
 8001c7e:	f000 820c 	beq.w	800209a <HAL_DMA_Init+0x426>
 8001c82:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c84:	6822      	ldr	r2, [r4, #0]
 8001c86:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <HAL_DMA_Init+0x1a4>)
 8001c88:	4964      	ldr	r1, [pc, #400]	; (8001e1c <HAL_DMA_Init+0x1a8>)
 8001c8a:	428a      	cmp	r2, r1
 8001c8c:	bf18      	it	ne
 8001c8e:	429a      	cmpne	r2, r3
 8001c90:	bf0c      	ite	eq
 8001c92:	2301      	moveq	r3, #1
 8001c94:	2300      	movne	r3, #0
 8001c96:	3118      	adds	r1, #24
 8001c98:	428a      	cmp	r2, r1
 8001c9a:	bf08      	it	eq
 8001c9c:	f043 0301 	orreq.w	r3, r3, #1
 8001ca0:	3118      	adds	r1, #24
 8001ca2:	428a      	cmp	r2, r1
 8001ca4:	bf08      	it	eq
 8001ca6:	f043 0301 	orreq.w	r3, r3, #1
 8001caa:	3118      	adds	r1, #24
 8001cac:	428a      	cmp	r2, r1
 8001cae:	bf08      	it	eq
 8001cb0:	f043 0301 	orreq.w	r3, r3, #1
 8001cb4:	3118      	adds	r1, #24
 8001cb6:	428a      	cmp	r2, r1
 8001cb8:	bf08      	it	eq
 8001cba:	f043 0301 	orreq.w	r3, r3, #1
 8001cbe:	3118      	adds	r1, #24
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	bf08      	it	eq
 8001cc4:	f043 0301 	orreq.w	r3, r3, #1
 8001cc8:	3118      	adds	r1, #24
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	bf08      	it	eq
 8001cce:	f043 0301 	orreq.w	r3, r3, #1
 8001cd2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001cd6:	428a      	cmp	r2, r1
 8001cd8:	bf08      	it	eq
 8001cda:	f043 0301 	orreq.w	r3, r3, #1
 8001cde:	3118      	adds	r1, #24
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	bf08      	it	eq
 8001ce4:	f043 0301 	orreq.w	r3, r3, #1
 8001ce8:	3118      	adds	r1, #24
 8001cea:	428a      	cmp	r2, r1
 8001cec:	bf08      	it	eq
 8001cee:	f043 0301 	orreq.w	r3, r3, #1
 8001cf2:	3118      	adds	r1, #24
 8001cf4:	428a      	cmp	r2, r1
 8001cf6:	bf08      	it	eq
 8001cf8:	f043 0301 	orreq.w	r3, r3, #1
 8001cfc:	3118      	adds	r1, #24
 8001cfe:	428a      	cmp	r2, r1
 8001d00:	bf08      	it	eq
 8001d02:	f043 0301 	orreq.w	r3, r3, #1
 8001d06:	3118      	adds	r1, #24
 8001d08:	428a      	cmp	r2, r1
 8001d0a:	bf08      	it	eq
 8001d0c:	f043 0301 	orreq.w	r3, r3, #1
 8001d10:	3118      	adds	r1, #24
 8001d12:	428a      	cmp	r2, r1
 8001d14:	bf08      	it	eq
 8001d16:	f043 0301 	orreq.w	r3, r3, #1
 8001d1a:	b913      	cbnz	r3, 8001d22 <HAL_DMA_Init+0xae>
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_DMA_Init+0x1ac>)
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11a      	bne.n	8001d58 <HAL_DMA_Init+0xe4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d22:	2302      	movs	r3, #2
 8001d24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8001d2e:	6813      	ldr	r3, [r2, #0]
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6013      	str	r3, [r2, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	f012 0f01 	tst.w	r2, #1
 8001d3e:	d07d      	beq.n	8001e3c <HAL_DMA_Init+0x1c8>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d40:	f7ff fc0e 	bl	8001560 <HAL_GetTick>
 8001d44:	1b43      	subs	r3, r0, r5
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	d9f5      	bls.n	8001d36 <HAL_DMA_Init+0xc2>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
}
 8001d56:	bd38      	pop	{r3, r4, r5, pc}
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_DMA_Init+0x1b0>)
 8001d5a:	4933      	ldr	r1, [pc, #204]	; (8001e28 <HAL_DMA_Init+0x1b4>)
 8001d5c:	428a      	cmp	r2, r1
 8001d5e:	bf18      	it	ne
 8001d60:	429a      	cmpne	r2, r3
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	3114      	adds	r1, #20
 8001d6a:	428a      	cmp	r2, r1
 8001d6c:	bf08      	it	eq
 8001d6e:	f043 0301 	orreq.w	r3, r3, #1
 8001d72:	3114      	adds	r1, #20
 8001d74:	428a      	cmp	r2, r1
 8001d76:	bf08      	it	eq
 8001d78:	f043 0301 	orreq.w	r3, r3, #1
 8001d7c:	3114      	adds	r1, #20
 8001d7e:	428a      	cmp	r2, r1
 8001d80:	bf08      	it	eq
 8001d82:	f043 0301 	orreq.w	r3, r3, #1
 8001d86:	3114      	adds	r1, #20
 8001d88:	428a      	cmp	r2, r1
 8001d8a:	bf08      	it	eq
 8001d8c:	f043 0301 	orreq.w	r3, r3, #1
 8001d90:	3114      	adds	r1, #20
 8001d92:	428a      	cmp	r2, r1
 8001d94:	bf08      	it	eq
 8001d96:	f043 0301 	orreq.w	r3, r3, #1
 8001d9a:	b91b      	cbnz	r3, 8001da4 <HAL_DMA_Init+0x130>
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_DMA_Init+0x1b8>)
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	f040 8165 	bne.w	800206e <HAL_DMA_Init+0x3fa>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da4:	2302      	movs	r3, #2
 8001da6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001daa:	2300      	movs	r3, #0
 8001dac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001db0:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001db2:	481f      	ldr	r0, [pc, #124]	; (8001e30 <HAL_DMA_Init+0x1bc>)
 8001db4:	4018      	ands	r0, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001db6:	68a3      	ldr	r3, [r4, #8]
 8001db8:	2b40      	cmp	r3, #64	; 0x40
 8001dba:	f000 815f 	beq.w	800207c <HAL_DMA_Init+0x408>
 8001dbe:	2b80      	cmp	r3, #128	; 0x80
 8001dc0:	bf0c      	ite	eq
 8001dc2:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 8001dc6:	2100      	movne	r1, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001dc8:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001dca:	6923      	ldr	r3, [r4, #16]
 8001dcc:	08db      	lsrs	r3, r3, #3
 8001dce:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001dd2:	6965      	ldr	r5, [r4, #20]
 8001dd4:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001dd8:	69a5      	ldr	r5, [r4, #24]
 8001dda:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001dde:	69e5      	ldr	r5, [r4, #28]
 8001de0:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001de4:	6a25      	ldr	r5, [r4, #32]
 8001de6:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8001dea:	4303      	orrs	r3, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dec:	430b      	orrs	r3, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001dee:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001df0:	6822      	ldr	r2, [r4, #0]
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_DMA_Init+0x1c0>)
 8001df4:	4413      	add	r3, r2
 8001df6:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_DMA_Init+0x1c4>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e02:	4620      	mov	r0, r4
 8001e04:	f7ff fe0a 	bl	8001a1c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e08:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e0a:	f002 011f 	and.w	r1, r2, #31
 8001e0e:	2201      	movs	r2, #1
 8001e10:	408a      	lsls	r2, r1
 8001e12:	6042      	str	r2, [r0, #4]
 8001e14:	e05e      	b.n	8001ed4 <HAL_DMA_Init+0x260>
 8001e16:	bf00      	nop
 8001e18:	40020010 	.word	0x40020010
 8001e1c:	40020028 	.word	0x40020028
 8001e20:	400204b8 	.word	0x400204b8
 8001e24:	58025408 	.word	0x58025408
 8001e28:	5802541c 	.word	0x5802541c
 8001e2c:	58025494 	.word	0x58025494
 8001e30:	fffe000f 	.word	0xfffe000f
 8001e34:	a7fdabf8 	.word	0xa7fdabf8
 8001e38:	cccccccd 	.word	0xcccccccd
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e3c:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e3e:	489a      	ldr	r0, [pc, #616]	; (80020a8 <HAL_DMA_Init+0x434>)
 8001e40:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8001e42:	68a1      	ldr	r1, [r4, #8]
 8001e44:	68e2      	ldr	r2, [r4, #12]
 8001e46:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e48:	6921      	ldr	r1, [r4, #16]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	6961      	ldr	r1, [r4, #20]
 8001e4e:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e50:	69a1      	ldr	r1, [r4, #24]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	69e1      	ldr	r1, [r4, #28]
 8001e56:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e58:	6a21      	ldr	r1, [r4, #32]
 8001e5a:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8001e5c:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e60:	2904      	cmp	r1, #4
 8001e62:	f000 80c8 	beq.w	8001ff6 <HAL_DMA_Init+0x382>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001e66:	4991      	ldr	r1, [pc, #580]	; (80020ac <HAL_DMA_Init+0x438>)
 8001e68:	6808      	ldr	r0, [r1, #0]
 8001e6a:	4991      	ldr	r1, [pc, #580]	; (80020b0 <HAL_DMA_Init+0x43c>)
 8001e6c:	4001      	ands	r1, r0
 8001e6e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001e72:	d30d      	bcc.n	8001e90 <HAL_DMA_Init+0x21c>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e74:	6861      	ldr	r1, [r4, #4]
 8001e76:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8001e7a:	281f      	cmp	r0, #31
 8001e7c:	f200 810f 	bhi.w	800209e <HAL_DMA_Init+0x42a>
 8001e80:	498c      	ldr	r1, [pc, #560]	; (80020b4 <HAL_DMA_Init+0x440>)
 8001e82:	fa21 f000 	lsr.w	r0, r1, r0
 8001e86:	f010 0f01 	tst.w	r0, #1
 8001e8a:	d001      	beq.n	8001e90 <HAL_DMA_Init+0x21c>
        registerValue |= DMA_SxCR_TRBUFF;
 8001e8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e90:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e92:	6821      	ldr	r1, [r4, #0]
 8001e94:	694a      	ldr	r2, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e96:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8001e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e9c:	431a      	orrs	r2, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_DMA_Init+0x24c>
      registerValue |= hdma->Init.FIFOThreshold;
 8001ea2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ea4:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ea8:	b153      	cbz	r3, 8001ec0 <HAL_DMA_Init+0x24c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eaa:	69a5      	ldr	r5, [r4, #24]
 8001eac:	2d00      	cmp	r5, #0
 8001eae:	f040 80b8 	bne.w	8002022 <HAL_DMA_Init+0x3ae>
    switch (hdma->Init.FIFOThreshold)
 8001eb2:	2801      	cmp	r0, #1
 8001eb4:	f000 80af 	beq.w	8002016 <HAL_DMA_Init+0x3a2>
 8001eb8:	f030 0002 	bics.w	r0, r0, #2
 8001ebc:	f000 80a0 	beq.w	8002000 <HAL_DMA_Init+0x38c>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ec0:	614a      	str	r2, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff fdaa 	bl	8001a1c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ec8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001eca:	f003 021f 	and.w	r2, r3, #31
 8001ece:	233f      	movs	r3, #63	; 0x3f
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	4b78      	ldr	r3, [pc, #480]	; (80020b8 <HAL_DMA_Init+0x444>)
 8001ed8:	4978      	ldr	r1, [pc, #480]	; (80020bc <HAL_DMA_Init+0x448>)
 8001eda:	428a      	cmp	r2, r1
 8001edc:	bf18      	it	ne
 8001ede:	429a      	cmpne	r2, r3
 8001ee0:	bf0c      	ite	eq
 8001ee2:	2301      	moveq	r3, #1
 8001ee4:	2300      	movne	r3, #0
 8001ee6:	3118      	adds	r1, #24
 8001ee8:	428a      	cmp	r2, r1
 8001eea:	bf08      	it	eq
 8001eec:	f043 0301 	orreq.w	r3, r3, #1
 8001ef0:	3118      	adds	r1, #24
 8001ef2:	428a      	cmp	r2, r1
 8001ef4:	bf08      	it	eq
 8001ef6:	f043 0301 	orreq.w	r3, r3, #1
 8001efa:	3118      	adds	r1, #24
 8001efc:	428a      	cmp	r2, r1
 8001efe:	bf08      	it	eq
 8001f00:	f043 0301 	orreq.w	r3, r3, #1
 8001f04:	3118      	adds	r1, #24
 8001f06:	428a      	cmp	r2, r1
 8001f08:	bf08      	it	eq
 8001f0a:	f043 0301 	orreq.w	r3, r3, #1
 8001f0e:	3118      	adds	r1, #24
 8001f10:	428a      	cmp	r2, r1
 8001f12:	bf08      	it	eq
 8001f14:	f043 0301 	orreq.w	r3, r3, #1
 8001f18:	3118      	adds	r1, #24
 8001f1a:	428a      	cmp	r2, r1
 8001f1c:	bf08      	it	eq
 8001f1e:	f043 0301 	orreq.w	r3, r3, #1
 8001f22:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001f26:	428a      	cmp	r2, r1
 8001f28:	bf08      	it	eq
 8001f2a:	f043 0301 	orreq.w	r3, r3, #1
 8001f2e:	3118      	adds	r1, #24
 8001f30:	428a      	cmp	r2, r1
 8001f32:	bf08      	it	eq
 8001f34:	f043 0301 	orreq.w	r3, r3, #1
 8001f38:	3118      	adds	r1, #24
 8001f3a:	428a      	cmp	r2, r1
 8001f3c:	bf08      	it	eq
 8001f3e:	f043 0301 	orreq.w	r3, r3, #1
 8001f42:	3118      	adds	r1, #24
 8001f44:	428a      	cmp	r2, r1
 8001f46:	bf08      	it	eq
 8001f48:	f043 0301 	orreq.w	r3, r3, #1
 8001f4c:	3118      	adds	r1, #24
 8001f4e:	428a      	cmp	r2, r1
 8001f50:	bf08      	it	eq
 8001f52:	f043 0301 	orreq.w	r3, r3, #1
 8001f56:	3118      	adds	r1, #24
 8001f58:	428a      	cmp	r2, r1
 8001f5a:	bf08      	it	eq
 8001f5c:	f043 0301 	orreq.w	r3, r3, #1
 8001f60:	3118      	adds	r1, #24
 8001f62:	428a      	cmp	r2, r1
 8001f64:	bf08      	it	eq
 8001f66:	f043 0301 	orreq.w	r3, r3, #1
 8001f6a:	3118      	adds	r1, #24
 8001f6c:	428a      	cmp	r2, r1
 8001f6e:	bf08      	it	eq
 8001f70:	f043 0301 	orreq.w	r3, r3, #1
 8001f74:	4952      	ldr	r1, [pc, #328]	; (80020c0 <HAL_DMA_Init+0x44c>)
 8001f76:	428a      	cmp	r2, r1
 8001f78:	bf08      	it	eq
 8001f7a:	f043 0301 	orreq.w	r3, r3, #1
 8001f7e:	3114      	adds	r1, #20
 8001f80:	428a      	cmp	r2, r1
 8001f82:	bf08      	it	eq
 8001f84:	f043 0301 	orreq.w	r3, r3, #1
 8001f88:	3114      	adds	r1, #20
 8001f8a:	428a      	cmp	r2, r1
 8001f8c:	bf08      	it	eq
 8001f8e:	f043 0301 	orreq.w	r3, r3, #1
 8001f92:	3114      	adds	r1, #20
 8001f94:	428a      	cmp	r2, r1
 8001f96:	bf08      	it	eq
 8001f98:	f043 0301 	orreq.w	r3, r3, #1
 8001f9c:	3114      	adds	r1, #20
 8001f9e:	428a      	cmp	r2, r1
 8001fa0:	bf08      	it	eq
 8001fa2:	f043 0301 	orreq.w	r3, r3, #1
 8001fa6:	3114      	adds	r1, #20
 8001fa8:	428a      	cmp	r2, r1
 8001faa:	bf08      	it	eq
 8001fac:	f043 0301 	orreq.w	r3, r3, #1
 8001fb0:	3114      	adds	r1, #20
 8001fb2:	428a      	cmp	r2, r1
 8001fb4:	bf08      	it	eq
 8001fb6:	f043 0301 	orreq.w	r3, r3, #1
 8001fba:	b913      	cbnz	r3, 8001fc2 <HAL_DMA_Init+0x34e>
 8001fbc:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_DMA_Init+0x450>)
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d113      	bne.n	8001fea <HAL_DMA_Init+0x376>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff fda0 	bl	8001b08 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fc8:	68a3      	ldr	r3, [r4, #8]
 8001fca:	2b80      	cmp	r3, #128	; 0x80
 8001fcc:	d058      	beq.n	8002080 <HAL_DMA_Init+0x40c>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001fd0:	7922      	ldrb	r2, [r4, #4]
 8001fd2:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fd6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001fd8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fda:	6863      	ldr	r3, [r4, #4]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	2b07      	cmp	r3, #7
 8001fe0:	d951      	bls.n	8002086 <HAL_DMA_Init+0x412>
      hdma->DMAmuxRequestGen = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001fe6:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fe8:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fea:	2000      	movs	r0, #0
 8001fec:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ff4:	e6af      	b.n	8001d56 <HAL_DMA_Init+0xe2>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ff6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ff8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ffa:	4301      	orrs	r1, r0
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	e732      	b.n	8001e66 <HAL_DMA_Init+0x1f2>
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002004:	2b00      	cmp	r3, #0
 8002006:	f43f af5b 	beq.w	8001ec0 <HAL_DMA_Init+0x24c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800200a:	2340      	movs	r3, #64	; 0x40
 800200c:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800200e:	2001      	movs	r0, #1
 8002010:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8002014:	e69f      	b.n	8001d56 <HAL_DMA_Init+0xe2>
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800201a:	bf14      	ite	ne
 800201c:	2300      	movne	r3, #0
 800201e:	2301      	moveq	r3, #1
 8002020:	e7f0      	b.n	8002004 <HAL_DMA_Init+0x390>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002022:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002026:	d00a      	beq.n	800203e <HAL_DMA_Init+0x3ca>
    switch (hdma->Init.FIFOThreshold)
 8002028:	2802      	cmp	r0, #2
 800202a:	d9ee      	bls.n	800200a <HAL_DMA_Init+0x396>
 800202c:	2803      	cmp	r0, #3
 800202e:	f47f af47 	bne.w	8001ec0 <HAL_DMA_Init+0x24c>
  HAL_StatusTypeDef status = HAL_OK;
 8002032:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002036:	2b00      	cmp	r3, #0
 8002038:	f43f af42 	beq.w	8001ec0 <HAL_DMA_Init+0x24c>
 800203c:	e7e5      	b.n	800200a <HAL_DMA_Init+0x396>
    switch (hdma->Init.FIFOThreshold)
 800203e:	2803      	cmp	r0, #3
 8002040:	f63f af3e 	bhi.w	8001ec0 <HAL_DMA_Init+0x24c>
 8002044:	a501      	add	r5, pc, #4	; (adr r5, 800204c <HAL_DMA_Init+0x3d8>)
 8002046:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 800204a:	bf00      	nop
 800204c:	0800200b 	.word	0x0800200b
 8002050:	0800205d 	.word	0x0800205d
 8002054:	0800200b 	.word	0x0800200b
 8002058:	08002063 	.word	0x08002063
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8002060:	e7e9      	b.n	8002036 <HAL_DMA_Init+0x3c2>
 8002062:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002066:	bf14      	ite	ne
 8002068:	2300      	movne	r3, #0
 800206a:	2301      	moveq	r3, #1
 800206c:	e7e3      	b.n	8002036 <HAL_DMA_Init+0x3c2>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800206e:	2340      	movs	r3, #64	; 0x40
 8002070:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002072:	2303      	movs	r3, #3
 8002074:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8002078:	2001      	movs	r0, #1
 800207a:	e66c      	b.n	8001d56 <HAL_DMA_Init+0xe2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800207c:	2110      	movs	r1, #16
 800207e:	e6a3      	b.n	8001dc8 <HAL_DMA_Init+0x154>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002080:	2300      	movs	r3, #0
 8002082:	6063      	str	r3, [r4, #4]
 8002084:	e7a3      	b.n	8001fce <HAL_DMA_Init+0x35a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002086:	4620      	mov	r0, r4
 8002088:	f7ff fda4 	bl	8001bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800208c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002092:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002094:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	e7a7      	b.n	8001fea <HAL_DMA_Init+0x376>
    return HAL_ERROR;
 800209a:	2001      	movs	r0, #1
 800209c:	e65b      	b.n	8001d56 <HAL_DMA_Init+0xe2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800209e:	394f      	subs	r1, #79	; 0x4f
 80020a0:	2903      	cmp	r1, #3
 80020a2:	f67f aef3 	bls.w	8001e8c <HAL_DMA_Init+0x218>
 80020a6:	e6f3      	b.n	8001e90 <HAL_DMA_Init+0x21c>
 80020a8:	fe10803f 	.word	0xfe10803f
 80020ac:	5c001000 	.word	0x5c001000
 80020b0:	ffff0000 	.word	0xffff0000
 80020b4:	c3c0003f 	.word	0xc3c0003f
 80020b8:	40020010 	.word	0x40020010
 80020bc:	40020028 	.word	0x40020028
 80020c0:	58025408 	.word	0x58025408
 80020c4:	58025494 	.word	0x58025494

080020c8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80020c8:	2800      	cmp	r0, #0
 80020ca:	f000 81d2 	beq.w	8002472 <HAL_DMA_Start_IT+0x3aa>
{
 80020ce:	b570      	push	{r4, r5, r6, lr}
 80020d0:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80020d2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80020d6:	2801      	cmp	r0, #1
 80020d8:	f000 81cd 	beq.w	8002476 <HAL_DMA_Start_IT+0x3ae>
 80020dc:	2001      	movs	r0, #1
 80020de:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80020e2:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80020e6:	b2c0      	uxtb	r0, r0
 80020e8:	2801      	cmp	r0, #1
 80020ea:	d007      	beq.n	80020fc <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80020ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020f0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80020f2:	2300      	movs	r3, #0
 80020f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 80020f8:	2001      	movs	r0, #1
}
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fc:	2002      	movs	r0, #2
 80020fe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002102:	2000      	movs	r0, #0
 8002104:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8002106:	6825      	ldr	r5, [r4, #0]
 8002108:	4895      	ldr	r0, [pc, #596]	; (8002360 <HAL_DMA_Start_IT+0x298>)
 800210a:	4e96      	ldr	r6, [pc, #600]	; (8002364 <HAL_DMA_Start_IT+0x29c>)
 800210c:	42b5      	cmp	r5, r6
 800210e:	bf18      	it	ne
 8002110:	4285      	cmpne	r5, r0
 8002112:	bf0c      	ite	eq
 8002114:	2001      	moveq	r0, #1
 8002116:	2000      	movne	r0, #0
 8002118:	3618      	adds	r6, #24
 800211a:	42b5      	cmp	r5, r6
 800211c:	bf08      	it	eq
 800211e:	f040 0001 	orreq.w	r0, r0, #1
 8002122:	3618      	adds	r6, #24
 8002124:	42b5      	cmp	r5, r6
 8002126:	bf08      	it	eq
 8002128:	f040 0001 	orreq.w	r0, r0, #1
 800212c:	3618      	adds	r6, #24
 800212e:	42b5      	cmp	r5, r6
 8002130:	bf08      	it	eq
 8002132:	f040 0001 	orreq.w	r0, r0, #1
 8002136:	3618      	adds	r6, #24
 8002138:	42b5      	cmp	r5, r6
 800213a:	bf08      	it	eq
 800213c:	f040 0001 	orreq.w	r0, r0, #1
 8002140:	3618      	adds	r6, #24
 8002142:	42b5      	cmp	r5, r6
 8002144:	bf08      	it	eq
 8002146:	f040 0001 	orreq.w	r0, r0, #1
 800214a:	3618      	adds	r6, #24
 800214c:	42b5      	cmp	r5, r6
 800214e:	bf08      	it	eq
 8002150:	f040 0001 	orreq.w	r0, r0, #1
 8002154:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8002158:	42b5      	cmp	r5, r6
 800215a:	bf08      	it	eq
 800215c:	f040 0001 	orreq.w	r0, r0, #1
 8002160:	3618      	adds	r6, #24
 8002162:	42b5      	cmp	r5, r6
 8002164:	bf08      	it	eq
 8002166:	f040 0001 	orreq.w	r0, r0, #1
 800216a:	3618      	adds	r6, #24
 800216c:	42b5      	cmp	r5, r6
 800216e:	bf08      	it	eq
 8002170:	f040 0001 	orreq.w	r0, r0, #1
 8002174:	3618      	adds	r6, #24
 8002176:	42b5      	cmp	r5, r6
 8002178:	bf08      	it	eq
 800217a:	f040 0001 	orreq.w	r0, r0, #1
 800217e:	3618      	adds	r6, #24
 8002180:	42b5      	cmp	r5, r6
 8002182:	bf08      	it	eq
 8002184:	f040 0001 	orreq.w	r0, r0, #1
 8002188:	3618      	adds	r6, #24
 800218a:	42b5      	cmp	r5, r6
 800218c:	bf08      	it	eq
 800218e:	f040 0001 	orreq.w	r0, r0, #1
 8002192:	3618      	adds	r6, #24
 8002194:	42b5      	cmp	r5, r6
 8002196:	bf08      	it	eq
 8002198:	f040 0001 	orreq.w	r0, r0, #1
 800219c:	b918      	cbnz	r0, 80021a6 <HAL_DMA_Start_IT+0xde>
 800219e:	4872      	ldr	r0, [pc, #456]	; (8002368 <HAL_DMA_Start_IT+0x2a0>)
 80021a0:	4285      	cmp	r5, r0
 80021a2:	f040 814b 	bne.w	800243c <HAL_DMA_Start_IT+0x374>
 80021a6:	6828      	ldr	r0, [r5, #0]
 80021a8:	f020 0001 	bic.w	r0, r0, #1
 80021ac:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f7ff fb02 	bl	80017b8 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021b4:	6822      	ldr	r2, [r4, #0]
 80021b6:	4b6a      	ldr	r3, [pc, #424]	; (8002360 <HAL_DMA_Start_IT+0x298>)
 80021b8:	496a      	ldr	r1, [pc, #424]	; (8002364 <HAL_DMA_Start_IT+0x29c>)
 80021ba:	428a      	cmp	r2, r1
 80021bc:	bf18      	it	ne
 80021be:	429a      	cmpne	r2, r3
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	3118      	adds	r1, #24
 80021c8:	428a      	cmp	r2, r1
 80021ca:	bf08      	it	eq
 80021cc:	f043 0301 	orreq.w	r3, r3, #1
 80021d0:	3118      	adds	r1, #24
 80021d2:	428a      	cmp	r2, r1
 80021d4:	bf08      	it	eq
 80021d6:	f043 0301 	orreq.w	r3, r3, #1
 80021da:	3118      	adds	r1, #24
 80021dc:	428a      	cmp	r2, r1
 80021de:	bf08      	it	eq
 80021e0:	f043 0301 	orreq.w	r3, r3, #1
 80021e4:	3118      	adds	r1, #24
 80021e6:	428a      	cmp	r2, r1
 80021e8:	bf08      	it	eq
 80021ea:	f043 0301 	orreq.w	r3, r3, #1
 80021ee:	3118      	adds	r1, #24
 80021f0:	428a      	cmp	r2, r1
 80021f2:	bf08      	it	eq
 80021f4:	f043 0301 	orreq.w	r3, r3, #1
 80021f8:	3118      	adds	r1, #24
 80021fa:	428a      	cmp	r2, r1
 80021fc:	bf08      	it	eq
 80021fe:	f043 0301 	orreq.w	r3, r3, #1
 8002202:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002206:	428a      	cmp	r2, r1
 8002208:	bf08      	it	eq
 800220a:	f043 0301 	orreq.w	r3, r3, #1
 800220e:	3118      	adds	r1, #24
 8002210:	428a      	cmp	r2, r1
 8002212:	bf08      	it	eq
 8002214:	f043 0301 	orreq.w	r3, r3, #1
 8002218:	3118      	adds	r1, #24
 800221a:	428a      	cmp	r2, r1
 800221c:	bf08      	it	eq
 800221e:	f043 0301 	orreq.w	r3, r3, #1
 8002222:	3118      	adds	r1, #24
 8002224:	428a      	cmp	r2, r1
 8002226:	bf08      	it	eq
 8002228:	f043 0301 	orreq.w	r3, r3, #1
 800222c:	3118      	adds	r1, #24
 800222e:	428a      	cmp	r2, r1
 8002230:	bf08      	it	eq
 8002232:	f043 0301 	orreq.w	r3, r3, #1
 8002236:	3118      	adds	r1, #24
 8002238:	428a      	cmp	r2, r1
 800223a:	bf08      	it	eq
 800223c:	f043 0301 	orreq.w	r3, r3, #1
 8002240:	3118      	adds	r1, #24
 8002242:	428a      	cmp	r2, r1
 8002244:	bf08      	it	eq
 8002246:	f043 0301 	orreq.w	r3, r3, #1
 800224a:	b91b      	cbnz	r3, 8002254 <HAL_DMA_Start_IT+0x18c>
 800224c:	4b46      	ldr	r3, [pc, #280]	; (8002368 <HAL_DMA_Start_IT+0x2a0>)
 800224e:	429a      	cmp	r2, r3
 8002250:	f040 80f9 	bne.w	8002446 <HAL_DMA_Start_IT+0x37e>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f023 031e 	bic.w	r3, r3, #30
 800225a:	f043 0316 	orr.w	r3, r3, #22
 800225e:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002262:	b123      	cbz	r3, 800226e <HAL_DMA_Start_IT+0x1a6>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002264:	6822      	ldr	r2, [r4, #0]
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800226e:	6822      	ldr	r2, [r4, #0]
 8002270:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_DMA_Start_IT+0x298>)
 8002272:	493c      	ldr	r1, [pc, #240]	; (8002364 <HAL_DMA_Start_IT+0x29c>)
 8002274:	428a      	cmp	r2, r1
 8002276:	bf18      	it	ne
 8002278:	429a      	cmpne	r2, r3
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	3118      	adds	r1, #24
 8002282:	428a      	cmp	r2, r1
 8002284:	bf08      	it	eq
 8002286:	f043 0301 	orreq.w	r3, r3, #1
 800228a:	3118      	adds	r1, #24
 800228c:	428a      	cmp	r2, r1
 800228e:	bf08      	it	eq
 8002290:	f043 0301 	orreq.w	r3, r3, #1
 8002294:	3118      	adds	r1, #24
 8002296:	428a      	cmp	r2, r1
 8002298:	bf08      	it	eq
 800229a:	f043 0301 	orreq.w	r3, r3, #1
 800229e:	3118      	adds	r1, #24
 80022a0:	428a      	cmp	r2, r1
 80022a2:	bf08      	it	eq
 80022a4:	f043 0301 	orreq.w	r3, r3, #1
 80022a8:	3118      	adds	r1, #24
 80022aa:	428a      	cmp	r2, r1
 80022ac:	bf08      	it	eq
 80022ae:	f043 0301 	orreq.w	r3, r3, #1
 80022b2:	3118      	adds	r1, #24
 80022b4:	428a      	cmp	r2, r1
 80022b6:	bf08      	it	eq
 80022b8:	f043 0301 	orreq.w	r3, r3, #1
 80022bc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80022c0:	428a      	cmp	r2, r1
 80022c2:	bf08      	it	eq
 80022c4:	f043 0301 	orreq.w	r3, r3, #1
 80022c8:	3118      	adds	r1, #24
 80022ca:	428a      	cmp	r2, r1
 80022cc:	bf08      	it	eq
 80022ce:	f043 0301 	orreq.w	r3, r3, #1
 80022d2:	3118      	adds	r1, #24
 80022d4:	428a      	cmp	r2, r1
 80022d6:	bf08      	it	eq
 80022d8:	f043 0301 	orreq.w	r3, r3, #1
 80022dc:	3118      	adds	r1, #24
 80022de:	428a      	cmp	r2, r1
 80022e0:	bf08      	it	eq
 80022e2:	f043 0301 	orreq.w	r3, r3, #1
 80022e6:	3118      	adds	r1, #24
 80022e8:	428a      	cmp	r2, r1
 80022ea:	bf08      	it	eq
 80022ec:	f043 0301 	orreq.w	r3, r3, #1
 80022f0:	3118      	adds	r1, #24
 80022f2:	428a      	cmp	r2, r1
 80022f4:	bf08      	it	eq
 80022f6:	f043 0301 	orreq.w	r3, r3, #1
 80022fa:	3118      	adds	r1, #24
 80022fc:	428a      	cmp	r2, r1
 80022fe:	bf08      	it	eq
 8002300:	f043 0301 	orreq.w	r3, r3, #1
 8002304:	3118      	adds	r1, #24
 8002306:	428a      	cmp	r2, r1
 8002308:	bf08      	it	eq
 800230a:	f043 0301 	orreq.w	r3, r3, #1
 800230e:	4917      	ldr	r1, [pc, #92]	; (800236c <HAL_DMA_Start_IT+0x2a4>)
 8002310:	428a      	cmp	r2, r1
 8002312:	bf08      	it	eq
 8002314:	f043 0301 	orreq.w	r3, r3, #1
 8002318:	3114      	adds	r1, #20
 800231a:	428a      	cmp	r2, r1
 800231c:	bf08      	it	eq
 800231e:	f043 0301 	orreq.w	r3, r3, #1
 8002322:	3114      	adds	r1, #20
 8002324:	428a      	cmp	r2, r1
 8002326:	bf08      	it	eq
 8002328:	f043 0301 	orreq.w	r3, r3, #1
 800232c:	3114      	adds	r1, #20
 800232e:	428a      	cmp	r2, r1
 8002330:	bf08      	it	eq
 8002332:	f043 0301 	orreq.w	r3, r3, #1
 8002336:	3114      	adds	r1, #20
 8002338:	428a      	cmp	r2, r1
 800233a:	bf08      	it	eq
 800233c:	f043 0301 	orreq.w	r3, r3, #1
 8002340:	3114      	adds	r1, #20
 8002342:	428a      	cmp	r2, r1
 8002344:	bf08      	it	eq
 8002346:	f043 0301 	orreq.w	r3, r3, #1
 800234a:	3114      	adds	r1, #20
 800234c:	428a      	cmp	r2, r1
 800234e:	bf08      	it	eq
 8002350:	f043 0301 	orreq.w	r3, r3, #1
 8002354:	b973      	cbnz	r3, 8002374 <HAL_DMA_Start_IT+0x2ac>
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_DMA_Start_IT+0x2a8>)
 8002358:	429a      	cmp	r2, r3
 800235a:	d11a      	bne.n	8002392 <HAL_DMA_Start_IT+0x2ca>
 800235c:	e00a      	b.n	8002374 <HAL_DMA_Start_IT+0x2ac>
 800235e:	bf00      	nop
 8002360:	40020010 	.word	0x40020010
 8002364:	40020028 	.word	0x40020028
 8002368:	400204b8 	.word	0x400204b8
 800236c:	58025408 	.word	0x58025408
 8002370:	58025494 	.word	0x58025494
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002374:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800237c:	d003      	beq.n	8002386 <HAL_DMA_Start_IT+0x2be>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002384:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8002386:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002388:	b11b      	cbz	r3, 8002392 <HAL_DMA_Start_IT+0x2ca>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002390:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002392:	6822      	ldr	r2, [r4, #0]
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_DMA_Start_IT+0x3b4>)
 8002396:	493a      	ldr	r1, [pc, #232]	; (8002480 <HAL_DMA_Start_IT+0x3b8>)
 8002398:	428a      	cmp	r2, r1
 800239a:	bf18      	it	ne
 800239c:	429a      	cmpne	r2, r3
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	3118      	adds	r1, #24
 80023a6:	428a      	cmp	r2, r1
 80023a8:	bf08      	it	eq
 80023aa:	f043 0301 	orreq.w	r3, r3, #1
 80023ae:	3118      	adds	r1, #24
 80023b0:	428a      	cmp	r2, r1
 80023b2:	bf08      	it	eq
 80023b4:	f043 0301 	orreq.w	r3, r3, #1
 80023b8:	3118      	adds	r1, #24
 80023ba:	428a      	cmp	r2, r1
 80023bc:	bf08      	it	eq
 80023be:	f043 0301 	orreq.w	r3, r3, #1
 80023c2:	3118      	adds	r1, #24
 80023c4:	428a      	cmp	r2, r1
 80023c6:	bf08      	it	eq
 80023c8:	f043 0301 	orreq.w	r3, r3, #1
 80023cc:	3118      	adds	r1, #24
 80023ce:	428a      	cmp	r2, r1
 80023d0:	bf08      	it	eq
 80023d2:	f043 0301 	orreq.w	r3, r3, #1
 80023d6:	3118      	adds	r1, #24
 80023d8:	428a      	cmp	r2, r1
 80023da:	bf08      	it	eq
 80023dc:	f043 0301 	orreq.w	r3, r3, #1
 80023e0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80023e4:	428a      	cmp	r2, r1
 80023e6:	bf08      	it	eq
 80023e8:	f043 0301 	orreq.w	r3, r3, #1
 80023ec:	3118      	adds	r1, #24
 80023ee:	428a      	cmp	r2, r1
 80023f0:	bf08      	it	eq
 80023f2:	f043 0301 	orreq.w	r3, r3, #1
 80023f6:	3118      	adds	r1, #24
 80023f8:	428a      	cmp	r2, r1
 80023fa:	bf08      	it	eq
 80023fc:	f043 0301 	orreq.w	r3, r3, #1
 8002400:	3118      	adds	r1, #24
 8002402:	428a      	cmp	r2, r1
 8002404:	bf08      	it	eq
 8002406:	f043 0301 	orreq.w	r3, r3, #1
 800240a:	3118      	adds	r1, #24
 800240c:	428a      	cmp	r2, r1
 800240e:	bf08      	it	eq
 8002410:	f043 0301 	orreq.w	r3, r3, #1
 8002414:	3118      	adds	r1, #24
 8002416:	428a      	cmp	r2, r1
 8002418:	bf08      	it	eq
 800241a:	f043 0301 	orreq.w	r3, r3, #1
 800241e:	3118      	adds	r1, #24
 8002420:	428a      	cmp	r2, r1
 8002422:	bf08      	it	eq
 8002424:	f043 0301 	orreq.w	r3, r3, #1
 8002428:	b913      	cbnz	r3, 8002430 <HAL_DMA_Start_IT+0x368>
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_DMA_Start_IT+0x3bc>)
 800242c:	429a      	cmp	r2, r3
 800242e:	d11a      	bne.n	8002466 <HAL_DMA_Start_IT+0x39e>
 8002430:	6813      	ldr	r3, [r2, #0]
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800243a:	e65e      	b.n	80020fa <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_DISABLE(hdma);
 800243c:	6828      	ldr	r0, [r5, #0]
 800243e:	f020 0001 	bic.w	r0, r0, #1
 8002442:	6028      	str	r0, [r5, #0]
 8002444:	e6b3      	b.n	80021ae <HAL_DMA_Start_IT+0xe6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	f023 030e 	bic.w	r3, r3, #14
 800244c:	f043 030a 	orr.w	r3, r3, #10
 8002450:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	f43f af0a 	beq.w	800226e <HAL_DMA_Start_IT+0x1a6>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	6813      	ldr	r3, [r2, #0]
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e703      	b.n	800226e <HAL_DMA_Start_IT+0x1a6>
    __HAL_DMA_ENABLE(hdma);
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2000      	movs	r0, #0
 8002470:	e643      	b.n	80020fa <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8002472:	2001      	movs	r0, #1
}
 8002474:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8002476:	2002      	movs	r0, #2
 8002478:	e63f      	b.n	80020fa <HAL_DMA_Start_IT+0x32>
 800247a:	bf00      	nop
 800247c:	40020010 	.word	0x40020010
 8002480:	40020028 	.word	0x40020028
 8002484:	400204b8 	.word	0x400204b8

08002488 <HAL_DMA_Abort>:
{
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff f868 	bl	8001560 <HAL_GetTick>
  if(hdma == NULL)
 8002490:	2c00      	cmp	r4, #0
 8002492:	f000 8248 	beq.w	8002926 <HAL_DMA_Abort+0x49e>
 8002496:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002498:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d006      	beq.n	80024b0 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80024a6:	2300      	movs	r3, #0
 80024a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
}
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024b0:	6822      	ldr	r2, [r4, #0]
 80024b2:	4b92      	ldr	r3, [pc, #584]	; (80026fc <HAL_DMA_Abort+0x274>)
 80024b4:	4992      	ldr	r1, [pc, #584]	; (8002700 <HAL_DMA_Abort+0x278>)
 80024b6:	428a      	cmp	r2, r1
 80024b8:	bf18      	it	ne
 80024ba:	429a      	cmpne	r2, r3
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	3118      	adds	r1, #24
 80024c4:	428a      	cmp	r2, r1
 80024c6:	bf08      	it	eq
 80024c8:	f043 0301 	orreq.w	r3, r3, #1
 80024cc:	3118      	adds	r1, #24
 80024ce:	428a      	cmp	r2, r1
 80024d0:	bf08      	it	eq
 80024d2:	f043 0301 	orreq.w	r3, r3, #1
 80024d6:	3118      	adds	r1, #24
 80024d8:	428a      	cmp	r2, r1
 80024da:	bf08      	it	eq
 80024dc:	f043 0301 	orreq.w	r3, r3, #1
 80024e0:	3118      	adds	r1, #24
 80024e2:	428a      	cmp	r2, r1
 80024e4:	bf08      	it	eq
 80024e6:	f043 0301 	orreq.w	r3, r3, #1
 80024ea:	3118      	adds	r1, #24
 80024ec:	428a      	cmp	r2, r1
 80024ee:	bf08      	it	eq
 80024f0:	f043 0301 	orreq.w	r3, r3, #1
 80024f4:	3118      	adds	r1, #24
 80024f6:	428a      	cmp	r2, r1
 80024f8:	bf08      	it	eq
 80024fa:	f043 0301 	orreq.w	r3, r3, #1
 80024fe:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002502:	428a      	cmp	r2, r1
 8002504:	bf08      	it	eq
 8002506:	f043 0301 	orreq.w	r3, r3, #1
 800250a:	3118      	adds	r1, #24
 800250c:	428a      	cmp	r2, r1
 800250e:	bf08      	it	eq
 8002510:	f043 0301 	orreq.w	r3, r3, #1
 8002514:	3118      	adds	r1, #24
 8002516:	428a      	cmp	r2, r1
 8002518:	bf08      	it	eq
 800251a:	f043 0301 	orreq.w	r3, r3, #1
 800251e:	3118      	adds	r1, #24
 8002520:	428a      	cmp	r2, r1
 8002522:	bf08      	it	eq
 8002524:	f043 0301 	orreq.w	r3, r3, #1
 8002528:	3118      	adds	r1, #24
 800252a:	428a      	cmp	r2, r1
 800252c:	bf08      	it	eq
 800252e:	f043 0301 	orreq.w	r3, r3, #1
 8002532:	3118      	adds	r1, #24
 8002534:	428a      	cmp	r2, r1
 8002536:	bf08      	it	eq
 8002538:	f043 0301 	orreq.w	r3, r3, #1
 800253c:	3118      	adds	r1, #24
 800253e:	428a      	cmp	r2, r1
 8002540:	bf08      	it	eq
 8002542:	f043 0301 	orreq.w	r3, r3, #1
 8002546:	b91b      	cbnz	r3, 8002550 <HAL_DMA_Abort+0xc8>
 8002548:	4b6e      	ldr	r3, [pc, #440]	; (8002704 <HAL_DMA_Abort+0x27c>)
 800254a:	429a      	cmp	r2, r3
 800254c:	f040 80f7 	bne.w	800273e <HAL_DMA_Abort+0x2b6>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	f023 031e 	bic.w	r3, r3, #30
 8002556:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	6953      	ldr	r3, [r2, #20]
 800255c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002560:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002562:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002564:	6822      	ldr	r2, [r4, #0]
 8002566:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_DMA_Abort+0x274>)
 8002568:	4965      	ldr	r1, [pc, #404]	; (8002700 <HAL_DMA_Abort+0x278>)
 800256a:	428a      	cmp	r2, r1
 800256c:	bf18      	it	ne
 800256e:	429a      	cmpne	r2, r3
 8002570:	bf0c      	ite	eq
 8002572:	2301      	moveq	r3, #1
 8002574:	2300      	movne	r3, #0
 8002576:	3118      	adds	r1, #24
 8002578:	428a      	cmp	r2, r1
 800257a:	bf08      	it	eq
 800257c:	f043 0301 	orreq.w	r3, r3, #1
 8002580:	3118      	adds	r1, #24
 8002582:	428a      	cmp	r2, r1
 8002584:	bf08      	it	eq
 8002586:	f043 0301 	orreq.w	r3, r3, #1
 800258a:	3118      	adds	r1, #24
 800258c:	428a      	cmp	r2, r1
 800258e:	bf08      	it	eq
 8002590:	f043 0301 	orreq.w	r3, r3, #1
 8002594:	3118      	adds	r1, #24
 8002596:	428a      	cmp	r2, r1
 8002598:	bf08      	it	eq
 800259a:	f043 0301 	orreq.w	r3, r3, #1
 800259e:	3118      	adds	r1, #24
 80025a0:	428a      	cmp	r2, r1
 80025a2:	bf08      	it	eq
 80025a4:	f043 0301 	orreq.w	r3, r3, #1
 80025a8:	3118      	adds	r1, #24
 80025aa:	428a      	cmp	r2, r1
 80025ac:	bf08      	it	eq
 80025ae:	f043 0301 	orreq.w	r3, r3, #1
 80025b2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80025b6:	428a      	cmp	r2, r1
 80025b8:	bf08      	it	eq
 80025ba:	f043 0301 	orreq.w	r3, r3, #1
 80025be:	3118      	adds	r1, #24
 80025c0:	428a      	cmp	r2, r1
 80025c2:	bf08      	it	eq
 80025c4:	f043 0301 	orreq.w	r3, r3, #1
 80025c8:	3118      	adds	r1, #24
 80025ca:	428a      	cmp	r2, r1
 80025cc:	bf08      	it	eq
 80025ce:	f043 0301 	orreq.w	r3, r3, #1
 80025d2:	3118      	adds	r1, #24
 80025d4:	428a      	cmp	r2, r1
 80025d6:	bf08      	it	eq
 80025d8:	f043 0301 	orreq.w	r3, r3, #1
 80025dc:	3118      	adds	r1, #24
 80025de:	428a      	cmp	r2, r1
 80025e0:	bf08      	it	eq
 80025e2:	f043 0301 	orreq.w	r3, r3, #1
 80025e6:	3118      	adds	r1, #24
 80025e8:	428a      	cmp	r2, r1
 80025ea:	bf08      	it	eq
 80025ec:	f043 0301 	orreq.w	r3, r3, #1
 80025f0:	3118      	adds	r1, #24
 80025f2:	428a      	cmp	r2, r1
 80025f4:	bf08      	it	eq
 80025f6:	f043 0301 	orreq.w	r3, r3, #1
 80025fa:	3118      	adds	r1, #24
 80025fc:	428a      	cmp	r2, r1
 80025fe:	bf08      	it	eq
 8002600:	f043 0301 	orreq.w	r3, r3, #1
 8002604:	4940      	ldr	r1, [pc, #256]	; (8002708 <HAL_DMA_Abort+0x280>)
 8002606:	428a      	cmp	r2, r1
 8002608:	bf08      	it	eq
 800260a:	f043 0301 	orreq.w	r3, r3, #1
 800260e:	3114      	adds	r1, #20
 8002610:	428a      	cmp	r2, r1
 8002612:	bf08      	it	eq
 8002614:	f043 0301 	orreq.w	r3, r3, #1
 8002618:	3114      	adds	r1, #20
 800261a:	428a      	cmp	r2, r1
 800261c:	bf08      	it	eq
 800261e:	f043 0301 	orreq.w	r3, r3, #1
 8002622:	3114      	adds	r1, #20
 8002624:	428a      	cmp	r2, r1
 8002626:	bf08      	it	eq
 8002628:	f043 0301 	orreq.w	r3, r3, #1
 800262c:	3114      	adds	r1, #20
 800262e:	428a      	cmp	r2, r1
 8002630:	bf08      	it	eq
 8002632:	f043 0301 	orreq.w	r3, r3, #1
 8002636:	3114      	adds	r1, #20
 8002638:	428a      	cmp	r2, r1
 800263a:	bf08      	it	eq
 800263c:	f043 0301 	orreq.w	r3, r3, #1
 8002640:	3114      	adds	r1, #20
 8002642:	428a      	cmp	r2, r1
 8002644:	bf08      	it	eq
 8002646:	f043 0301 	orreq.w	r3, r3, #1
 800264a:	b913      	cbnz	r3, 8002652 <HAL_DMA_Abort+0x1ca>
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_DMA_Abort+0x284>)
 800264e:	429a      	cmp	r2, r3
 8002650:	d104      	bne.n	800265c <HAL_DMA_Abort+0x1d4>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002652:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002654:	6813      	ldr	r3, [r2, #0]
 8002656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800265a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_DMA_Abort+0x274>)
 8002660:	4927      	ldr	r1, [pc, #156]	; (8002700 <HAL_DMA_Abort+0x278>)
 8002662:	428a      	cmp	r2, r1
 8002664:	bf18      	it	ne
 8002666:	429a      	cmpne	r2, r3
 8002668:	bf0c      	ite	eq
 800266a:	2301      	moveq	r3, #1
 800266c:	2300      	movne	r3, #0
 800266e:	3118      	adds	r1, #24
 8002670:	428a      	cmp	r2, r1
 8002672:	bf08      	it	eq
 8002674:	f043 0301 	orreq.w	r3, r3, #1
 8002678:	3118      	adds	r1, #24
 800267a:	428a      	cmp	r2, r1
 800267c:	bf08      	it	eq
 800267e:	f043 0301 	orreq.w	r3, r3, #1
 8002682:	3118      	adds	r1, #24
 8002684:	428a      	cmp	r2, r1
 8002686:	bf08      	it	eq
 8002688:	f043 0301 	orreq.w	r3, r3, #1
 800268c:	3118      	adds	r1, #24
 800268e:	428a      	cmp	r2, r1
 8002690:	bf08      	it	eq
 8002692:	f043 0301 	orreq.w	r3, r3, #1
 8002696:	3118      	adds	r1, #24
 8002698:	428a      	cmp	r2, r1
 800269a:	bf08      	it	eq
 800269c:	f043 0301 	orreq.w	r3, r3, #1
 80026a0:	3118      	adds	r1, #24
 80026a2:	428a      	cmp	r2, r1
 80026a4:	bf08      	it	eq
 80026a6:	f043 0301 	orreq.w	r3, r3, #1
 80026aa:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80026ae:	428a      	cmp	r2, r1
 80026b0:	bf08      	it	eq
 80026b2:	f043 0301 	orreq.w	r3, r3, #1
 80026b6:	3118      	adds	r1, #24
 80026b8:	428a      	cmp	r2, r1
 80026ba:	bf08      	it	eq
 80026bc:	f043 0301 	orreq.w	r3, r3, #1
 80026c0:	3118      	adds	r1, #24
 80026c2:	428a      	cmp	r2, r1
 80026c4:	bf08      	it	eq
 80026c6:	f043 0301 	orreq.w	r3, r3, #1
 80026ca:	3118      	adds	r1, #24
 80026cc:	428a      	cmp	r2, r1
 80026ce:	bf08      	it	eq
 80026d0:	f043 0301 	orreq.w	r3, r3, #1
 80026d4:	3118      	adds	r1, #24
 80026d6:	428a      	cmp	r2, r1
 80026d8:	bf08      	it	eq
 80026da:	f043 0301 	orreq.w	r3, r3, #1
 80026de:	3118      	adds	r1, #24
 80026e0:	428a      	cmp	r2, r1
 80026e2:	bf08      	it	eq
 80026e4:	f043 0301 	orreq.w	r3, r3, #1
 80026e8:	3118      	adds	r1, #24
 80026ea:	428a      	cmp	r2, r1
 80026ec:	bf08      	it	eq
 80026ee:	f043 0301 	orreq.w	r3, r3, #1
 80026f2:	b96b      	cbnz	r3, 8002710 <HAL_DMA_Abort+0x288>
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_DMA_Abort+0x27c>)
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d127      	bne.n	800274a <HAL_DMA_Abort+0x2c2>
 80026fa:	e009      	b.n	8002710 <HAL_DMA_Abort+0x288>
 80026fc:	40020010 	.word	0x40020010
 8002700:	40020028 	.word	0x40020028
 8002704:	400204b8 	.word	0x400204b8
 8002708:	58025408 	.word	0x58025408
 800270c:	58025494 	.word	0x58025494
 8002710:	6813      	ldr	r3, [r2, #0]
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6013      	str	r3, [r2, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002718:	6833      	ldr	r3, [r6, #0]
 800271a:	f013 0f01 	tst.w	r3, #1
 800271e:	d019      	beq.n	8002754 <HAL_DMA_Abort+0x2cc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002720:	f7fe ff1e 	bl	8001560 <HAL_GetTick>
 8002724:	1b40      	subs	r0, r0, r5
 8002726:	2805      	cmp	r0, #5
 8002728:	d9f6      	bls.n	8002718 <HAL_DMA_Abort+0x290>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800272a:	2320      	movs	r3, #32
 800272c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800272e:	2303      	movs	r3, #3
 8002730:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002734:	2300      	movs	r3, #0
 8002736:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 800273a:	2001      	movs	r0, #1
 800273c:	e6b7      	b.n	80024ae <HAL_DMA_Abort+0x26>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800273e:	6813      	ldr	r3, [r2, #0]
 8002740:	f023 030e 	bic.w	r3, r3, #14
 8002744:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002746:	6826      	ldr	r6, [r4, #0]
 8002748:	e70c      	b.n	8002564 <HAL_DMA_Abort+0xdc>
    __HAL_DMA_DISABLE(hdma);
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e7e1      	b.n	8002718 <HAL_DMA_Abort+0x290>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002754:	6822      	ldr	r2, [r4, #0]
 8002756:	4b75      	ldr	r3, [pc, #468]	; (800292c <HAL_DMA_Abort+0x4a4>)
 8002758:	4975      	ldr	r1, [pc, #468]	; (8002930 <HAL_DMA_Abort+0x4a8>)
 800275a:	428a      	cmp	r2, r1
 800275c:	bf18      	it	ne
 800275e:	429a      	cmpne	r2, r3
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	3118      	adds	r1, #24
 8002768:	428a      	cmp	r2, r1
 800276a:	bf08      	it	eq
 800276c:	f043 0301 	orreq.w	r3, r3, #1
 8002770:	3118      	adds	r1, #24
 8002772:	428a      	cmp	r2, r1
 8002774:	bf08      	it	eq
 8002776:	f043 0301 	orreq.w	r3, r3, #1
 800277a:	3118      	adds	r1, #24
 800277c:	428a      	cmp	r2, r1
 800277e:	bf08      	it	eq
 8002780:	f043 0301 	orreq.w	r3, r3, #1
 8002784:	3118      	adds	r1, #24
 8002786:	428a      	cmp	r2, r1
 8002788:	bf08      	it	eq
 800278a:	f043 0301 	orreq.w	r3, r3, #1
 800278e:	3118      	adds	r1, #24
 8002790:	428a      	cmp	r2, r1
 8002792:	bf08      	it	eq
 8002794:	f043 0301 	orreq.w	r3, r3, #1
 8002798:	3118      	adds	r1, #24
 800279a:	428a      	cmp	r2, r1
 800279c:	bf08      	it	eq
 800279e:	f043 0301 	orreq.w	r3, r3, #1
 80027a2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80027a6:	428a      	cmp	r2, r1
 80027a8:	bf08      	it	eq
 80027aa:	f043 0301 	orreq.w	r3, r3, #1
 80027ae:	3118      	adds	r1, #24
 80027b0:	428a      	cmp	r2, r1
 80027b2:	bf08      	it	eq
 80027b4:	f043 0301 	orreq.w	r3, r3, #1
 80027b8:	3118      	adds	r1, #24
 80027ba:	428a      	cmp	r2, r1
 80027bc:	bf08      	it	eq
 80027be:	f043 0301 	orreq.w	r3, r3, #1
 80027c2:	3118      	adds	r1, #24
 80027c4:	428a      	cmp	r2, r1
 80027c6:	bf08      	it	eq
 80027c8:	f043 0301 	orreq.w	r3, r3, #1
 80027cc:	3118      	adds	r1, #24
 80027ce:	428a      	cmp	r2, r1
 80027d0:	bf08      	it	eq
 80027d2:	f043 0301 	orreq.w	r3, r3, #1
 80027d6:	3118      	adds	r1, #24
 80027d8:	428a      	cmp	r2, r1
 80027da:	bf08      	it	eq
 80027dc:	f043 0301 	orreq.w	r3, r3, #1
 80027e0:	3118      	adds	r1, #24
 80027e2:	428a      	cmp	r2, r1
 80027e4:	bf08      	it	eq
 80027e6:	f043 0301 	orreq.w	r3, r3, #1
 80027ea:	b91b      	cbnz	r3, 80027f4 <HAL_DMA_Abort+0x36c>
 80027ec:	4b51      	ldr	r3, [pc, #324]	; (8002934 <HAL_DMA_Abort+0x4ac>)
 80027ee:	429a      	cmp	r2, r3
 80027f0:	f040 8091 	bne.w	8002916 <HAL_DMA_Abort+0x48e>
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f4:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	233f      	movs	r3, #63	; 0x3f
 80027fe:	4093      	lsls	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	4b49      	ldr	r3, [pc, #292]	; (800292c <HAL_DMA_Abort+0x4a4>)
 8002806:	494a      	ldr	r1, [pc, #296]	; (8002930 <HAL_DMA_Abort+0x4a8>)
 8002808:	428a      	cmp	r2, r1
 800280a:	bf18      	it	ne
 800280c:	429a      	cmpne	r2, r3
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	3118      	adds	r1, #24
 8002816:	428a      	cmp	r2, r1
 8002818:	bf08      	it	eq
 800281a:	f043 0301 	orreq.w	r3, r3, #1
 800281e:	3118      	adds	r1, #24
 8002820:	428a      	cmp	r2, r1
 8002822:	bf08      	it	eq
 8002824:	f043 0301 	orreq.w	r3, r3, #1
 8002828:	3118      	adds	r1, #24
 800282a:	428a      	cmp	r2, r1
 800282c:	bf08      	it	eq
 800282e:	f043 0301 	orreq.w	r3, r3, #1
 8002832:	3118      	adds	r1, #24
 8002834:	428a      	cmp	r2, r1
 8002836:	bf08      	it	eq
 8002838:	f043 0301 	orreq.w	r3, r3, #1
 800283c:	3118      	adds	r1, #24
 800283e:	428a      	cmp	r2, r1
 8002840:	bf08      	it	eq
 8002842:	f043 0301 	orreq.w	r3, r3, #1
 8002846:	3118      	adds	r1, #24
 8002848:	428a      	cmp	r2, r1
 800284a:	bf08      	it	eq
 800284c:	f043 0301 	orreq.w	r3, r3, #1
 8002850:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002854:	428a      	cmp	r2, r1
 8002856:	bf08      	it	eq
 8002858:	f043 0301 	orreq.w	r3, r3, #1
 800285c:	3118      	adds	r1, #24
 800285e:	428a      	cmp	r2, r1
 8002860:	bf08      	it	eq
 8002862:	f043 0301 	orreq.w	r3, r3, #1
 8002866:	3118      	adds	r1, #24
 8002868:	428a      	cmp	r2, r1
 800286a:	bf08      	it	eq
 800286c:	f043 0301 	orreq.w	r3, r3, #1
 8002870:	3118      	adds	r1, #24
 8002872:	428a      	cmp	r2, r1
 8002874:	bf08      	it	eq
 8002876:	f043 0301 	orreq.w	r3, r3, #1
 800287a:	3118      	adds	r1, #24
 800287c:	428a      	cmp	r2, r1
 800287e:	bf08      	it	eq
 8002880:	f043 0301 	orreq.w	r3, r3, #1
 8002884:	3118      	adds	r1, #24
 8002886:	428a      	cmp	r2, r1
 8002888:	bf08      	it	eq
 800288a:	f043 0301 	orreq.w	r3, r3, #1
 800288e:	3118      	adds	r1, #24
 8002890:	428a      	cmp	r2, r1
 8002892:	bf08      	it	eq
 8002894:	f043 0301 	orreq.w	r3, r3, #1
 8002898:	3118      	adds	r1, #24
 800289a:	428a      	cmp	r2, r1
 800289c:	bf08      	it	eq
 800289e:	f043 0301 	orreq.w	r3, r3, #1
 80028a2:	4925      	ldr	r1, [pc, #148]	; (8002938 <HAL_DMA_Abort+0x4b0>)
 80028a4:	428a      	cmp	r2, r1
 80028a6:	bf08      	it	eq
 80028a8:	f043 0301 	orreq.w	r3, r3, #1
 80028ac:	3114      	adds	r1, #20
 80028ae:	428a      	cmp	r2, r1
 80028b0:	bf08      	it	eq
 80028b2:	f043 0301 	orreq.w	r3, r3, #1
 80028b6:	3114      	adds	r1, #20
 80028b8:	428a      	cmp	r2, r1
 80028ba:	bf08      	it	eq
 80028bc:	f043 0301 	orreq.w	r3, r3, #1
 80028c0:	3114      	adds	r1, #20
 80028c2:	428a      	cmp	r2, r1
 80028c4:	bf08      	it	eq
 80028c6:	f043 0301 	orreq.w	r3, r3, #1
 80028ca:	3114      	adds	r1, #20
 80028cc:	428a      	cmp	r2, r1
 80028ce:	bf08      	it	eq
 80028d0:	f043 0301 	orreq.w	r3, r3, #1
 80028d4:	3114      	adds	r1, #20
 80028d6:	428a      	cmp	r2, r1
 80028d8:	bf08      	it	eq
 80028da:	f043 0301 	orreq.w	r3, r3, #1
 80028de:	3114      	adds	r1, #20
 80028e0:	428a      	cmp	r2, r1
 80028e2:	bf08      	it	eq
 80028e4:	f043 0301 	orreq.w	r3, r3, #1
 80028e8:	b913      	cbnz	r3, 80028f0 <HAL_DMA_Abort+0x468>
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_DMA_Abort+0x4b4>)
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d10b      	bne.n	8002908 <HAL_DMA_Abort+0x480>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028f2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80028f4:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80028f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80028f8:	b133      	cbz	r3, 8002908 <HAL_DMA_Abort+0x480>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002900:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002902:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002904:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002906:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002908:	2301      	movs	r3, #1
 800290a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800290e:	2000      	movs	r0, #0
 8002910:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8002914:	e5cb      	b.n	80024ae <HAL_DMA_Abort+0x26>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002916:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002918:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800291a:	f003 021f 	and.w	r2, r3, #31
 800291e:	2301      	movs	r3, #1
 8002920:	4093      	lsls	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
 8002924:	e76d      	b.n	8002802 <HAL_DMA_Abort+0x37a>
    return HAL_ERROR;
 8002926:	2001      	movs	r0, #1
 8002928:	e5c1      	b.n	80024ae <HAL_DMA_Abort+0x26>
 800292a:	bf00      	nop
 800292c:	40020010 	.word	0x40020010
 8002930:	40020028 	.word	0x40020028
 8002934:	400204b8 	.word	0x400204b8
 8002938:	58025408 	.word	0x58025408
 800293c:	58025494 	.word	0x58025494

08002940 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8002940:	2800      	cmp	r0, #0
 8002942:	f000 8162 	beq.w	8002c0a <HAL_DMA_Abort_IT+0x2ca>
{
 8002946:	b508      	push	{r3, lr}
 8002948:	4601      	mov	r1, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d003      	beq.n	800295c <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002958:	2001      	movs	r0, #1
}
 800295a:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800295c:	6802      	ldr	r2, [r0, #0]
 800295e:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_DMA_Abort_IT+0xcc>)
 8002960:	482b      	ldr	r0, [pc, #172]	; (8002a10 <HAL_DMA_Abort_IT+0xd0>)
 8002962:	4282      	cmp	r2, r0
 8002964:	bf18      	it	ne
 8002966:	429a      	cmpne	r2, r3
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	3018      	adds	r0, #24
 8002970:	4282      	cmp	r2, r0
 8002972:	bf08      	it	eq
 8002974:	f043 0301 	orreq.w	r3, r3, #1
 8002978:	3018      	adds	r0, #24
 800297a:	4282      	cmp	r2, r0
 800297c:	bf08      	it	eq
 800297e:	f043 0301 	orreq.w	r3, r3, #1
 8002982:	3018      	adds	r0, #24
 8002984:	4282      	cmp	r2, r0
 8002986:	bf08      	it	eq
 8002988:	f043 0301 	orreq.w	r3, r3, #1
 800298c:	3018      	adds	r0, #24
 800298e:	4282      	cmp	r2, r0
 8002990:	bf08      	it	eq
 8002992:	f043 0301 	orreq.w	r3, r3, #1
 8002996:	3018      	adds	r0, #24
 8002998:	4282      	cmp	r2, r0
 800299a:	bf08      	it	eq
 800299c:	f043 0301 	orreq.w	r3, r3, #1
 80029a0:	3018      	adds	r0, #24
 80029a2:	4282      	cmp	r2, r0
 80029a4:	bf08      	it	eq
 80029a6:	f043 0301 	orreq.w	r3, r3, #1
 80029aa:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80029ae:	4282      	cmp	r2, r0
 80029b0:	bf08      	it	eq
 80029b2:	f043 0301 	orreq.w	r3, r3, #1
 80029b6:	3018      	adds	r0, #24
 80029b8:	4282      	cmp	r2, r0
 80029ba:	bf08      	it	eq
 80029bc:	f043 0301 	orreq.w	r3, r3, #1
 80029c0:	3018      	adds	r0, #24
 80029c2:	4282      	cmp	r2, r0
 80029c4:	bf08      	it	eq
 80029c6:	f043 0301 	orreq.w	r3, r3, #1
 80029ca:	3018      	adds	r0, #24
 80029cc:	4282      	cmp	r2, r0
 80029ce:	bf08      	it	eq
 80029d0:	f043 0301 	orreq.w	r3, r3, #1
 80029d4:	3018      	adds	r0, #24
 80029d6:	4282      	cmp	r2, r0
 80029d8:	bf08      	it	eq
 80029da:	f043 0301 	orreq.w	r3, r3, #1
 80029de:	3018      	adds	r0, #24
 80029e0:	4282      	cmp	r2, r0
 80029e2:	bf08      	it	eq
 80029e4:	f043 0301 	orreq.w	r3, r3, #1
 80029e8:	3018      	adds	r0, #24
 80029ea:	4282      	cmp	r2, r0
 80029ec:	bf08      	it	eq
 80029ee:	f043 0301 	orreq.w	r3, r3, #1
 80029f2:	b913      	cbnz	r3, 80029fa <HAL_DMA_Abort_IT+0xba>
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_DMA_Abort_IT+0xd4>)
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d10e      	bne.n	8002a18 <HAL_DMA_Abort_IT+0xd8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80029fa:	2304      	movs	r3, #4
 80029fc:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002a00:	6813      	ldr	r3, [r2, #0]
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002a08:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8002a0a:	e7a6      	b.n	800295a <HAL_DMA_Abort_IT+0x1a>
 8002a0c:	40020010 	.word	0x40020010
 8002a10:	40020028 	.word	0x40020028
 8002a14:	400204b8 	.word	0x400204b8
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a18:	6813      	ldr	r3, [r2, #0]
 8002a1a:	f023 030e 	bic.w	r3, r3, #14
 8002a1e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8002a20:	680a      	ldr	r2, [r1, #0]
 8002a22:	4b7c      	ldr	r3, [pc, #496]	; (8002c14 <HAL_DMA_Abort_IT+0x2d4>)
 8002a24:	f5a0 608f 	sub.w	r0, r0, #1144	; 0x478
 8002a28:	4282      	cmp	r2, r0
 8002a2a:	bf18      	it	ne
 8002a2c:	429a      	cmpne	r2, r3
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	3018      	adds	r0, #24
 8002a36:	4282      	cmp	r2, r0
 8002a38:	bf08      	it	eq
 8002a3a:	f043 0301 	orreq.w	r3, r3, #1
 8002a3e:	3018      	adds	r0, #24
 8002a40:	4282      	cmp	r2, r0
 8002a42:	bf08      	it	eq
 8002a44:	f043 0301 	orreq.w	r3, r3, #1
 8002a48:	3018      	adds	r0, #24
 8002a4a:	4282      	cmp	r2, r0
 8002a4c:	bf08      	it	eq
 8002a4e:	f043 0301 	orreq.w	r3, r3, #1
 8002a52:	3018      	adds	r0, #24
 8002a54:	4282      	cmp	r2, r0
 8002a56:	bf08      	it	eq
 8002a58:	f043 0301 	orreq.w	r3, r3, #1
 8002a5c:	3018      	adds	r0, #24
 8002a5e:	4282      	cmp	r2, r0
 8002a60:	bf08      	it	eq
 8002a62:	f043 0301 	orreq.w	r3, r3, #1
 8002a66:	3018      	adds	r0, #24
 8002a68:	4282      	cmp	r2, r0
 8002a6a:	bf08      	it	eq
 8002a6c:	f043 0301 	orreq.w	r3, r3, #1
 8002a70:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002a74:	4282      	cmp	r2, r0
 8002a76:	bf08      	it	eq
 8002a78:	f043 0301 	orreq.w	r3, r3, #1
 8002a7c:	3018      	adds	r0, #24
 8002a7e:	4282      	cmp	r2, r0
 8002a80:	bf08      	it	eq
 8002a82:	f043 0301 	orreq.w	r3, r3, #1
 8002a86:	3018      	adds	r0, #24
 8002a88:	4282      	cmp	r2, r0
 8002a8a:	bf08      	it	eq
 8002a8c:	f043 0301 	orreq.w	r3, r3, #1
 8002a90:	3018      	adds	r0, #24
 8002a92:	4282      	cmp	r2, r0
 8002a94:	bf08      	it	eq
 8002a96:	f043 0301 	orreq.w	r3, r3, #1
 8002a9a:	3018      	adds	r0, #24
 8002a9c:	4282      	cmp	r2, r0
 8002a9e:	bf08      	it	eq
 8002aa0:	f043 0301 	orreq.w	r3, r3, #1
 8002aa4:	3018      	adds	r0, #24
 8002aa6:	4282      	cmp	r2, r0
 8002aa8:	bf08      	it	eq
 8002aaa:	f043 0301 	orreq.w	r3, r3, #1
 8002aae:	3018      	adds	r0, #24
 8002ab0:	4282      	cmp	r2, r0
 8002ab2:	bf08      	it	eq
 8002ab4:	f043 0301 	orreq.w	r3, r3, #1
 8002ab8:	b91b      	cbnz	r3, 8002ac2 <HAL_DMA_Abort_IT+0x182>
 8002aba:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <HAL_DMA_Abort_IT+0x2d8>)
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f040 809f 	bne.w	8002c00 <HAL_DMA_Abort_IT+0x2c0>
 8002ac2:	6813      	ldr	r3, [r2, #0]
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6013      	str	r3, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aca:	680a      	ldr	r2, [r1, #0]
 8002acc:	4b51      	ldr	r3, [pc, #324]	; (8002c14 <HAL_DMA_Abort_IT+0x2d4>)
 8002ace:	4853      	ldr	r0, [pc, #332]	; (8002c1c <HAL_DMA_Abort_IT+0x2dc>)
 8002ad0:	4282      	cmp	r2, r0
 8002ad2:	bf18      	it	ne
 8002ad4:	429a      	cmpne	r2, r3
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	3018      	adds	r0, #24
 8002ade:	4282      	cmp	r2, r0
 8002ae0:	bf08      	it	eq
 8002ae2:	f043 0301 	orreq.w	r3, r3, #1
 8002ae6:	3018      	adds	r0, #24
 8002ae8:	4282      	cmp	r2, r0
 8002aea:	bf08      	it	eq
 8002aec:	f043 0301 	orreq.w	r3, r3, #1
 8002af0:	3018      	adds	r0, #24
 8002af2:	4282      	cmp	r2, r0
 8002af4:	bf08      	it	eq
 8002af6:	f043 0301 	orreq.w	r3, r3, #1
 8002afa:	3018      	adds	r0, #24
 8002afc:	4282      	cmp	r2, r0
 8002afe:	bf08      	it	eq
 8002b00:	f043 0301 	orreq.w	r3, r3, #1
 8002b04:	3018      	adds	r0, #24
 8002b06:	4282      	cmp	r2, r0
 8002b08:	bf08      	it	eq
 8002b0a:	f043 0301 	orreq.w	r3, r3, #1
 8002b0e:	3018      	adds	r0, #24
 8002b10:	4282      	cmp	r2, r0
 8002b12:	bf08      	it	eq
 8002b14:	f043 0301 	orreq.w	r3, r3, #1
 8002b18:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002b1c:	4282      	cmp	r2, r0
 8002b1e:	bf08      	it	eq
 8002b20:	f043 0301 	orreq.w	r3, r3, #1
 8002b24:	3018      	adds	r0, #24
 8002b26:	4282      	cmp	r2, r0
 8002b28:	bf08      	it	eq
 8002b2a:	f043 0301 	orreq.w	r3, r3, #1
 8002b2e:	3018      	adds	r0, #24
 8002b30:	4282      	cmp	r2, r0
 8002b32:	bf08      	it	eq
 8002b34:	f043 0301 	orreq.w	r3, r3, #1
 8002b38:	3018      	adds	r0, #24
 8002b3a:	4282      	cmp	r2, r0
 8002b3c:	bf08      	it	eq
 8002b3e:	f043 0301 	orreq.w	r3, r3, #1
 8002b42:	3018      	adds	r0, #24
 8002b44:	4282      	cmp	r2, r0
 8002b46:	bf08      	it	eq
 8002b48:	f043 0301 	orreq.w	r3, r3, #1
 8002b4c:	3018      	adds	r0, #24
 8002b4e:	4282      	cmp	r2, r0
 8002b50:	bf08      	it	eq
 8002b52:	f043 0301 	orreq.w	r3, r3, #1
 8002b56:	3018      	adds	r0, #24
 8002b58:	4282      	cmp	r2, r0
 8002b5a:	bf08      	it	eq
 8002b5c:	f043 0301 	orreq.w	r3, r3, #1
 8002b60:	3018      	adds	r0, #24
 8002b62:	4282      	cmp	r2, r0
 8002b64:	bf08      	it	eq
 8002b66:	f043 0301 	orreq.w	r3, r3, #1
 8002b6a:	482d      	ldr	r0, [pc, #180]	; (8002c20 <HAL_DMA_Abort_IT+0x2e0>)
 8002b6c:	4282      	cmp	r2, r0
 8002b6e:	bf08      	it	eq
 8002b70:	f043 0301 	orreq.w	r3, r3, #1
 8002b74:	3014      	adds	r0, #20
 8002b76:	4282      	cmp	r2, r0
 8002b78:	bf08      	it	eq
 8002b7a:	f043 0301 	orreq.w	r3, r3, #1
 8002b7e:	3014      	adds	r0, #20
 8002b80:	4282      	cmp	r2, r0
 8002b82:	bf08      	it	eq
 8002b84:	f043 0301 	orreq.w	r3, r3, #1
 8002b88:	3014      	adds	r0, #20
 8002b8a:	4282      	cmp	r2, r0
 8002b8c:	bf08      	it	eq
 8002b8e:	f043 0301 	orreq.w	r3, r3, #1
 8002b92:	3014      	adds	r0, #20
 8002b94:	4282      	cmp	r2, r0
 8002b96:	bf08      	it	eq
 8002b98:	f043 0301 	orreq.w	r3, r3, #1
 8002b9c:	3014      	adds	r0, #20
 8002b9e:	4282      	cmp	r2, r0
 8002ba0:	bf08      	it	eq
 8002ba2:	f043 0301 	orreq.w	r3, r3, #1
 8002ba6:	3014      	adds	r0, #20
 8002ba8:	4282      	cmp	r2, r0
 8002baa:	bf08      	it	eq
 8002bac:	f043 0301 	orreq.w	r3, r3, #1
 8002bb0:	b913      	cbnz	r3, 8002bb8 <HAL_DMA_Abort_IT+0x278>
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_DMA_Abort_IT+0x2e4>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d117      	bne.n	8002be8 <HAL_DMA_Abort_IT+0x2a8>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bb8:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8002bba:	6813      	ldr	r3, [r2, #0]
 8002bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bc0:	6013      	str	r3, [r2, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc2:	6d88      	ldr	r0, [r1, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bc4:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8002bc6:	f003 021f 	and.w	r2, r3, #31
 8002bca:	2301      	movs	r3, #1
 8002bcc:	4093      	lsls	r3, r2
 8002bce:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bd0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8002bd2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 8002bd4:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002bd6:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 8002bd8:	b133      	cbz	r3, 8002be8 <HAL_DMA_Abort_IT+0x2a8>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be0:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002be2:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002be4:	6f4a      	ldr	r2, [r1, #116]	; 0x74
 8002be6:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f881 3035 	strb.w	r3, [r1, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8002bf4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8002bf6:	b153      	cbz	r3, 8002c0e <HAL_DMA_Abort_IT+0x2ce>
        hdma->XferAbortCallback(hdma);
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4798      	blx	r3
  return HAL_OK;
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	e6ac      	b.n	800295a <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e75f      	b.n	8002aca <HAL_DMA_Abort_IT+0x18a>
    return HAL_ERROR;
 8002c0a:	2001      	movs	r0, #1
}
 8002c0c:	4770      	bx	lr
  return HAL_OK;
 8002c0e:	2000      	movs	r0, #0
 8002c10:	e6a3      	b.n	800295a <HAL_DMA_Abort_IT+0x1a>
 8002c12:	bf00      	nop
 8002c14:	40020010 	.word	0x40020010
 8002c18:	400204b8 	.word	0x400204b8
 8002c1c:	40020028 	.word	0x40020028
 8002c20:	58025408 	.word	0x58025408
 8002c24:	58025494 	.word	0x58025494

08002c28 <HAL_DMA_IRQHandler>:
{
 8002c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c32:	4b95      	ldr	r3, [pc, #596]	; (8002e88 <HAL_DMA_IRQHandler+0x260>)
 8002c34:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c36:	6d86      	ldr	r6, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8002c38:	6835      	ldr	r5, [r6, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8002c3a:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002c3c:	6802      	ldr	r2, [r0, #0]
 8002c3e:	4b93      	ldr	r3, [pc, #588]	; (8002e8c <HAL_DMA_IRQHandler+0x264>)
 8002c40:	4893      	ldr	r0, [pc, #588]	; (8002e90 <HAL_DMA_IRQHandler+0x268>)
 8002c42:	4282      	cmp	r2, r0
 8002c44:	bf18      	it	ne
 8002c46:	429a      	cmpne	r2, r3
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	3018      	adds	r0, #24
 8002c50:	4282      	cmp	r2, r0
 8002c52:	bf08      	it	eq
 8002c54:	f043 0301 	orreq.w	r3, r3, #1
 8002c58:	3018      	adds	r0, #24
 8002c5a:	4282      	cmp	r2, r0
 8002c5c:	bf08      	it	eq
 8002c5e:	f043 0301 	orreq.w	r3, r3, #1
 8002c62:	3018      	adds	r0, #24
 8002c64:	4282      	cmp	r2, r0
 8002c66:	bf08      	it	eq
 8002c68:	f043 0301 	orreq.w	r3, r3, #1
 8002c6c:	3018      	adds	r0, #24
 8002c6e:	4282      	cmp	r2, r0
 8002c70:	bf08      	it	eq
 8002c72:	f043 0301 	orreq.w	r3, r3, #1
 8002c76:	3018      	adds	r0, #24
 8002c78:	4282      	cmp	r2, r0
 8002c7a:	bf08      	it	eq
 8002c7c:	f043 0301 	orreq.w	r3, r3, #1
 8002c80:	3018      	adds	r0, #24
 8002c82:	4282      	cmp	r2, r0
 8002c84:	bf08      	it	eq
 8002c86:	f043 0301 	orreq.w	r3, r3, #1
 8002c8a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002c8e:	4282      	cmp	r2, r0
 8002c90:	bf08      	it	eq
 8002c92:	f043 0301 	orreq.w	r3, r3, #1
 8002c96:	3018      	adds	r0, #24
 8002c98:	4282      	cmp	r2, r0
 8002c9a:	bf08      	it	eq
 8002c9c:	f043 0301 	orreq.w	r3, r3, #1
 8002ca0:	3018      	adds	r0, #24
 8002ca2:	4282      	cmp	r2, r0
 8002ca4:	bf08      	it	eq
 8002ca6:	f043 0301 	orreq.w	r3, r3, #1
 8002caa:	3018      	adds	r0, #24
 8002cac:	4282      	cmp	r2, r0
 8002cae:	bf08      	it	eq
 8002cb0:	f043 0301 	orreq.w	r3, r3, #1
 8002cb4:	3018      	adds	r0, #24
 8002cb6:	4282      	cmp	r2, r0
 8002cb8:	bf08      	it	eq
 8002cba:	f043 0301 	orreq.w	r3, r3, #1
 8002cbe:	3018      	adds	r0, #24
 8002cc0:	4282      	cmp	r2, r0
 8002cc2:	bf08      	it	eq
 8002cc4:	f043 0301 	orreq.w	r3, r3, #1
 8002cc8:	3018      	adds	r0, #24
 8002cca:	4282      	cmp	r2, r0
 8002ccc:	bf08      	it	eq
 8002cce:	f043 0301 	orreq.w	r3, r3, #1
 8002cd2:	b91b      	cbnz	r3, 8002cdc <HAL_DMA_IRQHandler+0xb4>
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <HAL_DMA_IRQHandler+0x26c>)
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	f040 8082 	bne.w	8002de0 <HAL_DMA_IRQHandler+0x1b8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cdc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	4099      	lsls	r1, r3
 8002ce6:	4229      	tst	r1, r5
 8002ce8:	f000 83be 	beq.w	8003468 <HAL_DMA_IRQHandler+0x840>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002cec:	6811      	ldr	r1, [r2, #0]
 8002cee:	f011 0f04 	tst.w	r1, #4
 8002cf2:	f000 83b9 	beq.w	8003468 <HAL_DMA_IRQHandler+0x840>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002cf6:	6813      	ldr	r3, [r2, #0]
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	6013      	str	r3, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cfe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	2308      	movs	r3, #8
 8002d06:	4093      	lsls	r3, r2
 8002d08:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa25 f203 	lsr.w	r2, r5, r3
 8002d1c:	f012 0f01 	tst.w	r2, #1
 8002d20:	f000 80c8 	beq.w	8002eb4 <HAL_DMA_IRQHandler+0x28c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	4959      	ldr	r1, [pc, #356]	; (8002e8c <HAL_DMA_IRQHandler+0x264>)
 8002d28:	4859      	ldr	r0, [pc, #356]	; (8002e90 <HAL_DMA_IRQHandler+0x268>)
 8002d2a:	4282      	cmp	r2, r0
 8002d2c:	bf18      	it	ne
 8002d2e:	428a      	cmpne	r2, r1
 8002d30:	bf0c      	ite	eq
 8002d32:	2101      	moveq	r1, #1
 8002d34:	2100      	movne	r1, #0
 8002d36:	3018      	adds	r0, #24
 8002d38:	4282      	cmp	r2, r0
 8002d3a:	bf08      	it	eq
 8002d3c:	f041 0101 	orreq.w	r1, r1, #1
 8002d40:	3018      	adds	r0, #24
 8002d42:	4282      	cmp	r2, r0
 8002d44:	bf08      	it	eq
 8002d46:	f041 0101 	orreq.w	r1, r1, #1
 8002d4a:	3018      	adds	r0, #24
 8002d4c:	4282      	cmp	r2, r0
 8002d4e:	bf08      	it	eq
 8002d50:	f041 0101 	orreq.w	r1, r1, #1
 8002d54:	3018      	adds	r0, #24
 8002d56:	4282      	cmp	r2, r0
 8002d58:	bf08      	it	eq
 8002d5a:	f041 0101 	orreq.w	r1, r1, #1
 8002d5e:	3018      	adds	r0, #24
 8002d60:	4282      	cmp	r2, r0
 8002d62:	bf08      	it	eq
 8002d64:	f041 0101 	orreq.w	r1, r1, #1
 8002d68:	3018      	adds	r0, #24
 8002d6a:	4282      	cmp	r2, r0
 8002d6c:	bf08      	it	eq
 8002d6e:	f041 0101 	orreq.w	r1, r1, #1
 8002d72:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002d76:	4282      	cmp	r2, r0
 8002d78:	bf08      	it	eq
 8002d7a:	f041 0101 	orreq.w	r1, r1, #1
 8002d7e:	3018      	adds	r0, #24
 8002d80:	4282      	cmp	r2, r0
 8002d82:	bf08      	it	eq
 8002d84:	f041 0101 	orreq.w	r1, r1, #1
 8002d88:	3018      	adds	r0, #24
 8002d8a:	4282      	cmp	r2, r0
 8002d8c:	bf08      	it	eq
 8002d8e:	f041 0101 	orreq.w	r1, r1, #1
 8002d92:	3018      	adds	r0, #24
 8002d94:	4282      	cmp	r2, r0
 8002d96:	bf08      	it	eq
 8002d98:	f041 0101 	orreq.w	r1, r1, #1
 8002d9c:	3018      	adds	r0, #24
 8002d9e:	4282      	cmp	r2, r0
 8002da0:	bf08      	it	eq
 8002da2:	f041 0101 	orreq.w	r1, r1, #1
 8002da6:	3018      	adds	r0, #24
 8002da8:	4282      	cmp	r2, r0
 8002daa:	bf08      	it	eq
 8002dac:	f041 0101 	orreq.w	r1, r1, #1
 8002db0:	3018      	adds	r0, #24
 8002db2:	4282      	cmp	r2, r0
 8002db4:	bf08      	it	eq
 8002db6:	f041 0101 	orreq.w	r1, r1, #1
 8002dba:	b911      	cbnz	r1, 8002dc2 <HAL_DMA_IRQHandler+0x19a>
 8002dbc:	4935      	ldr	r1, [pc, #212]	; (8002e94 <HAL_DMA_IRQHandler+0x26c>)
 8002dbe:	428a      	cmp	r2, r1
 8002dc0:	d151      	bne.n	8002e66 <HAL_DMA_IRQHandler+0x23e>
 8002dc2:	6952      	ldr	r2, [r2, #20]
 8002dc4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002dc8:	d16c      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x27c>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002dcc:	f001 011f 	and.w	r1, r1, #31
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	fa03 f101 	lsl.w	r1, r3, r1
 8002dd6:	420d      	tst	r5, r1
 8002dd8:	f000 80d9 	beq.w	8002f8e <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ddc:	6822      	ldr	r2, [r4, #0]
 8002dde:	e353      	b.n	8003488 <HAL_DMA_IRQHandler+0x860>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002de0:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <HAL_DMA_IRQHandler+0x270>)
 8002de2:	482e      	ldr	r0, [pc, #184]	; (8002e9c <HAL_DMA_IRQHandler+0x274>)
 8002de4:	4282      	cmp	r2, r0
 8002de6:	bf18      	it	ne
 8002de8:	429a      	cmpne	r2, r3
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	3014      	adds	r0, #20
 8002df2:	4282      	cmp	r2, r0
 8002df4:	bf08      	it	eq
 8002df6:	f043 0301 	orreq.w	r3, r3, #1
 8002dfa:	3014      	adds	r0, #20
 8002dfc:	4282      	cmp	r2, r0
 8002dfe:	bf08      	it	eq
 8002e00:	f043 0301 	orreq.w	r3, r3, #1
 8002e04:	3014      	adds	r0, #20
 8002e06:	4282      	cmp	r2, r0
 8002e08:	bf08      	it	eq
 8002e0a:	f043 0301 	orreq.w	r3, r3, #1
 8002e0e:	3014      	adds	r0, #20
 8002e10:	4282      	cmp	r2, r0
 8002e12:	bf08      	it	eq
 8002e14:	f043 0301 	orreq.w	r3, r3, #1
 8002e18:	3014      	adds	r0, #20
 8002e1a:	4282      	cmp	r2, r0
 8002e1c:	bf08      	it	eq
 8002e1e:	f043 0301 	orreq.w	r3, r3, #1
 8002e22:	b91b      	cbnz	r3, 8002e2c <HAL_DMA_IRQHandler+0x204>
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_DMA_IRQHandler+0x278>)
 8002e26:	429a      	cmp	r2, r3
 8002e28:	f040 81fd 	bne.w	8003226 <HAL_DMA_IRQHandler+0x5fe>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002e2c:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002e2e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002e30:	f000 001f 	and.w	r0, r0, #31
 8002e34:	2504      	movs	r5, #4
 8002e36:	4085      	lsls	r5, r0
 8002e38:	420d      	tst	r5, r1
 8002e3a:	f000 8262 	beq.w	8003302 <HAL_DMA_IRQHandler+0x6da>
 8002e3e:	f013 0f04 	tst.w	r3, #4
 8002e42:	f000 825e 	beq.w	8003302 <HAL_DMA_IRQHandler+0x6da>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002e46:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e48:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002e4c:	f000 81f8 	beq.w	8003240 <HAL_DMA_IRQHandler+0x618>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002e54:	f040 81ee 	bne.w	8003234 <HAL_DMA_IRQHandler+0x60c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 81e3 	beq.w	8003226 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferM1HalfCpltCallback(hdma);
 8002e60:	4620      	mov	r0, r4
 8002e62:	4798      	blx	r3
 8002e64:	e1df      	b.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e66:	6811      	ldr	r1, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e68:	2104      	movs	r1, #4
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	422b      	tst	r3, r5
 8002e70:	d17a      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x340>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2110      	movs	r1, #16
 8002e7a:	4099      	lsls	r1, r3
 8002e7c:	420d      	tst	r5, r1
 8002e7e:	f000 8310 	beq.w	80034a2 <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e82:	6822      	ldr	r2, [r4, #0]
 8002e84:	e07a      	b.n	8002f7c <HAL_DMA_IRQHandler+0x354>
 8002e86:	bf00      	nop
 8002e88:	24000000 	.word	0x24000000
 8002e8c:	40020010 	.word	0x40020010
 8002e90:	40020028 	.word	0x40020028
 8002e94:	400204b8 	.word	0x400204b8
 8002e98:	58025408 	.word	0x58025408
 8002e9c:	5802541c 	.word	0x5802541c
 8002ea0:	58025494 	.word	0x58025494
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002eb6:	f001 011f 	and.w	r1, r1, #31
 8002eba:	2304      	movs	r3, #4
 8002ebc:	fa03 f101 	lsl.w	r1, r3, r1
 8002ec0:	4229      	tst	r1, r5
 8002ec2:	d064      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	4b8e      	ldr	r3, [pc, #568]	; (8003100 <HAL_DMA_IRQHandler+0x4d8>)
 8002ec8:	488e      	ldr	r0, [pc, #568]	; (8003104 <HAL_DMA_IRQHandler+0x4dc>)
 8002eca:	4282      	cmp	r2, r0
 8002ecc:	bf18      	it	ne
 8002ece:	429a      	cmpne	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	3018      	adds	r0, #24
 8002ed8:	4282      	cmp	r2, r0
 8002eda:	bf08      	it	eq
 8002edc:	f043 0301 	orreq.w	r3, r3, #1
 8002ee0:	3018      	adds	r0, #24
 8002ee2:	4282      	cmp	r2, r0
 8002ee4:	bf08      	it	eq
 8002ee6:	f043 0301 	orreq.w	r3, r3, #1
 8002eea:	3018      	adds	r0, #24
 8002eec:	4282      	cmp	r2, r0
 8002eee:	bf08      	it	eq
 8002ef0:	f043 0301 	orreq.w	r3, r3, #1
 8002ef4:	3018      	adds	r0, #24
 8002ef6:	4282      	cmp	r2, r0
 8002ef8:	bf08      	it	eq
 8002efa:	f043 0301 	orreq.w	r3, r3, #1
 8002efe:	3018      	adds	r0, #24
 8002f00:	4282      	cmp	r2, r0
 8002f02:	bf08      	it	eq
 8002f04:	f043 0301 	orreq.w	r3, r3, #1
 8002f08:	3018      	adds	r0, #24
 8002f0a:	4282      	cmp	r2, r0
 8002f0c:	bf08      	it	eq
 8002f0e:	f043 0301 	orreq.w	r3, r3, #1
 8002f12:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002f16:	4282      	cmp	r2, r0
 8002f18:	bf08      	it	eq
 8002f1a:	f043 0301 	orreq.w	r3, r3, #1
 8002f1e:	3018      	adds	r0, #24
 8002f20:	4282      	cmp	r2, r0
 8002f22:	bf08      	it	eq
 8002f24:	f043 0301 	orreq.w	r3, r3, #1
 8002f28:	3018      	adds	r0, #24
 8002f2a:	4282      	cmp	r2, r0
 8002f2c:	bf08      	it	eq
 8002f2e:	f043 0301 	orreq.w	r3, r3, #1
 8002f32:	3018      	adds	r0, #24
 8002f34:	4282      	cmp	r2, r0
 8002f36:	bf08      	it	eq
 8002f38:	f043 0301 	orreq.w	r3, r3, #1
 8002f3c:	3018      	adds	r0, #24
 8002f3e:	4282      	cmp	r2, r0
 8002f40:	bf08      	it	eq
 8002f42:	f043 0301 	orreq.w	r3, r3, #1
 8002f46:	3018      	adds	r0, #24
 8002f48:	4282      	cmp	r2, r0
 8002f4a:	bf08      	it	eq
 8002f4c:	f043 0301 	orreq.w	r3, r3, #1
 8002f50:	3018      	adds	r0, #24
 8002f52:	4282      	cmp	r2, r0
 8002f54:	bf08      	it	eq
 8002f56:	f043 0301 	orreq.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 8294 	bne.w	8003488 <HAL_DMA_IRQHandler+0x860>
 8002f60:	4b69      	ldr	r3, [pc, #420]	; (8003108 <HAL_DMA_IRQHandler+0x4e0>)
 8002f62:	429a      	cmp	r2, r3
 8002f64:	f000 8290 	beq.w	8003488 <HAL_DMA_IRQHandler+0x860>
 8002f68:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f6a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2110      	movs	r1, #16
 8002f72:	4099      	lsls	r1, r3
 8002f74:	420d      	tst	r5, r1
 8002f76:	f000 8294 	beq.w	80034a2 <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	6813      	ldr	r3, [r2, #0]
 8002f7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002f82:	e062      	b.n	800304a <HAL_DMA_IRQHandler+0x422>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f84:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f8e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002f90:	f001 011f 	and.w	r1, r1, #31
 8002f94:	2310      	movs	r3, #16
 8002f96:	fa03 f101 	lsl.w	r1, r3, r1
 8002f9a:	4229      	tst	r1, r5
 8002f9c:	f000 8281 	beq.w	80034a2 <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fa6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002faa:	4856      	ldr	r0, [pc, #344]	; (8003104 <HAL_DMA_IRQHandler+0x4dc>)
 8002fac:	4282      	cmp	r2, r0
 8002fae:	bf18      	it	ne
 8002fb0:	429a      	cmpne	r2, r3
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	3018      	adds	r0, #24
 8002fba:	4282      	cmp	r2, r0
 8002fbc:	bf08      	it	eq
 8002fbe:	f043 0301 	orreq.w	r3, r3, #1
 8002fc2:	3018      	adds	r0, #24
 8002fc4:	4282      	cmp	r2, r0
 8002fc6:	bf08      	it	eq
 8002fc8:	f043 0301 	orreq.w	r3, r3, #1
 8002fcc:	3018      	adds	r0, #24
 8002fce:	4282      	cmp	r2, r0
 8002fd0:	bf08      	it	eq
 8002fd2:	f043 0301 	orreq.w	r3, r3, #1
 8002fd6:	3018      	adds	r0, #24
 8002fd8:	4282      	cmp	r2, r0
 8002fda:	bf08      	it	eq
 8002fdc:	f043 0301 	orreq.w	r3, r3, #1
 8002fe0:	3018      	adds	r0, #24
 8002fe2:	4282      	cmp	r2, r0
 8002fe4:	bf08      	it	eq
 8002fe6:	f043 0301 	orreq.w	r3, r3, #1
 8002fea:	3018      	adds	r0, #24
 8002fec:	4282      	cmp	r2, r0
 8002fee:	bf08      	it	eq
 8002ff0:	f043 0301 	orreq.w	r3, r3, #1
 8002ff4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8002ff8:	4282      	cmp	r2, r0
 8002ffa:	bf08      	it	eq
 8002ffc:	f043 0301 	orreq.w	r3, r3, #1
 8003000:	3018      	adds	r0, #24
 8003002:	4282      	cmp	r2, r0
 8003004:	bf08      	it	eq
 8003006:	f043 0301 	orreq.w	r3, r3, #1
 800300a:	3018      	adds	r0, #24
 800300c:	4282      	cmp	r2, r0
 800300e:	bf08      	it	eq
 8003010:	f043 0301 	orreq.w	r3, r3, #1
 8003014:	3018      	adds	r0, #24
 8003016:	4282      	cmp	r2, r0
 8003018:	bf08      	it	eq
 800301a:	f043 0301 	orreq.w	r3, r3, #1
 800301e:	3018      	adds	r0, #24
 8003020:	4282      	cmp	r2, r0
 8003022:	bf08      	it	eq
 8003024:	f043 0301 	orreq.w	r3, r3, #1
 8003028:	3018      	adds	r0, #24
 800302a:	4282      	cmp	r2, r0
 800302c:	bf08      	it	eq
 800302e:	f043 0301 	orreq.w	r3, r3, #1
 8003032:	3018      	adds	r0, #24
 8003034:	4282      	cmp	r2, r0
 8003036:	bf08      	it	eq
 8003038:	f043 0301 	orreq.w	r3, r3, #1
 800303c:	b913      	cbnz	r3, 8003044 <HAL_DMA_IRQHandler+0x41c>
 800303e:	4b32      	ldr	r3, [pc, #200]	; (8003108 <HAL_DMA_IRQHandler+0x4e0>)
 8003040:	429a      	cmp	r2, r3
 8003042:	d19b      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x354>
 8003044:	6813      	ldr	r3, [r2, #0]
 8003046:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8229 	beq.w	80034a2 <HAL_DMA_IRQHandler+0x87a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003050:	60b1      	str	r1, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800305a:	d011      	beq.n	8003080 <HAL_DMA_IRQHandler+0x458>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003062:	d106      	bne.n	8003072 <HAL_DMA_IRQHandler+0x44a>
            if(hdma->XferHalfCpltCallback != NULL)
 8003064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 821b 	beq.w	80034a2 <HAL_DMA_IRQHandler+0x87a>
              hdma->XferHalfCpltCallback(hdma);
 800306c:	4620      	mov	r0, r4
 800306e:	4798      	blx	r3
 8003070:	e217      	b.n	80034a2 <HAL_DMA_IRQHandler+0x87a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003072:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8214 	beq.w	80034a2 <HAL_DMA_IRQHandler+0x87a>
              hdma->XferM1HalfCpltCallback(hdma);
 800307a:	4620      	mov	r0, r4
 800307c:	4798      	blx	r3
 800307e:	e210      	b.n	80034a2 <HAL_DMA_IRQHandler+0x87a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003086:	d103      	bne.n	8003090 <HAL_DMA_IRQHandler+0x468>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	f022 0208 	bic.w	r2, r2, #8
 800308e:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8003090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8205 	beq.w	80034a2 <HAL_DMA_IRQHandler+0x87a>
            hdma->XferHalfCpltCallback(hdma);
 8003098:	4620      	mov	r0, r4
 800309a:	4798      	blx	r3
 800309c:	e201      	b.n	80034a2 <HAL_DMA_IRQHandler+0x87a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800309e:	680b      	ldr	r3, [r1, #0]
 80030a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80030a4:	e259      	b.n	800355a <HAL_DMA_IRQHandler+0x932>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a6:	6822      	ldr	r2, [r4, #0]
 80030a8:	6813      	ldr	r3, [r2, #0]
 80030aa:	f023 0316 	bic.w	r3, r3, #22
 80030ae:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030b0:	6822      	ldr	r2, [r4, #0]
 80030b2:	6953      	ldr	r3, [r2, #20]
 80030b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b8:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030bc:	b1bb      	cbz	r3, 80030ee <HAL_DMA_IRQHandler+0x4c6>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030be:	6822      	ldr	r2, [r4, #0]
 80030c0:	6813      	ldr	r3, [r2, #0]
 80030c2:	f023 0308 	bic.w	r3, r3, #8
 80030c6:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030ca:	f003 021f 	and.w	r2, r3, #31
 80030ce:	233f      	movs	r3, #63	; 0x3f
 80030d0:	4093      	lsls	r3, r2
 80030d2:	60b3      	str	r3, [r6, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80030da:	2300      	movs	r3, #0
 80030dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80030e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 809f 	beq.w	8003226 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferAbortCallback(hdma);
 80030e8:	4620      	mov	r0, r4
 80030ea:	4798      	blx	r3
 80030ec:	e09b      	b.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e4      	bne.n	80030be <HAL_DMA_IRQHandler+0x496>
 80030f4:	e7e8      	b.n	80030c8 <HAL_DMA_IRQHandler+0x4a0>
            if(hdma->XferCpltCallback != NULL)
 80030f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030f8:	b1d3      	cbz	r3, 8003130 <HAL_DMA_IRQHandler+0x508>
              hdma->XferCpltCallback(hdma);
 80030fa:	4620      	mov	r0, r4
 80030fc:	4798      	blx	r3
 80030fe:	e017      	b.n	8003130 <HAL_DMA_IRQHandler+0x508>
 8003100:	40020010 	.word	0x40020010
 8003104:	40020028 	.word	0x40020028
 8003108:	400204b8 	.word	0x400204b8
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003112:	d109      	bne.n	8003128 <HAL_DMA_IRQHandler+0x500>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	f022 0210 	bic.w	r2, r2, #16
 800311a:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800311c:	2301      	movs	r3, #1
 800311e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8003122:	2300      	movs	r3, #0
 8003124:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8003128:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800312a:	b10b      	cbz	r3, 8003130 <HAL_DMA_IRQHandler+0x508>
            hdma->XferCpltCallback(hdma);
 800312c:	4620      	mov	r0, r4
 800312e:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003130:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003132:	2b00      	cmp	r3, #0
 8003134:	d077      	beq.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003136:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003138:	f013 0f01 	tst.w	r3, #1
 800313c:	d06f      	beq.n	800321e <HAL_DMA_IRQHandler+0x5f6>
        hdma->State = HAL_DMA_STATE_ABORT;
 800313e:	2304      	movs	r3, #4
 8003140:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003144:	6822      	ldr	r2, [r4, #0]
 8003146:	4b7e      	ldr	r3, [pc, #504]	; (8003340 <HAL_DMA_IRQHandler+0x718>)
 8003148:	497e      	ldr	r1, [pc, #504]	; (8003344 <HAL_DMA_IRQHandler+0x71c>)
 800314a:	428a      	cmp	r2, r1
 800314c:	bf18      	it	ne
 800314e:	429a      	cmpne	r2, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	3118      	adds	r1, #24
 8003158:	428a      	cmp	r2, r1
 800315a:	bf08      	it	eq
 800315c:	f043 0301 	orreq.w	r3, r3, #1
 8003160:	3118      	adds	r1, #24
 8003162:	428a      	cmp	r2, r1
 8003164:	bf08      	it	eq
 8003166:	f043 0301 	orreq.w	r3, r3, #1
 800316a:	3118      	adds	r1, #24
 800316c:	428a      	cmp	r2, r1
 800316e:	bf08      	it	eq
 8003170:	f043 0301 	orreq.w	r3, r3, #1
 8003174:	3118      	adds	r1, #24
 8003176:	428a      	cmp	r2, r1
 8003178:	bf08      	it	eq
 800317a:	f043 0301 	orreq.w	r3, r3, #1
 800317e:	3118      	adds	r1, #24
 8003180:	428a      	cmp	r2, r1
 8003182:	bf08      	it	eq
 8003184:	f043 0301 	orreq.w	r3, r3, #1
 8003188:	3118      	adds	r1, #24
 800318a:	428a      	cmp	r2, r1
 800318c:	bf08      	it	eq
 800318e:	f043 0301 	orreq.w	r3, r3, #1
 8003192:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003196:	428a      	cmp	r2, r1
 8003198:	bf08      	it	eq
 800319a:	f043 0301 	orreq.w	r3, r3, #1
 800319e:	3118      	adds	r1, #24
 80031a0:	428a      	cmp	r2, r1
 80031a2:	bf08      	it	eq
 80031a4:	f043 0301 	orreq.w	r3, r3, #1
 80031a8:	3118      	adds	r1, #24
 80031aa:	428a      	cmp	r2, r1
 80031ac:	bf08      	it	eq
 80031ae:	f043 0301 	orreq.w	r3, r3, #1
 80031b2:	3118      	adds	r1, #24
 80031b4:	428a      	cmp	r2, r1
 80031b6:	bf08      	it	eq
 80031b8:	f043 0301 	orreq.w	r3, r3, #1
 80031bc:	3118      	adds	r1, #24
 80031be:	428a      	cmp	r2, r1
 80031c0:	bf08      	it	eq
 80031c2:	f043 0301 	orreq.w	r3, r3, #1
 80031c6:	3118      	adds	r1, #24
 80031c8:	428a      	cmp	r2, r1
 80031ca:	bf08      	it	eq
 80031cc:	f043 0301 	orreq.w	r3, r3, #1
 80031d0:	3118      	adds	r1, #24
 80031d2:	428a      	cmp	r2, r1
 80031d4:	bf08      	it	eq
 80031d6:	f043 0301 	orreq.w	r3, r3, #1
 80031da:	b913      	cbnz	r3, 80031e2 <HAL_DMA_IRQHandler+0x5ba>
 80031dc:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <HAL_DMA_IRQHandler+0x720>)
 80031de:	429a      	cmp	r2, r3
 80031e0:	d123      	bne.n	800322a <HAL_DMA_IRQHandler+0x602>
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031ea:	4b58      	ldr	r3, [pc, #352]	; (800334c <HAL_DMA_IRQHandler+0x724>)
 80031ec:	fba3 3707 	umull	r3, r7, r3, r7
 80031f0:	0abf      	lsrs	r7, r7, #10
          if (++count > timeout)
 80031f2:	9b01      	ldr	r3, [sp, #4]
 80031f4:	3301      	adds	r3, #1
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	42bb      	cmp	r3, r7
 80031fa:	d804      	bhi.n	8003206 <HAL_DMA_IRQHandler+0x5de>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f013 0f01 	tst.w	r3, #1
 8003204:	d1f5      	bne.n	80031f2 <HAL_DMA_IRQHandler+0x5ca>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f013 0f01 	tst.w	r3, #1
          hdma->State = HAL_DMA_STATE_ERROR;
 800320e:	bf14      	ite	ne
 8003210:	2303      	movne	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003212:	2301      	moveq	r3, #1
 8003214:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003218:	2300      	movs	r3, #0
 800321a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800321e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003220:	b10b      	cbz	r3, 8003226 <HAL_DMA_IRQHandler+0x5fe>
        hdma->XferErrorCallback(hdma);
 8003222:	4620      	mov	r0, r4
 8003224:	4798      	blx	r3
}
 8003226:	b003      	add	sp, #12
 8003228:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_DMA_DISABLE(hdma);
 800322a:	6813      	ldr	r3, [r2, #0]
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e7da      	b.n	80031ea <HAL_DMA_IRQHandler+0x5c2>
          if(hdma->XferHalfCpltCallback != NULL)
 8003234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f5      	beq.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferHalfCpltCallback(hdma);
 800323a:	4620      	mov	r0, r4
 800323c:	4798      	blx	r3
 800323e:	e7f2      	b.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003240:	f013 0f20 	tst.w	r3, #32
 8003244:	d152      	bne.n	80032ec <HAL_DMA_IRQHandler+0x6c4>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <HAL_DMA_IRQHandler+0x718>)
 800324a:	493e      	ldr	r1, [pc, #248]	; (8003344 <HAL_DMA_IRQHandler+0x71c>)
 800324c:	428a      	cmp	r2, r1
 800324e:	bf18      	it	ne
 8003250:	429a      	cmpne	r2, r3
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	3118      	adds	r1, #24
 800325a:	428a      	cmp	r2, r1
 800325c:	bf08      	it	eq
 800325e:	f043 0301 	orreq.w	r3, r3, #1
 8003262:	3118      	adds	r1, #24
 8003264:	428a      	cmp	r2, r1
 8003266:	bf08      	it	eq
 8003268:	f043 0301 	orreq.w	r3, r3, #1
 800326c:	3118      	adds	r1, #24
 800326e:	428a      	cmp	r2, r1
 8003270:	bf08      	it	eq
 8003272:	f043 0301 	orreq.w	r3, r3, #1
 8003276:	3118      	adds	r1, #24
 8003278:	428a      	cmp	r2, r1
 800327a:	bf08      	it	eq
 800327c:	f043 0301 	orreq.w	r3, r3, #1
 8003280:	3118      	adds	r1, #24
 8003282:	428a      	cmp	r2, r1
 8003284:	bf08      	it	eq
 8003286:	f043 0301 	orreq.w	r3, r3, #1
 800328a:	3118      	adds	r1, #24
 800328c:	428a      	cmp	r2, r1
 800328e:	bf08      	it	eq
 8003290:	f043 0301 	orreq.w	r3, r3, #1
 8003294:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003298:	428a      	cmp	r2, r1
 800329a:	bf08      	it	eq
 800329c:	f043 0301 	orreq.w	r3, r3, #1
 80032a0:	3118      	adds	r1, #24
 80032a2:	428a      	cmp	r2, r1
 80032a4:	bf08      	it	eq
 80032a6:	f043 0301 	orreq.w	r3, r3, #1
 80032aa:	3118      	adds	r1, #24
 80032ac:	428a      	cmp	r2, r1
 80032ae:	bf08      	it	eq
 80032b0:	f043 0301 	orreq.w	r3, r3, #1
 80032b4:	3118      	adds	r1, #24
 80032b6:	428a      	cmp	r2, r1
 80032b8:	bf08      	it	eq
 80032ba:	f043 0301 	orreq.w	r3, r3, #1
 80032be:	3118      	adds	r1, #24
 80032c0:	428a      	cmp	r2, r1
 80032c2:	bf08      	it	eq
 80032c4:	f043 0301 	orreq.w	r3, r3, #1
 80032c8:	3118      	adds	r1, #24
 80032ca:	428a      	cmp	r2, r1
 80032cc:	bf08      	it	eq
 80032ce:	f043 0301 	orreq.w	r3, r3, #1
 80032d2:	3118      	adds	r1, #24
 80032d4:	428a      	cmp	r2, r1
 80032d6:	bf08      	it	eq
 80032d8:	f043 0301 	orreq.w	r3, r3, #1
 80032dc:	b913      	cbnz	r3, 80032e4 <HAL_DMA_IRQHandler+0x6bc>
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_DMA_IRQHandler+0x720>)
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d109      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x6d0>
 80032e4:	6813      	ldr	r3, [r2, #0]
 80032e6:	f023 0308 	bic.w	r3, r3, #8
 80032ea:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80032ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d099      	beq.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
          hdma->XferHalfCpltCallback(hdma);
 80032f2:	4620      	mov	r0, r4
 80032f4:	4798      	blx	r3
 80032f6:	e796      	b.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	f023 0304 	bic.w	r3, r3, #4
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	e7f4      	b.n	80032ec <HAL_DMA_IRQHandler+0x6c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003302:	2502      	movs	r5, #2
 8003304:	4085      	lsls	r5, r0
 8003306:	420d      	tst	r5, r1
 8003308:	f000 808a 	beq.w	8003420 <HAL_DMA_IRQHandler+0x7f8>
 800330c:	f013 0f02 	tst.w	r3, #2
 8003310:	f000 8086 	beq.w	8003420 <HAL_DMA_IRQHandler+0x7f8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003314:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003316:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800331a:	d019      	beq.n	8003350 <HAL_DMA_IRQHandler+0x728>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800331c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_DMA_IRQHandler+0x708>
          if(hdma->XferM1CpltCallback != NULL)
 8003322:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003324:	2b00      	cmp	r3, #0
 8003326:	f43f af7e 	beq.w	8003226 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferM1CpltCallback(hdma);
 800332a:	4620      	mov	r0, r4
 800332c:	4798      	blx	r3
 800332e:	e77a      	b.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
          if(hdma->XferCpltCallback != NULL)
 8003330:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003332:	2b00      	cmp	r3, #0
 8003334:	f43f af77 	beq.w	8003226 <HAL_DMA_IRQHandler+0x5fe>
            hdma->XferCpltCallback(hdma);
 8003338:	4620      	mov	r0, r4
 800333a:	4798      	blx	r3
 800333c:	e773      	b.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
 800333e:	bf00      	nop
 8003340:	40020010 	.word	0x40020010
 8003344:	40020028 	.word	0x40020028
 8003348:	400204b8 	.word	0x400204b8
 800334c:	1b4e81b5 	.word	0x1b4e81b5
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003350:	f013 0f20 	tst.w	r3, #32
 8003354:	d158      	bne.n	8003408 <HAL_DMA_IRQHandler+0x7e0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003356:	6822      	ldr	r2, [r4, #0]
 8003358:	4b8e      	ldr	r3, [pc, #568]	; (8003594 <HAL_DMA_IRQHandler+0x96c>)
 800335a:	498f      	ldr	r1, [pc, #572]	; (8003598 <HAL_DMA_IRQHandler+0x970>)
 800335c:	428a      	cmp	r2, r1
 800335e:	bf18      	it	ne
 8003360:	429a      	cmpne	r2, r3
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	3118      	adds	r1, #24
 800336a:	428a      	cmp	r2, r1
 800336c:	bf08      	it	eq
 800336e:	f043 0301 	orreq.w	r3, r3, #1
 8003372:	3118      	adds	r1, #24
 8003374:	428a      	cmp	r2, r1
 8003376:	bf08      	it	eq
 8003378:	f043 0301 	orreq.w	r3, r3, #1
 800337c:	3118      	adds	r1, #24
 800337e:	428a      	cmp	r2, r1
 8003380:	bf08      	it	eq
 8003382:	f043 0301 	orreq.w	r3, r3, #1
 8003386:	3118      	adds	r1, #24
 8003388:	428a      	cmp	r2, r1
 800338a:	bf08      	it	eq
 800338c:	f043 0301 	orreq.w	r3, r3, #1
 8003390:	3118      	adds	r1, #24
 8003392:	428a      	cmp	r2, r1
 8003394:	bf08      	it	eq
 8003396:	f043 0301 	orreq.w	r3, r3, #1
 800339a:	3118      	adds	r1, #24
 800339c:	428a      	cmp	r2, r1
 800339e:	bf08      	it	eq
 80033a0:	f043 0301 	orreq.w	r3, r3, #1
 80033a4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80033a8:	428a      	cmp	r2, r1
 80033aa:	bf08      	it	eq
 80033ac:	f043 0301 	orreq.w	r3, r3, #1
 80033b0:	3118      	adds	r1, #24
 80033b2:	428a      	cmp	r2, r1
 80033b4:	bf08      	it	eq
 80033b6:	f043 0301 	orreq.w	r3, r3, #1
 80033ba:	3118      	adds	r1, #24
 80033bc:	428a      	cmp	r2, r1
 80033be:	bf08      	it	eq
 80033c0:	f043 0301 	orreq.w	r3, r3, #1
 80033c4:	3118      	adds	r1, #24
 80033c6:	428a      	cmp	r2, r1
 80033c8:	bf08      	it	eq
 80033ca:	f043 0301 	orreq.w	r3, r3, #1
 80033ce:	3118      	adds	r1, #24
 80033d0:	428a      	cmp	r2, r1
 80033d2:	bf08      	it	eq
 80033d4:	f043 0301 	orreq.w	r3, r3, #1
 80033d8:	3118      	adds	r1, #24
 80033da:	428a      	cmp	r2, r1
 80033dc:	bf08      	it	eq
 80033de:	f043 0301 	orreq.w	r3, r3, #1
 80033e2:	3118      	adds	r1, #24
 80033e4:	428a      	cmp	r2, r1
 80033e6:	bf08      	it	eq
 80033e8:	f043 0301 	orreq.w	r3, r3, #1
 80033ec:	b913      	cbnz	r3, 80033f4 <HAL_DMA_IRQHandler+0x7cc>
 80033ee:	4b6b      	ldr	r3, [pc, #428]	; (800359c <HAL_DMA_IRQHandler+0x974>)
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d110      	bne.n	8003416 <HAL_DMA_IRQHandler+0x7ee>
 80033f4:	6813      	ldr	r3, [r2, #0]
 80033f6:	f023 0314 	bic.w	r3, r3, #20
 80033fa:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003402:	2300      	movs	r3, #0
 8003404:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800340a:	2b00      	cmp	r3, #0
 800340c:	f43f af0b 	beq.w	8003226 <HAL_DMA_IRQHandler+0x5fe>
          hdma->XferCpltCallback(hdma);
 8003410:	4620      	mov	r0, r4
 8003412:	4798      	blx	r3
 8003414:	e707      	b.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	f023 030a 	bic.w	r3, r3, #10
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e7ed      	b.n	80033fc <HAL_DMA_IRQHandler+0x7d4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003420:	2508      	movs	r5, #8
 8003422:	fa05 f000 	lsl.w	r0, r5, r0
 8003426:	4208      	tst	r0, r1
 8003428:	f43f aefd 	beq.w	8003226 <HAL_DMA_IRQHandler+0x5fe>
 800342c:	f013 0f08 	tst.w	r3, #8
 8003430:	f43f aef9 	beq.w	8003226 <HAL_DMA_IRQHandler+0x5fe>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003434:	6813      	ldr	r3, [r2, #0]
 8003436:	f023 030e 	bic.w	r3, r3, #14
 800343a:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800343c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2201      	movs	r2, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	6073      	str	r3, [r6, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800344a:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 800344c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003450:	2300      	movs	r3, #0
 8003452:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8003456:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003458:	2b00      	cmp	r3, #0
 800345a:	f43f aee4 	beq.w	8003226 <HAL_DMA_IRQHandler+0x5fe>
        hdma->XferErrorCallback(hdma);
 800345e:	4620      	mov	r0, r4
 8003460:	4798      	blx	r3
  }
 8003462:	e6e0      	b.n	8003226 <HAL_DMA_IRQHandler+0x5fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	e5ed      	b.n	8003044 <HAL_DMA_IRQHandler+0x41c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003468:	fa25 f103 	lsr.w	r1, r5, r3
 800346c:	f011 0f01 	tst.w	r1, #1
 8003470:	f47f aca7 	bne.w	8002dc2 <HAL_DMA_IRQHandler+0x19a>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003474:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003476:	f001 011f 	and.w	r1, r1, #31
 800347a:	2304      	movs	r3, #4
 800347c:	fa03 f101 	lsl.w	r1, r3, r1
 8003480:	420d      	tst	r5, r1
 8003482:	f43f ad84 	beq.w	8002f8e <HAL_DMA_IRQHandler+0x366>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003486:	6822      	ldr	r2, [r4, #0]
 8003488:	6813      	ldr	r3, [r2, #0]
 800348a:	f013 0f02 	tst.w	r3, #2
 800348e:	f47f ad79 	bne.w	8002f84 <HAL_DMA_IRQHandler+0x35c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003492:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003494:	f001 011f 	and.w	r1, r1, #31
 8003498:	2310      	movs	r3, #16
 800349a:	fa03 f101 	lsl.w	r1, r3, r1
 800349e:	420d      	tst	r5, r1
 80034a0:	d1e0      	bne.n	8003464 <HAL_DMA_IRQHandler+0x83c>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80034a4:	f002 021f 	and.w	r2, r2, #31
 80034a8:	2320      	movs	r3, #32
 80034aa:	fa03 f202 	lsl.w	r2, r3, r2
 80034ae:	422a      	tst	r2, r5
 80034b0:	f43f ae3e 	beq.w	8003130 <HAL_DMA_IRQHandler+0x508>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80034b4:	6821      	ldr	r1, [r4, #0]
 80034b6:	4b37      	ldr	r3, [pc, #220]	; (8003594 <HAL_DMA_IRQHandler+0x96c>)
 80034b8:	4837      	ldr	r0, [pc, #220]	; (8003598 <HAL_DMA_IRQHandler+0x970>)
 80034ba:	4281      	cmp	r1, r0
 80034bc:	bf18      	it	ne
 80034be:	4299      	cmpne	r1, r3
 80034c0:	bf0c      	ite	eq
 80034c2:	2301      	moveq	r3, #1
 80034c4:	2300      	movne	r3, #0
 80034c6:	3018      	adds	r0, #24
 80034c8:	4281      	cmp	r1, r0
 80034ca:	bf08      	it	eq
 80034cc:	f043 0301 	orreq.w	r3, r3, #1
 80034d0:	3018      	adds	r0, #24
 80034d2:	4281      	cmp	r1, r0
 80034d4:	bf08      	it	eq
 80034d6:	f043 0301 	orreq.w	r3, r3, #1
 80034da:	3018      	adds	r0, #24
 80034dc:	4281      	cmp	r1, r0
 80034de:	bf08      	it	eq
 80034e0:	f043 0301 	orreq.w	r3, r3, #1
 80034e4:	3018      	adds	r0, #24
 80034e6:	4281      	cmp	r1, r0
 80034e8:	bf08      	it	eq
 80034ea:	f043 0301 	orreq.w	r3, r3, #1
 80034ee:	3018      	adds	r0, #24
 80034f0:	4281      	cmp	r1, r0
 80034f2:	bf08      	it	eq
 80034f4:	f043 0301 	orreq.w	r3, r3, #1
 80034f8:	3018      	adds	r0, #24
 80034fa:	4281      	cmp	r1, r0
 80034fc:	bf08      	it	eq
 80034fe:	f043 0301 	orreq.w	r3, r3, #1
 8003502:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003506:	4281      	cmp	r1, r0
 8003508:	bf08      	it	eq
 800350a:	f043 0301 	orreq.w	r3, r3, #1
 800350e:	3018      	adds	r0, #24
 8003510:	4281      	cmp	r1, r0
 8003512:	bf08      	it	eq
 8003514:	f043 0301 	orreq.w	r3, r3, #1
 8003518:	3018      	adds	r0, #24
 800351a:	4281      	cmp	r1, r0
 800351c:	bf08      	it	eq
 800351e:	f043 0301 	orreq.w	r3, r3, #1
 8003522:	3018      	adds	r0, #24
 8003524:	4281      	cmp	r1, r0
 8003526:	bf08      	it	eq
 8003528:	f043 0301 	orreq.w	r3, r3, #1
 800352c:	3018      	adds	r0, #24
 800352e:	4281      	cmp	r1, r0
 8003530:	bf08      	it	eq
 8003532:	f043 0301 	orreq.w	r3, r3, #1
 8003536:	3018      	adds	r0, #24
 8003538:	4281      	cmp	r1, r0
 800353a:	bf08      	it	eq
 800353c:	f043 0301 	orreq.w	r3, r3, #1
 8003540:	3018      	adds	r0, #24
 8003542:	4281      	cmp	r1, r0
 8003544:	bf08      	it	eq
 8003546:	f043 0301 	orreq.w	r3, r3, #1
 800354a:	b91b      	cbnz	r3, 8003554 <HAL_DMA_IRQHandler+0x92c>
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_DMA_IRQHandler+0x974>)
 800354e:	4299      	cmp	r1, r3
 8003550:	f47f ada5 	bne.w	800309e <HAL_DMA_IRQHandler+0x476>
 8003554:	680b      	ldr	r3, [r1, #0]
 8003556:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	f43f ade8 	beq.w	8003130 <HAL_DMA_IRQHandler+0x508>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003560:	60b2      	str	r2, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003562:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b04      	cmp	r3, #4
 800356a:	f43f ad9c 	beq.w	80030a6 <HAL_DMA_IRQHandler+0x47e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003576:	f43f adc9 	beq.w	800310c <HAL_DMA_IRQHandler+0x4e4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003580:	f47f adb9 	bne.w	80030f6 <HAL_DMA_IRQHandler+0x4ce>
            if(hdma->XferM1CpltCallback != NULL)
 8003584:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003586:	2b00      	cmp	r3, #0
 8003588:	f43f add2 	beq.w	8003130 <HAL_DMA_IRQHandler+0x508>
              hdma->XferM1CpltCallback(hdma);
 800358c:	4620      	mov	r0, r4
 800358e:	4798      	blx	r3
 8003590:	e5ce      	b.n	8003130 <HAL_DMA_IRQHandler+0x508>
 8003592:	bf00      	nop
 8003594:	40020010 	.word	0x40020010
 8003598:	40020028 	.word	0x40020028
 800359c:	400204b8 	.word	0x400204b8

080035a0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80035a0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80035a2:	4770      	bx	lr

080035a4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035a4:	680b      	ldr	r3, [r1, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 810f 	beq.w	80037ca <HAL_GPIO_Init+0x226>
{
 80035ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b0:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035b2:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 80035b6:	4662      	mov	r2, ip
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b8:	4c84      	ldr	r4, [pc, #528]	; (80037cc <HAL_GPIO_Init+0x228>)
 80035ba:	4d85      	ldr	r5, [pc, #532]	; (80037d0 <HAL_GPIO_Init+0x22c>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035bc:	4e85      	ldr	r6, [pc, #532]	; (80037d4 <HAL_GPIO_Init+0x230>)
 80035be:	f8df 821c 	ldr.w	r8, [pc, #540]	; 80037dc <HAL_GPIO_Init+0x238>
 80035c2:	e061      	b.n	8003688 <HAL_GPIO_Init+0xe4>
        temp = GPIOx->OSPEEDR;
 80035c4:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035c6:	f04f 0a03 	mov.w	sl, #3
 80035ca:	fa0a fa0c 	lsl.w	sl, sl, ip
 80035ce:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035d2:	68cb      	ldr	r3, [r1, #12]
 80035d4:	fa03 f30c 	lsl.w	r3, r3, ip
 80035d8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80035dc:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80035de:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035e0:	ea23 0e0e 	bic.w	lr, r3, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e4:	684b      	ldr	r3, [r1, #4]
 80035e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035ea:	4093      	lsls	r3, r2
 80035ec:	ea43 030e 	orr.w	r3, r3, lr
        GPIOx->OTYPER = temp;
 80035f0:	6043      	str	r3, [r0, #4]
 80035f2:	e056      	b.n	80036a2 <HAL_GPIO_Init+0xfe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035f4:	2300      	movs	r3, #0
 80035f6:	fa03 f30b 	lsl.w	r3, r3, fp
 80035fa:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035fe:	f8ce 3008 	str.w	r3, [lr, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 8003608:	ea6f 0e09 	mvn.w	lr, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800360c:	684f      	ldr	r7, [r1, #4]
 800360e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8003612:	bf0c      	ite	eq
 8003614:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8003618:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 800361c:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8003620:	f8ca 3000 	str.w	r3, [sl]

        temp = EXTI->FTSR1;
 8003624:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003628:	684f      	ldr	r7, [r1, #4]
 800362a:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800362e:	bf0c      	ite	eq
 8003630:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8003634:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8003638:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 800363c:	f8ca 3004 	str.w	r3, [sl, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003640:	f8da 3084 	ldr.w	r3, [sl, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003644:	684f      	ldr	r7, [r1, #4]
 8003646:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~(iocurrent);
 800364a:	bf0c      	ite	eq
 800364c:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 8003650:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003654:	f04f 4ab0 	mov.w	sl, #1476395008	; 0x58000000
 8003658:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800365c:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003660:	684f      	ldr	r7, [r1, #4]
 8003662:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~(iocurrent);
 8003666:	bf0c      	ite	eq
 8003668:	ea0e 0303 	andeq.w	r3, lr, r3
        {
          temp |= iocurrent;
 800366c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003670:	f04f 4eb0 	mov.w	lr, #1476395008	; 0x58000000
 8003674:	f8ce 3080 	str.w	r3, [lr, #128]	; 0x80
      }
    }

    position++;
 8003678:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800367a:	680b      	ldr	r3, [r1, #0]
 800367c:	f10c 0c02 	add.w	ip, ip, #2
 8003680:	fa33 f702 	lsrs.w	r7, r3, r2
 8003684:	f000 809e 	beq.w	80037c4 <HAL_GPIO_Init+0x220>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003688:	f04f 0e01 	mov.w	lr, #1
 800368c:	fa0e fe02 	lsl.w	lr, lr, r2
    if (iocurrent != 0x00U)
 8003690:	ea1e 0903 	ands.w	r9, lr, r3
 8003694:	d0f0      	beq.n	8003678 <HAL_GPIO_Init+0xd4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003696:	684b      	ldr	r3, [r1, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	3b01      	subs	r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d990      	bls.n	80035c4 <HAL_GPIO_Init+0x20>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a2:	684b      	ldr	r3, [r1, #4]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d027      	beq.n	80036fc <HAL_GPIO_Init+0x158>
      temp = GPIOx->PUPDR;
 80036ac:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036ae:	f04f 0e03 	mov.w	lr, #3
 80036b2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80036b6:	ea23 0e0e 	bic.w	lr, r3, lr
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ba:	688b      	ldr	r3, [r1, #8]
 80036bc:	fa03 f30c 	lsl.w	r3, r3, ip
 80036c0:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->PUPDR = temp;
 80036c4:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c6:	684b      	ldr	r3, [r1, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d115      	bne.n	80036fc <HAL_GPIO_Init+0x158>
        temp = GPIOx->AFR[position >> 3U];
 80036d0:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 80036d4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80036d8:	f8de a020 	ldr.w	sl, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036dc:	f002 0307 	and.w	r3, r2, #7
 80036e0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80036e4:	230f      	movs	r3, #15
 80036e6:	fa03 f30b 	lsl.w	r3, r3, fp
 80036ea:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036ee:	690b      	ldr	r3, [r1, #16]
 80036f0:	fa03 f30b 	lsl.w	r3, r3, fp
 80036f4:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80036f8:	f8ce 3020 	str.w	r3, [lr, #32]
      temp = GPIOx->MODER;
 80036fc:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036fe:	f04f 0e03 	mov.w	lr, #3
 8003702:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003706:	ea23 0e0e 	bic.w	lr, r3, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370a:	684b      	ldr	r3, [r1, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	fa03 f30c 	lsl.w	r3, r3, ip
 8003714:	ea43 030e 	orr.w	r3, r3, lr
      GPIOx->MODER = temp;
 8003718:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800371a:	684b      	ldr	r3, [r1, #4]
 800371c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003720:	d0aa      	beq.n	8003678 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003722:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003726:	f043 0302 	orr.w	r3, r3, #2
 800372a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800372e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800373a:	f022 0e03 	bic.w	lr, r2, #3
 800373e:	44ae      	add	lr, r5
 8003740:	f8de a008 	ldr.w	sl, [lr, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003744:	f002 0303 	and.w	r3, r2, #3
 8003748:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800374c:	230f      	movs	r3, #15
 800374e:	fa03 f30b 	lsl.w	r3, r3, fp
 8003752:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003756:	42b0      	cmp	r0, r6
 8003758:	f43f af4c 	beq.w	80035f4 <HAL_GPIO_Init+0x50>
 800375c:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <HAL_GPIO_Init+0x234>)
 800375e:	4298      	cmp	r0, r3
 8003760:	d020      	beq.n	80037a4 <HAL_GPIO_Init+0x200>
 8003762:	4540      	cmp	r0, r8
 8003764:	d020      	beq.n	80037a8 <HAL_GPIO_Init+0x204>
 8003766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376a:	4298      	cmp	r0, r3
 800376c:	d01e      	beq.n	80037ac <HAL_GPIO_Init+0x208>
 800376e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003772:	4298      	cmp	r0, r3
 8003774:	d01c      	beq.n	80037b0 <HAL_GPIO_Init+0x20c>
 8003776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800377a:	4298      	cmp	r0, r3
 800377c:	d01a      	beq.n	80037b4 <HAL_GPIO_Init+0x210>
 800377e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003782:	4298      	cmp	r0, r3
 8003784:	d018      	beq.n	80037b8 <HAL_GPIO_Init+0x214>
 8003786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800378a:	4298      	cmp	r0, r3
 800378c:	d016      	beq.n	80037bc <HAL_GPIO_Init+0x218>
 800378e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003792:	4298      	cmp	r0, r3
 8003794:	d014      	beq.n	80037c0 <HAL_GPIO_Init+0x21c>
 8003796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379a:	4298      	cmp	r0, r3
 800379c:	bf0c      	ite	eq
 800379e:	2309      	moveq	r3, #9
 80037a0:	230a      	movne	r3, #10
 80037a2:	e728      	b.n	80035f6 <HAL_GPIO_Init+0x52>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e726      	b.n	80035f6 <HAL_GPIO_Init+0x52>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e724      	b.n	80035f6 <HAL_GPIO_Init+0x52>
 80037ac:	2303      	movs	r3, #3
 80037ae:	e722      	b.n	80035f6 <HAL_GPIO_Init+0x52>
 80037b0:	2304      	movs	r3, #4
 80037b2:	e720      	b.n	80035f6 <HAL_GPIO_Init+0x52>
 80037b4:	2305      	movs	r3, #5
 80037b6:	e71e      	b.n	80035f6 <HAL_GPIO_Init+0x52>
 80037b8:	2306      	movs	r3, #6
 80037ba:	e71c      	b.n	80035f6 <HAL_GPIO_Init+0x52>
 80037bc:	2307      	movs	r3, #7
 80037be:	e71a      	b.n	80035f6 <HAL_GPIO_Init+0x52>
 80037c0:	2308      	movs	r3, #8
 80037c2:	e718      	b.n	80035f6 <HAL_GPIO_Init+0x52>
  }
}
 80037c4:	b003      	add	sp, #12
 80037c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ca:	4770      	bx	lr
 80037cc:	58024400 	.word	0x58024400
 80037d0:	58000400 	.word	0x58000400
 80037d4:	58020000 	.word	0x58020000
 80037d8:	58020400 	.word	0x58020400
 80037dc:	58020800 	.word	0x58020800

080037e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037e0:	b10a      	cbz	r2, 80037e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037e2:	6181      	str	r1, [r0, #24]
 80037e4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80037e6:	0409      	lsls	r1, r1, #16
 80037e8:	6181      	str	r1, [r0, #24]
  }
}
 80037ea:	4770      	bx	lr

080037ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037ec:	6803      	ldr	r3, [r0, #0]
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	f012 0f02 	tst.w	r2, #2
 80037f4:	d001      	beq.n	80037fa <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037f6:	2200      	movs	r2, #0
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037fa:	6803      	ldr	r3, [r0, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	f012 0f01 	tst.w	r2, #1
 8003802:	d103      	bne.n	800380c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	619a      	str	r2, [r3, #24]
  }
}
 800380c:	4770      	bx	lr

0800380e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800380e:	b430      	push	{r4, r5}
 8003810:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003812:	6805      	ldr	r5, [r0, #0]
 8003814:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003816:	4323      	orrs	r3, r4
 8003818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800381c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003820:	430b      	orrs	r3, r1
 8003822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8003826:	0d64      	lsrs	r4, r4, #21
 8003828:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800382c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8003830:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8003834:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8003838:	f044 0403 	orr.w	r4, r4, #3
 800383c:	ea20 0404 	bic.w	r4, r0, r4
 8003840:	4323      	orrs	r3, r4
 8003842:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003844:	bc30      	pop	{r4, r5}
 8003846:	4770      	bx	lr

08003848 <I2C_IsErrorOccurred>:
{
 8003848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800384e:	6803      	ldr	r3, [r0, #0]
 8003850:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003852:	f017 0710 	ands.w	r7, r7, #16
 8003856:	d051      	beq.n	80038fc <I2C_IsErrorOccurred+0xb4>
 8003858:	460e      	mov	r6, r1
 800385a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	2210      	movs	r2, #16
 800385e:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2500      	movs	r5, #0
 8003862:	462f      	mov	r7, r5
              hi2c->State = HAL_I2C_STATE_READY;
 8003864:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003868:	6821      	ldr	r1, [r4, #0]
 800386a:	698b      	ldr	r3, [r1, #24]
 800386c:	f013 0f20 	tst.w	r3, #32
 8003870:	d13d      	bne.n	80038ee <I2C_IsErrorOccurred+0xa6>
 8003872:	2d00      	cmp	r5, #0
 8003874:	d13b      	bne.n	80038ee <I2C_IsErrorOccurred+0xa6>
      if (Timeout != HAL_MAX_DELAY)
 8003876:	f1b6 3fff 	cmp.w	r6, #4294967295
 800387a:	d0f6      	beq.n	800386a <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800387c:	f7fd fe70 	bl	8001560 <HAL_GetTick>
 8003880:	463d      	mov	r5, r7
 8003882:	eba0 0008 	sub.w	r0, r0, r8
 8003886:	42b0      	cmp	r0, r6
 8003888:	d801      	bhi.n	800388e <I2C_IsErrorOccurred+0x46>
 800388a:	2e00      	cmp	r6, #0
 800388c:	d1ec      	bne.n	8003868 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8003892:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8003896:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003898:	6991      	ldr	r1, [r2, #24]
 800389a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800389e:	d004      	beq.n	80038aa <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 80038a0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80038a4:	d101      	bne.n	80038aa <I2C_IsErrorOccurred+0x62>
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d119      	bne.n	80038de <I2C_IsErrorOccurred+0x96>
{
 80038aa:	463d      	mov	r5, r7
              status = HAL_ERROR;
 80038ac:	f04f 0a01 	mov.w	sl, #1
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f013 0f20 	tst.w	r3, #32
 80038b8:	d1d6      	bne.n	8003868 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038ba:	f7fd fe51 	bl	8001560 <HAL_GetTick>
 80038be:	eba0 0008 	sub.w	r0, r0, r8
 80038c2:	2819      	cmp	r0, #25
 80038c4:	d9f4      	bls.n	80038b0 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038c8:	f043 0320 	orr.w	r3, r3, #32
 80038cc:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d2:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 80038d6:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
              status = HAL_ERROR;
 80038da:	4655      	mov	r5, sl
 80038dc:	e7e8      	b.n	80038b0 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038de:	6853      	ldr	r3, [r2, #4]
 80038e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e4:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 80038e6:	f7fd fe3b 	bl	8001560 <HAL_GetTick>
 80038ea:	4680      	mov	r8, r0
 80038ec:	e7dd      	b.n	80038aa <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 80038ee:	2d00      	cmp	r5, #0
 80038f0:	d13f      	bne.n	8003972 <I2C_IsErrorOccurred+0x12a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f2:	2320      	movs	r3, #32
 80038f4:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80038f6:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80038f8:	2501      	movs	r5, #1
 80038fa:	e000      	b.n	80038fe <I2C_IsErrorOccurred+0xb6>
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 80038fe:	6822      	ldr	r2, [r4, #0]
 8003900:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003902:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003906:	d005      	beq.n	8003914 <I2C_IsErrorOccurred+0xcc>
    error_code |= HAL_I2C_ERROR_BERR;
 8003908:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800390c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003910:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8003912:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003914:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003918:	d02d      	beq.n	8003976 <I2C_IsErrorOccurred+0x12e>
    error_code |= HAL_I2C_ERROR_OVR;
 800391a:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003924:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003926:	f413 7f00 	tst.w	r3, #512	; 0x200
 800392a:	d005      	beq.n	8003938 <I2C_IsErrorOccurred+0xf0>
    error_code |= HAL_I2C_ERROR_ARLO;
 800392c:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003936:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003938:	4620      	mov	r0, r4
 800393a:	f7ff ff57 	bl	80037ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	6853      	ldr	r3, [r2, #4]
 8003942:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003946:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800394a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003954:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003956:	431f      	orrs	r7, r3
 8003958:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800395a:	2320      	movs	r3, #32
 800395c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003960:	2300      	movs	r3, #0
 8003962:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003966:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800396a:	2501      	movs	r5, #1
}
 800396c:	4628      	mov	r0, r5
 800396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8003972:	2704      	movs	r7, #4
 8003974:	e7c3      	b.n	80038fe <I2C_IsErrorOccurred+0xb6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003976:	f413 7f00 	tst.w	r3, #512	; 0x200
 800397a:	d1d7      	bne.n	800392c <I2C_IsErrorOccurred+0xe4>
  if (status != HAL_OK)
 800397c:	2d00      	cmp	r5, #0
 800397e:	d0f5      	beq.n	800396c <I2C_IsErrorOccurred+0x124>
 8003980:	e7da      	b.n	8003938 <I2C_IsErrorOccurred+0xf0>

08003982 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003982:	b570      	push	{r4, r5, r6, lr}
 8003984:	4604      	mov	r4, r0
 8003986:	460d      	mov	r5, r1
 8003988:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f013 0f02 	tst.w	r3, #2
 8003992:	d11d      	bne.n	80039d0 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003994:	4632      	mov	r2, r6
 8003996:	4629      	mov	r1, r5
 8003998:	4620      	mov	r0, r4
 800399a:	f7ff ff55 	bl	8003848 <I2C_IsErrorOccurred>
 800399e:	b9c8      	cbnz	r0, 80039d4 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80039a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80039a4:	d0f1      	beq.n	800398a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fd fddb 	bl	8001560 <HAL_GetTick>
 80039aa:	1b80      	subs	r0, r0, r6
 80039ac:	42a8      	cmp	r0, r5
 80039ae:	d801      	bhi.n	80039b4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80039b0:	2d00      	cmp	r5, #0
 80039b2:	d1ea      	bne.n	800398a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039b6:	f043 0320 	orr.w	r3, r3, #32
 80039ba:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	2320      	movs	r3, #32
 80039be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80039c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80039cc:	2001      	movs	r0, #1
 80039ce:	e000      	b.n	80039d2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80039d0:	2000      	movs	r0, #0
}
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80039d4:	2001      	movs	r0, #1
 80039d6:	e7fc      	b.n	80039d2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080039d8 <I2C_WaitOnFlagUntilTimeout>:
{
 80039d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039dc:	4680      	mov	r8, r0
 80039de:	460f      	mov	r7, r1
 80039e0:	4616      	mov	r6, r2
 80039e2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e4:	f8d8 3000 	ldr.w	r3, [r8]
 80039e8:	699c      	ldr	r4, [r3, #24]
 80039ea:	ea37 0204 	bics.w	r2, r7, r4
 80039ee:	bf0c      	ite	eq
 80039f0:	f04f 0c01 	moveq.w	ip, #1
 80039f4:	f04f 0c00 	movne.w	ip, #0
 80039f8:	45b4      	cmp	ip, r6
 80039fa:	d11a      	bne.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a00:	d0f2      	beq.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fd fdad 	bl	8001560 <HAL_GetTick>
 8003a06:	9b06      	ldr	r3, [sp, #24]
 8003a08:	1ac0      	subs	r0, r0, r3
 8003a0a:	42a8      	cmp	r0, r5
 8003a0c:	d801      	bhi.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8003a0e:	2d00      	cmp	r5, #0
 8003a10:	d1e8      	bne.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a12:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003a16:	f043 0320 	orr.w	r3, r3, #32
 8003a1a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003a2a:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 8003a2e:	2001      	movs	r0, #1
 8003a30:	e000      	b.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 8003a32:	2000      	movs	r0, #0
}
 8003a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a38 <I2C_RequestMemoryWrite>:
{
 8003a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	4604      	mov	r4, r0
 8003a40:	4690      	mov	r8, r2
 8003a42:	461d      	mov	r5, r3
 8003a44:	9e08      	ldr	r6, [sp, #32]
 8003a46:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <I2C_RequestMemoryWrite+0x78>)
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a50:	b2ea      	uxtb	r2, r5
 8003a52:	f7ff fedc 	bl	800380e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a56:	463a      	mov	r2, r7
 8003a58:	4631      	mov	r1, r6
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f7ff ff91 	bl	8003982 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a60:	bb08      	cbnz	r0, 8003aa6 <I2C_RequestMemoryWrite+0x6e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a62:	2d01      	cmp	r5, #1
 8003a64:	d110      	bne.n	8003a88 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	fa5f f288 	uxtb.w	r2, r8
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a6e:	9700      	str	r7, [sp, #0]
 8003a70:	4633      	mov	r3, r6
 8003a72:	2200      	movs	r2, #0
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	4620      	mov	r0, r4
 8003a78:	f7ff ffae 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8003a7c:	3800      	subs	r0, #0
 8003a7e:	bf18      	it	ne
 8003a80:	2001      	movne	r0, #1
}
 8003a82:	b002      	add	sp, #8
 8003a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a90:	463a      	mov	r2, r7
 8003a92:	4631      	mov	r1, r6
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff ff74 	bl	8003982 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a9a:	b930      	cbnz	r0, 8003aaa <I2C_RequestMemoryWrite+0x72>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	fa5f f288 	uxtb.w	r2, r8
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8003aa4:	e7e3      	b.n	8003a6e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	e7eb      	b.n	8003a82 <I2C_RequestMemoryWrite+0x4a>
      return HAL_ERROR;
 8003aaa:	2001      	movs	r0, #1
 8003aac:	e7e9      	b.n	8003a82 <I2C_RequestMemoryWrite+0x4a>
 8003aae:	bf00      	nop
 8003ab0:	80002000 	.word	0x80002000

08003ab4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	460c      	mov	r4, r1
 8003aba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f013 0f20 	tst.w	r3, #32
 8003ac4:	d11a      	bne.n	8003afc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac6:	4632      	mov	r2, r6
 8003ac8:	4621      	mov	r1, r4
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7ff febc 	bl	8003848 <I2C_IsErrorOccurred>
 8003ad0:	b9b0      	cbnz	r0, 8003b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad2:	f7fd fd45 	bl	8001560 <HAL_GetTick>
 8003ad6:	1b80      	subs	r0, r0, r6
 8003ad8:	42a0      	cmp	r0, r4
 8003ada:	d801      	bhi.n	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003adc:	2c00      	cmp	r4, #0
 8003ade:	d1ed      	bne.n	8003abc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003ae2:	f043 0320 	orr.w	r3, r3, #32
 8003ae6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	2320      	movs	r3, #32
 8003aea:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003af4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8003af8:	2001      	movs	r0, #1
}
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003afc:	2000      	movs	r0, #0
 8003afe:	e7fc      	b.n	8003afa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003b00:	2001      	movs	r0, #1
 8003b02:	e7fa      	b.n	8003afa <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08003b04 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d053      	beq.n	8003bb0 <HAL_I2C_Init+0xac>
{
 8003b08:	b510      	push	{r4, lr}
 8003b0a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d043      	beq.n	8003b9c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b14:	2324      	movs	r3, #36	; 0x24
 8003b16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003b1a:	6822      	ldr	r2, [r4, #0]
 8003b1c:	6813      	ldr	r3, [r2, #0]
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	6863      	ldr	r3, [r4, #4]
 8003b28:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003b2c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	6893      	ldr	r3, [r2, #8]
 8003b32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b36:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b38:	68e3      	ldr	r3, [r4, #12]
 8003b3a:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b3c:	6822      	ldr	r2, [r4, #0]
 8003b3e:	68a3      	ldr	r3, [r4, #8]
 8003b40:	bf0c      	ite	eq
 8003b42:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b46:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8003b4a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b4c:	68e3      	ldr	r3, [r4, #12]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d029      	beq.n	8003ba6 <HAL_I2C_Init+0xa2>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b52:	6822      	ldr	r2, [r4, #0]
 8003b54:	6851      	ldr	r1, [r2, #4]
 8003b56:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <HAL_I2C_Init+0xb0>)
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b5c:	6822      	ldr	r2, [r4, #0]
 8003b5e:	68d3      	ldr	r3, [r2, #12]
 8003b60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b64:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b66:	6822      	ldr	r2, [r4, #0]
 8003b68:	6923      	ldr	r3, [r4, #16]
 8003b6a:	6961      	ldr	r1, [r4, #20]
 8003b6c:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b6e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b74:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	69e3      	ldr	r3, [r4, #28]
 8003b7a:	6a21      	ldr	r1, [r4, #32]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	6813      	ldr	r3, [r2, #0]
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	2320      	movs	r3, #32
 8003b90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b94:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b96:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003b9a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003b9c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003ba0:	f7fc fd0a 	bl	80005b8 <HAL_I2C_MspInit>
 8003ba4:	e7b6      	b.n	8003b14 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e7d0      	b.n	8003b52 <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8003bb0:	2001      	movs	r0, #1
}
 8003bb2:	4770      	bx	lr
 8003bb4:	02008000 	.word	0x02008000

08003bb8 <HAL_I2C_Mem_Write>:
{
 8003bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	460d      	mov	r5, r1
 8003bc0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003bc4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003bca:	b2c9      	uxtb	r1, r1
 8003bcc:	2920      	cmp	r1, #32
 8003bce:	f040 80bf 	bne.w	8003d50 <HAL_I2C_Mem_Write+0x198>
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	4690      	mov	r8, r2
 8003bd6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8003bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bda:	b1cb      	cbz	r3, 8003c10 <HAL_I2C_Mem_Write+0x58>
 8003bdc:	f1ba 0f00 	cmp.w	sl, #0
 8003be0:	d016      	beq.n	8003c10 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8003be2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	f000 80b6 	beq.w	8003d58 <HAL_I2C_Mem_Write+0x1a0>
 8003bec:	f04f 0b01 	mov.w	fp, #1
 8003bf0:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fcb4 	bl	8001560 <HAL_GetTick>
 8003bf8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bfa:	9000      	str	r0, [sp, #0]
 8003bfc:	2319      	movs	r3, #25
 8003bfe:	465a      	mov	r2, fp
 8003c00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c04:	4620      	mov	r0, r4
 8003c06:	f7ff fee7 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 8003c0a:	b130      	cbz	r0, 8003c1a <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	e0a0      	b.n	8003d52 <HAL_I2C_Mem_Write+0x19a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c14:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8003c16:	2001      	movs	r0, #1
 8003c18:	e09b      	b.n	8003d52 <HAL_I2C_Mem_Write+0x19a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c1a:	2321      	movs	r3, #33	; 0x21
 8003c1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c20:	2340      	movs	r3, #64	; 0x40
 8003c22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c2c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c2e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c32:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c34:	9601      	str	r6, [sp, #4]
 8003c36:	9700      	str	r7, [sp, #0]
 8003c38:	464b      	mov	r3, r9
 8003c3a:	4642      	mov	r2, r8
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff fefa 	bl	8003a38 <I2C_RequestMemoryWrite>
 8003c44:	b9a0      	cbnz	r0, 8003c70 <HAL_I2C_Mem_Write+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2bff      	cmp	r3, #255	; 0xff
 8003c4c:	d915      	bls.n	8003c7a <HAL_I2C_Mem_Write+0xc2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c4e:	22ff      	movs	r2, #255	; 0xff
 8003c50:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c52:	2300      	movs	r3, #0
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7ff fdd6 	bl	800380e <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c62:	f04f 0800 	mov.w	r8, #0
 8003c66:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c6a:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 8003c6e:	e020      	b.n	8003cb2 <HAL_I2C_Mem_Write+0xfa>
      __HAL_UNLOCK(hi2c);
 8003c70:	2300      	movs	r3, #0
 8003c72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003c76:	4658      	mov	r0, fp
 8003c78:	e06b      	b.n	8003d52 <HAL_I2C_Mem_Write+0x19a>
      hi2c->XferSize = hi2c->XferCount;
 8003c7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c80:	2300      	movs	r3, #0
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f7ff fdbe 	bl	800380e <I2C_TransferConfig>
 8003c92:	e7e6      	b.n	8003c62 <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8003c94:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c96:	b292      	uxth	r2, r2
 8003c98:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c9a:	f8cd 8000 	str.w	r8, [sp]
 8003c9e:	4653      	mov	r3, sl
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f7ff fdb2 	bl	800380e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003caa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d032      	beq.n	8003d18 <HAL_I2C_Mem_Write+0x160>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb2:	4632      	mov	r2, r6
 8003cb4:	4639      	mov	r1, r7
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f7ff fe63 	bl	8003982 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	d14d      	bne.n	8003d5c <HAL_I2C_Mem_Write+0x1a4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cca:	3301      	adds	r3, #1
 8003ccc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003cce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003cd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cde:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e1      	bne.n	8003caa <HAL_I2C_Mem_Write+0xf2>
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	d0df      	beq.n	8003caa <HAL_I2C_Mem_Write+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cea:	9600      	str	r6, [sp, #0]
 8003cec:	463b      	mov	r3, r7
 8003cee:	4642      	mov	r2, r8
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff fe70 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 8003cf8:	bb90      	cbnz	r0, 8003d60 <HAL_I2C_Mem_Write+0x1a8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2bff      	cmp	r3, #255	; 0xff
 8003d00:	d9c8      	bls.n	8003c94 <HAL_I2C_Mem_Write+0xdc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d02:	22ff      	movs	r2, #255	; 0xff
 8003d04:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d06:	f8cd 8000 	str.w	r8, [sp]
 8003d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d0e:	4629      	mov	r1, r5
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7ff fd7c 	bl	800380e <I2C_TransferConfig>
 8003d16:	e7c8      	b.n	8003caa <HAL_I2C_Mem_Write+0xf2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4639      	mov	r1, r7
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f7ff fec9 	bl	8003ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d22:	b9f8      	cbnz	r0, 8003d64 <HAL_I2C_Mem_Write+0x1ac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	2220      	movs	r2, #32
 8003d28:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003d2a:	6821      	ldr	r1, [r4, #0]
 8003d2c:	684b      	ldr	r3, [r1, #4]
 8003d2e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003d32:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003d36:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d40:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003d4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003d4e:	e000      	b.n	8003d52 <HAL_I2C_Mem_Write+0x19a>
    return HAL_BUSY;
 8003d50:	2002      	movs	r0, #2
}
 8003d52:	b003      	add	sp, #12
 8003d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003d58:	2002      	movs	r0, #2
 8003d5a:	e7fa      	b.n	8003d52 <HAL_I2C_Mem_Write+0x19a>
        return HAL_ERROR;
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	e7f8      	b.n	8003d52 <HAL_I2C_Mem_Write+0x19a>
          return HAL_ERROR;
 8003d60:	2001      	movs	r0, #1
 8003d62:	e7f6      	b.n	8003d52 <HAL_I2C_Mem_Write+0x19a>
      return HAL_ERROR;
 8003d64:	2001      	movs	r0, #1
 8003d66:	e7f4      	b.n	8003d52 <HAL_I2C_Mem_Write+0x19a>

08003d68 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d124      	bne.n	8003dbc <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d72:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d022      	beq.n	8003dc0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d80:	2324      	movs	r3, #36	; 0x24
 8003d82:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d86:	6802      	ldr	r2, [r0, #0]
 8003d88:	6813      	ldr	r3, [r2, #0]
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d90:	6802      	ldr	r2, [r0, #0]
 8003d92:	6813      	ldr	r3, [r2, #0]
 8003d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d98:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d9a:	6802      	ldr	r2, [r0, #0]
 8003d9c:	6813      	ldr	r3, [r2, #0]
 8003d9e:	4319      	orrs	r1, r3
 8003da0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da2:	6802      	ldr	r2, [r0, #0]
 8003da4:	6813      	ldr	r3, [r2, #0]
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	2320      	movs	r3, #32
 8003dae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db2:	2300      	movs	r3, #0
 8003db4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003db8:	4618      	mov	r0, r3
 8003dba:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003dc0:	2002      	movs	r0, #2
  }
}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d122      	bne.n	8003e14 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d020      	beq.n	8003e18 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ddc:	2324      	movs	r3, #36	; 0x24
 8003dde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003de2:	6802      	ldr	r2, [r0, #0]
 8003de4:	6813      	ldr	r3, [r2, #0]
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dec:	6802      	ldr	r2, [r0, #0]
 8003dee:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003df0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003df4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003df8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dfa:	6802      	ldr	r2, [r0, #0]
 8003dfc:	6813      	ldr	r3, [r2, #0]
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	2320      	movs	r3, #32
 8003e06:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003e10:	4618      	mov	r0, r3
 8003e12:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2002      	movs	r0, #2
 8003e16:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003e18:	2002      	movs	r0, #2
  }
}
 8003e1a:	4770      	bx	lr

08003e1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e1c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_PWREx_ConfigSupply+0x4c>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f013 0f04 	tst.w	r3, #4
 8003e26:	d107      	bne.n	8003e38 <HAL_PWREx_ConfigSupply+0x1c>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <HAL_PWREx_ConfigSupply+0x4c>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e30:	1a18      	subs	r0, r3, r0
 8003e32:	bf18      	it	ne
 8003e34:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e38:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <HAL_PWREx_ConfigSupply+0x4c>)
 8003e3a:	68d3      	ldr	r3, [r2, #12]
 8003e3c:	f023 0307 	bic.w	r3, r3, #7
 8003e40:	4318      	orrs	r0, r3
 8003e42:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick ();
 8003e44:	f7fd fb8c 	bl	8001560 <HAL_GetTick>
 8003e48:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e4a:	4d07      	ldr	r5, [pc, #28]	; (8003e68 <HAL_PWREx_ConfigSupply+0x4c>)
 8003e4c:	686b      	ldr	r3, [r5, #4]
 8003e4e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003e52:	d107      	bne.n	8003e64 <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e54:	f7fd fb84 	bl	8001560 <HAL_GetTick>
 8003e58:	1b00      	subs	r0, r0, r4
 8003e5a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e5e:	d9f5      	bls.n	8003e4c <HAL_PWREx_ConfigSupply+0x30>
      return HAL_ERROR;
 8003e60:	2001      	movs	r0, #1
 8003e62:	e7e8      	b.n	8003e36 <HAL_PWREx_ConfigSupply+0x1a>
  return HAL_OK;
 8003e64:	2000      	movs	r0, #0
 8003e66:	e7e6      	b.n	8003e36 <HAL_PWREx_ConfigSupply+0x1a>
 8003e68:	58024800 	.word	0x58024800

08003e6c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	f000 8318 	beq.w	80044a2 <HAL_RCC_OscConfig+0x636>
{
 8003e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e74:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	6803      	ldr	r3, [r0, #0]
 8003e78:	f013 0f01 	tst.w	r3, #1
 8003e7c:	d025      	beq.n	8003eca <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7e:	4a94      	ldr	r2, [pc, #592]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003e80:	6913      	ldr	r3, [r2, #16]
 8003e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e86:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d015      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4c>
 8003e8c:	2b18      	cmp	r3, #24
 8003e8e:	d00f      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e90:	6863      	ldr	r3, [r4, #4]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d03f      	beq.n	8003f18 <HAL_RCC_OscConfig+0xac>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d153      	bne.n	8003f44 <HAL_RCC_OscConfig+0xd8>
 8003e9c:	4b8c      	ldr	r3, [pc, #560]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e038      	b.n	8003f22 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003eb0:	f002 0203 	and.w	r2, r2, #3
 8003eb4:	2a02      	cmp	r2, #2
 8003eb6:	d1eb      	bne.n	8003e90 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	4b85      	ldr	r3, [pc, #532]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ec0:	d003      	beq.n	8003eca <HAL_RCC_OscConfig+0x5e>
 8003ec2:	6863      	ldr	r3, [r4, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 82ee 	beq.w	80044a6 <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	f013 0f02 	tst.w	r3, #2
 8003ed0:	f000 80a1 	beq.w	8004016 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed4:	4a7e      	ldr	r2, [pc, #504]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003ed6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ed8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003eda:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003ede:	d05a      	beq.n	8003f96 <HAL_RCC_OscConfig+0x12a>
 8003ee0:	2b18      	cmp	r3, #24
 8003ee2:	d055      	beq.n	8003f90 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ee4:	68e2      	ldr	r2, [r4, #12]
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	f000 80de 	beq.w	80040a8 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eec:	4978      	ldr	r1, [pc, #480]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003eee:	680b      	ldr	r3, [r1, #0]
 8003ef0:	f023 0319 	bic.w	r3, r3, #25
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fb32 	bl	8001560 <HAL_GetTick>
 8003efc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003efe:	4e74      	ldr	r6, [pc, #464]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003f00:	6833      	ldr	r3, [r6, #0]
 8003f02:	f013 0f04 	tst.w	r3, #4
 8003f06:	f040 80ad 	bne.w	8004064 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f0a:	f7fd fb29 	bl	8001560 <HAL_GetTick>
 8003f0e:	1b40      	subs	r0, r0, r5
 8003f10:	2802      	cmp	r0, #2
 8003f12:	d9f5      	bls.n	8003f00 <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8003f14:	2003      	movs	r0, #3
 8003f16:	e2cd      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f18:	4a6d      	ldr	r2, [pc, #436]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003f1a:	6813      	ldr	r3, [r2, #0]
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f22:	6863      	ldr	r3, [r4, #4]
 8003f24:	b32b      	cbz	r3, 8003f72 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8003f26:	f7fd fb1b 	bl	8001560 <HAL_GetTick>
 8003f2a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f2c:	4e68      	ldr	r6, [pc, #416]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003f2e:	6833      	ldr	r3, [r6, #0]
 8003f30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f34:	d1c9      	bne.n	8003eca <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f36:	f7fd fb13 	bl	8001560 <HAL_GetTick>
 8003f3a:	1b40      	subs	r0, r0, r5
 8003f3c:	2864      	cmp	r0, #100	; 0x64
 8003f3e:	d9f6      	bls.n	8003f2e <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 8003f40:	2003      	movs	r0, #3
 8003f42:	e2b7      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_OscConfig+0xf2>
 8003f4a:	4b61      	ldr	r3, [pc, #388]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e7e1      	b.n	8003f22 <HAL_RCC_OscConfig+0xb6>
 8003f5e:	4b5c      	ldr	r3, [pc, #368]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e7d7      	b.n	8003f22 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8003f72:	f7fd faf5 	bl	8001560 <HAL_GetTick>
 8003f76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f78:	4e55      	ldr	r6, [pc, #340]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003f7a:	6833      	ldr	r3, [r6, #0]
 8003f7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003f80:	d0a3      	beq.n	8003eca <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f82:	f7fd faed 	bl	8001560 <HAL_GetTick>
 8003f86:	1b40      	subs	r0, r0, r5
 8003f88:	2864      	cmp	r0, #100	; 0x64
 8003f8a:	d9f6      	bls.n	8003f7a <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8003f8c:	2003      	movs	r0, #3
 8003f8e:	e291      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f90:	f012 0f03 	tst.w	r2, #3
 8003f94:	d1a6      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f96:	4b4e      	ldr	r3, [pc, #312]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f013 0f04 	tst.w	r3, #4
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x13c>
 8003fa0:	68e3      	ldr	r3, [r4, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8281 	beq.w	80044aa <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fa8:	4a49      	ldr	r2, [pc, #292]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003faa:	6813      	ldr	r3, [r2, #0]
 8003fac:	f023 0319 	bic.w	r3, r3, #25
 8003fb0:	68e1      	ldr	r1, [r4, #12]
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 8003fb6:	f7fd fad3 	bl	8001560 <HAL_GetTick>
 8003fba:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fbc:	4e44      	ldr	r6, [pc, #272]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003fbe:	6833      	ldr	r3, [r6, #0]
 8003fc0:	f013 0f04 	tst.w	r3, #4
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc6:	f7fd facb 	bl	8001560 <HAL_GetTick>
 8003fca:	1b40      	subs	r0, r0, r5
 8003fcc:	2802      	cmp	r0, #2
 8003fce:	d9f6      	bls.n	8003fbe <HAL_RCC_OscConfig+0x152>
              return HAL_TIMEOUT;
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	e26f      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd4:	f7fd fade 	bl	8001594 <HAL_GetREVID>
 8003fd8:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fdc:	4298      	cmp	r0, r3
 8003fde:	d812      	bhi.n	8004006 <HAL_RCC_OscConfig+0x19a>
 8003fe0:	6922      	ldr	r2, [r4, #16]
 8003fe2:	2a40      	cmp	r2, #64	; 0x40
 8003fe4:	d007      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x18a>
 8003fe6:	493a      	ldr	r1, [pc, #232]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003fe8:	684b      	ldr	r3, [r1, #4]
 8003fea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003ff2:	604b      	str	r3, [r1, #4]
 8003ff4:	e00f      	b.n	8004016 <HAL_RCC_OscConfig+0x1aa>
 8003ff6:	4a36      	ldr	r2, [pc, #216]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8003ff8:	6853      	ldr	r3, [r2, #4]
 8003ffa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004002:	6053      	str	r3, [r2, #4]
 8004004:	e007      	b.n	8004016 <HAL_RCC_OscConfig+0x1aa>
 8004006:	4a32      	ldr	r2, [pc, #200]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8004008:	6853      	ldr	r3, [r2, #4]
 800400a:	6921      	ldr	r1, [r4, #16]
 800400c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004010:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004014:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	f013 0f10 	tst.w	r3, #16
 800401c:	f000 8088 	beq.w	8004130 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004020:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8004022:	6913      	ldr	r3, [r2, #16]
 8004024:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004028:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800402a:	2b08      	cmp	r3, #8
 800402c:	d056      	beq.n	80040dc <HAL_RCC_OscConfig+0x270>
 800402e:	2b18      	cmp	r3, #24
 8004030:	d050      	beq.n	80040d4 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004032:	69e3      	ldr	r3, [r4, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80b8 	beq.w	80041aa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800403a:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 800403c:	6813      	ldr	r3, [r2, #0]
 800403e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd fa8c 	bl	8001560 <HAL_GetTick>
 8004048:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800404a:	4e21      	ldr	r6, [pc, #132]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 800404c:	6833      	ldr	r3, [r6, #0]
 800404e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004052:	f040 8088 	bne.w	8004166 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004056:	f7fd fa83 	bl	8001560 <HAL_GetTick>
 800405a:	1b40      	subs	r0, r0, r5
 800405c:	2802      	cmp	r0, #2
 800405e:	d9f5      	bls.n	800404c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004060:	2003      	movs	r0, #3
 8004062:	e227      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	f7fd fa96 	bl	8001594 <HAL_GetREVID>
 8004068:	f241 0303 	movw	r3, #4099	; 0x1003
 800406c:	4298      	cmp	r0, r3
 800406e:	d812      	bhi.n	8004096 <HAL_RCC_OscConfig+0x22a>
 8004070:	6922      	ldr	r2, [r4, #16]
 8004072:	2a40      	cmp	r2, #64	; 0x40
 8004074:	d007      	beq.n	8004086 <HAL_RCC_OscConfig+0x21a>
 8004076:	4916      	ldr	r1, [pc, #88]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8004078:	684b      	ldr	r3, [r1, #4]
 800407a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800407e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004082:	604b      	str	r3, [r1, #4]
 8004084:	e7c7      	b.n	8004016 <HAL_RCC_OscConfig+0x1aa>
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8004088:	6853      	ldr	r3, [r2, #4]
 800408a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800408e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004092:	6053      	str	r3, [r2, #4]
 8004094:	e7bf      	b.n	8004016 <HAL_RCC_OscConfig+0x1aa>
 8004096:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 8004098:	6853      	ldr	r3, [r2, #4]
 800409a:	6921      	ldr	r1, [r4, #16]
 800409c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80040a4:	6053      	str	r3, [r2, #4]
 80040a6:	e7b6      	b.n	8004016 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 80040a8:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 80040aa:	6813      	ldr	r3, [r2, #0]
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040b2:	f7fd fa55 	bl	8001560 <HAL_GetTick>
 80040b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040b8:	4e05      	ldr	r6, [pc, #20]	; (80040d0 <HAL_RCC_OscConfig+0x264>)
 80040ba:	6833      	ldr	r3, [r6, #0]
 80040bc:	f013 0f04 	tst.w	r3, #4
 80040c0:	d0a9      	beq.n	8004016 <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c2:	f7fd fa4d 	bl	8001560 <HAL_GetTick>
 80040c6:	1b40      	subs	r0, r0, r5
 80040c8:	2802      	cmp	r0, #2
 80040ca:	d9f6      	bls.n	80040ba <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 80040cc:	2003      	movs	r0, #3
 80040ce:	e1f1      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
 80040d0:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80040d4:	f002 0203 	and.w	r2, r2, #3
 80040d8:	2a01      	cmp	r2, #1
 80040da:	d1aa      	bne.n	8004032 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040dc:	4ba1      	ldr	r3, [pc, #644]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80040e4:	d003      	beq.n	80040ee <HAL_RCC_OscConfig+0x282>
 80040e6:	69e3      	ldr	r3, [r4, #28]
 80040e8:	2b80      	cmp	r3, #128	; 0x80
 80040ea:	f040 81e0 	bne.w	80044ae <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ee:	f7fd fa51 	bl	8001594 <HAL_GetREVID>
 80040f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80040f6:	4298      	cmp	r0, r3
 80040f8:	d812      	bhi.n	8004120 <HAL_RCC_OscConfig+0x2b4>
 80040fa:	6a22      	ldr	r2, [r4, #32]
 80040fc:	2a20      	cmp	r2, #32
 80040fe:	d007      	beq.n	8004110 <HAL_RCC_OscConfig+0x2a4>
 8004100:	4998      	ldr	r1, [pc, #608]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004102:	684b      	ldr	r3, [r1, #4]
 8004104:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004108:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800410c:	604b      	str	r3, [r1, #4]
 800410e:	e00f      	b.n	8004130 <HAL_RCC_OscConfig+0x2c4>
 8004110:	4a94      	ldr	r2, [pc, #592]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004112:	6853      	ldr	r3, [r2, #4]
 8004114:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800411c:	6053      	str	r3, [r2, #4]
 800411e:	e007      	b.n	8004130 <HAL_RCC_OscConfig+0x2c4>
 8004120:	4a90      	ldr	r2, [pc, #576]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004122:	68d3      	ldr	r3, [r2, #12]
 8004124:	6a21      	ldr	r1, [r4, #32]
 8004126:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800412a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800412e:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	f013 0f08 	tst.w	r3, #8
 8004136:	d060      	beq.n	80041fa <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004138:	6963      	ldr	r3, [r4, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d049      	beq.n	80041d2 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4a89      	ldr	r2, [pc, #548]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004140:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd fa0a 	bl	8001560 <HAL_GetTick>
 800414c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800414e:	4e85      	ldr	r6, [pc, #532]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004150:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004152:	f013 0f02 	tst.w	r3, #2
 8004156:	d150      	bne.n	80041fa <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004158:	f7fd fa02 	bl	8001560 <HAL_GetTick>
 800415c:	1b40      	subs	r0, r0, r5
 800415e:	2802      	cmp	r0, #2
 8004160:	d9f6      	bls.n	8004150 <HAL_RCC_OscConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 8004162:	2003      	movs	r0, #3
 8004164:	e1a6      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004166:	f7fd fa15 	bl	8001594 <HAL_GetREVID>
 800416a:	f241 0303 	movw	r3, #4099	; 0x1003
 800416e:	4298      	cmp	r0, r3
 8004170:	d812      	bhi.n	8004198 <HAL_RCC_OscConfig+0x32c>
 8004172:	6a22      	ldr	r2, [r4, #32]
 8004174:	2a20      	cmp	r2, #32
 8004176:	d007      	beq.n	8004188 <HAL_RCC_OscConfig+0x31c>
 8004178:	497a      	ldr	r1, [pc, #488]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 800417a:	684b      	ldr	r3, [r1, #4]
 800417c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004180:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004184:	604b      	str	r3, [r1, #4]
 8004186:	e7d3      	b.n	8004130 <HAL_RCC_OscConfig+0x2c4>
 8004188:	4a76      	ldr	r2, [pc, #472]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 800418a:	6853      	ldr	r3, [r2, #4]
 800418c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004190:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004194:	6053      	str	r3, [r2, #4]
 8004196:	e7cb      	b.n	8004130 <HAL_RCC_OscConfig+0x2c4>
 8004198:	4a72      	ldr	r2, [pc, #456]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 800419a:	68d3      	ldr	r3, [r2, #12]
 800419c:	6a21      	ldr	r1, [r4, #32]
 800419e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80041a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80041a6:	60d3      	str	r3, [r2, #12]
 80041a8:	e7c2      	b.n	8004130 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 80041aa:	4a6e      	ldr	r2, [pc, #440]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 80041ac:	6813      	ldr	r3, [r2, #0]
 80041ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80041b4:	f7fd f9d4 	bl	8001560 <HAL_GetTick>
 80041b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041ba:	4e6a      	ldr	r6, [pc, #424]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 80041bc:	6833      	ldr	r3, [r6, #0]
 80041be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041c2:	d0b5      	beq.n	8004130 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041c4:	f7fd f9cc 	bl	8001560 <HAL_GetTick>
 80041c8:	1b40      	subs	r0, r0, r5
 80041ca:	2802      	cmp	r0, #2
 80041cc:	d9f6      	bls.n	80041bc <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80041ce:	2003      	movs	r0, #3
 80041d0:	e170      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d2:	4a64      	ldr	r2, [pc, #400]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 80041d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fd f9c0 	bl	8001560 <HAL_GetTick>
 80041e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041e2:	4e60      	ldr	r6, [pc, #384]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 80041e4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80041e6:	f013 0f02 	tst.w	r3, #2
 80041ea:	d006      	beq.n	80041fa <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ec:	f7fd f9b8 	bl	8001560 <HAL_GetTick>
 80041f0:	1b40      	subs	r0, r0, r5
 80041f2:	2802      	cmp	r0, #2
 80041f4:	d9f6      	bls.n	80041e4 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 80041f6:	2003      	movs	r0, #3
 80041f8:	e15c      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	f013 0f20 	tst.w	r3, #32
 8004200:	d029      	beq.n	8004256 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004202:	69a3      	ldr	r3, [r4, #24]
 8004204:	b19b      	cbz	r3, 800422e <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004206:	4a57      	ldr	r2, [pc, #348]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004208:	6813      	ldr	r3, [r2, #0]
 800420a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800420e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004210:	f7fd f9a6 	bl	8001560 <HAL_GetTick>
 8004214:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004216:	4e53      	ldr	r6, [pc, #332]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004218:	6833      	ldr	r3, [r6, #0]
 800421a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800421e:	d11a      	bne.n	8004256 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004220:	f7fd f99e 	bl	8001560 <HAL_GetTick>
 8004224:	1b40      	subs	r0, r0, r5
 8004226:	2802      	cmp	r0, #2
 8004228:	d9f6      	bls.n	8004218 <HAL_RCC_OscConfig+0x3ac>
        {
          return HAL_TIMEOUT;
 800422a:	2003      	movs	r0, #3
 800422c:	e142      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800422e:	4a4d      	ldr	r2, [pc, #308]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004230:	6813      	ldr	r3, [r2, #0]
 8004232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004236:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004238:	f7fd f992 	bl	8001560 <HAL_GetTick>
 800423c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800423e:	4e49      	ldr	r6, [pc, #292]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004240:	6833      	ldr	r3, [r6, #0]
 8004242:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004246:	d006      	beq.n	8004256 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004248:	f7fd f98a 	bl	8001560 <HAL_GetTick>
 800424c:	1b40      	subs	r0, r0, r5
 800424e:	2802      	cmp	r0, #2
 8004250:	d9f6      	bls.n	8004240 <HAL_RCC_OscConfig+0x3d4>
        {
          return HAL_TIMEOUT;
 8004252:	2003      	movs	r0, #3
 8004254:	e12e      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	f013 0f04 	tst.w	r3, #4
 800425c:	d121      	bne.n	80042a2 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004260:	2a00      	cmp	r2, #0
 8004262:	f000 8126 	beq.w	80044b2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004266:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	2b18      	cmp	r3, #24
 8004270:	f000 80ee 	beq.w	8004450 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004274:	2a02      	cmp	r2, #2
 8004276:	d079      	beq.n	800436c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004278:	4a3a      	ldr	r2, [pc, #232]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004282:	f7fd f96d 	bl	8001560 <HAL_GetTick>
 8004286:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004288:	4d36      	ldr	r5, [pc, #216]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004290:	f000 80dc 	beq.w	800444c <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd f964 	bl	8001560 <HAL_GetTick>
 8004298:	1b00      	subs	r0, r0, r4
 800429a:	2802      	cmp	r0, #2
 800429c:	d9f5      	bls.n	800428a <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 800429e:	2003      	movs	r0, #3
 80042a0:	e108      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 80042a2:	4a31      	ldr	r2, [pc, #196]	; (8004368 <HAL_RCC_OscConfig+0x4fc>)
 80042a4:	6813      	ldr	r3, [r2, #0]
 80042a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042aa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80042ac:	f7fd f958 	bl	8001560 <HAL_GetTick>
 80042b0:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042b2:	4e2d      	ldr	r6, [pc, #180]	; (8004368 <HAL_RCC_OscConfig+0x4fc>)
 80042b4:	6833      	ldr	r3, [r6, #0]
 80042b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80042ba:	d106      	bne.n	80042ca <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042bc:	f7fd f950 	bl	8001560 <HAL_GetTick>
 80042c0:	1b40      	subs	r0, r0, r5
 80042c2:	2864      	cmp	r0, #100	; 0x64
 80042c4:	d9f6      	bls.n	80042b4 <HAL_RCC_OscConfig+0x448>
        return HAL_TIMEOUT;
 80042c6:	2003      	movs	r0, #3
 80042c8:	e0f4      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ca:	68a3      	ldr	r3, [r4, #8]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCC_OscConfig+0x47a>
 80042d0:	bb0b      	cbnz	r3, 8004316 <HAL_RCC_OscConfig+0x4aa>
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 80042d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	671a      	str	r2, [r3, #112]	; 0x70
 80042dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042de:	f022 0204 	bic.w	r2, r2, #4
 80042e2:	671a      	str	r2, [r3, #112]	; 0x70
 80042e4:	e004      	b.n	80042f0 <HAL_RCC_OscConfig+0x484>
 80042e6:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f0:	68a3      	ldr	r3, [r4, #8]
 80042f2:	b333      	cbz	r3, 8004342 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 80042f4:	f7fd f934 	bl	8001560 <HAL_GetTick>
 80042f8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042fa:	4e1a      	ldr	r6, [pc, #104]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004300:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004302:	f013 0f02 	tst.w	r3, #2
 8004306:	d1aa      	bne.n	800425e <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004308:	f7fd f92a 	bl	8001560 <HAL_GetTick>
 800430c:	1b40      	subs	r0, r0, r5
 800430e:	42b8      	cmp	r0, r7
 8004310:	d9f6      	bls.n	8004300 <HAL_RCC_OscConfig+0x494>
          return HAL_TIMEOUT;
 8004312:	2003      	movs	r0, #3
 8004314:	e0ce      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004316:	2b05      	cmp	r3, #5
 8004318:	d009      	beq.n	800432e <HAL_RCC_OscConfig+0x4c2>
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 800431c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	671a      	str	r2, [r3, #112]	; 0x70
 8004324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004326:	f022 0204 	bic.w	r2, r2, #4
 800432a:	671a      	str	r2, [r3, #112]	; 0x70
 800432c:	e7e0      	b.n	80042f0 <HAL_RCC_OscConfig+0x484>
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
 8004330:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004332:	f042 0204 	orr.w	r2, r2, #4
 8004336:	671a      	str	r2, [r3, #112]	; 0x70
 8004338:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	671a      	str	r2, [r3, #112]	; 0x70
 8004340:	e7d6      	b.n	80042f0 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8004342:	f7fd f90d 	bl	8001560 <HAL_GetTick>
 8004346:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004348:	4e06      	ldr	r6, [pc, #24]	; (8004364 <HAL_RCC_OscConfig+0x4f8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800434e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004350:	f013 0f02 	tst.w	r3, #2
 8004354:	d083      	beq.n	800425e <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fd f903 	bl	8001560 <HAL_GetTick>
 800435a:	1b40      	subs	r0, r0, r5
 800435c:	42b8      	cmp	r0, r7
 800435e:	d9f6      	bls.n	800434e <HAL_RCC_OscConfig+0x4e2>
          return HAL_TIMEOUT;
 8004360:	2003      	movs	r0, #3
 8004362:	e0a7      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
 8004364:	58024400 	.word	0x58024400
 8004368:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 800436c:	4a58      	ldr	r2, [pc, #352]	; (80044d0 <HAL_RCC_OscConfig+0x664>)
 800436e:	6813      	ldr	r3, [r2, #0]
 8004370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004374:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004376:	f7fd f8f3 	bl	8001560 <HAL_GetTick>
 800437a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800437c:	4e54      	ldr	r6, [pc, #336]	; (80044d0 <HAL_RCC_OscConfig+0x664>)
 800437e:	6833      	ldr	r3, [r6, #0]
 8004380:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004384:	d006      	beq.n	8004394 <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004386:	f7fd f8eb 	bl	8001560 <HAL_GetTick>
 800438a:	1b40      	subs	r0, r0, r5
 800438c:	2802      	cmp	r0, #2
 800438e:	d9f6      	bls.n	800437e <HAL_RCC_OscConfig+0x512>
            return HAL_TIMEOUT;
 8004390:	2003      	movs	r0, #3
 8004392:	e08f      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004394:	4b4e      	ldr	r3, [pc, #312]	; (80044d0 <HAL_RCC_OscConfig+0x664>)
 8004396:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004398:	4a4e      	ldr	r2, [pc, #312]	; (80044d4 <HAL_RCC_OscConfig+0x668>)
 800439a:	400a      	ands	r2, r1
 800439c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800439e:	430a      	orrs	r2, r1
 80043a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80043a2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
 80043a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80043aa:	3a01      	subs	r2, #1
 80043ac:	0252      	lsls	r2, r2, #9
 80043ae:	b292      	uxth	r2, r2
 80043b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80043b2:	3901      	subs	r1, #1
 80043b4:	0409      	lsls	r1, r1, #16
 80043b6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80043ba:	430a      	orrs	r2, r1
 80043bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80043be:	3901      	subs	r1, #1
 80043c0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80043c4:	430a      	orrs	r2, r1
 80043c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80043c8:	3901      	subs	r1, #1
 80043ca:	0609      	lsls	r1, r1, #24
 80043cc:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80043d0:	430a      	orrs	r2, r1
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80043de:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80043e0:	4a3d      	ldr	r2, [pc, #244]	; (80044d8 <HAL_RCC_OscConfig+0x66c>)
 80043e2:	4002      	ands	r2, r0
 80043e4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ec:	f022 020c 	bic.w	r2, r2, #12
 80043f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80043f2:	430a      	orrs	r2, r1
 80043f4:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	f022 0202 	bic.w	r2, r2, #2
 80043fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80043fe:	430a      	orrs	r2, r1
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004410:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004428:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800442a:	f7fd f899 	bl	8001560 <HAL_GetTick>
 800442e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004430:	4d27      	ldr	r5, [pc, #156]	; (80044d0 <HAL_RCC_OscConfig+0x664>)
 8004432:	682b      	ldr	r3, [r5, #0]
 8004434:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004438:	d106      	bne.n	8004448 <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443a:	f7fd f891 	bl	8001560 <HAL_GetTick>
 800443e:	1b00      	subs	r0, r0, r4
 8004440:	2802      	cmp	r0, #2
 8004442:	d9f6      	bls.n	8004432 <HAL_RCC_OscConfig+0x5c6>
            return HAL_TIMEOUT;
 8004444:	2003      	movs	r0, #3
 8004446:	e035      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004448:	2000      	movs	r0, #0
 800444a:	e033      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
 800444c:	2000      	movs	r0, #0
 800444e:	e031      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004450:	4b1f      	ldr	r3, [pc, #124]	; (80044d0 <HAL_RCC_OscConfig+0x664>)
 8004452:	6a99      	ldr	r1, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004456:	2a01      	cmp	r2, #1
 8004458:	d02d      	beq.n	80044b6 <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004460:	4282      	cmp	r2, r0
 8004462:	d12a      	bne.n	80044ba <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004464:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004468:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800446a:	4291      	cmp	r1, r2
 800446c:	d127      	bne.n	80044be <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800446e:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8004472:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004474:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004476:	4291      	cmp	r1, r2
 8004478:	d123      	bne.n	80044c2 <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800447a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800447e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004480:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004482:	4291      	cmp	r1, r2
 8004484:	d11f      	bne.n	80044c6 <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004486:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800448a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800448c:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800448e:	4291      	cmp	r1, r2
 8004490:	d11b      	bne.n	80044ca <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004492:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004496:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004498:	3801      	subs	r0, #1
  return HAL_OK;
 800449a:	1a18      	subs	r0, r3, r0
 800449c:	bf18      	it	ne
 800449e:	2001      	movne	r0, #1
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 80044a2:	2001      	movs	r0, #1
}
 80044a4:	4770      	bx	lr
        return HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
 80044a8:	e004      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 80044aa:	2001      	movs	r0, #1
 80044ac:	e002      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 80044ae:	2001      	movs	r0, #1
 80044b0:	e000      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 80044b2:	2000      	movs	r0, #0
}
 80044b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80044b6:	2001      	movs	r0, #1
 80044b8:	e7fc      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
 80044ba:	2001      	movs	r0, #1
 80044bc:	e7fa      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
 80044be:	2001      	movs	r0, #1
 80044c0:	e7f8      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
 80044c2:	2001      	movs	r0, #1
 80044c4:	e7f6      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
 80044c6:	2001      	movs	r0, #1
 80044c8:	e7f4      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
 80044ca:	2001      	movs	r0, #1
 80044cc:	e7f2      	b.n	80044b4 <HAL_RCC_OscConfig+0x648>
 80044ce:	bf00      	nop
 80044d0:	58024400 	.word	0x58024400
 80044d4:	fffffc0c 	.word	0xfffffc0c
 80044d8:	ffff0007 	.word	0xffff0007

080044dc <HAL_RCC_EnableCSS>:
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80044dc:	4a02      	ldr	r2, [pc, #8]	; (80044e8 <HAL_RCC_EnableCSS+0xc>)
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e4:	6013      	str	r3, [r2, #0]
}
 80044e6:	4770      	bx	lr
 80044e8:	58024400 	.word	0x58024400

080044ec <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ec:	4b73      	ldr	r3, [pc, #460]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1d0>)
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	f000 80dc 	beq.w	80046b2 <HAL_RCC_GetSysClockFreq+0x1c6>
 80044fa:	2b18      	cmp	r3, #24
 80044fc:	d010      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x34>
 80044fe:	b10b      	cbz	r3, 8004504 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004500:	486f      	ldr	r0, [pc, #444]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004502:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004504:	4b6d      	ldr	r3, [pc, #436]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1d0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f013 0f20 	tst.w	r3, #32
 800450c:	f000 80d3 	beq.w	80046b6 <HAL_RCC_GetSysClockFreq+0x1ca>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004510:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1d0>)
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004518:	4b6a      	ldr	r3, [pc, #424]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800451a:	fa23 f000 	lsr.w	r0, r3, r0
 800451e:	4770      	bx	lr
{
 8004520:	b430      	push	{r4, r5}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004522:	4a66      	ldr	r2, [pc, #408]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1d0>)
 8004524:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004526:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004528:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800452c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800452e:	6b53      	ldr	r3, [r2, #52]	; 0x34

    if (pllm != 0U)
 8004530:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8004534:	f000 809e 	beq.w	8004674 <HAL_RCC_GetSysClockFreq+0x188>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004538:	f3c3 03cc 	ubfx	r3, r3, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800453c:	f005 0501 	and.w	r5, r5, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004540:	fb05 f303 	mul.w	r3, r5, r3
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800454c:	f001 0103 	and.w	r1, r1, #3
 8004550:	2901      	cmp	r1, #1
 8004552:	d064      	beq.n	800461e <HAL_RCC_GetSysClockFreq+0x132>
 8004554:	2902      	cmp	r1, #2
 8004556:	f000 808f 	beq.w	8004678 <HAL_RCC_GetSysClockFreq+0x18c>
 800455a:	b1e1      	cbz	r1, 8004596 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800455c:	4b57      	ldr	r3, [pc, #348]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1d0>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004564:	ee07 3a10 	vmov	s14, r3
 8004568:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800456c:	eddf 6a56 	vldr	s13, [pc, #344]	; 80046c8 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004570:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800457c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004580:	ee07 0a10 	vmov	s14, r0
 8004584:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004588:	ed9f 6a50 	vldr	s12, [pc, #320]	; 80046cc <HAL_RCC_GetSysClockFreq+0x1e0>
 800458c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004590:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8004594:	e05f      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004596:	6813      	ldr	r3, [r2, #0]
 8004598:	f013 0f20 	tst.w	r3, #32
 800459c:	d022      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800459e:	6811      	ldr	r1, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045a2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80045a6:	4a47      	ldr	r2, [pc, #284]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80045a8:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045aa:	ee07 2a10 	vmov	s14, r2
 80045ae:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80045b2:	ee07 0a10 	vmov	s14, r0
 80045b6:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80045ba:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80045be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c2:	ee06 3a90 	vmov	s13, r3
 80045c6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80045ca:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80046c8 <HAL_RCC_GetSysClockFreq+0x1dc>
 80045ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	e038      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045e4:	4b35      	ldr	r3, [pc, #212]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1d0>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ec:	ee07 3a10 	vmov	s14, r3
 80045f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045f4:	eddf 6a34 	vldr	s13, [pc, #208]	; 80046c8 <HAL_RCC_GetSysClockFreq+0x1dc>
 80045f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004608:	ee07 0a10 	vmov	s14, r0
 800460c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004610:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x1e4>
 8004614:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800461c:	e01b      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800461e:	4b27      	ldr	r3, [pc, #156]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1d0>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a10 	vmov	s14, r3
 800462a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800462e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046c8 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004632:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800463a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800463e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004642:	ee07 0a10 	vmov	s14, r0
 8004646:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800464a:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80046cc <HAL_RCC_GetSysClockFreq+0x1e0>
 800464e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004652:	ee67 7a87 	vmul.f32	s15, s15, s14
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004656:	4b19      	ldr	r3, [pc, #100]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1d0>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800465e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004660:	ee07 3a10 	vmov	s14, r3
 8004664:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004668:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800466c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8004670:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8004674:	bc30      	pop	{r4, r5}
 8004676:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <HAL_RCC_GetSysClockFreq+0x1d0>)
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004680:	ee07 3a10 	vmov	s14, r3
 8004684:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004688:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80046c8 <HAL_RCC_GetSysClockFreq+0x1dc>
 800468c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800469c:	ee07 0a10 	vmov	s14, r0
 80046a0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80046a4:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80046d4 <HAL_RCC_GetSysClockFreq+0x1e8>
 80046a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80046ac:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 80046b0:	e7d1      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x16a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046b2:	4809      	ldr	r0, [pc, #36]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 80046b4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046b6:	4803      	ldr	r0, [pc, #12]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	58024400 	.word	0x58024400
 80046c0:	003d0900 	.word	0x003d0900
 80046c4:	03d09000 	.word	0x03d09000
 80046c8:	39000000 	.word	0x39000000
 80046cc:	4a742400 	.word	0x4a742400
 80046d0:	4c742400 	.word	0x4c742400
 80046d4:	4bb71b00 	.word	0x4bb71b00
 80046d8:	016e3600 	.word	0x016e3600

080046dc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80046dc:	2800      	cmp	r0, #0
 80046de:	f000 80c3 	beq.w	8004868 <HAL_RCC_ClockConfig+0x18c>
{
 80046e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e6:	460d      	mov	r5, r1
 80046e8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046ea:	4b65      	ldr	r3, [pc, #404]	; (8004880 <HAL_RCC_ClockConfig+0x1a4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	428b      	cmp	r3, r1
 80046f4:	d20b      	bcs.n	800470e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4a62      	ldr	r2, [pc, #392]	; (8004880 <HAL_RCC_ClockConfig+0x1a4>)
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	f023 030f 	bic.w	r3, r3, #15
 80046fe:	430b      	orrs	r3, r1
 8004700:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	6813      	ldr	r3, [r2, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	428b      	cmp	r3, r1
 800470a:	f040 80af 	bne.w	800486c <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	f013 0f04 	tst.w	r3, #4
 8004714:	d00c      	beq.n	8004730 <HAL_RCC_ClockConfig+0x54>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004716:	6922      	ldr	r2, [r4, #16]
 8004718:	4b5a      	ldr	r3, [pc, #360]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004720:	429a      	cmp	r2, r3
 8004722:	d905      	bls.n	8004730 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004724:	4957      	ldr	r1, [pc, #348]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 8004726:	698b      	ldr	r3, [r1, #24]
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	4313      	orrs	r3, r2
 800472e:	618b      	str	r3, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	f013 0f08 	tst.w	r3, #8
 8004736:	d00c      	beq.n	8004752 <HAL_RCC_ClockConfig+0x76>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004738:	6962      	ldr	r2, [r4, #20]
 800473a:	4b52      	ldr	r3, [pc, #328]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004742:	429a      	cmp	r2, r3
 8004744:	d905      	bls.n	8004752 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004746:	494f      	ldr	r1, [pc, #316]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 8004748:	69cb      	ldr	r3, [r1, #28]
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	4313      	orrs	r3, r2
 8004750:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	f013 0f10 	tst.w	r3, #16
 8004758:	d00c      	beq.n	8004774 <HAL_RCC_ClockConfig+0x98>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800475a:	69a2      	ldr	r2, [r4, #24]
 800475c:	4b49      	ldr	r3, [pc, #292]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004764:	429a      	cmp	r2, r3
 8004766:	d905      	bls.n	8004774 <HAL_RCC_ClockConfig+0x98>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004768:	4946      	ldr	r1, [pc, #280]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 800476a:	69cb      	ldr	r3, [r1, #28]
 800476c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004770:	4313      	orrs	r3, r2
 8004772:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	f013 0f20 	tst.w	r3, #32
 800477a:	d00c      	beq.n	8004796 <HAL_RCC_ClockConfig+0xba>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800477c:	69e2      	ldr	r2, [r4, #28]
 800477e:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004786:	429a      	cmp	r2, r3
 8004788:	d905      	bls.n	8004796 <HAL_RCC_ClockConfig+0xba>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800478a:	493e      	ldr	r1, [pc, #248]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 800478c:	6a0b      	ldr	r3, [r1, #32]
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	4313      	orrs	r3, r2
 8004794:	620b      	str	r3, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	f013 0f02 	tst.w	r3, #2
 800479c:	d074      	beq.n	8004888 <HAL_RCC_ClockConfig+0x1ac>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800479e:	68e1      	ldr	r1, [r4, #12]
 80047a0:	4a38      	ldr	r2, [pc, #224]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 80047a2:	6992      	ldr	r2, [r2, #24]
 80047a4:	f002 020f 	and.w	r2, r2, #15
 80047a8:	4291      	cmp	r1, r2
 80047aa:	d965      	bls.n	8004878 <HAL_RCC_ClockConfig+0x19c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4a35      	ldr	r2, [pc, #212]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 80047ae:	6993      	ldr	r3, [r2, #24]
 80047b0:	f023 030f 	bic.w	r3, r3, #15
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6193      	str	r3, [r2, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	f013 0f01 	tst.w	r3, #1
 80047be:	d041      	beq.n	8004844 <HAL_RCC_ClockConfig+0x168>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047c0:	4a30      	ldr	r2, [pc, #192]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 80047c2:	6993      	ldr	r3, [r2, #24]
 80047c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047c8:	68a1      	ldr	r1, [r4, #8]
 80047ca:	430b      	orrs	r3, r1
 80047cc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ce:	6862      	ldr	r2, [r4, #4]
 80047d0:	2a02      	cmp	r2, #2
 80047d2:	d00a      	beq.n	80047ea <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d4:	2a03      	cmp	r2, #3
 80047d6:	d027      	beq.n	8004828 <HAL_RCC_ClockConfig+0x14c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047d8:	2a01      	cmp	r2, #1
 80047da:	d02c      	beq.n	8004836 <HAL_RCC_ClockConfig+0x15a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047dc:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f013 0f04 	tst.w	r3, #4
 80047e4:	d106      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 80047e6:	2001      	movs	r0, #1
 80047e8:	e0c1      	b.n	800496e <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ea:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80047f2:	d03d      	beq.n	8004870 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047f4:	4923      	ldr	r1, [pc, #140]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 80047f6:	690b      	ldr	r3, [r1, #16]
 80047f8:	f023 0307 	bic.w	r3, r3, #7
 80047fc:	4313      	orrs	r3, r2
 80047fe:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8004800:	f7fc feae 	bl	8001560 <HAL_GetTick>
 8004804:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	4f1f      	ldr	r7, [pc, #124]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004808:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004812:	6862      	ldr	r2, [r4, #4]
 8004814:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004818:	d014      	beq.n	8004844 <HAL_RCC_ClockConfig+0x168>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481a:	f7fc fea1 	bl	8001560 <HAL_GetTick>
 800481e:	1b80      	subs	r0, r0, r6
 8004820:	4540      	cmp	r0, r8
 8004822:	d9f3      	bls.n	800480c <HAL_RCC_ClockConfig+0x130>
            return HAL_TIMEOUT;
 8004824:	2003      	movs	r0, #3
 8004826:	e0a2      	b.n	800496e <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004830:	d1e0      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 8004832:	2001      	movs	r0, #1
 8004834:	e09b      	b.n	800496e <HAL_RCC_ClockConfig+0x292>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800483e:	d1d9      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x118>
          return HAL_ERROR;
 8004840:	2001      	movs	r0, #1
 8004842:	e094      	b.n	800496e <HAL_RCC_ClockConfig+0x292>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	f013 0f02 	tst.w	r3, #2
 800484a:	d020      	beq.n	800488e <HAL_RCC_ClockConfig+0x1b2>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800484c:	68e2      	ldr	r2, [r4, #12]
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	429a      	cmp	r2, r3
 8004858:	d219      	bcs.n	800488e <HAL_RCC_ClockConfig+0x1b2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485a:	490a      	ldr	r1, [pc, #40]	; (8004884 <HAL_RCC_ClockConfig+0x1a8>)
 800485c:	698b      	ldr	r3, [r1, #24]
 800485e:	f023 030f 	bic.w	r3, r3, #15
 8004862:	4313      	orrs	r3, r2
 8004864:	618b      	str	r3, [r1, #24]
 8004866:	e012      	b.n	800488e <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 8004868:	2001      	movs	r0, #1
}
 800486a:	4770      	bx	lr
      return HAL_ERROR;
 800486c:	2001      	movs	r0, #1
 800486e:	e07e      	b.n	800496e <HAL_RCC_ClockConfig+0x292>
          return HAL_ERROR;
 8004870:	2001      	movs	r0, #1
 8004872:	e07c      	b.n	800496e <HAL_RCC_ClockConfig+0x292>
      return HAL_ERROR;
 8004874:	2001      	movs	r0, #1
 8004876:	e07a      	b.n	800496e <HAL_RCC_ClockConfig+0x292>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004878:	f013 0f01 	tst.w	r3, #1
 800487c:	d1a0      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xe4>
 800487e:	e7e5      	b.n	800484c <HAL_RCC_ClockConfig+0x170>
 8004880:	52002000 	.word	0x52002000
 8004884:	58024400 	.word	0x58024400
 8004888:	f013 0f01 	tst.w	r3, #1
 800488c:	d198      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xe4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800488e:	4b39      	ldr	r3, [pc, #228]	; (8004974 <HAL_RCC_ClockConfig+0x298>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	42ab      	cmp	r3, r5
 8004898:	d90a      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x1d4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4a36      	ldr	r2, [pc, #216]	; (8004974 <HAL_RCC_ClockConfig+0x298>)
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	f023 030f 	bic.w	r3, r3, #15
 80048a2:	432b      	orrs	r3, r5
 80048a4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	42ab      	cmp	r3, r5
 80048ae:	d1e1      	bne.n	8004874 <HAL_RCC_ClockConfig+0x198>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	f013 0f04 	tst.w	r3, #4
 80048b6:	d00c      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048b8:	6922      	ldr	r2, [r4, #16]
 80048ba:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <HAL_RCC_ClockConfig+0x29c>)
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d205      	bcs.n	80048d2 <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048c6:	492c      	ldr	r1, [pc, #176]	; (8004978 <HAL_RCC_ClockConfig+0x29c>)
 80048c8:	698b      	ldr	r3, [r1, #24]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	4313      	orrs	r3, r2
 80048d0:	618b      	str	r3, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	f013 0f08 	tst.w	r3, #8
 80048d8:	d00c      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048da:	6962      	ldr	r2, [r4, #20]
 80048dc:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_RCC_ClockConfig+0x29c>)
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d205      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048e8:	4923      	ldr	r1, [pc, #140]	; (8004978 <HAL_RCC_ClockConfig+0x29c>)
 80048ea:	69cb      	ldr	r3, [r1, #28]
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	f013 0f10 	tst.w	r3, #16
 80048fa:	d00c      	beq.n	8004916 <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048fc:	69a2      	ldr	r2, [r4, #24]
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <HAL_RCC_ClockConfig+0x29c>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004906:	429a      	cmp	r2, r3
 8004908:	d205      	bcs.n	8004916 <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800490a:	491b      	ldr	r1, [pc, #108]	; (8004978 <HAL_RCC_ClockConfig+0x29c>)
 800490c:	69cb      	ldr	r3, [r1, #28]
 800490e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004912:	4313      	orrs	r3, r2
 8004914:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	f013 0f20 	tst.w	r3, #32
 800491c:	d00c      	beq.n	8004938 <HAL_RCC_ClockConfig+0x25c>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800491e:	69e2      	ldr	r2, [r4, #28]
 8004920:	4b15      	ldr	r3, [pc, #84]	; (8004978 <HAL_RCC_ClockConfig+0x29c>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004928:	429a      	cmp	r2, r3
 800492a:	d205      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x25c>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800492c:	4912      	ldr	r1, [pc, #72]	; (8004978 <HAL_RCC_ClockConfig+0x29c>)
 800492e:	6a0b      	ldr	r3, [r1, #32]
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	4313      	orrs	r3, r2
 8004936:	620b      	str	r3, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004938:	f7ff fdd8 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 800493c:	490e      	ldr	r1, [pc, #56]	; (8004978 <HAL_RCC_ClockConfig+0x29c>)
 800493e:	698b      	ldr	r3, [r1, #24]
 8004940:	4a0e      	ldr	r2, [pc, #56]	; (800497c <HAL_RCC_ClockConfig+0x2a0>)
 8004942:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800494e:	698b      	ldr	r3, [r1, #24]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	5cd3      	ldrb	r3, [r2, r3]
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	fa20 f303 	lsr.w	r3, r0, r3
 800495e:	4a08      	ldr	r2, [pc, #32]	; (8004980 <HAL_RCC_ClockConfig+0x2a4>)
 8004960:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_RCC_ClockConfig+0x2a8>)
 8004964:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <HAL_RCC_ClockConfig+0x2ac>)
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	f7fc fd99 	bl	80014a0 <HAL_InitTick>
}
 800496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004972:	bf00      	nop
 8004974:	52002000 	.word	0x52002000
 8004978:	58024400 	.word	0x58024400
 800497c:	0800a664 	.word	0x0800a664
 8004980:	24000004 	.word	0x24000004
 8004984:	24000000 	.word	0x24000000
 8004988:	2400000c 	.word	0x2400000c

0800498c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800498c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800498e:	f7ff fdad 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8004992:	4a0b      	ldr	r2, [pc, #44]	; (80049c0 <HAL_RCC_GetHCLKFreq+0x34>)
 8004994:	6993      	ldr	r3, [r2, #24]
 8004996:	490b      	ldr	r1, [pc, #44]	; (80049c4 <HAL_RCC_GetHCLKFreq+0x38>)
 8004998:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800499c:	5ccb      	ldrb	r3, [r1, r3]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049a6:	6992      	ldr	r2, [r2, #24]
 80049a8:	f002 020f 	and.w	r2, r2, #15
 80049ac:	5c88      	ldrb	r0, [r1, r2]
 80049ae:	f000 001f 	and.w	r0, r0, #31
 80049b2:	fa23 f000 	lsr.w	r0, r3, r0
 80049b6:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_RCC_GetHCLKFreq+0x3c>)
 80049b8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ba:	4a04      	ldr	r2, [pc, #16]	; (80049cc <HAL_RCC_GetHCLKFreq+0x40>)
 80049bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80049be:	bd08      	pop	{r3, pc}
 80049c0:	58024400 	.word	0x58024400
 80049c4:	0800a664 	.word	0x0800a664
 80049c8:	24000004 	.word	0x24000004
 80049cc:	24000000 	.word	0x24000000

080049d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049d2:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <RCCEx_PLL2_Config+0xfc>)
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d074      	beq.n	8004ac8 <RCCEx_PLL2_Config+0xf8>
 80049de:	4606      	mov	r6, r0
 80049e0:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049e2:	4a3a      	ldr	r2, [pc, #232]	; (8004acc <RCCEx_PLL2_Config+0xfc>)
 80049e4:	6813      	ldr	r3, [r2, #0]
 80049e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ec:	f7fc fdb8 	bl	8001560 <HAL_GetTick>
 80049f0:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049f2:	4d36      	ldr	r5, [pc, #216]	; (8004acc <RCCEx_PLL2_Config+0xfc>)
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80049fa:	d006      	beq.n	8004a0a <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049fc:	f7fc fdb0 	bl	8001560 <HAL_GetTick>
 8004a00:	1b03      	subs	r3, r0, r4
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d9f6      	bls.n	80049f4 <RCCEx_PLL2_Config+0x24>
      {
        return HAL_TIMEOUT;
 8004a06:	2003      	movs	r0, #3
 8004a08:	e05f      	b.n	8004aca <RCCEx_PLL2_Config+0xfa>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a0a:	4b30      	ldr	r3, [pc, #192]	; (8004acc <RCCEx_PLL2_Config+0xfc>)
 8004a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0e:	6831      	ldr	r1, [r6, #0]
 8004a10:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8004a14:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28
 8004a1a:	68b2      	ldr	r2, [r6, #8]
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0252      	lsls	r2, r2, #9
 8004a20:	b292      	uxth	r2, r2
 8004a22:	68f1      	ldr	r1, [r6, #12]
 8004a24:	3901      	subs	r1, #1
 8004a26:	0409      	lsls	r1, r1, #16
 8004a28:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	6871      	ldr	r1, [r6, #4]
 8004a30:	3901      	subs	r1, #1
 8004a32:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004a36:	430a      	orrs	r2, r1
 8004a38:	6931      	ldr	r1, [r6, #16]
 8004a3a:	3901      	subs	r1, #1
 8004a3c:	0609      	lsls	r1, r1, #24
 8004a3e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004a42:	430a      	orrs	r2, r1
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a4c:	6971      	ldr	r1, [r6, #20]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a54:	f022 0220 	bic.w	r2, r2, #32
 8004a58:	69b1      	ldr	r1, [r6, #24]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a60:	f022 0210 	bic.w	r2, r2, #16
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a66:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004a68:	69f1      	ldr	r1, [r6, #28]
 8004a6a:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <RCCEx_PLL2_Config+0x100>)
 8004a6c:	4002      	ands	r2, r0
 8004a6e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	f042 0210 	orr.w	r2, r2, #16
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a7c:	b9c7      	cbnz	r7, 8004ab0 <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a86:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a88:	4a10      	ldr	r2, [pc, #64]	; (8004acc <RCCEx_PLL2_Config+0xfc>)
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a92:	f7fc fd65 	bl	8001560 <HAL_GetTick>
 8004a96:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a98:	4d0c      	ldr	r5, [pc, #48]	; (8004acc <RCCEx_PLL2_Config+0xfc>)
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004aa0:	d110      	bne.n	8004ac4 <RCCEx_PLL2_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004aa2:	f7fc fd5d 	bl	8001560 <HAL_GetTick>
 8004aa6:	1b00      	subs	r0, r0, r4
 8004aa8:	2802      	cmp	r0, #2
 8004aaa:	d9f6      	bls.n	8004a9a <RCCEx_PLL2_Config+0xca>
      {
        return HAL_TIMEOUT;
 8004aac:	2003      	movs	r0, #3
 8004aae:	e00c      	b.n	8004aca <RCCEx_PLL2_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ab0:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ab2:	4a06      	ldr	r2, [pc, #24]	; (8004acc <RCCEx_PLL2_Config+0xfc>)
 8004ab4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ab6:	bf0c      	ite	eq
 8004ab8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004abc:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ac2:	e7e1      	b.n	8004a88 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	e000      	b.n	8004aca <RCCEx_PLL2_Config+0xfa>
    return HAL_ERROR;
 8004ac8:	2001      	movs	r0, #1
}
 8004aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	ffff0007 	.word	0xffff0007

08004ad4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <RCCEx_PLL3_Config+0xfc>)
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d074      	beq.n	8004bcc <RCCEx_PLL3_Config+0xf8>
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ae6:	4a3a      	ldr	r2, [pc, #232]	; (8004bd0 <RCCEx_PLL3_Config+0xfc>)
 8004ae8:	6813      	ldr	r3, [r2, #0]
 8004aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af0:	f7fc fd36 	bl	8001560 <HAL_GetTick>
 8004af4:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004af6:	4d36      	ldr	r5, [pc, #216]	; (8004bd0 <RCCEx_PLL3_Config+0xfc>)
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004afe:	d006      	beq.n	8004b0e <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b00:	f7fc fd2e 	bl	8001560 <HAL_GetTick>
 8004b04:	1b03      	subs	r3, r0, r4
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d9f6      	bls.n	8004af8 <RCCEx_PLL3_Config+0x24>
      {
        return HAL_TIMEOUT;
 8004b0a:	2003      	movs	r0, #3
 8004b0c:	e05f      	b.n	8004bce <RCCEx_PLL3_Config+0xfa>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b0e:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <RCCEx_PLL3_Config+0xfc>)
 8004b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b12:	6831      	ldr	r1, [r6, #0]
 8004b14:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8004b18:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b1e:	68b2      	ldr	r2, [r6, #8]
 8004b20:	3a01      	subs	r2, #1
 8004b22:	0252      	lsls	r2, r2, #9
 8004b24:	b292      	uxth	r2, r2
 8004b26:	68f1      	ldr	r1, [r6, #12]
 8004b28:	3901      	subs	r1, #1
 8004b2a:	0409      	lsls	r1, r1, #16
 8004b2c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8004b30:	430a      	orrs	r2, r1
 8004b32:	6871      	ldr	r1, [r6, #4]
 8004b34:	3901      	subs	r1, #1
 8004b36:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	6931      	ldr	r1, [r6, #16]
 8004b3e:	3901      	subs	r1, #1
 8004b40:	0609      	lsls	r1, r1, #24
 8004b42:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8004b46:	430a      	orrs	r2, r1
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b50:	6971      	ldr	r1, [r6, #20]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b5c:	69b1      	ldr	r1, [r6, #24]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b6a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004b6c:	69f1      	ldr	r1, [r6, #28]
 8004b6e:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <RCCEx_PLL3_Config+0x100>)
 8004b70:	4002      	ands	r2, r0
 8004b72:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004b76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b80:	b9c7      	cbnz	r7, 8004bb4 <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b82:	461a      	mov	r2, r3
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b8c:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <RCCEx_PLL3_Config+0xfc>)
 8004b8e:	6813      	ldr	r3, [r2, #0]
 8004b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b96:	f7fc fce3 	bl	8001560 <HAL_GetTick>
 8004b9a:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b9c:	4d0c      	ldr	r5, [pc, #48]	; (8004bd0 <RCCEx_PLL3_Config+0xfc>)
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004ba4:	d110      	bne.n	8004bc8 <RCCEx_PLL3_Config+0xf4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ba6:	f7fc fcdb 	bl	8001560 <HAL_GetTick>
 8004baa:	1b00      	subs	r0, r0, r4
 8004bac:	2802      	cmp	r0, #2
 8004bae:	d9f6      	bls.n	8004b9e <RCCEx_PLL3_Config+0xca>
      {
        return HAL_TIMEOUT;
 8004bb0:	2003      	movs	r0, #3
 8004bb2:	e00c      	b.n	8004bce <RCCEx_PLL3_Config+0xfa>
    else if(Divider == DIVIDER_Q_UPDATE)
 8004bb4:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004bb6:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <RCCEx_PLL3_Config+0xfc>)
 8004bb8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004bba:	bf0c      	ite	eq
 8004bbc:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bc0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bc6:	e7e1      	b.n	8004b8c <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 8004bc8:	2000      	movs	r0, #0
 8004bca:	e000      	b.n	8004bce <RCCEx_PLL3_Config+0xfa>
    return HAL_ERROR;
 8004bcc:	2001      	movs	r0, #1
}
 8004bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd0:	58024400 	.word	0x58024400
 8004bd4:	ffff0007 	.word	0xffff0007

08004bd8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bdc:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bde:	6803      	ldr	r3, [r0, #0]
 8004be0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004be4:	d02b      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004be6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bec:	d021      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8004bee:	d80c      	bhi.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004bf0:	b1cb      	cbz	r3, 8004c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf6:	d106      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bf8:	2102      	movs	r1, #2
 8004bfa:	3004      	adds	r0, #4
 8004bfc:	f7ff fee8 	bl	80049d0 <RCCEx_PLL2_Config>
 8004c00:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004c02:	b9ee      	cbnz	r6, 8004c40 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004c04:	e004      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c06:	2601      	movs	r6, #1
 8004c08:	e01a      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004c0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c0e:	d108      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c10:	4a96      	ldr	r2, [pc, #600]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c12:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004c14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004c18:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	6513      	str	r3, [r2, #80]	; 0x50
 8004c1e:	2600      	movs	r6, #0
 8004c20:	e00e      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c22:	2601      	movs	r6, #1
 8004c24:	e00c      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c26:	4a91      	ldr	r2, [pc, #580]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c28:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004c30:	e7ee      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x38>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c32:	2102      	movs	r1, #2
 8004c34:	3024      	adds	r0, #36	; 0x24
 8004c36:	f7ff ff4d 	bl	8004ad4 <RCCEx_PLL3_Config>
 8004c3a:	4606      	mov	r6, r0
      break;
 8004c3c:	e7e1      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c3e:	2600      	movs	r6, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c46:	d025      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d834      	bhi.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8004c4e:	e8df f003 	tbb	[pc, r3]
 8004c52:	0a03      	.short	0x0a03
 8004c54:	1710      	.short	0x1710
 8004c56:	17          	.byte	0x17
 8004c57:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c58:	4a84      	ldr	r2, [pc, #528]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c60:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004c62:	4635      	mov	r5, r6
 8004c64:	e00d      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c66:	2100      	movs	r1, #0
 8004c68:	1d20      	adds	r0, r4, #4
 8004c6a:	f7ff feb1 	bl	80049d0 <RCCEx_PLL2_Config>
 8004c6e:	4605      	mov	r5, r0
      break;
 8004c70:	e007      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c72:	2100      	movs	r1, #0
 8004c74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c78:	f7ff ff2c 	bl	8004ad4 <RCCEx_PLL3_Config>
 8004c7c:	4605      	mov	r5, r0
      break;
 8004c7e:	e000      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c80:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8004c82:	b9e5      	cbnz	r5, 8004cbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c84:	4a79      	ldr	r2, [pc, #484]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004c86:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004c88:	f023 0307 	bic.w	r3, r3, #7
 8004c8c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	6513      	str	r3, [r2, #80]	; 0x50
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004c94:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004c9c:	d021      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ca0:	2b80      	cmp	r3, #128	; 0x80
 8004ca2:	d03b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004ca4:	d810      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8004ca6:	b39b      	cbz	r3, 8004d10 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d10a      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cac:	2100      	movs	r1, #0
 8004cae:	1d20      	adds	r0, r4, #4
 8004cb0:	f7ff fe8e 	bl	80049d0 <RCCEx_PLL2_Config>
 8004cb4:	4605      	mov	r5, r0
      break;
 8004cb6:	e00c      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004cb8:	2601      	movs	r6, #1
 8004cba:	4635      	mov	r5, r6
 8004cbc:	e7eb      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004cbe:	462e      	mov	r6, r5
 8004cc0:	e7e9      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004cc2:	2601      	movs	r6, #1
 8004cc4:	4635      	mov	r5, r6
 8004cc6:	e00c      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004cc8:	2bc0      	cmp	r3, #192	; 0xc0
 8004cca:	d002      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd0:	d11b      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 8004cd2:	bb55      	cbnz	r5, 8004d2a <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004cd4:	4a65      	ldr	r2, [pc, #404]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004cd6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004cd8:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004cdc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ce8:	d045      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004cea:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf2:	d038      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004cf4:	d81e      	bhi.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004cf6:	b383      	cbz	r3, 8004d5a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004cf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cfc:	d117      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	1d20      	adds	r0, r4, #4
 8004d02:	f7ff fe65 	bl	80049d0 <RCCEx_PLL2_Config>
 8004d06:	4605      	mov	r5, r0
      break;
 8004d08:	e01a      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004d0a:	2601      	movs	r6, #1
 8004d0c:	4635      	mov	r5, r6
 8004d0e:	e7e8      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d10:	4a56      	ldr	r2, [pc, #344]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004d1a:	e7da      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d22:	f7ff fed7 	bl	8004ad4 <RCCEx_PLL3_Config>
 8004d26:	4605      	mov	r5, r0
      break;
 8004d28:	e7d3      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004d2a:	462e      	mov	r6, r5
 8004d2c:	e7d9      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004d2e:	2601      	movs	r6, #1
 8004d30:	4635      	mov	r5, r6
 8004d32:	e020      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004d34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d38:	d002      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d3e:	d109      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 8004d40:	b9c5      	cbnz	r5, 8004d74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d42:	4a4a      	ldr	r2, [pc, #296]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004d46:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8004d4a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	6593      	str	r3, [r2, #88]	; 0x58
 8004d52:	e010      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004d54:	2601      	movs	r6, #1
 8004d56:	4635      	mov	r5, r6
 8004d58:	e00d      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5a:	4a44      	ldr	r2, [pc, #272]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004d5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d62:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004d64:	e7ec      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x168>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d66:	2100      	movs	r1, #0
 8004d68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d6c:	f7ff feb2 	bl	8004ad4 <RCCEx_PLL3_Config>
 8004d70:	4605      	mov	r5, r0
      break;
 8004d72:	e7e5      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d74:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d7c:	d023      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004d7e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d86:	d041      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004d88:	d80d      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d038      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004d8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d92:	d105      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d94:	2100      	movs	r1, #0
 8004d96:	1d20      	adds	r0, r4, #4
 8004d98:	f7ff fe1a 	bl	80049d0 <RCCEx_PLL2_Config>
 8004d9c:	4605      	mov	r5, r0
      break;
 8004d9e:	e008      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004da0:	2601      	movs	r6, #1
 8004da2:	4635      	mov	r5, r6
 8004da4:	e00f      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004da6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004daa:	d002      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8004dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004db0:	d123      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x222>
    if(ret == HAL_OK)
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	d131      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004db6:	4a2d      	ldr	r2, [pc, #180]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004db8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004dba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004dbe:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004dcc:	d02e      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->QspiClockSelection)
 8004dce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d03f      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004dd4:	d826      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8004dd6:	b133      	cbz	r3, 8004de6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d120      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ddc:	4a23      	ldr	r2, [pc, #140]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004dde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	d13a      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004dea:	4a20      	ldr	r2, [pc, #128]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004dec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004dee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004df2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004df4:	430b      	orrs	r3, r1
 8004df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004df8:	e018      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Sai4BClockSelection)
 8004dfa:	2601      	movs	r6, #1
 8004dfc:	4635      	mov	r5, r6
 8004dfe:	e7e2      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e00:	4a1a      	ldr	r2, [pc, #104]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004e02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e08:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004e0a:	e7d2      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e12:	f7ff fe5f 	bl	8004ad4 <RCCEx_PLL3_Config>
 8004e16:	4605      	mov	r5, r0
      break;
 8004e18:	e7cb      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8004e1a:	462e      	mov	r6, r5
 8004e1c:	e7d3      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch(PeriphClkInit->QspiClockSelection)
 8004e1e:	2601      	movs	r6, #1
 8004e20:	4635      	mov	r5, r6
 8004e22:	e003      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d0de      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004e28:	2601      	movs	r6, #1
 8004e2a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004e32:	d02c      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004e34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3a:	d04d      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004e3c:	d818      	bhi.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d044      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e46:	d10d      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e48:	2100      	movs	r1, #0
 8004e4a:	1d20      	adds	r0, r4, #4
 8004e4c:	f7ff fdc0 	bl	80049d0 <RCCEx_PLL2_Config>
 8004e50:	4605      	mov	r5, r0
      break;
 8004e52:	e013      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e54:	2102      	movs	r1, #2
 8004e56:	1d20      	adds	r0, r4, #4
 8004e58:	f7ff fdba 	bl	80049d0 <RCCEx_PLL2_Config>
 8004e5c:	4605      	mov	r5, r0
      break;
 8004e5e:	e7c2      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8004e60:	462e      	mov	r6, r5
 8004e62:	e7e3      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004e64:	2601      	movs	r6, #1
 8004e66:	4635      	mov	r5, r6
 8004e68:	e011      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8004e6a:	bf00      	nop
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e74:	d002      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e7a:	d124      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	d132      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e80:	4a80      	ldr	r2, [pc, #512]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e82:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004e94:	d036      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e9c:	d050      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e9e:	d827      	bhi.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004ea0:	b13b      	cbz	r3, 8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea6:	d120      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	1d20      	adds	r0, r4, #4
 8004eac:	f7ff fd90 	bl	80049d0 <RCCEx_PLL2_Config>
 8004eb0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004eb2:	2d00      	cmp	r5, #0
 8004eb4:	d14b      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004eb6:	4a73      	ldr	r2, [pc, #460]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004eba:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004ebe:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6513      	str	r3, [r2, #80]	; 0x50
 8004ec4:	e01e      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ec6:	2601      	movs	r6, #1
 8004ec8:	4635      	mov	r5, r6
 8004eca:	e7e0      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ecc:	4a6d      	ldr	r2, [pc, #436]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ece:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8004ed6:	e7d1      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ed8:	2100      	movs	r1, #0
 8004eda:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ede:	f7ff fdf9 	bl	8004ad4 <RCCEx_PLL3_Config>
 8004ee2:	4605      	mov	r5, r0
      break;
 8004ee4:	e7ca      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004ee6:	462e      	mov	r6, r5
 8004ee8:	e7d1      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004eea:	2601      	movs	r6, #1
 8004eec:	4635      	mov	r5, r6
 8004eee:	e009      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004ef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ef4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8004ef8:	d0db      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004efa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004efe:	d0d8      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004f00:	2601      	movs	r6, #1
 8004f02:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004f0a:	d02f      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004f0c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f14:	d043      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8004f16:	d81f      	bhi.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8004f18:	b13b      	cbz	r3, 8004f2a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f1e:	d118      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f20:	2101      	movs	r1, #1
 8004f22:	1d20      	adds	r0, r4, #4
 8004f24:	f7ff fd54 	bl	80049d0 <RCCEx_PLL2_Config>
 8004f28:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	d13e      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f2e:	4a55      	ldr	r2, [pc, #340]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f30:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004f32:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004f36:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f3e:	e015      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x394>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f40:	2101      	movs	r1, #1
 8004f42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f46:	f7ff fdc5 	bl	8004ad4 <RCCEx_PLL3_Config>
 8004f4a:	4605      	mov	r5, r0
      break;
 8004f4c:	e7b1      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004f4e:	462e      	mov	r6, r5
 8004f50:	e7d8      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004f52:	2601      	movs	r6, #1
 8004f54:	4635      	mov	r5, r6
 8004f56:	e009      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x394>
 8004f58:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f5c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004f60:	d0e3      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f66:	d0e0      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004f68:	2601      	movs	r6, #1
 8004f6a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004f72:	d009      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 8004f74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7a:	d019      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8004f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f80:	d024      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004f82:	b1d3      	cbz	r3, 8004fba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004f84:	2601      	movs	r6, #1
 8004f86:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004f8e:	d032      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->FmcClockSelection)
 8004f90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d859      	bhi.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x472>
 8004f96:	e8df f003 	tbb	[pc, r3]
 8004f9a:	2126      	.short	0x2126
 8004f9c:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004fa4:	f7ff fd96 	bl	8004ad4 <RCCEx_PLL3_Config>
 8004fa8:	4605      	mov	r5, r0
      break;
 8004faa:	e7be      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004fac:	462e      	mov	r6, r5
 8004fae:	e7dd      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb0:	4a34      	ldr	r2, [pc, #208]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004fba:	b96d      	cbnz	r5, 8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fbc:	4a31      	ldr	r2, [pc, #196]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fbe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004fc0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004fc4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	6513      	str	r3, [r2, #80]	; 0x50
 8004fca:	e7dd      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fcc:	2101      	movs	r1, #1
 8004fce:	1d20      	adds	r0, r4, #4
 8004fd0:	f7ff fcfe 	bl	80049d0 <RCCEx_PLL2_Config>
 8004fd4:	4605      	mov	r5, r0
      break;
 8004fd6:	e7f0      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004fd8:	462e      	mov	r6, r5
 8004fda:	e7d5      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fdc:	4a29      	ldr	r2, [pc, #164]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004fe6:	bb9d      	cbnz	r5, 8005050 <HAL_RCCEx_PeriphCLKConfig+0x478>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fe8:	4a26      	ldr	r2, [pc, #152]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004fec:	f023 0303 	bic.w	r3, r3, #3
 8004ff0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004ffc:	d12a      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	f013 0f01 	tst.w	r3, #1
 8005004:	f000 80aa 	beq.w	800515c <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 8005008:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800500a:	2b28      	cmp	r3, #40	; 0x28
 800500c:	f200 80a4 	bhi.w	8005158 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005010:	e8df f003 	tbb	[pc, r3]
 8005014:	a2a2a292 	.word	0xa2a2a292
 8005018:	a2a2a2a2 	.word	0xa2a2a2a2
 800501c:	a2a2a28d 	.word	0xa2a2a28d
 8005020:	a2a2a2a2 	.word	0xa2a2a2a2
 8005024:	a2a2a29b 	.word	0xa2a2a29b
 8005028:	a2a2a2a2 	.word	0xa2a2a2a2
 800502c:	a2a2a292 	.word	0xa2a2a292
 8005030:	a2a2a2a2 	.word	0xa2a2a2a2
 8005034:	a2a2a292 	.word	0xa2a2a292
 8005038:	a2a2a2a2 	.word	0xa2a2a2a2
 800503c:	92          	.byte	0x92
 800503d:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800503e:	2102      	movs	r1, #2
 8005040:	1d20      	adds	r0, r4, #4
 8005042:	f7ff fcc5 	bl	80049d0 <RCCEx_PLL2_Config>
 8005046:	4605      	mov	r5, r0
      break;
 8005048:	e7cd      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->FmcClockSelection)
 800504a:	2601      	movs	r6, #1
 800504c:	4635      	mov	r5, r6
 800504e:	e7d2      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8005050:	462e      	mov	r6, r5
 8005052:	e7d0      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005054:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800505e:	f7fc fa7f 	bl	8001560 <HAL_GetTick>
 8005062:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005064:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8005088 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005068:	f8d8 3000 	ldr.w	r3, [r8]
 800506c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005070:	d10c      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005072:	f7fc fa75 	bl	8001560 <HAL_GetTick>
 8005076:	1bc0      	subs	r0, r0, r7
 8005078:	2864      	cmp	r0, #100	; 0x64
 800507a:	d9f5      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x490>
        ret = HAL_TIMEOUT;
 800507c:	2603      	movs	r6, #3
 800507e:	4635      	mov	r5, r6
 8005080:	e7bd      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005082:	bf00      	nop
 8005084:	58024400 	.word	0x58024400
 8005088:	58024800 	.word	0x58024800
    if(ret == HAL_OK)
 800508c:	2d00      	cmp	r5, #0
 800508e:	d14c      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x552>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005090:	4b9f      	ldr	r3, [pc, #636]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8005098:	4053      	eors	r3, r2
 800509a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800509e:	d00c      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050a0:	4b9b      	ldr	r3, [pc, #620]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80050a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80050a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80050aa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80050ae:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80050b2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80050b6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80050b8:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050ba:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80050be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c2:	d014      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80050c8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80050cc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80050d0:	d021      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 80050d2:	4a8f      	ldr	r2, [pc, #572]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80050d4:	6913      	ldr	r3, [r2, #16]
 80050d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050da:	6113      	str	r3, [r2, #16]
 80050dc:	4a8c      	ldr	r2, [pc, #560]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80050de:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80050e0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80050e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e8:	430b      	orrs	r3, r1
 80050ea:	6713      	str	r3, [r2, #112]	; 0x70
 80050ec:	e787      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x426>
        tickstart = HAL_GetTick();
 80050ee:	f7fc fa37 	bl	8001560 <HAL_GetTick>
 80050f2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f4:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050fc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005100:	f013 0f02 	tst.w	r3, #2
 8005104:	d1de      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fc fa2b 	bl	8001560 <HAL_GetTick>
 800510a:	1bc0      	subs	r0, r0, r7
 800510c:	4548      	cmp	r0, r9
 800510e:	d9f5      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x524>
            ret = HAL_TIMEOUT;
 8005110:	2603      	movs	r6, #3
 8005112:	4635      	mov	r5, r6
 8005114:	e773      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x426>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005116:	487e      	ldr	r0, [pc, #504]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005118:	6901      	ldr	r1, [r0, #16]
 800511a:	4a7e      	ldr	r2, [pc, #504]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800511c:	ea02 1313 	and.w	r3, r2, r3, lsr #4
 8005120:	f421 527c 	bic.w	r2, r1, #16128	; 0x3f00
 8005124:	4313      	orrs	r3, r2
 8005126:	6103      	str	r3, [r0, #16]
 8005128:	e7d8      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 800512a:	462e      	mov	r6, r5
 800512c:	e767      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800512e:	2101      	movs	r1, #1
 8005130:	1d20      	adds	r0, r4, #4
 8005132:	f7ff fc4d 	bl	80049d0 <RCCEx_PLL2_Config>
 8005136:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005138:	b9e5      	cbnz	r5, 8005174 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800513a:	4a75      	ldr	r2, [pc, #468]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800513c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800513e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005142:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005144:	430b      	orrs	r3, r1
 8005146:	6553      	str	r3, [r2, #84]	; 0x54
 8005148:	e008      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800514a:	2101      	movs	r1, #1
 800514c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005150:	f7ff fcc0 	bl	8004ad4 <RCCEx_PLL3_Config>
 8005154:	4605      	mov	r5, r0
      break;
 8005156:	e7ef      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 8005158:	2601      	movs	r6, #1
 800515a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	f013 0f02 	tst.w	r3, #2
 8005162:	d016      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005164:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005166:	2b05      	cmp	r3, #5
 8005168:	d827      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 800516a:	e8df f003 	tbb	[pc, r3]
 800516e:	050a      	.short	0x050a
 8005170:	0a0a0a1f 	.word	0x0a0a0a1f
 8005174:	462e      	mov	r6, r5
 8005176:	e7f1      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005178:	2101      	movs	r1, #1
 800517a:	1d20      	adds	r0, r4, #4
 800517c:	f7ff fc28 	bl	80049d0 <RCCEx_PLL2_Config>
 8005180:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005182:	b9ed      	cbnz	r5, 80051c0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005184:	4a62      	ldr	r2, [pc, #392]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005186:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005188:	f023 0307 	bic.w	r3, r3, #7
 800518c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800518e:	430b      	orrs	r3, r1
 8005190:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	f013 0f04 	tst.w	r3, #4
 8005198:	d022      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800519a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800519e:	2b05      	cmp	r3, #5
 80051a0:	d843      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x652>
 80051a2:	e8df f003 	tbb	[pc, r3]
 80051a6:	0f14      	.short	0x0f14
 80051a8:	1414143b 	.word	0x1414143b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051ac:	2101      	movs	r1, #1
 80051ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051b2:	f7ff fc8f 	bl	8004ad4 <RCCEx_PLL3_Config>
 80051b6:	4605      	mov	r5, r0
      break;
 80051b8:	e7e3      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80051ba:	2601      	movs	r6, #1
 80051bc:	4635      	mov	r5, r6
 80051be:	e7e8      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 80051c0:	462e      	mov	r6, r5
 80051c2:	e7e6      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051c4:	2101      	movs	r1, #1
 80051c6:	1d20      	adds	r0, r4, #4
 80051c8:	f7ff fc02 	bl	80049d0 <RCCEx_PLL2_Config>
 80051cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80051ce:	bb7d      	cbnz	r5, 8005230 <HAL_RCCEx_PeriphCLKConfig+0x658>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051d0:	4a4f      	ldr	r2, [pc, #316]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80051d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80051d4:	f023 0307 	bic.w	r3, r3, #7
 80051d8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80051dc:	430b      	orrs	r3, r1
 80051de:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	f013 0f20 	tst.w	r3, #32
 80051e6:	d032      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80051e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80051ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f0:	d04b      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80051f2:	d822      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051f4:	b13b      	cbz	r3, 8005206 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 80051f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051fa:	d11b      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051fc:	2100      	movs	r1, #0
 80051fe:	1d20      	adds	r0, r4, #4
 8005200:	f7ff fbe6 	bl	80049d0 <RCCEx_PLL2_Config>
 8005204:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005206:	2d00      	cmp	r5, #0
 8005208:	d146      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800520a:	4a41      	ldr	r2, [pc, #260]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800520c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800520e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005212:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005216:	430b      	orrs	r3, r1
 8005218:	6553      	str	r3, [r2, #84]	; 0x54
 800521a:	e018      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x676>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800521c:	2101      	movs	r1, #1
 800521e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005222:	f7ff fc57 	bl	8004ad4 <RCCEx_PLL3_Config>
 8005226:	4605      	mov	r5, r0
      break;
 8005228:	e7d1      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800522a:	2601      	movs	r6, #1
 800522c:	4635      	mov	r5, r6
 800522e:	e7d7      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005230:	462e      	mov	r6, r5
 8005232:	e7d5      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005234:	2601      	movs	r6, #1
 8005236:	4635      	mov	r5, r6
 8005238:	e009      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800523a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800523e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005242:	d0e0      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8005244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005248:	d0dd      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800524a:	2601      	movs	r6, #1
 800524c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005254:	d02f      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005256:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800525a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525e:	d04a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8005260:	d81f      	bhi.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
 8005262:	b13b      	cbz	r3, 8005274 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8005264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005268:	d118      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800526a:	2100      	movs	r1, #0
 800526c:	1d20      	adds	r0, r4, #4
 800526e:	f7ff fbaf 	bl	80049d0 <RCCEx_PLL2_Config>
 8005272:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005274:	2d00      	cmp	r5, #0
 8005276:	d145      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005278:	4a25      	ldr	r2, [pc, #148]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800527a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800527c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005280:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8005284:	430b      	orrs	r3, r1
 8005286:	6593      	str	r3, [r2, #88]	; 0x58
 8005288:	e015      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800528a:	2102      	movs	r1, #2
 800528c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005290:	f7ff fc20 	bl	8004ad4 <RCCEx_PLL3_Config>
 8005294:	4605      	mov	r5, r0
      break;
 8005296:	e7b6      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8005298:	462e      	mov	r6, r5
 800529a:	e7d8      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x676>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800529c:	2601      	movs	r6, #1
 800529e:	4635      	mov	r5, r6
 80052a0:	e009      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80052a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052a6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80052aa:	d0e3      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 80052ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052b0:	d0e0      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 80052b2:	2601      	movs	r6, #1
 80052b4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80052bc:	d036      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052be:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80052c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052c6:	f000 80e6 	beq.w	8005496 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80052ca:	d825      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80052cc:	b13b      	cbz	r3, 80052de <HAL_RCCEx_PeriphCLKConfig+0x706>
 80052ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d2:	d119      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x730>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052d4:	2100      	movs	r1, #0
 80052d6:	1d20      	adds	r0, r4, #4
 80052d8:	f7ff fb7a 	bl	80049d0 <RCCEx_PLL2_Config>
 80052dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80052de:	2d00      	cmp	r5, #0
 80052e0:	f040 80e0 	bne.w	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052e4:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80052e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80052e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80052ec:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6593      	str	r3, [r2, #88]	; 0x58
 80052f4:	e01a      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052f6:	2102      	movs	r1, #2
 80052f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80052fc:	f7ff fbea 	bl	8004ad4 <RCCEx_PLL3_Config>
 8005300:	4605      	mov	r5, r0
      break;
 8005302:	e7b7      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8005304:	462e      	mov	r6, r5
 8005306:	e7d6      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005308:	2601      	movs	r6, #1
 800530a:	4635      	mov	r5, r6
 800530c:	e00e      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x754>
 800530e:	bf00      	nop
 8005310:	58024400 	.word	0x58024400
 8005314:	00ffffcf 	.word	0x00ffffcf
 8005318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800531c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005320:	d0dd      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x706>
 8005322:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005326:	d0da      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x706>
 8005328:	2601      	movs	r6, #1
 800532a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	f013 0f08 	tst.w	r3, #8
 8005332:	d00d      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x778>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005334:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533c:	f000 80b4 	beq.w	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005340:	4a97      	ldr	r2, [pc, #604]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005342:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005344:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005348:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800534c:	430b      	orrs	r3, r1
 800534e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	f013 0f10 	tst.w	r3, #16
 8005356:	d00d      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005358:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800535c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005360:	f000 80ab 	beq.w	80054ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005364:	4a8e      	ldr	r2, [pc, #568]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005366:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8005370:	430b      	orrs	r3, r1
 8005372:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800537a:	d00e      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 800537c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	f000 80b1 	beq.w	80054ea <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538c:	f000 80a3 	beq.w	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 809b 	beq.w	80054cc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8005396:	2601      	movs	r6, #1
 8005398:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80053a0:	d00f      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    switch(PeriphClkInit->UsbClockSelection)
 80053a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80053a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053aa:	f000 80b6 	beq.w	800551a <HAL_RCCEx_PeriphCLKConfig+0x942>
 80053ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053b2:	f000 80a8 	beq.w	8005506 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 80053b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ba:	f000 809f 	beq.w	80054fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80053be:	2601      	movs	r6, #1
 80053c0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80053c8:	d009      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch(PeriphClkInit->SdmmcClockSelection)
 80053ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80ad 	beq.w	800552c <HAL_RCCEx_PeriphCLKConfig+0x954>
 80053d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d6:	f000 80b7 	beq.w	8005548 <HAL_RCCEx_PeriphCLKConfig+0x970>
 80053da:	2601      	movs	r6, #1
 80053dc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80053e4:	f040 80b8 	bne.w	8005558 <HAL_RCCEx_PeriphCLKConfig+0x980>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80053ee:	d00d      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x834>
    switch(PeriphClkInit->RngClockSelection)
 80053f0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80053f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f6:	f000 80bb 	beq.w	8005570 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80053fa:	f240 80b6 	bls.w	800556a <HAL_RCCEx_PeriphCLKConfig+0x992>
 80053fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005406:	f000 80b8 	beq.w	800557a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800540a:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005412:	d006      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005414:	4a62      	ldr	r2, [pc, #392]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005416:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800541c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800541e:	430b      	orrs	r3, r1
 8005420:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005428:	d007      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x862>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800542a:	4a5d      	ldr	r2, [pc, #372]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800542c:	6913      	ldr	r3, [r2, #16]
 800542e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005432:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8005436:	430b      	orrs	r3, r1
 8005438:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005440:	d006      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005442:	4a57      	ldr	r2, [pc, #348]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005444:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800544a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800544c:	430b      	orrs	r3, r1
 800544e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005456:	d009      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x894>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005458:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8005468:	430a      	orrs	r2, r1
 800546a:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f2c0 808e 	blt.w	8005590 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800547a:	d007      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800547c:	4a48      	ldr	r2, [pc, #288]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800547e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005480:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005484:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005488:	430b      	orrs	r3, r1
 800548a:	6553      	str	r3, [r2, #84]	; 0x54
}
 800548c:	1e30      	subs	r0, r6, #0
 800548e:	bf18      	it	ne
 8005490:	2001      	movne	r0, #1
 8005492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005496:	2102      	movs	r1, #2
 8005498:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800549c:	f7ff fb1a 	bl	8004ad4 <RCCEx_PLL3_Config>
 80054a0:	4605      	mov	r5, r0
      break;
 80054a2:	e71c      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x706>
 80054a4:	462e      	mov	r6, r5
 80054a6:	e741      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054a8:	2102      	movs	r1, #2
 80054aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054ae:	f7ff fb11 	bl	8004ad4 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80054b2:	2800      	cmp	r0, #0
 80054b4:	bf18      	it	ne
 80054b6:	2601      	movne	r6, #1
 80054b8:	e742      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x768>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054ba:	2102      	movs	r1, #2
 80054bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054c0:	f7ff fb08 	bl	8004ad4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 80054c4:	2800      	cmp	r0, #0
 80054c6:	bf18      	it	ne
 80054c8:	2601      	movne	r6, #1
 80054ca:	e74b      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054cc:	2100      	movs	r1, #0
 80054ce:	1d20      	adds	r0, r4, #4
 80054d0:	f7ff fa7e 	bl	80049d0 <RCCEx_PLL2_Config>
 80054d4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80054d6:	b97d      	cbnz	r5, 80054f8 <HAL_RCCEx_PeriphCLKConfig+0x920>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054d8:	4a31      	ldr	r2, [pc, #196]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80054da:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80054dc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80054e0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6593      	str	r3, [r2, #88]	; 0x58
 80054e8:	e757      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054ea:	2102      	movs	r1, #2
 80054ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80054f0:	f7ff faf0 	bl	8004ad4 <RCCEx_PLL3_Config>
 80054f4:	4605      	mov	r5, r0
      break;
 80054f6:	e7ee      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80054f8:	462e      	mov	r6, r5
 80054fa:	e74e      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054fc:	4a28      	ldr	r2, [pc, #160]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80054fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005504:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005506:	b97d      	cbnz	r5, 8005528 <HAL_RCCEx_PeriphCLKConfig+0x950>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005508:	4a25      	ldr	r2, [pc, #148]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800550a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800550c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005510:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005514:	430b      	orrs	r3, r1
 8005516:	6553      	str	r3, [r2, #84]	; 0x54
 8005518:	e753      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800551a:	2101      	movs	r1, #1
 800551c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005520:	f7ff fad8 	bl	8004ad4 <RCCEx_PLL3_Config>
 8005524:	4605      	mov	r5, r0
      break;
 8005526:	e7ee      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8005528:	462e      	mov	r6, r5
 800552a:	e74a      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552c:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800552e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005534:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8005536:	b96d      	cbnz	r5, 8005554 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005538:	4a19      	ldr	r2, [pc, #100]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800553a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800553c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005540:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005542:	430b      	orrs	r3, r1
 8005544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005546:	e74a      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005548:	2102      	movs	r1, #2
 800554a:	1d20      	adds	r0, r4, #4
 800554c:	f7ff fa40 	bl	80049d0 <RCCEx_PLL2_Config>
 8005550:	4605      	mov	r5, r0
      break;
 8005552:	e7f0      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8005554:	462e      	mov	r6, r5
 8005556:	e742      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x806>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005558:	2102      	movs	r1, #2
 800555a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800555e:	f7ff fab9 	bl	8004ad4 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8005562:	2800      	cmp	r0, #0
 8005564:	bf18      	it	ne
 8005566:	2601      	movne	r6, #1
 8005568:	e73e      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch(PeriphClkInit->RngClockSelection)
 800556a:	b133      	cbz	r3, 800557a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800556c:	2601      	movs	r6, #1
 800556e:	e74d      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005570:	4a0b      	ldr	r2, [pc, #44]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005572:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005578:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800557a:	b93d      	cbnz	r5, 800558c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800557c:	4a08      	ldr	r2, [pc, #32]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800557e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005584:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005586:	430b      	orrs	r3, r1
 8005588:	6553      	str	r3, [r2, #84]	; 0x54
 800558a:	e73f      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x834>
 800558c:	462e      	mov	r6, r5
 800558e:	e73d      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x834>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005590:	4a03      	ldr	r2, [pc, #12]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005592:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005594:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005598:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800559a:	430b      	orrs	r3, r1
 800559c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800559e:	e769      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 80055a0:	58024400 	.word	0x58024400

080055a4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80055a4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80055a6:	f7ff f9f1 	bl	800498c <HAL_RCC_GetHCLKFreq>
 80055aa:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80055b2:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80055b4:	5cd3      	ldrb	r3, [r2, r3]
 80055b6:	f003 031f 	and.w	r3, r3, #31
}
 80055ba:	40d8      	lsrs	r0, r3
 80055bc:	bd08      	pop	{r3, pc}
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400
 80055c4:	0800a664 	.word	0x0800a664

080055c8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80055c8:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055ca:	4a77      	ldr	r2, [pc, #476]	; (80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80055cc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80055ce:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80055d0:	f3c5 3105 	ubfx	r1, r5, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055d4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80055d6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 80055d8:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
 80055dc:	f000 80de 	beq.w	800579c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80055e0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055e4:	f3c6 1600 	ubfx	r6, r6, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80055e8:	fb06 f303 	mul.w	r3, r6, r3
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055f4:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 80055f8:	2c01      	cmp	r4, #1
 80055fa:	d064      	beq.n	80056c6 <HAL_RCCEx_GetPLL2ClockFreq+0xfe>
 80055fc:	2c02      	cmp	r4, #2
 80055fe:	f000 80b0 	beq.w	8005762 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8005602:	b1e4      	cbz	r4, 800563e <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005604:	4b68      	ldr	r3, [pc, #416]	; (80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005614:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005618:	ee66 6a87 	vmul.f32	s13, s13, s14
 800561c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005628:	ee07 1a10 	vmov	s14, r1
 800562c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005630:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80057b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005634:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005638:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 800563c:	e05f      	b.n	80056fe <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	f013 0f20 	tst.w	r3, #32
 8005644:	d022      	beq.n	800568c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005646:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005648:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800564a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 800564e:	4a59      	ldr	r2, [pc, #356]	; (80057b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8005650:	40e2      	lsrs	r2, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005652:	ee07 2a90 	vmov	s15, r2
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565a:	ee07 1a10 	vmov	s14, r1
 800565e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8005662:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005676:	ee66 6a86 	vmul.f32	s13, s13, s12
 800567a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800567e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568a:	e038      	b.n	80056fe <HAL_RCCEx_GetPLL2ClockFreq+0x136>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800568c:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800569c:	eddf 7a43 	vldr	s15, [pc, #268]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80056a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056b0:	ee07 1a10 	vmov	s14, r1
 80056b4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80056b8:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80057b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80056bc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80056c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056c4:	e01b      	b.n	80056fe <HAL_RCCEx_GetPLL2ClockFreq+0x136>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056c6:	4b38      	ldr	r3, [pc, #224]	; (80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 80056da:	ee66 6a87 	vmul.f32	s13, s13, s14
 80056de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056ea:	ee07 1a10 	vmov	s14, r1
 80056ee:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80056f2:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80057b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80056f6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80056fa:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80056fe:	4a2a      	ldr	r2, [pc, #168]	; (80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005700:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005702:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005706:	ee06 3a90 	vmov	s13, r3
 800570a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800570e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005712:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005716:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800571a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800571e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005722:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005724:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005728:	ee06 3a90 	vmov	s13, r3
 800572c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005730:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005734:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005738:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800573c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005740:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005742:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005746:	ee07 3a10 	vmov	s14, r3
 800574a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800574e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005752:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005756:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800575a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800575e:	bc70      	pop	{r4, r5, r6}
 8005760:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8005776:	ee66 6a87 	vmul.f32	s13, s13, s14
 800577a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005782:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005786:	ee07 1a10 	vmov	s14, r1
 800578a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800578e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8005792:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005796:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 800579a:	e7b0      	b.n	80056fe <HAL_RCCEx_GetPLL2ClockFreq+0x136>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057a0:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80057a2:	6083      	str	r3, [r0, #8]
}
 80057a4:	e7db      	b.n	800575e <HAL_RCCEx_GetPLL2ClockFreq+0x196>
 80057a6:	bf00      	nop
 80057a8:	58024400 	.word	0x58024400
 80057ac:	39000000 	.word	0x39000000
 80057b0:	4a742400 	.word	0x4a742400
 80057b4:	03d09000 	.word	0x03d09000
 80057b8:	4c742400 	.word	0x4c742400
 80057bc:	4bb71b00 	.word	0x4bb71b00

080057c0 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80057c0:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057c2:	4a77      	ldr	r2, [pc, #476]	; (80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80057c4:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80057c6:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80057c8:	f3c5 5105 	ubfx	r1, r5, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80057cc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80057ce:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80057d0:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
 80057d4:	f000 80de 	beq.w	8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80057d8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80057dc:	f3c6 2600 	ubfx	r6, r6, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80057e0:	fb06 f303 	mul.w	r3, r6, r3
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057ec:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 80057f0:	2c01      	cmp	r4, #1
 80057f2:	d064      	beq.n	80058be <HAL_RCCEx_GetPLL3ClockFreq+0xfe>
 80057f4:	2c02      	cmp	r4, #2
 80057f6:	f000 80b0 	beq.w	800595a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 80057fa:	b1e4      	cbz	r4, 8005836 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057fc:	4b68      	ldr	r3, [pc, #416]	; (80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005804:	ee07 3a90 	vmov	s15, r3
 8005808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8005810:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800581c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005820:	ee07 1a10 	vmov	s14, r1
 8005824:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005828:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800582c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005830:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 8005834:	e05f      	b.n	80058f6 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005836:	6813      	ldr	r3, [r2, #0]
 8005838:	f013 0f20 	tst.w	r3, #32
 800583c:	d022      	beq.n	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800583e:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005840:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005842:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8005846:	4a59      	ldr	r2, [pc, #356]	; (80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 8005848:	40e2      	lsrs	r2, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800584a:	ee07 2a90 	vmov	s15, r2
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	ee07 1a10 	vmov	s14, r1
 8005856:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800585a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800585e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800586e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005872:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005876:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800587a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	e038      	b.n	80058f6 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005884:	4b46      	ldr	r3, [pc, #280]	; (80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005894:	eddf 7a43 	vldr	s15, [pc, #268]	; 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8005898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800589c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058a8:	ee07 1a10 	vmov	s14, r1
 80058ac:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80058b0:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80058b4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80058b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058bc:	e01b      	b.n	80058f6 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058be:	4b38      	ldr	r3, [pc, #224]	; (80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 80058d2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80058d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058e2:	ee07 1a10 	vmov	s14, r1
 80058e6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80058ea:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80058ee:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80058f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80058f6:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80058f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80058fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80058fe:	ee06 3a90 	vmov	s13, r3
 8005902:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005906:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800590a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800590e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005912:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005916:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800591a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800591c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005920:	ee06 3a90 	vmov	s13, r3
 8005924:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005928:	ee76 6a86 	vadd.f32	s13, s13, s12
 800592c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005930:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005934:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005938:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800593a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800593e:	ee07 3a10 	vmov	s14, r3
 8005942:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005946:	ee37 7a06 	vadd.f32	s14, s14, s12
 800594a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800594e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005952:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8005956:	bc70      	pop	{r4, r5, r6}
 8005958:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800595a:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 800596e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800597a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800597e:	ee07 1a10 	vmov	s14, r1
 8005982:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005986:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80059b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800598a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800598e:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 8005992:	e7b0      	b.n	80058f6 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005998:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800599a:	6083      	str	r3, [r0, #8]
}
 800599c:	e7db      	b.n	8005956 <HAL_RCCEx_GetPLL3ClockFreq+0x196>
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
 80059a4:	39000000 	.word	0x39000000
 80059a8:	4a742400 	.word	0x4a742400
 80059ac:	03d09000 	.word	0x03d09000
 80059b0:	4c742400 	.word	0x4c742400
 80059b4:	4bb71b00 	.word	0x4bb71b00

080059b8 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80059b8:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059ba:	4a77      	ldr	r2, [pc, #476]	; (8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 80059bc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80059be:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80059c0:	f3c5 1105 	ubfx	r1, r5, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80059c4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80059c6:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80059c8:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
 80059cc:	f000 80de 	beq.w	8005b8c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80059d0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80059d4:	f006 0601 	and.w	r6, r6, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80059d8:	fb06 f303 	mul.w	r3, r6, r3
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059e4:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 80059e8:	2c01      	cmp	r4, #1
 80059ea:	d064      	beq.n	8005ab6 <HAL_RCCEx_GetPLL1ClockFreq+0xfe>
 80059ec:	2c02      	cmp	r4, #2
 80059ee:	f000 80b0 	beq.w	8005b52 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 80059f2:	b1e4      	cbz	r4, 8005a2e <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059f4:	4b68      	ldr	r3, [pc, #416]	; (8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fc:	ee07 3a90 	vmov	s15, r3
 8005a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a04:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8005a08:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a18:	ee07 1a10 	vmov	s14, r1
 8005a1c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005a20:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005a24:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005a28:	ee67 7aa6 	vmul.f32	s15, s15, s13
      break;
 8005a2c:	e05f      	b.n	8005aee <HAL_RCCEx_GetPLL1ClockFreq+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a2e:	6813      	ldr	r3, [r2, #0]
 8005a30:	f013 0f20 	tst.w	r3, #32
 8005a34:	d022      	beq.n	8005a7c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a36:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a38:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a3a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8005a3e:	4a59      	ldr	r2, [pc, #356]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 8005a40:	40e2      	lsrs	r2, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a42:	ee07 2a90 	vmov	s15, r2
 8005a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4a:	ee07 1a10 	vmov	s14, r1
 8005a4e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8005a52:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a62:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8005a66:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005a6a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005a6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	e038      	b.n	8005aee <HAL_RCCEx_GetPLL1ClockFreq+0x136>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a7c:	4b46      	ldr	r3, [pc, #280]	; (8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a84:	ee07 3a90 	vmov	s15, r3
 8005a88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a8c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8005a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005aa0:	ee07 1a10 	vmov	s14, r1
 8005aa4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005aa8:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005aac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ab4:	e01b      	b.n	8005aee <HAL_RCCEx_GetPLL1ClockFreq+0x136>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ab6:	4b38      	ldr	r3, [pc, #224]	; (8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8005aca:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ad6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ada:	ee07 1a10 	vmov	s14, r1
 8005ade:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005ae2:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8005ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8005ae6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005aea:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005af0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005af2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005af6:	ee06 3a90 	vmov	s13, r3
 8005afa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005afe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005b02:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005b06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005b0a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005b0e:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005b12:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b14:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005b18:	ee06 3a90 	vmov	s13, r3
 8005b1c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005b20:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005b24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005b28:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005b2c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005b30:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b32:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005b36:	ee07 3a10 	vmov	s14, r3
 8005b3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005b3e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005b42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b46:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005b4a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8005b4e:	bc70      	pop	{r4, r5, r6}
 8005b50:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b52:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b62:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8005b66:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b76:	ee07 1a10 	vmov	s14, r1
 8005b7a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005b7e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8005bac <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8005b82:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005b86:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
 8005b8a:	e7b0      	b.n	8005aee <HAL_RCCEx_GetPLL1ClockFreq+0x136>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b90:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b92:	6083      	str	r3, [r0, #8]
}
 8005b94:	e7db      	b.n	8005b4e <HAL_RCCEx_GetPLL1ClockFreq+0x196>
 8005b96:	bf00      	nop
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	39000000 	.word	0x39000000
 8005ba0:	4c742400 	.word	0x4c742400
 8005ba4:	03d09000 	.word	0x03d09000
 8005ba8:	4a742400 	.word	0x4a742400
 8005bac:	4bb71b00 	.word	0x4bb71b00

08005bb0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8005bb0:	b500      	push	{lr}
 8005bb2:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005bb4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005bb8:	d020      	beq.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005bba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005bbe:	d071      	beq.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005bc0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005bc4:	f000 80c8 	beq.w	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005bc8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005bcc:	f000 8121 	beq.w	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005bd0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005bd4:	f000 817e 	beq.w	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005bd8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005bdc:	f000 81d7 	beq.w	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005be0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8005be4:	f000 821a 	beq.w	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005be8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005bec:	f000 8234 	beq.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005bf0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005bf4:	f000 8282 	beq.w	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
      frequency = 0;
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e2ae      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005bfc:	4b9b      	ldr	r3, [pc, #620]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c00:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d806      	bhi.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8005c08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005c0c:	00120007 	.word	0x00120007
 8005c10:	02a0001d 	.word	0x02a0001d
 8005c14:	0028      	.short	0x0028
 8005c16:	2000      	movs	r0, #0
 8005c18:	e29f      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c1a:	4b94      	ldr	r3, [pc, #592]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005c22:	f000 829a 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c26:	a807      	add	r0, sp, #28
 8005c28:	f7ff fec6 	bl	80059b8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c2c:	9808      	ldr	r0, [sp, #32]
 8005c2e:	e294      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c30:	4b8e      	ldr	r3, [pc, #568]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005c38:	f000 828f 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c3c:	a804      	add	r0, sp, #16
 8005c3e:	f7ff fcc3 	bl	80055c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c42:	9804      	ldr	r0, [sp, #16]
 8005c44:	e289      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c46:	4b89      	ldr	r3, [pc, #548]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005c4e:	f000 8284 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c52:	a801      	add	r0, sp, #4
 8005c54:	f7ff fdb4 	bl	80057c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c58:	9801      	ldr	r0, [sp, #4]
 8005c5a:	e27e      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c5c:	4a83      	ldr	r2, [pc, #524]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c5e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005c60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	f012 0f04 	tst.w	r2, #4
 8005c6a:	d000      	beq.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8005c6c:	b19b      	cbz	r3, 8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c6e:	4a7f      	ldr	r2, [pc, #508]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005c76:	d003      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c7c:	f000 8268 	beq.w	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c80:	4a7a      	ldr	r2, [pc, #488]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005c88:	d003      	beq.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8005c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c8e:	f000 8261 	beq.w	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
            frequency = 0;
 8005c92:	2000      	movs	r0, #0
 8005c94:	e261      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c96:	4b75      	ldr	r3, [pc, #468]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005c9e:	4874      	ldr	r0, [pc, #464]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ca0:	40d8      	lsrs	r0, r3
 8005ca2:	e25a      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005ca4:	4b71      	ldr	r3, [pc, #452]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8005cac:	2b80      	cmp	r3, #128	; 0x80
 8005cae:	d041      	beq.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005cb0:	d923      	bls.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8005cb4:	f000 8250 	beq.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbc:	d12d      	bne.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005cbe:	4a6b      	ldr	r2, [pc, #428]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cc0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	f012 0f04 	tst.w	r2, #4
 8005ccc:	d001      	beq.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d03b      	beq.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cd2:	4a66      	ldr	r2, [pc, #408]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005cda:	d003      	beq.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ce0:	f000 823e 	beq.w	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ce4:	4a61      	ldr	r2, [pc, #388]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005cec:	d003      	beq.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf2:	f000 8237 	beq.w	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
            frequency = 0;
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e22f      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005cfa:	b183      	cbz	r3, 8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d10a      	bne.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d00:	4b5a      	ldr	r3, [pc, #360]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005d08:	f000 8227 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d0c:	a804      	add	r0, sp, #16
 8005d0e:	f7ff fc5b 	bl	80055c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d12:	9804      	ldr	r0, [sp, #16]
 8005d14:	e221      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005d16:	2000      	movs	r0, #0
 8005d18:	e21f      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e21d      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d1e:	4b53      	ldr	r3, [pc, #332]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005d26:	f000 8218 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d2a:	a807      	add	r0, sp, #28
 8005d2c:	f7ff fe44 	bl	80059b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d30:	9808      	ldr	r0, [sp, #32]
 8005d32:	e212      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d34:	4b4d      	ldr	r3, [pc, #308]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005d3c:	f000 820d 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d40:	a801      	add	r0, sp, #4
 8005d42:	f7ff fd3d 	bl	80057c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d46:	9801      	ldr	r0, [sp, #4]
 8005d48:	e207      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d4a:	4b48      	ldr	r3, [pc, #288]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005d52:	4847      	ldr	r0, [pc, #284]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d54:	40d8      	lsrs	r0, r3
 8005d56:	e200      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005d58:	4b44      	ldr	r3, [pc, #272]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8005d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d64:	d043      	beq.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005d66:	d924      	bls.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005d68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d6c:	f000 81fc 	beq.w	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8005d70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d74:	d12e      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d76:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d78:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005d7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	f012 0f04 	tst.w	r2, #4
 8005d84:	d001      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03c      	beq.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d8a:	4a38      	ldr	r2, [pc, #224]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005d92:	d003      	beq.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
 8005d94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d98:	f000 81e8 	beq.w	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d9c:	4a33      	ldr	r2, [pc, #204]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005da4:	d003      	beq.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
 8005da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005daa:	f000 81e1 	beq.w	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 8005dae:	2000      	movs	r0, #0
 8005db0:	e1d3      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005db2:	b18b      	cbz	r3, 8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8005db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db8:	d10a      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dba:	4b2c      	ldr	r3, [pc, #176]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005dc2:	f000 81ca 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dc6:	a804      	add	r0, sp, #16
 8005dc8:	f7ff fbfe 	bl	80055c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dcc:	9804      	ldr	r0, [sp, #16]
 8005dce:	e1c4      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e1c2      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	e1c0      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dd8:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005de0:	f000 81bb 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005de4:	a807      	add	r0, sp, #28
 8005de6:	f7ff fde7 	bl	80059b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dea:	9808      	ldr	r0, [sp, #32]
 8005dec:	e1b5      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dee:	4b1f      	ldr	r3, [pc, #124]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005df6:	f000 81b0 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dfa:	a801      	add	r0, sp, #4
 8005dfc:	f7ff fce0 	bl	80057c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e00:	9801      	ldr	r0, [sp, #4]
 8005e02:	e1aa      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e04:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005e0c:	4818      	ldr	r0, [pc, #96]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e0e:	40d8      	lsrs	r0, r3
 8005e10:	e1a3      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005e12:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8005e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e1e:	d047      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8005e20:	d928      	bls.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005e22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e26:	f000 81a5 	beq.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005e2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e2e:	d132      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e30:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e32:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	f012 0f04 	tst.w	r2, #4
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d040      	beq.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e44:	4a09      	ldr	r2, [pc, #36]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005e4c:	d003      	beq.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e52:	f000 8191 	beq.w	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e56:	4a05      	ldr	r2, [pc, #20]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005e5e:	d003      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e64:	f000 818a 	beq.w	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
            frequency = 0;
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e176      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8005e74:	b18b      	cbz	r3, 8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005e76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e7a:	d10a      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e7c:	4b9b      	ldr	r3, [pc, #620]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005e84:	f000 8169 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e88:	a804      	add	r0, sp, #16
 8005e8a:	f7ff fb9d 	bl	80055c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e8e:	9804      	ldr	r0, [sp, #16]
 8005e90:	e163      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (saiclocksource)
 8005e92:	2000      	movs	r0, #0
 8005e94:	e161      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e15f      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e9a:	4b94      	ldr	r3, [pc, #592]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005ea2:	f000 815a 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ea6:	a807      	add	r0, sp, #28
 8005ea8:	f7ff fd86 	bl	80059b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eac:	9808      	ldr	r0, [sp, #32]
 8005eae:	e154      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005eb0:	4b8e      	ldr	r3, [pc, #568]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005eb8:	f000 814f 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ebc:	a801      	add	r0, sp, #4
 8005ebe:	f7ff fc7f 	bl	80057c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ec2:	9801      	ldr	r0, [sp, #4]
 8005ec4:	e149      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ec6:	4b89      	ldr	r3, [pc, #548]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005ece:	4888      	ldr	r0, [pc, #544]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005ed0:	40d8      	lsrs	r0, r3
 8005ed2:	e142      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005ed4:	4b85      	ldr	r3, [pc, #532]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee0:	d043      	beq.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005ee2:	d924      	bls.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005ee4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ee8:	f000 814a 	beq.w	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8005eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef0:	d12e      	bne.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ef2:	4a7e      	ldr	r2, [pc, #504]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005ef4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	f012 0f04 	tst.w	r2, #4
 8005f00:	d001      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d03c      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f06:	4a79      	ldr	r2, [pc, #484]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005f0e:	d003      	beq.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8005f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f14:	f000 8136 	beq.w	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f18:	4a74      	ldr	r2, [pc, #464]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005f20:	d003      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f26:	f000 812f 	beq.w	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
            frequency = 0;
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e115      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8005f2e:	b18b      	cbz	r3, 8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8005f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f34:	d10a      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f36:	4b6d      	ldr	r3, [pc, #436]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005f3e:	f000 810c 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f42:	a804      	add	r0, sp, #16
 8005f44:	f7ff fb40 	bl	80055c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f48:	9804      	ldr	r0, [sp, #16]
 8005f4a:	e106      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e104      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8005f50:	2000      	movs	r0, #0
 8005f52:	e102      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f54:	4b65      	ldr	r3, [pc, #404]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005f5c:	f000 80fd 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f60:	a807      	add	r0, sp, #28
 8005f62:	f7ff fd29 	bl	80059b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f66:	9808      	ldr	r0, [sp, #32]
 8005f68:	e0f7      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f6a:	4b60      	ldr	r3, [pc, #384]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005f72:	f000 80f2 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f76:	a801      	add	r0, sp, #4
 8005f78:	f7ff fc22 	bl	80057c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f7c:	9801      	ldr	r0, [sp, #4]
 8005f7e:	e0ec      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f80:	4b5a      	ldr	r3, [pc, #360]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f88:	4859      	ldr	r0, [pc, #356]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f8a:	40d8      	lsrs	r0, r3
 8005f8c:	e0e5      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005f8e:	4b57      	ldr	r3, [pc, #348]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8005f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9a:	d010      	beq.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa0:	d018      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8005fa2:	b10b      	cbz	r3, 8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	e0d8      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fa8:	4b50      	ldr	r3, [pc, #320]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005fb0:	f000 80d3 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fb4:	a804      	add	r0, sp, #16
 8005fb6:	f7ff fb07 	bl	80055c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005fba:	9804      	ldr	r0, [sp, #16]
 8005fbc:	e0cd      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fbe:	4b4b      	ldr	r3, [pc, #300]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005fc6:	f000 80c8 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fca:	a801      	add	r0, sp, #4
 8005fcc:	f7ff fbf8 	bl	80057c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005fd0:	9803      	ldr	r0, [sp, #12]
 8005fd2:	e0c2      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005fd4:	4a45      	ldr	r2, [pc, #276]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005fd6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005fd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	f012 0f04 	tst.w	r2, #4
 8005fe2:	d000      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005fe4:	b19b      	cbz	r3, 800600e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fe6:	4a41      	ldr	r2, [pc, #260]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005fee:	d003      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8005ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ff4:	f000 80ca 	beq.w	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ff8:	4a3c      	ldr	r2, [pc, #240]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005ffa:	6812      	ldr	r2, [r2, #0]
 8005ffc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006000:	d003      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
 8006002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006006:	f000 80c3 	beq.w	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 800600a:	2000      	movs	r0, #0
 800600c:	e0a5      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800600e:	4b37      	ldr	r3, [pc, #220]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006016:	4836      	ldr	r0, [pc, #216]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006018:	40d8      	lsrs	r0, r3
 800601a:	e09e      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800601c:	4b33      	ldr	r3, [pc, #204]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800601e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
      switch (srcclk)
 8006020:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8006024:	d00d      	beq.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8006026:	2800      	cmp	r0, #0
 8006028:	f000 8097 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800602c:	4b2f      	ldr	r3, [pc, #188]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006034:	f000 8091 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006038:	a804      	add	r0, sp, #16
 800603a:	f7ff fac5 	bl	80055c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800603e:	9806      	ldr	r0, [sp, #24]
 8006040:	e08b      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006042:	4b2a      	ldr	r3, [pc, #168]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800604a:	f000 8086 	beq.w	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800604e:	a807      	add	r0, sp, #28
 8006050:	f7ff fcb2 	bl	80059b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006054:	9808      	ldr	r0, [sp, #32]
 8006056:	e080      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006058:	4b24      	ldr	r3, [pc, #144]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800605a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8006060:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006064:	d02f      	beq.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006066:	d815      	bhi.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8006068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800606c:	d021      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800606e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006072:	d109      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006074:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800607c:	d06d      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800607e:	a801      	add	r0, sp, #4
 8006080:	f7ff fb9e 	bl	80057c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006084:	9802      	ldr	r0, [sp, #8]
 8006086:	e068      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8006088:	b913      	cbnz	r3, 8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800608a:	f7ff fa8b 	bl	80055a4 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 800608e:	e064      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 8006090:	2000      	movs	r0, #0
 8006092:	e062      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006098:	d020      	beq.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 800609a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800609e:	d106      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80060a8:	d057      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = HSE_VALUE;
 80060aa:	4812      	ldr	r0, [pc, #72]	; (80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 80060ac:	e055      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
      switch (srcclk)
 80060ae:	2000      	movs	r0, #0
 80060b0:	e053      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80060ba:	d04e      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060bc:	a804      	add	r0, sp, #16
 80060be:	f7ff fa83 	bl	80055c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060c2:	9805      	ldr	r0, [sp, #20]
 80060c4:	e049      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	f010 0004 	ands.w	r0, r0, #4
 80060ce:	d044      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80060d6:	4806      	ldr	r0, [pc, #24]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80060d8:	40d8      	lsrs	r0, r3
 80060da:	e03e      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80060dc:	4b03      	ldr	r3, [pc, #12]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80060e4:	d039      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = CSI_VALUE;
 80060e6:	4804      	ldr	r0, [pc, #16]	; (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 80060e8:	e037      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 80060ea:	bf00      	nop
 80060ec:	58024400 	.word	0x58024400
 80060f0:	03d09000 	.word	0x03d09000
 80060f4:	016e3600 	.word	0x016e3600
 80060f8:	003d0900 	.word	0x003d0900
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80060fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8006104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006108:	d00c      	beq.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800610a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800610e:	d013      	beq.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
 8006110:	b10b      	cbz	r3, 8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006112:	2000      	movs	r0, #0
 8006114:	e021      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006116:	4b1f      	ldr	r3, [pc, #124]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800611e:	d01c      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = HSE_VALUE;
 8006120:	481d      	ldr	r0, [pc, #116]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
  return frequency;
 8006122:	e01a      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006124:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800612c:	d015      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800612e:	a807      	add	r0, sp, #28
 8006130:	f7ff fc42 	bl	80059b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006134:	9808      	ldr	r0, [sp, #32]
 8006136:	e010      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006138:	4b16      	ldr	r3, [pc, #88]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006140:	d00b      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006142:	a804      	add	r0, sp, #16
 8006144:	f7ff fa40 	bl	80055c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006148:	9805      	ldr	r0, [sp, #20]
 800614a:	e006      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 800614c:	4813      	ldr	r0, [pc, #76]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800614e:	e004      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8006150:	4813      	ldr	r0, [pc, #76]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8006152:	e002      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8006154:	4810      	ldr	r0, [pc, #64]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8006156:	e000      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006158:	4810      	ldr	r0, [pc, #64]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
}
 800615a:	b00b      	add	sp, #44	; 0x2c
 800615c:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 8006160:	480f      	ldr	r0, [pc, #60]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8006162:	e7fa      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8006164:	480c      	ldr	r0, [pc, #48]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8006166:	e7f8      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006168:	480c      	ldr	r0, [pc, #48]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 800616a:	e7f6      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 800616c:	480c      	ldr	r0, [pc, #48]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800616e:	e7f4      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8006170:	4809      	ldr	r0, [pc, #36]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8006172:	e7f2      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006174:	4809      	ldr	r0, [pc, #36]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8006176:	e7f0      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8006178:	4809      	ldr	r0, [pc, #36]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800617a:	e7ee      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 800617c:	4806      	ldr	r0, [pc, #24]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800617e:	e7ec      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006180:	4806      	ldr	r0, [pc, #24]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8006182:	e7ea      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 8006184:	4806      	ldr	r0, [pc, #24]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 8006186:	e7e8      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8006188:	4803      	ldr	r0, [pc, #12]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800618a:	e7e6      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = CSI_VALUE;
 800618c:	4804      	ldr	r0, [pc, #16]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>)
 800618e:	e7e4      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HSE_VALUE;
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8006192:	e7e2      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8006194:	58024400 	.word	0x58024400
 8006198:	016e3600 	.word	0x016e3600
 800619c:	00bb8000 	.word	0x00bb8000
 80061a0:	003d0900 	.word	0x003d0900

080061a4 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d040      	beq.n	800622a <HAL_RNG_Init+0x86>
{
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80061ac:	7a43      	ldrb	r3, [r0, #9]
 80061ae:	b1b3      	cbz	r3, 80061de <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80061b0:	2302      	movs	r3, #2
 80061b2:	7263      	strb	r3, [r4, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	6813      	ldr	r3, [r2, #0]
 80061b8:	f023 0320 	bic.w	r3, r3, #32
 80061bc:	6861      	ldr	r1, [r4, #4]
 80061be:	430b      	orrs	r3, r1
 80061c0:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	6813      	ldr	r3, [r2, #0]
 80061c6:	f043 0304 	orr.w	r3, r3, #4
 80061ca:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80061d4:	d007      	beq.n	80061e6 <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80061d6:	2304      	movs	r3, #4
 80061d8:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 80061da:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80061dc:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80061de:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80061e0:	f7fa fb8c 	bl	80008fc <HAL_RNG_MspInit>
 80061e4:	e7e4      	b.n	80061b0 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 80061e6:	f7fb f9bb 	bl	8001560 <HAL_GetTick>
 80061ea:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f013 0f04 	tst.w	r3, #4
 80061f4:	d109      	bne.n	800620a <HAL_RNG_Init+0x66>
  hrng->State = HAL_RNG_STATE_READY;
 80061f6:	2301      	movs	r3, #1
 80061f8:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80061fa:	2000      	movs	r0, #0
 80061fc:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 80061fe:	e7ed      	b.n	80061dc <HAL_RNG_Init+0x38>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f013 0f04 	tst.w	r3, #4
 8006208:	d0f5      	beq.n	80061f6 <HAL_RNG_Init+0x52>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800620a:	f7fb f9a9 	bl	8001560 <HAL_GetTick>
 800620e:	1b40      	subs	r0, r0, r5
 8006210:	2802      	cmp	r0, #2
 8006212:	d9f5      	bls.n	8006200 <HAL_RNG_Init+0x5c>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f013 0f04 	tst.w	r3, #4
 800621c:	d0f0      	beq.n	8006200 <HAL_RNG_Init+0x5c>
        hrng->State = HAL_RNG_STATE_ERROR;
 800621e:	2304      	movs	r3, #4
 8006220:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006222:	2302      	movs	r3, #2
 8006224:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 8006226:	2001      	movs	r0, #1
 8006228:	e7d8      	b.n	80061dc <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 800622a:	2001      	movs	r0, #1
}
 800622c:	4770      	bx	lr

0800622e <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
 800622e:	2901      	cmp	r1, #1
 8006230:	bf14      	ite	ne
 8006232:	2301      	movne	r3, #1
 8006234:	2309      	moveq	r3, #9
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006236:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006238:	2a08      	cmp	r2, #8
 800623a:	d008      	beq.n	800624e <SAI_InterruptFlag+0x20>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800623c:	6842      	ldr	r2, [r0, #4]
 800623e:	3a02      	subs	r2, #2
 8006240:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006242:	bf94      	ite	ls
 8006244:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006248:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 800624c:	4770      	bx	lr
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800624e:	6842      	ldr	r2, [r0, #4]
 8006250:	f022 0202 	bic.w	r2, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006254:	2a01      	cmp	r2, #1
    tmpIT |= SAI_IT_CNRDY;
 8006256:	bf08      	it	eq
 8006258:	f043 0310 	orreq.w	r3, r3, #16
 800625c:	e7ee      	b.n	800623c <SAI_InterruptFlag+0xe>
	...

08006260 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006260:	4b0e      	ldr	r3, [pc, #56]	; (800629c <SAI_Disable+0x3c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0e      	ldr	r2, [pc, #56]	; (80062a0 <SAI_Disable+0x40>)
 8006266:	fba2 2303 	umull	r2, r3, r2, r3
 800626a:	0b1b      	lsrs	r3, r3, #12
 800626c:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800626e:	6801      	ldr	r1, [r0, #0]
 8006270:	680a      	ldr	r2, [r1, #0]
 8006272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006276:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006278:	b13b      	cbz	r3, 800628a <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 800627a:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800627c:	6802      	ldr	r2, [r0, #0]
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006284:	d1f8      	bne.n	8006278 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	2000      	movs	r0, #0

  return status;
}
 8006288:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800628a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800628e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006292:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8006296:	2003      	movs	r0, #3
      break;
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	24000000 	.word	0x24000000
 80062a0:	95cbec1b 	.word	0x95cbec1b

080062a4 <HAL_SAI_Init>:
{
 80062a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 80062a8:	2800      	cmp	r0, #0
 80062aa:	f000 81d2 	beq.w	8006652 <HAL_SAI_Init+0x3ae>
 80062ae:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80062b0:	f7fb f970 	bl	8001594 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80062b4:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
 80062b8:	2d01      	cmp	r5, #1
 80062ba:	d01c      	beq.n	80062f6 <HAL_SAI_Init+0x52>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	4aac      	ldr	r2, [pc, #688]	; (8006570 <HAL_SAI_Init+0x2cc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d02d      	beq.n	8006320 <HAL_SAI_Init+0x7c>
 80062c4:	3220      	adds	r2, #32
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d02a      	beq.n	8006320 <HAL_SAI_Init+0x7c>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80062ca:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d047      	beq.n	8006362 <HAL_SAI_Init+0xbe>
 80062d2:	3220      	adds	r2, #32
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d044      	beq.n	8006362 <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80062d8:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80062dc:	4293      	cmp	r3, r2
 80062de:	d042      	beq.n	8006366 <HAL_SAI_Init+0xc2>
 80062e0:	3220      	adds	r2, #32
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d03f      	beq.n	8006366 <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80062e6:	4aa3      	ldr	r2, [pc, #652]	; (8006574 <HAL_SAI_Init+0x2d0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d017      	beq.n	800631c <HAL_SAI_Init+0x78>
 80062ec:	3220      	adds	r2, #32
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d014      	beq.n	800631c <HAL_SAI_Init+0x78>
    return HAL_ERROR;
 80062f2:	2501      	movs	r5, #1
 80062f4:	e10f      	b.n	8006516 <HAL_SAI_Init+0x272>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	4a9d      	ldr	r2, [pc, #628]	; (8006570 <HAL_SAI_Init+0x2cc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d006      	beq.n	800630c <HAL_SAI_Init+0x68>
 80062fe:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8006302:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8006306:	4293      	cmp	r3, r2
 8006308:	f040 8105 	bne.w	8006516 <HAL_SAI_Init+0x272>
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	2b01      	cmp	r3, #1
 8006310:	f040 8101 	bne.w	8006516 <HAL_SAI_Init+0x272>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006314:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0d0      	beq.n	80062bc <HAL_SAI_Init+0x18>
 800631a:	e0fc      	b.n	8006516 <HAL_SAI_Init+0x272>
    SaiBaseAddress = SAI4;
 800631c:	4e96      	ldr	r6, [pc, #600]	; (8006578 <HAL_SAI_Init+0x2d4>)
 800631e:	e000      	b.n	8006322 <HAL_SAI_Init+0x7e>
    SaiBaseAddress = SAI1;
 8006320:	4e96      	ldr	r6, [pc, #600]	; (800657c <HAL_SAI_Init+0x2d8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8006322:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8006326:	b303      	cbz	r3, 800636a <HAL_SAI_Init+0xc6>
  if(SAI_Disable(hsai) != HAL_OK)
 8006328:	4620      	mov	r0, r4
 800632a:	f7ff ff99 	bl	8006260 <SAI_Disable>
 800632e:	4605      	mov	r5, r0
 8006330:	2800      	cmp	r0, #0
 8006332:	f040 8190 	bne.w	8006656 <HAL_SAI_Init+0x3b2>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800633c:	68e3      	ldr	r3, [r4, #12]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d019      	beq.n	8006376 <HAL_SAI_Init+0xd2>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006342:	2b02      	cmp	r3, #2
 8006344:	bf14      	ite	ne
 8006346:	2200      	movne	r2, #0
 8006348:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 800634a:	68a3      	ldr	r3, [r4, #8]
 800634c:	3b01      	subs	r3, #1
 800634e:	2b04      	cmp	r3, #4
 8006350:	f200 80f6 	bhi.w	8006540 <HAL_SAI_Init+0x29c>
 8006354:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006358:	00e20011 	.word	0x00e20011
 800635c:	00ea00e5 	.word	0x00ea00e5
 8006360:	00ef      	.short	0x00ef
    SaiBaseAddress = SAI2;
 8006362:	4e87      	ldr	r6, [pc, #540]	; (8006580 <HAL_SAI_Init+0x2dc>)
 8006364:	e7dd      	b.n	8006322 <HAL_SAI_Init+0x7e>
    SaiBaseAddress = SAI3;
 8006366:	4e87      	ldr	r6, [pc, #540]	; (8006584 <HAL_SAI_Init+0x2e0>)
 8006368:	e7db      	b.n	8006322 <HAL_SAI_Init+0x7e>
    hsai->Lock = HAL_UNLOCKED;
 800636a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800636e:	4620      	mov	r0, r4
 8006370:	f7fa fb54 	bl	8000a1c <HAL_SAI_MspInit>
 8006374:	e7d8      	b.n	8006328 <HAL_SAI_Init+0x84>
  switch (hsai->Init.SynchroExt)
 8006376:	2210      	movs	r2, #16
 8006378:	e7e7      	b.n	800634a <HAL_SAI_Init+0xa6>
  switch (hsai->Init.Synchro)
 800637a:	f44f 6880 	mov.w	r8, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 800637e:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006380:	6a23      	ldr	r3, [r4, #32]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d049      	beq.n	800641a <HAL_SAI_Init+0x176>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	4a79      	ldr	r2, [pc, #484]	; (8006570 <HAL_SAI_Init+0x2cc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	f000 80db 	beq.w	8006546 <HAL_SAI_Init+0x2a2>
 8006390:	3220      	adds	r2, #32
 8006392:	4293      	cmp	r3, r2
 8006394:	f000 80d7 	beq.w	8006546 <HAL_SAI_Init+0x2a2>
    uint32_t freq = 0;
 8006398:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	4a7a      	ldr	r2, [pc, #488]	; (8006588 <HAL_SAI_Init+0x2e4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	f000 80d6 	beq.w	8006550 <HAL_SAI_Init+0x2ac>
 80063a4:	3220      	adds	r2, #32
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f000 80d2 	beq.w	8006550 <HAL_SAI_Init+0x2ac>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	4a77      	ldr	r2, [pc, #476]	; (800658c <HAL_SAI_Init+0x2e8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	f000 80d2 	beq.w	800655a <HAL_SAI_Init+0x2b6>
 80063b6:	3220      	adds	r2, #32
 80063b8:	4293      	cmp	r3, r2
 80063ba:	f000 80ce 	beq.w	800655a <HAL_SAI_Init+0x2b6>
    if (hsai->Instance == SAI4_Block_A)
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	4b6c      	ldr	r3, [pc, #432]	; (8006574 <HAL_SAI_Init+0x2d0>)
 80063c2:	429a      	cmp	r2, r3
 80063c4:	f000 80ce 	beq.w	8006564 <HAL_SAI_Init+0x2c0>
    if (hsai->Instance == SAI4_Block_B)
 80063c8:	6822      	ldr	r2, [r4, #0]
 80063ca:	4b71      	ldr	r3, [pc, #452]	; (8006590 <HAL_SAI_Init+0x2ec>)
 80063cc:	429a      	cmp	r2, r3
 80063ce:	f000 80e9 	beq.w	80065a4 <HAL_SAI_Init+0x300>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80063d2:	69a3      	ldr	r3, [r4, #24]
 80063d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063d8:	f000 80e9 	beq.w	80065ae <HAL_SAI_Init+0x30a>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80063dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e2:	bf0c      	ite	eq
 80063e4:	2302      	moveq	r3, #2
 80063e6:	2301      	movne	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80063e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80063ec:	0040      	lsls	r0, r0, #1
 80063ee:	6a22      	ldr	r2, [r4, #32]
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 80063fa:	4b66      	ldr	r3, [pc, #408]	; (8006594 <HAL_SAI_Init+0x2f0>)
 80063fc:	fba3 2300 	umull	r2, r3, r3, r0
 8006400:	08db      	lsrs	r3, r3, #3
    if ((tmpval % 10U) > 8U)
 8006402:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006406:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800640a:	2808      	cmp	r0, #8
      hsai->Init.Mckdiv += 1U;
 800640c:	bf88      	it	hi
 800640e:	3301      	addhi	r3, #1
 8006410:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006412:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006414:	2b04      	cmp	r3, #4
 8006416:	f000 80de 	beq.w	80065d6 <HAL_SAI_Init+0x332>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800641a:	6863      	ldr	r3, [r4, #4]
 800641c:	f033 0702 	bics.w	r7, r3, #2
 8006420:	f040 80dd 	bne.w	80065de <HAL_SAI_Init+0x33a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006424:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006426:	2b01      	cmp	r3, #1
 8006428:	bf18      	it	ne
 800642a:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800642e:	f7fb f8b1 	bl	8001594 <HAL_GetREVID>
 8006432:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006436:	f0c0 80d9 	bcc.w	80065ec <HAL_SAI_Init+0x348>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800643a:	6822      	ldr	r2, [r4, #0]
 800643c:	6811      	ldr	r1, [r2, #0]
 800643e:	4b56      	ldr	r3, [pc, #344]	; (8006598 <HAL_SAI_Init+0x2f4>)
 8006440:	400b      	ands	r3, r1
 8006442:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	6811      	ldr	r1, [r2, #0]
 8006448:	6863      	ldr	r3, [r4, #4]
 800644a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800644c:	4303      	orrs	r3, r0
 800644e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006450:	4303      	orrs	r3, r0
 8006452:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006454:	4303      	orrs	r3, r0
 8006456:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006458:	4303      	orrs	r3, r0
 800645a:	6960      	ldr	r0, [r4, #20]
 800645c:	4303      	orrs	r3, r0
 800645e:	69a0      	ldr	r0, [r4, #24]
 8006460:	4303      	orrs	r3, r0
 8006462:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006464:	4303      	orrs	r3, r0
 8006466:	6920      	ldr	r0, [r4, #16]
 8006468:	4303      	orrs	r3, r0
 800646a:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800646c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800646e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8006472:	ea43 0308 	orr.w	r3, r3, r8
 8006476:	433b      	orrs	r3, r7
 8006478:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800647a:	6822      	ldr	r2, [r4, #0]
 800647c:	6851      	ldr	r1, [r2, #4]
 800647e:	4b47      	ldr	r3, [pc, #284]	; (800659c <HAL_SAI_Init+0x2f8>)
 8006480:	400b      	ands	r3, r1
 8006482:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006484:	6822      	ldr	r2, [r4, #0]
 8006486:	6851      	ldr	r1, [r2, #4]
 8006488:	69e3      	ldr	r3, [r4, #28]
 800648a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800648c:	4303      	orrs	r3, r0
 800648e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006490:	4303      	orrs	r3, r0
 8006492:	430b      	orrs	r3, r1
 8006494:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006496:	6822      	ldr	r2, [r4, #0]
 8006498:	6891      	ldr	r1, [r2, #8]
 800649a:	4b41      	ldr	r3, [pc, #260]	; (80065a0 <HAL_SAI_Init+0x2fc>)
 800649c:	400b      	ands	r3, r1
 800649e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80064a0:	6821      	ldr	r1, [r4, #0]
 80064a2:	688a      	ldr	r2, [r1, #8]
 80064a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064a6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80064a8:	4303      	orrs	r3, r0
 80064aa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80064ac:	4303      	orrs	r3, r0
 80064ae:	4313      	orrs	r3, r2
 80064b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80064b2:	3a01      	subs	r2, #1
 80064b4:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80064b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80064b8:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80064ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80064be:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80064c0:	6822      	ldr	r2, [r4, #0]
 80064c2:	68d3      	ldr	r3, [r2, #12]
 80064c4:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80064c8:	f023 030f 	bic.w	r3, r3, #15
 80064cc:	041b      	lsls	r3, r3, #16
 80064ce:	0c1b      	lsrs	r3, r3, #16
 80064d0:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80064d2:	6821      	ldr	r1, [r4, #0]
 80064d4:	68ca      	ldr	r2, [r1, #12]
 80064d6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80064d8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80064da:	4303      	orrs	r3, r0
 80064dc:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80064de:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80064e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80064e4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80064e6:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80064e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80064ec:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	4a1f      	ldr	r2, [pc, #124]	; (8006570 <HAL_SAI_Init+0x2cc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	f000 8099 	beq.w	800662a <HAL_SAI_Init+0x386>
 80064f8:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80064fc:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8006500:	4293      	cmp	r3, r2
 8006502:	f000 8092 	beq.w	800662a <HAL_SAI_Init+0x386>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006506:	2300      	movs	r3, #0
 8006508:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 800650c:	2201      	movs	r2, #1
 800650e:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8006512:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8006516:	4628      	mov	r0, r5
 8006518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800651c:	f44f 6800 	mov.w	r8, #2048	; 0x800
      break;
 8006520:	e72d      	b.n	800637e <HAL_SAI_Init+0xda>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006522:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006526:	f44f 6800 	mov.w	r8, #2048	; 0x800
      break;
 800652a:	e728      	b.n	800637e <HAL_SAI_Init+0xda>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800652c:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006530:	f44f 6800 	mov.w	r8, #2048	; 0x800
      break;
 8006534:	e723      	b.n	800637e <HAL_SAI_Init+0xda>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006536:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800653a:	f44f 6800 	mov.w	r8, #2048	; 0x800
      break;
 800653e:	e71e      	b.n	800637e <HAL_SAI_Init+0xda>
      syncen_bits = 0;
 8006540:	f04f 0800 	mov.w	r8, #0
 8006544:	e71b      	b.n	800637e <HAL_SAI_Init+0xda>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006546:	f44f 7080 	mov.w	r0, #256	; 0x100
 800654a:	f7ff fb31 	bl	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq>
 800654e:	e724      	b.n	800639a <HAL_SAI_Init+0xf6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006550:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006554:	f7ff fb2c 	bl	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006558:	e728      	b.n	80063ac <HAL_SAI_Init+0x108>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800655a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800655e:	f7ff fb27 	bl	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006562:	e72c      	b.n	80063be <HAL_SAI_Init+0x11a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006564:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006568:	f7ff fb22 	bl	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq>
 800656c:	e72c      	b.n	80063c8 <HAL_SAI_Init+0x124>
 800656e:	bf00      	nop
 8006570:	40015804 	.word	0x40015804
 8006574:	58005404 	.word	0x58005404
 8006578:	58005400 	.word	0x58005400
 800657c:	40015800 	.word	0x40015800
 8006580:	40015c00 	.word	0x40015c00
 8006584:	40016000 	.word	0x40016000
 8006588:	40015c04 	.word	0x40015c04
 800658c:	40016004 	.word	0x40016004
 8006590:	58005424 	.word	0x58005424
 8006594:	cccccccd 	.word	0xcccccccd
 8006598:	f005c010 	.word	0xf005c010
 800659c:	ffff1ff0 	.word	0xffff1ff0
 80065a0:	fff88000 	.word	0xfff88000
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80065a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80065a8:	f7ff fb02 	bl	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq>
 80065ac:	e711      	b.n	80063d2 <HAL_SAI_Init+0x12e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80065ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d00b      	beq.n	80065cc <HAL_SAI_Init+0x328>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d00b      	beq.n	80065d0 <HAL_SAI_Init+0x32c>
        tmpframelength = hsai->FrameInit.FrameLength;
 80065b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80065ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80065be:	0040      	lsls	r0, r0, #1
 80065c0:	6a22      	ldr	r2, [r4, #32]
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80065ca:	e716      	b.n	80063fa <HAL_SAI_Init+0x156>
        tmpframelength = 64U;
 80065cc:	2340      	movs	r3, #64	; 0x40
 80065ce:	e7f4      	b.n	80065ba <HAL_SAI_Init+0x316>
        tmpframelength = 256U;
 80065d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065d4:	e7f1      	b.n	80065ba <HAL_SAI_Init+0x316>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80065d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	6263      	str	r3, [r4, #36]	; 0x24
 80065dc:	e71d      	b.n	800641a <HAL_SAI_Init+0x176>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80065de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	bf0c      	ite	eq
 80065e4:	f44f 7700 	moveq.w	r7, #512	; 0x200
 80065e8:	2700      	movne	r7, #0
 80065ea:	e720      	b.n	800642e <HAL_SAI_Init+0x18a>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	6811      	ldr	r1, [r2, #0]
 80065f0:	4b1a      	ldr	r3, [pc, #104]	; (800665c <HAL_SAI_Init+0x3b8>)
 80065f2:	400b      	ands	r3, r1
 80065f4:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	6811      	ldr	r1, [r2, #0]
 80065fa:	6863      	ldr	r3, [r4, #4]
 80065fc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80065fe:	4303      	orrs	r3, r0
 8006600:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006602:	4303      	orrs	r3, r0
 8006604:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006606:	4303      	orrs	r3, r0
 8006608:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800660a:	4303      	orrs	r3, r0
 800660c:	6960      	ldr	r0, [r4, #20]
 800660e:	4303      	orrs	r3, r0
 8006610:	69a0      	ldr	r0, [r4, #24]
 8006612:	4303      	orrs	r3, r0
 8006614:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006616:	4303      	orrs	r3, r0
 8006618:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800661a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800661c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8006620:	ea43 0308 	orr.w	r3, r3, r8
 8006624:	433b      	orrs	r3, r7
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	e727      	b.n	800647a <HAL_SAI_Init+0x1d6>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800662a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006632:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8006636:	2b01      	cmp	r3, #1
 8006638:	f47f af65 	bne.w	8006506 <HAL_SAI_Init+0x262>
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800663c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800663e:	1e5a      	subs	r2, r3, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006640:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006642:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006646:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006648:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	6473      	str	r3, [r6, #68]	; 0x44
 8006650:	e759      	b.n	8006506 <HAL_SAI_Init+0x262>
    return HAL_ERROR;
 8006652:	2501      	movs	r5, #1
 8006654:	e75f      	b.n	8006516 <HAL_SAI_Init+0x272>
    return HAL_ERROR;
 8006656:	2501      	movs	r5, #1
 8006658:	e75d      	b.n	8006516 <HAL_SAI_Init+0x272>
 800665a:	bf00      	nop
 800665c:	f805c010 	.word	0xf805c010

08006660 <HAL_SAI_InitProtocol>:
{
 8006660:	b510      	push	{r4, lr}
 8006662:	4684      	mov	ip, r0
  switch (protocol)
 8006664:	2902      	cmp	r1, #2
 8006666:	d930      	bls.n	80066ca <HAL_SAI_InitProtocol+0x6a>
 8006668:	1ec8      	subs	r0, r1, #3
 800666a:	2801      	cmp	r0, #1
 800666c:	f200 80e7 	bhi.w	800683e <HAL_SAI_InitProtocol+0x1de>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006670:	2000      	movs	r0, #0
 8006672:	f8cc 0044 	str.w	r0, [ip, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006676:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800667a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800667e:	f034 0402 	bics.w	r4, r4, #2
 8006682:	bf0c      	ite	eq
 8006684:	2401      	moveq	r4, #1
 8006686:	4604      	movne	r4, r0
 8006688:	f8cc 4050 	str.w	r4, [ip, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800668c:	f8cc 005c 	str.w	r0, [ip, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006690:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8006694:	f8cc 4060 	str.w	r4, [ip, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8006698:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800669c:	f8cc 4064 	str.w	r4, [ip, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80066a0:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80066a4:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80066a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80066ac:	f8cc 0074 	str.w	r0, [ip, #116]	; 0x74
      hsai->FrameInit.ActiveFrameLength = 13;
 80066b0:	2904      	cmp	r1, #4
 80066b2:	bf0c      	ite	eq
 80066b4:	2101      	moveq	r1, #1
 80066b6:	210d      	movne	r1, #13
 80066b8:	f8cc 1058 	str.w	r1, [ip, #88]	; 0x58
  switch (datasize)
 80066bc:	2a03      	cmp	r2, #3
 80066be:	f200 80c2 	bhi.w	8006846 <HAL_SAI_InitProtocol+0x1e6>
 80066c2:	e8df f002 	tbb	[pc, r2]
 80066c6:	9d90      	.short	0x9d90
 80066c8:	b0a6      	.short	0xb0a6
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80066ca:	2000      	movs	r0, #0
 80066cc:	f8cc 0044 	str.w	r0, [ip, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80066d0:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80066d4:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80066d8:	f034 0402 	bics.w	r4, r4, #2
 80066dc:	bf14      	ite	ne
 80066de:	2401      	movne	r4, #1
 80066e0:	4604      	moveq	r4, r0
 80066e2:	f8cc 4050 	str.w	r4, [ip, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80066e6:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80066ea:	f8cc 405c 	str.w	r4, [ip, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80066ee:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80066f2:	f8cc 4074 	str.w	r4, [ip, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80066f6:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80066fa:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
  if ((nbslot & 0x1U) != 0U)
 80066fe:	f013 0f01 	tst.w	r3, #1
 8006702:	f040 809e 	bne.w	8006842 <HAL_SAI_InitProtocol+0x1e2>
  if (protocol == SAI_I2S_STANDARD)
 8006706:	b961      	cbnz	r1, 8006722 <HAL_SAI_InitProtocol+0xc2>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006708:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800670c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006710:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
  switch (datasize)
 8006714:	2a03      	cmp	r2, #3
 8006716:	f200 8090 	bhi.w	800683a <HAL_SAI_InitProtocol+0x1da>
 800671a:	e8df f002 	tbb	[pc, r2]
 800671e:	270f      	.short	0x270f
 8006720:	4d37      	.short	0x4d37
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006722:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006726:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800672a:	2000      	movs	r0, #0
 800672c:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
  switch (datasize)
 8006730:	2a03      	cmp	r2, #3
 8006732:	d84f      	bhi.n	80067d4 <HAL_SAI_InitProtocol+0x174>
 8006734:	e8df f002 	tbb	[pc, r2]
 8006738:	402a1a02 	.word	0x402a1a02
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800673c:	2080      	movs	r0, #128	; 0x80
 800673e:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	0158      	lsls	r0, r3, #5
 8006746:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006750:	2340      	movs	r3, #64	; 0x40
 8006752:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006756:	2902      	cmp	r1, #2
 8006758:	d14e      	bne.n	80067f8 <HAL_SAI_InitProtocol+0x198>
  HAL_StatusTypeDef status = HAL_OK;
 800675a:	2000      	movs	r0, #0
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800675c:	2a01      	cmp	r2, #1
 800675e:	d13f      	bne.n	80067e0 <HAL_SAI_InitProtocol+0x180>
      hsai->SlotInit.FirstBitOffset = 16;
 8006760:	2310      	movs	r3, #16
 8006762:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
  if (status == HAL_OK)
 8006766:	2800      	cmp	r0, #0
 8006768:	d16a      	bne.n	8006840 <HAL_SAI_InitProtocol+0x1e0>
 800676a:	e045      	b.n	80067f8 <HAL_SAI_InitProtocol+0x198>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800676c:	2280      	movs	r2, #128	; 0x80
 800676e:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	0198      	lsls	r0, r3, #6
 8006776:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800677a:	015b      	lsls	r3, r3, #5
 800677c:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006780:	f8cc 206c 	str.w	r2, [ip, #108]	; 0x6c
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006784:	2902      	cmp	r1, #2
 8006786:	d137      	bne.n	80067f8 <HAL_SAI_InitProtocol+0x198>
  HAL_StatusTypeDef status = HAL_OK;
 8006788:	2000      	movs	r0, #0
 800678a:	e7e9      	b.n	8006760 <HAL_SAI_InitProtocol+0x100>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800678c:	20c0      	movs	r0, #192	; 0xc0
 800678e:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006792:	085b      	lsrs	r3, r3, #1
 8006794:	0198      	lsls	r0, r3, #6
 8006796:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800679a:	015b      	lsls	r3, r3, #5
 800679c:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067a0:	2380      	movs	r3, #128	; 0x80
 80067a2:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80067a6:	2902      	cmp	r1, #2
 80067a8:	d126      	bne.n	80067f8 <HAL_SAI_InitProtocol+0x198>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80067aa:	2a02      	cmp	r2, #2
 80067ac:	d124      	bne.n	80067f8 <HAL_SAI_InitProtocol+0x198>
 80067ae:	2000      	movs	r0, #0
      hsai->SlotInit.FirstBitOffset = 8;
 80067b0:	2308      	movs	r3, #8
 80067b2:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 80067b6:	e7d6      	b.n	8006766 <HAL_SAI_InitProtocol+0x106>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80067b8:	20e0      	movs	r0, #224	; 0xe0
 80067ba:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	0198      	lsls	r0, r3, #6
 80067c2:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80067c6:	015b      	lsls	r3, r3, #5
 80067c8:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
      break;
 80067d2:	e7e8      	b.n	80067a6 <HAL_SAI_InitProtocol+0x146>
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80067d4:	2902      	cmp	r1, #2
      status = HAL_ERROR;
 80067d6:	bf08      	it	eq
 80067d8:	2001      	moveq	r0, #1
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80067da:	d0bf      	beq.n	800675c <HAL_SAI_InitProtocol+0xfc>
 80067dc:	2001      	movs	r0, #1
 80067de:	e02f      	b.n	8006840 <HAL_SAI_InitProtocol+0x1e0>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80067e0:	2a02      	cmp	r2, #2
 80067e2:	d1c0      	bne.n	8006766 <HAL_SAI_InitProtocol+0x106>
 80067e4:	e7e4      	b.n	80067b0 <HAL_SAI_InitProtocol+0x150>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80067e6:	2280      	movs	r2, #128	; 0x80
 80067e8:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80067f2:	2340      	movs	r3, #64	; 0x40
 80067f4:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
    status = HAL_SAI_Init(hsai);
 80067f8:	4660      	mov	r0, ip
 80067fa:	f7ff fd53 	bl	80062a4 <HAL_SAI_Init>
 80067fe:	e01f      	b.n	8006840 <HAL_SAI_InitProtocol+0x1e0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006800:	2280      	movs	r2, #128	; 0x80
 8006802:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006806:	015b      	lsls	r3, r3, #5
 8006808:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800680c:	f8cc 206c 	str.w	r2, [ip, #108]	; 0x6c
      break;
 8006810:	e7f2      	b.n	80067f8 <HAL_SAI_InitProtocol+0x198>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006812:	22c0      	movs	r2, #192	; 0xc0
 8006814:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006818:	015b      	lsls	r3, r3, #5
 800681a:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800681e:	2380      	movs	r3, #128	; 0x80
 8006820:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
      break;
 8006824:	e7e8      	b.n	80067f8 <HAL_SAI_InitProtocol+0x198>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006826:	22e0      	movs	r2, #224	; 0xe0
 8006828:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800682c:	015b      	lsls	r3, r3, #5
 800682e:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006832:	2380      	movs	r3, #128	; 0x80
 8006834:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
      break;
 8006838:	e7de      	b.n	80067f8 <HAL_SAI_InitProtocol+0x198>
  switch (datasize)
 800683a:	2001      	movs	r0, #1
 800683c:	e793      	b.n	8006766 <HAL_SAI_InitProtocol+0x106>
  switch (protocol)
 800683e:	2001      	movs	r0, #1
}
 8006840:	bd10      	pop	{r4, pc}
 8006842:	2001      	movs	r0, #1
 8006844:	e7fc      	b.n	8006840 <HAL_SAI_InitProtocol+0x1e0>
  switch (datasize)
 8006846:	2001      	movs	r0, #1
  return status;
 8006848:	e7fa      	b.n	8006840 <HAL_SAI_InitProtocol+0x1e0>

0800684a <HAL_SAI_Abort>:
{
 800684a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 800684c:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8006850:	2b01      	cmp	r3, #1
 8006852:	d05e      	beq.n	8006912 <HAL_SAI_Abort+0xc8>
 8006854:	4604      	mov	r4, r0
 8006856:	2301      	movs	r3, #1
 8006858:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800685c:	6803      	ldr	r3, [r0, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006864:	d03a      	beq.n	80068dc <HAL_SAI_Abort+0x92>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800686c:	601a      	str	r2, [r3, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800686e:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b12      	cmp	r3, #18
 8006876:	d018      	beq.n	80068aa <HAL_SAI_Abort+0x60>
  HAL_StatusTypeDef status = HAL_OK;
 8006878:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800687a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b22      	cmp	r3, #34	; 0x22
 8006882:	d12c      	bne.n	80068de <HAL_SAI_Abort+0x94>
 8006884:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006888:	b348      	cbz	r0, 80068de <HAL_SAI_Abort+0x94>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800688a:	f7fb fdfd 	bl	8002488 <HAL_DMA_Abort>
 800688e:	b330      	cbz	r0, 80068de <HAL_SAI_Abort+0x94>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8006890:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	2b80      	cmp	r3, #128	; 0x80
 8006898:	d021      	beq.n	80068de <HAL_SAI_Abort+0x94>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800689a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800689e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 80068a6:	2501      	movs	r5, #1
 80068a8:	e019      	b.n	80068de <HAL_SAI_Abort+0x94>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 80068aa:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80068ae:	b188      	cbz	r0, 80068d4 <HAL_SAI_Abort+0x8a>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80068b0:	f7fb fdea 	bl	8002488 <HAL_DMA_Abort>
 80068b4:	4605      	mov	r5, r0
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d0df      	beq.n	800687a <HAL_SAI_Abort+0x30>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80068ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80068be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c0:	2b80      	cmp	r3, #128	; 0x80
 80068c2:	d009      	beq.n	80068d8 <HAL_SAI_Abort+0x8e>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80068c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80068c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068cc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 80068d0:	2501      	movs	r5, #1
 80068d2:	e7d2      	b.n	800687a <HAL_SAI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 80068d4:	2500      	movs	r5, #0
 80068d6:	e7d0      	b.n	800687a <HAL_SAI_Abort+0x30>
 80068d8:	2500      	movs	r5, #0
 80068da:	e7ce      	b.n	800687a <HAL_SAI_Abort+0x30>
 80068dc:	2500      	movs	r5, #0
  hsai->Instance->IMR = 0;
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	2200      	movs	r2, #0
 80068e2:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ea:	619a      	str	r2, [r3, #24]
  if (SAI_Disable(hsai) != HAL_OK)
 80068ec:	4620      	mov	r0, r4
 80068ee:	f7ff fcb7 	bl	8006260 <SAI_Disable>
    status = HAL_ERROR;
 80068f2:	2800      	cmp	r0, #0
 80068f4:	bf18      	it	ne
 80068f6:	2501      	movne	r5, #1
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80068f8:	6822      	ldr	r2, [r4, #0]
 80068fa:	6853      	ldr	r3, [r2, #4]
 80068fc:	f043 0308 	orr.w	r3, r3, #8
 8006900:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8006902:	2301      	movs	r3, #1
 8006904:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8006908:	2300      	movs	r3, #0
 800690a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800690e:	4628      	mov	r0, r5
 8006910:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hsai);
 8006912:	2502      	movs	r5, #2
 8006914:	e7fb      	b.n	800690e <HAL_SAI_Abort+0xc4>
	...

08006918 <HAL_SAI_Transmit_DMA>:
{
 8006918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691c:	4604      	mov	r4, r0
 800691e:	4688      	mov	r8, r1
 8006920:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8006922:	f7fa fe1d 	bl	8001560 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8006926:	f1b8 0f00 	cmp.w	r8, #0
 800692a:	d068      	beq.n	80069fe <HAL_SAI_Transmit_DMA+0xe6>
 800692c:	4605      	mov	r5, r0
 800692e:	2f00      	cmp	r7, #0
 8006930:	d065      	beq.n	80069fe <HAL_SAI_Transmit_DMA+0xe6>
  if (hsai->State == HAL_SAI_STATE_READY)
 8006932:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8006936:	b2f6      	uxtb	r6, r6
 8006938:	2e01      	cmp	r6, #1
 800693a:	d164      	bne.n	8006a06 <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 800693c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8006940:	2b01      	cmp	r3, #1
 8006942:	d062      	beq.n	8006a0a <HAL_SAI_Transmit_DMA+0xf2>
 8006944:	2301      	movs	r3, #1
 8006946:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 800694a:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 800694e:	f8a4 707c 	strh.w	r7, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8006952:	f8a4 707e 	strh.w	r7, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006956:	2300      	movs	r3, #0
 8006958:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800695c:	2212      	movs	r2, #18
 800695e:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006962:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006966:	492a      	ldr	r1, [pc, #168]	; (8006a10 <HAL_SAI_Transmit_DMA+0xf8>)
 8006968:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800696a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800696e:	4929      	ldr	r1, [pc, #164]	; (8006a14 <HAL_SAI_Transmit_DMA+0xfc>)
 8006970:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006972:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006976:	4928      	ldr	r1, [pc, #160]	; (8006a18 <HAL_SAI_Transmit_DMA+0x100>)
 8006978:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800697a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800697e:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8006986:	321c      	adds	r2, #28
 8006988:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800698a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800698e:	f7fb fb9b 	bl	80020c8 <HAL_DMA_Start_IT>
 8006992:	4607      	mov	r7, r0
 8006994:	bb10      	cbnz	r0, 80069dc <HAL_SAI_Transmit_DMA+0xc4>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006996:	2100      	movs	r1, #0
 8006998:	4620      	mov	r0, r4
 800699a:	f7ff fc48 	bl	800622e <SAI_InterruptFlag>
 800699e:	6822      	ldr	r2, [r4, #0]
 80069a0:	6913      	ldr	r3, [r2, #16]
 80069a2:	4303      	orrs	r3, r0
 80069a4:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	6813      	ldr	r3, [r2, #0]
 80069aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ae:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	695a      	ldr	r2, [r3, #20]
 80069b4:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 80069b8:	d114      	bne.n	80069e4 <HAL_SAI_Transmit_DMA+0xcc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80069ba:	f7fa fdd1 	bl	8001560 <HAL_GetTick>
 80069be:	1b43      	subs	r3, r0, r5
 80069c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c4:	d9f4      	bls.n	80069b0 <HAL_SAI_Transmit_DMA+0x98>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80069c6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80069ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ce:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 80069d2:	2300      	movs	r3, #0
 80069d4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 80069d8:	2603      	movs	r6, #3
 80069da:	e011      	b.n	8006a00 <HAL_SAI_Transmit_DMA+0xe8>
      __HAL_UNLOCK(hsai);
 80069dc:	2300      	movs	r3, #0
 80069de:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 80069e2:	e00d      	b.n	8006a00 <HAL_SAI_Transmit_DMA+0xe8>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80069ea:	d103      	bne.n	80069f4 <HAL_SAI_Transmit_DMA+0xdc>
      __HAL_SAI_ENABLE(hsai);
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80069f2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80069f4:	2300      	movs	r3, #0
 80069f6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 80069fa:	463e      	mov	r6, r7
 80069fc:	e000      	b.n	8006a00 <HAL_SAI_Transmit_DMA+0xe8>
    return  HAL_ERROR;
 80069fe:	2601      	movs	r6, #1
}
 8006a00:	4630      	mov	r0, r6
 8006a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006a06:	2602      	movs	r6, #2
 8006a08:	e7fa      	b.n	8006a00 <HAL_SAI_Transmit_DMA+0xe8>
    __HAL_LOCK(hsai);
 8006a0a:	2602      	movs	r6, #2
 8006a0c:	e7f8      	b.n	8006a00 <HAL_SAI_Transmit_DMA+0xe8>
 8006a0e:	bf00      	nop
 8006a10:	08006b23 	.word	0x08006b23
 8006a14:	08006ae7 	.word	0x08006ae7
 8006a18:	08006b73 	.word	0x08006b73

08006a1c <HAL_SAI_Receive_DMA>:
{
 8006a1c:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0U))
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	d053      	beq.n	8006aca <HAL_SAI_Receive_DMA+0xae>
 8006a22:	4604      	mov	r4, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	d04f      	beq.n	8006aca <HAL_SAI_Receive_DMA+0xae>
  if (hsai->State == HAL_SAI_STATE_READY)
 8006a2a:	f890 5091 	ldrb.w	r5, [r0, #145]	; 0x91
 8006a2e:	b2ed      	uxtb	r5, r5
 8006a30:	2d01      	cmp	r5, #1
 8006a32:	d14d      	bne.n	8006ad0 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
 8006a34:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
 8006a38:	2901      	cmp	r1, #1
 8006a3a:	d04b      	beq.n	8006ad4 <HAL_SAI_Receive_DMA+0xb8>
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 8006a42:	6783      	str	r3, [r0, #120]	; 0x78
    hsai->XferSize = Size;
 8006a44:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 8006a48:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006a52:	2222      	movs	r2, #34	; 0x22
 8006a54:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006a58:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006a5c:	491e      	ldr	r1, [pc, #120]	; (8006ad8 <HAL_SAI_Receive_DMA+0xbc>)
 8006a5e:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006a60:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006a64:	491d      	ldr	r1, [pc, #116]	; (8006adc <HAL_SAI_Receive_DMA+0xc0>)
 8006a66:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006a68:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006a6c:	491c      	ldr	r1, [pc, #112]	; (8006ae0 <HAL_SAI_Receive_DMA+0xc4>)
 8006a6e:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8006a70:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006a74:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006a76:	6801      	ldr	r1, [r0, #0]
 8006a78:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8006a7c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006a7e:	311c      	adds	r1, #28
 8006a80:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8006a84:	f7fb fb20 	bl	80020c8 <HAL_DMA_Start_IT>
 8006a88:	4606      	mov	r6, r0
 8006a8a:	b118      	cbz	r0, 8006a94 <HAL_SAI_Receive_DMA+0x78>
      __HAL_UNLOCK(hsai);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8006a92:	e01b      	b.n	8006acc <HAL_SAI_Receive_DMA+0xb0>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006a94:	2100      	movs	r1, #0
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7ff fbc9 	bl	800622e <SAI_InterruptFlag>
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	6913      	ldr	r3, [r2, #16]
 8006aa0:	4303      	orrs	r3, r0
 8006aa2:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	6813      	ldr	r3, [r2, #0]
 8006aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aac:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8006ab6:	d103      	bne.n	8006ac0 <HAL_SAI_Receive_DMA+0xa4>
      __HAL_SAI_ENABLE(hsai);
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006abe:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8006ac6:	4635      	mov	r5, r6
 8006ac8:	e000      	b.n	8006acc <HAL_SAI_Receive_DMA+0xb0>
    return  HAL_ERROR;
 8006aca:	2501      	movs	r5, #1
}
 8006acc:	4628      	mov	r0, r5
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8006ad0:	2502      	movs	r5, #2
 8006ad2:	e7fb      	b.n	8006acc <HAL_SAI_Receive_DMA+0xb0>
    __HAL_LOCK(hsai);
 8006ad4:	2502      	movs	r5, #2
 8006ad6:	e7f9      	b.n	8006acc <HAL_SAI_Receive_DMA+0xb0>
 8006ad8:	08006b67 	.word	0x08006b67
 8006adc:	08006b2d 	.word	0x08006b2d
 8006ae0:	08006b73 	.word	0x08006b73

08006ae4 <HAL_SAI_TxCpltCallback>:
}
 8006ae4:	4770      	bx	lr

08006ae6 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006ae6:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae8:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006aea:	69c3      	ldr	r3, [r0, #28]
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af0:	d012      	beq.n	8006b18 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 8006af2:	2100      	movs	r1, #0
 8006af4:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006af8:	6822      	ldr	r2, [r4, #0]
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b00:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006b02:	4620      	mov	r0, r4
 8006b04:	f7ff fb93 	bl	800622e <SAI_InterruptFlag>
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	6913      	ldr	r3, [r2, #16]
 8006b0c:	ea23 0300 	bic.w	r3, r3, r0
 8006b10:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f7ff ffe3 	bl	8006ae4 <HAL_SAI_TxCpltCallback>
#endif
}
 8006b1e:	bd10      	pop	{r4, pc}

08006b20 <HAL_SAI_TxHalfCpltCallback>:
}
 8006b20:	4770      	bx	lr

08006b22 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b22:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8006b24:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b26:	f7ff fffb 	bl	8006b20 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8006b2a:	bd08      	pop	{r3, pc}

08006b2c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b2e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006b30:	69c3      	ldr	r3, [r0, #28]
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b36:	d012      	beq.n	8006b5e <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b40:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 8006b42:	2100      	movs	r1, #0
 8006b44:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f7ff fb70 	bl	800622e <SAI_InterruptFlag>
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	6913      	ldr	r3, [r2, #16]
 8006b52:	ea23 0300 	bic.w	r3, r3, r0
 8006b56:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7fa fbfa 	bl	8001358 <HAL_SAI_RxCpltCallback>
#endif
}
 8006b64:	bd10      	pop	{r4, pc}

08006b66 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b66:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006b68:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006b6a:	f7fa fbdd 	bl	8001328 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8006b6e:	bd08      	pop	{r3, pc}

08006b70 <HAL_SAI_ErrorCallback>:
}
 8006b70:	4770      	bx	lr

08006b72 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b72:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b74:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b76:	f7fc fd13 	bl	80035a0 <HAL_DMA_GetError>
 8006b7a:	2802      	cmp	r0, #2
 8006b7c:	d100      	bne.n	8006b80 <SAI_DMAError+0xe>
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 8006b7e:	bd10      	pop	{r4, pc}
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006b80:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006b8c:	6822      	ldr	r2, [r4, #0]
 8006b8e:	6813      	ldr	r3, [r2, #0]
 8006b90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b94:	6013      	str	r3, [r2, #0]
    (void) SAI_Disable(hsai);
 8006b96:	4620      	mov	r0, r4
 8006b98:	f7ff fb62 	bl	8006260 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7ff ffe1 	bl	8006b70 <HAL_SAI_ErrorCallback>
}
 8006bae:	e7e6      	b.n	8006b7e <SAI_DMAError+0xc>

08006bb0 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 8006bb0:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 811e 	beq.w	8006df6 <HAL_SAI_IRQHandler+0x246>
{
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	4604      	mov	r4, r0
    uint32_t itflags = hsai->Instance->SR;
 8006bbe:	6803      	ldr	r3, [r0, #0]
 8006bc0:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8006bc2:	6919      	ldr	r1, [r3, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8006bc4:	6818      	ldr	r0, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8006bc6:	f012 0f08 	tst.w	r2, #8
 8006bca:	d007      	beq.n	8006bdc <HAL_SAI_IRQHandler+0x2c>
 8006bcc:	f011 0f08 	tst.w	r1, #8
 8006bd0:	d004      	beq.n	8006bdc <HAL_SAI_IRQHandler+0x2c>
      hsai->InterruptServiceRoutine(hsai);
 8006bd2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	4798      	blx	r3
}
 8006bda:	bd10      	pop	{r4, pc}
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8006bdc:	f012 0f01 	tst.w	r2, #1
 8006be0:	d015      	beq.n	8006c0e <HAL_SAI_IRQHandler+0x5e>
 8006be2:	f011 0c01 	ands.w	ip, r1, #1
 8006be6:	d012      	beq.n	8006c0e <HAL_SAI_IRQHandler+0x5e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8006be8:	2201      	movs	r2, #1
 8006bea:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8006bec:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b22      	cmp	r3, #34	; 0x22
 8006bf4:	bf18      	it	ne
 8006bf6:	f04f 0c02 	movne.w	ip, #2
      hsai->ErrorCode |= tmperror;
 8006bfa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006bfe:	ea43 030c 	orr.w	r3, r3, ip
 8006c02:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 8006c06:	4620      	mov	r0, r4
 8006c08:	f7ff ffb2 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006c0c:	e7e5      	b.n	8006bda <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8006c0e:	f012 0f02 	tst.w	r2, #2
 8006c12:	d00a      	beq.n	8006c2a <HAL_SAI_IRQHandler+0x7a>
 8006c14:	f011 0f02 	tst.w	r1, #2
 8006c18:	d007      	beq.n	8006c2a <HAL_SAI_IRQHandler+0x7a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	619a      	str	r2, [r3, #24]
      if (hsai->mutecallback != NULL)
 8006c1e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0d9      	beq.n	8006bda <HAL_SAI_IRQHandler+0x2a>
        hsai->mutecallback();
 8006c26:	4798      	blx	r3
 8006c28:	e7d7      	b.n	8006bda <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8006c2a:	f012 0f20 	tst.w	r2, #32
 8006c2e:	d03e      	beq.n	8006cae <HAL_SAI_IRQHandler+0xfe>
 8006c30:	f011 0f20 	tst.w	r1, #32
 8006c34:	d03b      	beq.n	8006cae <HAL_SAI_IRQHandler+0xfe>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8006c36:	2220      	movs	r2, #32
 8006c38:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8006c3a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006c3e:	f043 0304 	orr.w	r3, r3, #4
 8006c42:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006c46:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8006c4a:	d029      	beq.n	8006ca0 <HAL_SAI_IRQHandler+0xf0>
        if (hsai->hdmatx != NULL)
 8006c4c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006c50:	b133      	cbz	r3, 8006c60 <HAL_SAI_IRQHandler+0xb0>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006c52:	4a69      	ldr	r2, [pc, #420]	; (8006df8 <HAL_SAI_IRQHandler+0x248>)
 8006c54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006c56:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006c5a:	f7fb fe71 	bl	8002940 <HAL_DMA_Abort_IT>
 8006c5e:	b9a8      	cbnz	r0, 8006c8c <HAL_SAI_IRQHandler+0xdc>
        if (hsai->hdmarx != NULL)
 8006c60:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0b8      	beq.n	8006bda <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006c68:	4a63      	ldr	r2, [pc, #396]	; (8006df8 <HAL_SAI_IRQHandler+0x248>)
 8006c6a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006c6c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006c70:	f7fb fe66 	bl	8002940 <HAL_DMA_Abort_IT>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d0b0      	beq.n	8006bda <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006c78:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c80:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006c84:	4620      	mov	r0, r4
 8006c86:	f7ff ff73 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006c8a:	e7a6      	b.n	8006bda <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006c8c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c94:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7ff ff69 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006c9e:	e7df      	b.n	8006c60 <HAL_SAI_IRQHandler+0xb0>
        (void) HAL_SAI_Abort(hsai);
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7ff fdd2 	bl	800684a <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f7ff ff62 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006cac:	e795      	b.n	8006bda <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8006cae:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006cb2:	d040      	beq.n	8006d36 <HAL_SAI_IRQHandler+0x186>
 8006cb4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006cb8:	d03d      	beq.n	8006d36 <HAL_SAI_IRQHandler+0x186>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8006cba:	2240      	movs	r2, #64	; 0x40
 8006cbc:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8006cbe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006cc2:	f043 0308 	orr.w	r3, r3, #8
 8006cc6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006cca:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8006cce:	d02b      	beq.n	8006d28 <HAL_SAI_IRQHandler+0x178>
        if (hsai->hdmatx != NULL)
 8006cd0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006cd4:	b133      	cbz	r3, 8006ce4 <HAL_SAI_IRQHandler+0x134>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006cd6:	4a48      	ldr	r2, [pc, #288]	; (8006df8 <HAL_SAI_IRQHandler+0x248>)
 8006cd8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006cda:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006cde:	f7fb fe2f 	bl	8002940 <HAL_DMA_Abort_IT>
 8006ce2:	b9b8      	cbnz	r0, 8006d14 <HAL_SAI_IRQHandler+0x164>
        if (hsai->hdmarx != NULL)
 8006ce4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f43f af76 	beq.w	8006bda <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006cee:	4a42      	ldr	r2, [pc, #264]	; (8006df8 <HAL_SAI_IRQHandler+0x248>)
 8006cf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006cf2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006cf6:	f7fb fe23 	bl	8002940 <HAL_DMA_Abort_IT>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f43f af6d 	beq.w	8006bda <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006d00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d08:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f7ff ff2f 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006d12:	e762      	b.n	8006bda <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006d14:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006d20:	4620      	mov	r0, r4
 8006d22:	f7ff ff25 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006d26:	e7dd      	b.n	8006ce4 <HAL_SAI_IRQHandler+0x134>
        (void) HAL_SAI_Abort(hsai);
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f7ff fd8e 	bl	800684a <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff ff1e 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006d34:	e751      	b.n	8006bda <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8006d36:	f012 0f04 	tst.w	r2, #4
 8006d3a:	d049      	beq.n	8006dd0 <HAL_SAI_IRQHandler+0x220>
 8006d3c:	f011 0f04 	tst.w	r1, #4
 8006d40:	d046      	beq.n	8006dd0 <HAL_SAI_IRQHandler+0x220>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8006d42:	2204      	movs	r2, #4
 8006d44:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8006d46:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006d4a:	f043 0320 	orr.w	r3, r3, #32
 8006d4e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006d52:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8006d56:	d02b      	beq.n	8006db0 <HAL_SAI_IRQHandler+0x200>
        if (hsai->hdmatx != NULL)
 8006d58:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006d5c:	b133      	cbz	r3, 8006d6c <HAL_SAI_IRQHandler+0x1bc>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006d5e:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <HAL_SAI_IRQHandler+0x248>)
 8006d60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006d62:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006d66:	f7fb fdeb 	bl	8002940 <HAL_DMA_Abort_IT>
 8006d6a:	b9b8      	cbnz	r0, 8006d9c <HAL_SAI_IRQHandler+0x1ec>
        if (hsai->hdmarx != NULL)
 8006d6c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f43f af32 	beq.w	8006bda <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006d76:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <HAL_SAI_IRQHandler+0x248>)
 8006d78:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006d7a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006d7e:	f7fb fddf 	bl	8002940 <HAL_DMA_Abort_IT>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	f43f af29 	beq.w	8006bda <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006d88:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d90:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006d94:	4620      	mov	r0, r4
 8006d96:	f7ff feeb 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006d9a:	e71e      	b.n	8006bda <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006d9c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006da8:	4620      	mov	r0, r4
 8006daa:	f7ff fee1 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006dae:	e7dd      	b.n	8006d6c <HAL_SAI_IRQHandler+0x1bc>
        hsai->Instance->IMR = 0U;
 8006db0:	6822      	ldr	r2, [r4, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	6113      	str	r3, [r2, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	f04f 31ff 	mov.w	r1, #4294967295
 8006dbc:	6191      	str	r1, [r2, #24]
        hsai->State = HAL_SAI_STATE_READY;
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
        hsai->XferCount = 0U;
 8006dc4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
        HAL_SAI_ErrorCallback(hsai);
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f7ff fed1 	bl	8006b70 <HAL_SAI_ErrorCallback>
 8006dce:	e704      	b.n	8006bda <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8006dd0:	f012 0f10 	tst.w	r2, #16
 8006dd4:	f43f af01 	beq.w	8006bda <HAL_SAI_IRQHandler+0x2a>
 8006dd8:	f011 0f10 	tst.w	r1, #16
 8006ddc:	f43f aefd 	beq.w	8006bda <HAL_SAI_IRQHandler+0x2a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8006de0:	2210      	movs	r2, #16
 8006de2:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8006de4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7ff febe 	bl	8006b70 <HAL_SAI_ErrorCallback>
}
 8006df4:	e6f1      	b.n	8006bda <HAL_SAI_IRQHandler+0x2a>
 8006df6:	4770      	bx	lr
 8006df8:	08006dfd 	.word	0x08006dfd

08006dfc <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006dfc:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dfe:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006e00:	6822      	ldr	r2, [r4, #0]
 8006e02:	6813      	ldr	r3, [r2, #0]
 8006e04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	f04f 32ff 	mov.w	r2, #4294967295
 8006e16:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8006e18:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d109      	bne.n	8006e34 <SAI_DMAAbort+0x38>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f7ff fe9f 	bl	8006b70 <HAL_SAI_ErrorCallback>
#endif
}
 8006e32:	bd10      	pop	{r4, pc}
    (void) SAI_Disable(hsai);
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff fa13 	bl	8006260 <SAI_Disable>
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	6853      	ldr	r3, [r2, #4]
 8006e3e:	f043 0308 	orr.w	r3, r3, #8
 8006e42:	6053      	str	r3, [r2, #4]
 8006e44:	e7ec      	b.n	8006e20 <SAI_DMAAbort+0x24>
	...

08006e48 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006e48:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006e4a:	6802      	ldr	r2, [r0, #0]
 8006e4c:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006e4e:	6991      	ldr	r1, [r2, #24]
 8006e50:	f041 0108 	orr.w	r1, r1, #8
 8006e54:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006e56:	6801      	ldr	r1, [r0, #0]
 8006e58:	698a      	ldr	r2, [r1, #24]
 8006e5a:	f042 0210 	orr.w	r2, r2, #16
 8006e5e:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e60:	6801      	ldr	r1, [r0, #0]
 8006e62:	680a      	ldr	r2, [r1, #0]
 8006e64:	f022 0201 	bic.w	r2, r2, #1
 8006e68:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006e6a:	6801      	ldr	r1, [r0, #0]
 8006e6c:	690c      	ldr	r4, [r1, #16]
 8006e6e:	4a29      	ldr	r2, [pc, #164]	; (8006f14 <SPI_CloseTransfer+0xcc>)
 8006e70:	4022      	ands	r2, r4
 8006e72:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006e74:	6801      	ldr	r1, [r0, #0]
 8006e76:	688a      	ldr	r2, [r1, #8]
 8006e78:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006e7c:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e7e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	2a04      	cmp	r2, #4
 8006e86:	d00d      	beq.n	8006ea4 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006e88:	f013 0f20 	tst.w	r3, #32
 8006e8c:	d00a      	beq.n	8006ea4 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006e8e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e96:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006e9a:	6801      	ldr	r1, [r0, #0]
 8006e9c:	698a      	ldr	r2, [r1, #24]
 8006e9e:	f042 0220 	orr.w	r2, r2, #32
 8006ea2:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ea4:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	2a03      	cmp	r2, #3
 8006eac:	d00d      	beq.n	8006eca <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006eae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006eb2:	d00a      	beq.n	8006eca <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006eb4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006eb8:	f042 0204 	orr.w	r2, r2, #4
 8006ebc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ec0:	6801      	ldr	r1, [r0, #0]
 8006ec2:	698a      	ldr	r2, [r1, #24]
 8006ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec8:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006eca:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006ece:	d00a      	beq.n	8006ee6 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ed0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006ed4:	f042 0201 	orr.w	r2, r2, #1
 8006ed8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006edc:	6801      	ldr	r1, [r0, #0]
 8006ede:	698a      	ldr	r2, [r1, #24]
 8006ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee4:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006ee6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006eea:	d00a      	beq.n	8006f02 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006eec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006ef0:	f043 0308 	orr.w	r3, r3, #8
 8006ef4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ef8:	6802      	ldr	r2, [r0, #0]
 8006efa:	6993      	ldr	r3, [r2, #24]
 8006efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f00:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006f08:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	fffffc90 	.word	0xfffffc90

08006f18 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d034      	beq.n	8006f86 <HAL_SPI_Init+0x6e>
{
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006f24:	6802      	ldr	r2, [r0, #0]
 8006f26:	4953      	ldr	r1, [pc, #332]	; (8007074 <HAL_SPI_Init+0x15c>)
 8006f28:	4b53      	ldr	r3, [pc, #332]	; (8007078 <HAL_SPI_Init+0x160>)
 8006f2a:	428a      	cmp	r2, r1
 8006f2c:	bf18      	it	ne
 8006f2e:	429a      	cmpne	r2, r3
 8006f30:	d02f      	beq.n	8006f92 <HAL_SPI_Init+0x7a>
 8006f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d02b      	beq.n	8006f92 <HAL_SPI_Init+0x7a>
 8006f3a:	68c3      	ldr	r3, [r0, #12]
 8006f3c:	2b0f      	cmp	r3, #15
 8006f3e:	d824      	bhi.n	8006f8a <HAL_SPI_Init+0x72>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006f40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f42:	0952      	lsrs	r2, r2, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006f44:	3308      	adds	r3, #8
 8006f46:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8006f48:	fb02 3303 	mla	r3, r2, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d933      	bls.n	8006fb8 <HAL_SPI_Init+0xa0>
    return HAL_ERROR;
 8006f50:	2001      	movs	r0, #1
 8006f52:	e08e      	b.n	8007072 <HAL_SPI_Init+0x15a>
    hspi->Lock = HAL_UNLOCKED;
 8006f54:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7f9 ff15 	bl	8000d88 <HAL_SPI_MspInit>
 8006f5e:	e02f      	b.n	8006fc0 <HAL_SPI_Init+0xa8>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f66:	d006      	beq.n	8006f76 <HAL_SPI_Init+0x5e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d139      	bne.n	8006fe0 <HAL_SPI_Init+0xc8>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006f6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f72:	d135      	bne.n	8006fe0 <HAL_SPI_Init+0xc8>
 8006f74:	e002      	b.n	8006f7c <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006f76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d131      	bne.n	8006fe0 <HAL_SPI_Init+0xc8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f7c:	680b      	ldr	r3, [r1, #0]
 8006f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f82:	600b      	str	r3, [r1, #0]
 8006f84:	e02c      	b.n	8006fe0 <HAL_SPI_Init+0xc8>
    return HAL_ERROR;
 8006f86:	2001      	movs	r0, #1
}
 8006f88:	4770      	bx	lr
    return HAL_ERROR;
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	e071      	b.n	8007072 <HAL_SPI_Init+0x15a>
    return HAL_ERROR;
 8006f8e:	2001      	movs	r0, #1
 8006f90:	e06f      	b.n	8007072 <HAL_SPI_Init+0x15a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006f94:	0959      	lsrs	r1, r3, #5
  data_size = (data_size + 7UL) / 8UL;
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8006f9c:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006fa0:	4834      	ldr	r0, [pc, #208]	; (8007074 <HAL_SPI_Init+0x15c>)
 8006fa2:	4935      	ldr	r1, [pc, #212]	; (8007078 <HAL_SPI_Init+0x160>)
 8006fa4:	428a      	cmp	r2, r1
 8006fa6:	bf18      	it	ne
 8006fa8:	4282      	cmpne	r2, r0
 8006faa:	d003      	beq.n	8006fb4 <HAL_SPI_Init+0x9c>
 8006fac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006fb0:	428a      	cmp	r2, r1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_SPI_Init+0xa0>
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d8ea      	bhi.n	8006f8e <HAL_SPI_Init+0x76>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fb8:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0c9      	beq.n	8006f54 <HAL_SPI_Init+0x3c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006fc6:	6822      	ldr	r2, [r4, #0]
 8006fc8:	6813      	ldr	r3, [r2, #0]
 8006fca:	f023 0301 	bic.w	r3, r3, #1
 8006fce:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006fd0:	6821      	ldr	r1, [r4, #0]
 8006fd2:	688a      	ldr	r2, [r1, #8]
 8006fd4:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006fd8:	69a3      	ldr	r3, [r4, #24]
 8006fda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fde:	d0bf      	beq.n	8006f60 <HAL_SPI_Init+0x48>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006fe0:	6821      	ldr	r1, [r4, #0]
 8006fe2:	69e3      	ldr	r3, [r4, #28]
 8006fe4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006fe6:	4303      	orrs	r3, r0
 8006fe8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006fea:	4303      	orrs	r3, r0
 8006fec:	68e0      	ldr	r0, [r4, #12]
 8006fee:	4303      	orrs	r3, r0
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ff8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ffe:	430b      	orrs	r3, r1
 8007000:	69a1      	ldr	r1, [r4, #24]
 8007002:	430b      	orrs	r3, r1
 8007004:	6921      	ldr	r1, [r4, #16]
 8007006:	430b      	orrs	r3, r1
 8007008:	6961      	ldr	r1, [r4, #20]
 800700a:	430b      	orrs	r3, r1
 800700c:	6a21      	ldr	r1, [r4, #32]
 800700e:	430b      	orrs	r3, r1
 8007010:	6861      	ldr	r1, [r4, #4]
 8007012:	430b      	orrs	r3, r1
 8007014:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007016:	430b      	orrs	r3, r1
 8007018:	68a1      	ldr	r1, [r4, #8]
 800701a:	430b      	orrs	r3, r1
 800701c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800701e:	430b      	orrs	r3, r1
 8007020:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007022:	430b      	orrs	r3, r1
 8007024:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007026:	6863      	ldr	r3, [r4, #4]
 8007028:	b96b      	cbnz	r3, 8007046 <HAL_SPI_Init+0x12e>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	6893      	ldr	r3, [r2, #8]
 800702e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8007032:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007036:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	6893      	ldr	r3, [r2, #8]
 800703c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007044:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800704a:	f023 0301 	bic.w	r3, r3, #1
 800704e:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007050:	6863      	ldr	r3, [r4, #4]
 8007052:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007056:	d006      	beq.n	8007066 <HAL_SPI_Init+0x14e>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007058:	6822      	ldr	r2, [r4, #0]
 800705a:	68d3      	ldr	r3, [r2, #12]
 800705c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007060:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007062:	430b      	orrs	r3, r1
 8007064:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007066:	2000      	movs	r0, #0
 8007068:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800706c:	2301      	movs	r3, #1
 800706e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8007072:	bd10      	pop	{r4, pc}
 8007074:	40013000 	.word	0x40013000
 8007078:	40003800 	.word	0x40003800

0800707c <HAL_SPI_TxCpltCallback>:
}
 800707c:	4770      	bx	lr

0800707e <HAL_SPI_RxCpltCallback>:
}
 800707e:	4770      	bx	lr

08007080 <HAL_SPI_TxRxCpltCallback>:
}
 8007080:	4770      	bx	lr

08007082 <HAL_SPI_ErrorCallback>:
}
 8007082:	4770      	bx	lr

08007084 <HAL_SPI_IRQHandler>:
{
 8007084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800708a:	6806      	ldr	r6, [r0, #0]
 800708c:	f8d6 9010 	ldr.w	r9, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8007090:	f8d6 8014 	ldr.w	r8, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 8007094:	ea09 0508 	and.w	r5, r9, r8
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007098:	f8d6 a008 	ldr.w	sl, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800709c:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 80070a0:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80070a2:	f005 0364 	and.w	r3, r5, #100	; 0x64
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d03f      	beq.n	800712a <HAL_SPI_IRQHandler+0xa6>
  uint32_t handled  = 0UL;
 80070aa:	2200      	movs	r2, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80070ac:	f005 0345 	and.w	r3, r5, #69	; 0x45
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d041      	beq.n	8007138 <HAL_SPI_IRQHandler+0xb4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80070b4:	f005 0326 	and.w	r3, r5, #38	; 0x26
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d046      	beq.n	800714a <HAL_SPI_IRQHandler+0xc6>
  if (handled != 0UL)
 80070bc:	2a00      	cmp	r2, #0
 80070be:	d142      	bne.n	8007146 <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80070c0:	f015 0f08 	tst.w	r5, #8
 80070c4:	d078      	beq.n	80071b8 <HAL_SPI_IRQHandler+0x134>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	6993      	ldr	r3, [r2, #24]
 80070ca:	f043 0308 	orr.w	r3, r3, #8
 80070ce:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	6993      	ldr	r3, [r2, #24]
 80070d4:	f043 0310 	orr.w	r3, r3, #16
 80070d8:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	6993      	ldr	r3, [r2, #24]
 80070de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070e2:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80070e4:	6822      	ldr	r2, [r4, #0]
 80070e6:	6913      	ldr	r3, [r2, #16]
 80070e8:	f023 0308 	bic.w	r3, r3, #8
 80070ec:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80070f6:	d104      	bne.n	8007102 <HAL_SPI_IRQHandler+0x7e>
      while (hspi->RxXferCount != 0UL)
 80070f8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d13a      	bne.n	8007178 <HAL_SPI_IRQHandler+0xf4>
    SPI_CloseTransfer(hspi);
 8007102:	4620      	mov	r0, r4
 8007104:	f7ff fea0 	bl	8006e48 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8007108:	2301      	movs	r3, #1
 800710a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800710e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007112:	2b00      	cmp	r3, #0
 8007114:	d144      	bne.n	80071a0 <HAL_SPI_IRQHandler+0x11c>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007116:	2f05      	cmp	r7, #5
 8007118:	d046      	beq.n	80071a8 <HAL_SPI_IRQHandler+0x124>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800711a:	2f04      	cmp	r7, #4
 800711c:	d048      	beq.n	80071b0 <HAL_SPI_IRQHandler+0x12c>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800711e:	2f03      	cmp	r7, #3
 8007120:	d111      	bne.n	8007146 <HAL_SPI_IRQHandler+0xc2>
      HAL_SPI_TxCpltCallback(hspi);
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff ffaa 	bl	800707c <HAL_SPI_TxCpltCallback>
 8007128:	e00d      	b.n	8007146 <HAL_SPI_IRQHandler+0xc2>
    hspi->TxISR(hspi);
 800712a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800712c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800712e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007130:	4620      	mov	r0, r4
 8007132:	4798      	blx	r3
    handled = 1UL;
 8007134:	2201      	movs	r2, #1
 8007136:	e7b9      	b.n	80070ac <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 8007138:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800713a:	4620      	mov	r0, r4
 800713c:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800713e:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8007142:	2d02      	cmp	r5, #2
 8007144:	d001      	beq.n	800714a <HAL_SPI_IRQHandler+0xc6>
}
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hspi->TxISR(hspi);
 800714a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800714c:	4620      	mov	r0, r4
 800714e:	4798      	blx	r3
  if (handled != 0UL)
 8007150:	e7f9      	b.n	8007146 <HAL_SPI_IRQHandler+0xc2>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007152:	2b07      	cmp	r3, #7
 8007154:	d91b      	bls.n	800718e <HAL_SPI_IRQHandler+0x10a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007158:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800715a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800715c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800715e:	3302      	adds	r3, #2
 8007160:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8007162:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007166:	3b01      	subs	r3, #1
 8007168:	b29b      	uxth	r3, r3
 800716a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800716e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0c4      	beq.n	8007102 <HAL_SPI_IRQHandler+0x7e>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007178:	68e3      	ldr	r3, [r4, #12]
 800717a:	2b0f      	cmp	r3, #15
 800717c:	d9e9      	bls.n	8007152 <HAL_SPI_IRQHandler+0xce>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007182:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007184:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007188:	3304      	adds	r3, #4
 800718a:	6663      	str	r3, [r4, #100]	; 0x64
 800718c:	e7e9      	b.n	8007162 <HAL_SPI_IRQHandler+0xde>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800718e:	6822      	ldr	r2, [r4, #0]
 8007190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007192:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8007196:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800719a:	3301      	adds	r3, #1
 800719c:	6663      	str	r3, [r4, #100]	; 0x64
 800719e:	e7e0      	b.n	8007162 <HAL_SPI_IRQHandler+0xde>
      HAL_SPI_ErrorCallback(hspi);
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7ff ff6e 	bl	8007082 <HAL_SPI_ErrorCallback>
      return;
 80071a6:	e7ce      	b.n	8007146 <HAL_SPI_IRQHandler+0xc2>
      HAL_SPI_TxRxCpltCallback(hspi);
 80071a8:	4620      	mov	r0, r4
 80071aa:	f7ff ff69 	bl	8007080 <HAL_SPI_TxRxCpltCallback>
 80071ae:	e7ca      	b.n	8007146 <HAL_SPI_IRQHandler+0xc2>
      HAL_SPI_RxCpltCallback(hspi);
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7ff ff64 	bl	800707e <HAL_SPI_RxCpltCallback>
 80071b6:	e7c6      	b.n	8007146 <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80071b8:	f418 6f00 	tst.w	r8, #2048	; 0x800
 80071bc:	d002      	beq.n	80071c4 <HAL_SPI_IRQHandler+0x140>
 80071be:	f019 0f08 	tst.w	r9, #8
 80071c2:	d173      	bne.n	80072ac <HAL_SPI_IRQHandler+0x228>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80071c4:	f415 7f58 	tst.w	r5, #864	; 0x360
 80071c8:	d0bd      	beq.n	8007146 <HAL_SPI_IRQHandler+0xc2>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80071ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071ce:	d00a      	beq.n	80071e6 <HAL_SPI_IRQHandler+0x162>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80071d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80071d4:	f043 0304 	orr.w	r3, r3, #4
 80071d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071dc:	6822      	ldr	r2, [r4, #0]
 80071de:	6993      	ldr	r3, [r2, #24]
 80071e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80071e6:	f415 7f00 	tst.w	r5, #512	; 0x200
 80071ea:	d00a      	beq.n	8007202 <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80071ec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80071f0:	f043 0301 	orr.w	r3, r3, #1
 80071f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80071f8:	6822      	ldr	r2, [r4, #0]
 80071fa:	6993      	ldr	r3, [r2, #24]
 80071fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007200:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007202:	f415 7f80 	tst.w	r5, #256	; 0x100
 8007206:	d00a      	beq.n	800721e <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007208:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800720c:	f043 0308 	orr.w	r3, r3, #8
 8007210:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007214:	6822      	ldr	r2, [r4, #0]
 8007216:	6993      	ldr	r3, [r2, #24]
 8007218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800721c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800721e:	f015 0f20 	tst.w	r5, #32
 8007222:	d00a      	beq.n	800723a <HAL_SPI_IRQHandler+0x1b6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007224:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007230:	6822      	ldr	r2, [r4, #0]
 8007232:	6993      	ldr	r3, [r2, #24]
 8007234:	f043 0320 	orr.w	r3, r3, #32
 8007238:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800723a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800723e:	2b00      	cmp	r3, #0
 8007240:	d081      	beq.n	8007146 <HAL_SPI_IRQHandler+0xc2>
      __HAL_SPI_DISABLE(hspi);
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	6813      	ldr	r3, [r2, #0]
 8007246:	f023 0301 	bic.w	r3, r3, #1
 800724a:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	6911      	ldr	r1, [r2, #16]
 8007250:	4b1d      	ldr	r3, [pc, #116]	; (80072c8 <HAL_SPI_IRQHandler+0x244>)
 8007252:	400b      	ands	r3, r1
 8007254:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007256:	f40a 4a40 	and.w	sl, sl, #49152	; 0xc000
 800725a:	f5ba 4f40 	cmp.w	sl, #49152	; 0xc000
 800725e:	d12b      	bne.n	80072b8 <HAL_SPI_IRQHandler+0x234>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	6893      	ldr	r3, [r2, #8]
 8007264:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007268:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800726a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800726c:	b15b      	cbz	r3, 8007286 <HAL_SPI_IRQHandler+0x202>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800726e:	4a17      	ldr	r2, [pc, #92]	; (80072cc <HAL_SPI_IRQHandler+0x248>)
 8007270:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007272:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007274:	f7fb fb64 	bl	8002940 <HAL_DMA_Abort_IT>
 8007278:	b128      	cbz	r0, 8007286 <HAL_SPI_IRQHandler+0x202>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800727a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800727e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007282:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8007286:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007288:	2b00      	cmp	r3, #0
 800728a:	f43f af5c 	beq.w	8007146 <HAL_SPI_IRQHandler+0xc2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800728e:	4a0f      	ldr	r2, [pc, #60]	; (80072cc <HAL_SPI_IRQHandler+0x248>)
 8007290:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007292:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007294:	f7fb fb54 	bl	8002940 <HAL_DMA_Abort_IT>
 8007298:	2800      	cmp	r0, #0
 800729a:	f43f af54 	beq.w	8007146 <HAL_SPI_IRQHandler+0xc2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800729e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80072a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80072aa:	e74c      	b.n	8007146 <HAL_SPI_IRQHandler+0xc2>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	6993      	ldr	r3, [r2, #24]
 80072b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072b4:	6193      	str	r3, [r2, #24]
    return;
 80072b6:	e746      	b.n	8007146 <HAL_SPI_IRQHandler+0xc2>
        hspi->State = HAL_SPI_STATE_READY;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80072be:	4620      	mov	r0, r4
 80072c0:	f7ff fedf 	bl	8007082 <HAL_SPI_ErrorCallback>
 80072c4:	e73f      	b.n	8007146 <HAL_SPI_IRQHandler+0xc2>
 80072c6:	bf00      	nop
 80072c8:	fffffc94 	.word	0xfffffc94
 80072cc:	080072d1 	.word	0x080072d1

080072d0 <SPI_DMAAbortOnError>:
{
 80072d0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80072da:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 80072de:	2301      	movs	r3, #1
 80072e0:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 80072e4:	f7ff fecd 	bl	8007082 <HAL_SPI_ErrorCallback>
}
 80072e8:	bd08      	pop	{r3, pc}

080072ea <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80072ea:	4770      	bx	lr

080072ec <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072ec:	4770      	bx	lr

080072ee <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072f0:	4770      	bx	lr

080072f2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072f2:	4770      	bx	lr

080072f4 <HAL_TIM_IRQHandler>:
{
 80072f4:	b510      	push	{r4, lr}
 80072f6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072f8:	6803      	ldr	r3, [r0, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	f012 0f02 	tst.w	r2, #2
 8007300:	d011      	beq.n	8007326 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	f012 0f02 	tst.w	r2, #2
 8007308:	d00d      	beq.n	8007326 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800730a:	f06f 0202 	mvn.w	r2, #2
 800730e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007310:	2301      	movs	r3, #1
 8007312:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007314:	6803      	ldr	r3, [r0, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	f013 0f03 	tst.w	r3, #3
 800731c:	d079      	beq.n	8007412 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800731e:	f7ff ffe6 	bl	80072ee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007322:	2300      	movs	r3, #0
 8007324:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	f012 0f04 	tst.w	r2, #4
 800732e:	d012      	beq.n	8007356 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	f012 0f04 	tst.w	r2, #4
 8007336:	d00e      	beq.n	8007356 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007338:	f06f 0204 	mvn.w	r2, #4
 800733c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800733e:	2302      	movs	r3, #2
 8007340:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f413 7f40 	tst.w	r3, #768	; 0x300
 800734a:	d068      	beq.n	800741e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800734c:	4620      	mov	r0, r4
 800734e:	f7ff ffce 	bl	80072ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007352:	2300      	movs	r3, #0
 8007354:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	f012 0f08 	tst.w	r2, #8
 800735e:	d012      	beq.n	8007386 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	f012 0f08 	tst.w	r2, #8
 8007366:	d00e      	beq.n	8007386 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007368:	f06f 0208 	mvn.w	r2, #8
 800736c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800736e:	2304      	movs	r3, #4
 8007370:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f013 0f03 	tst.w	r3, #3
 800737a:	d057      	beq.n	800742c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800737c:	4620      	mov	r0, r4
 800737e:	f7ff ffb6 	bl	80072ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007382:	2300      	movs	r3, #0
 8007384:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	f012 0f10 	tst.w	r2, #16
 800738e:	d012      	beq.n	80073b6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	f012 0f10 	tst.w	r2, #16
 8007396:	d00e      	beq.n	80073b6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007398:	f06f 0210 	mvn.w	r2, #16
 800739c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800739e:	2308      	movs	r3, #8
 80073a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80073aa:	d046      	beq.n	800743a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80073ac:	4620      	mov	r0, r4
 80073ae:	f7ff ff9e 	bl	80072ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b2:	2300      	movs	r3, #0
 80073b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	691a      	ldr	r2, [r3, #16]
 80073ba:	f012 0f01 	tst.w	r2, #1
 80073be:	d003      	beq.n	80073c8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	f012 0f01 	tst.w	r2, #1
 80073c6:	d13f      	bne.n	8007448 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80073d0:	d003      	beq.n	80073da <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80073d8:	d13d      	bne.n	8007456 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	691a      	ldr	r2, [r3, #16]
 80073de:	f412 7f80 	tst.w	r2, #256	; 0x100
 80073e2:	d003      	beq.n	80073ec <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80073ea:	d13b      	bne.n	8007464 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80073f4:	d003      	beq.n	80073fe <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80073fc:	d139      	bne.n	8007472 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	f012 0f20 	tst.w	r2, #32
 8007406:	d003      	beq.n	8007410 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	f012 0f20 	tst.w	r2, #32
 800740e:	d137      	bne.n	8007480 <HAL_TIM_IRQHandler+0x18c>
}
 8007410:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	f7ff ff6b 	bl	80072ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007416:	4620      	mov	r0, r4
 8007418:	f7ff ff6a 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800741c:	e781      	b.n	8007322 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800741e:	4620      	mov	r0, r4
 8007420:	f7ff ff64 	bl	80072ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007424:	4620      	mov	r0, r4
 8007426:	f7ff ff63 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800742a:	e792      	b.n	8007352 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742c:	4620      	mov	r0, r4
 800742e:	f7ff ff5d 	bl	80072ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007432:	4620      	mov	r0, r4
 8007434:	f7ff ff5c 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8007438:	e7a3      	b.n	8007382 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800743a:	4620      	mov	r0, r4
 800743c:	f7ff ff56 	bl	80072ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007440:	4620      	mov	r0, r4
 8007442:	f7ff ff55 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8007446:	e7b4      	b.n	80073b2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007448:	f06f 0201 	mvn.w	r2, #1
 800744c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800744e:	4620      	mov	r0, r4
 8007450:	f7ff ff4b 	bl	80072ea <HAL_TIM_PeriodElapsedCallback>
 8007454:	e7b8      	b.n	80073c8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007456:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800745a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800745c:	4620      	mov	r0, r4
 800745e:	f000 f9f8 	bl	8007852 <HAL_TIMEx_BreakCallback>
 8007462:	e7ba      	b.n	80073da <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007464:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007468:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800746a:	4620      	mov	r0, r4
 800746c:	f000 f9f2 	bl	8007854 <HAL_TIMEx_Break2Callback>
 8007470:	e7bc      	b.n	80073ec <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007472:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007476:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007478:	4620      	mov	r0, r4
 800747a:	f7ff ff3a 	bl	80072f2 <HAL_TIM_TriggerCallback>
 800747e:	e7be      	b.n	80073fe <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007480:	f06f 0220 	mvn.w	r2, #32
 8007484:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007486:	4620      	mov	r0, r4
 8007488:	f000 f9e2 	bl	8007850 <HAL_TIMEx_CommutCallback>
}
 800748c:	e7c0      	b.n	8007410 <HAL_TIM_IRQHandler+0x11c>
	...

08007490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007490:	b430      	push	{r4, r5}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007492:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007494:	4a32      	ldr	r2, [pc, #200]	; (8007560 <TIM_Base_SetConfig+0xd0>)
 8007496:	4290      	cmp	r0, r2
 8007498:	bf14      	ite	ne
 800749a:	2200      	movne	r2, #0
 800749c:	2201      	moveq	r2, #1
 800749e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80074a2:	d037      	beq.n	8007514 <TIM_Base_SetConfig+0x84>
 80074a4:	2a00      	cmp	r2, #0
 80074a6:	d135      	bne.n	8007514 <TIM_Base_SetConfig+0x84>
 80074a8:	4c2e      	ldr	r4, [pc, #184]	; (8007564 <TIM_Base_SetConfig+0xd4>)
 80074aa:	42a0      	cmp	r0, r4
 80074ac:	d00b      	beq.n	80074c6 <TIM_Base_SetConfig+0x36>
 80074ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80074b2:	42a0      	cmp	r0, r4
 80074b4:	d007      	beq.n	80074c6 <TIM_Base_SetConfig+0x36>
 80074b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80074ba:	42a0      	cmp	r0, r4
 80074bc:	d003      	beq.n	80074c6 <TIM_Base_SetConfig+0x36>
 80074be:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80074c2:	42a0      	cmp	r0, r4
 80074c4:	d10a      	bne.n	80074dc <TIM_Base_SetConfig+0x4c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80074ca:	684c      	ldr	r4, [r1, #4]
 80074cc:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ce:	4c25      	ldr	r4, [pc, #148]	; (8007564 <TIM_Base_SetConfig+0xd4>)
 80074d0:	42a0      	cmp	r0, r4
 80074d2:	d023      	beq.n	800751c <TIM_Base_SetConfig+0x8c>
 80074d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d01f      	beq.n	800751c <TIM_Base_SetConfig+0x8c>
 80074dc:	4c22      	ldr	r4, [pc, #136]	; (8007568 <TIM_Base_SetConfig+0xd8>)
 80074de:	42a0      	cmp	r0, r4
 80074e0:	d01c      	beq.n	800751c <TIM_Base_SetConfig+0x8c>
 80074e2:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80074e6:	42a0      	cmp	r0, r4
 80074e8:	d018      	beq.n	800751c <TIM_Base_SetConfig+0x8c>
 80074ea:	4d20      	ldr	r5, [pc, #128]	; (800756c <TIM_Base_SetConfig+0xdc>)
 80074ec:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 80074f0:	42a0      	cmp	r0, r4
 80074f2:	bf18      	it	ne
 80074f4:	42a8      	cmpne	r0, r5
 80074f6:	d011      	beq.n	800751c <TIM_Base_SetConfig+0x8c>
 80074f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80074fc:	42a0      	cmp	r0, r4
 80074fe:	d00d      	beq.n	800751c <TIM_Base_SetConfig+0x8c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007504:	694a      	ldr	r2, [r1, #20]
 8007506:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007508:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800750a:	688b      	ldr	r3, [r1, #8]
 800750c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800750e:	680b      	ldr	r3, [r1, #0]
 8007510:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007512:	e021      	b.n	8007558 <TIM_Base_SetConfig+0xc8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007518:	684c      	ldr	r4, [r1, #4]
 800751a:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800751c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007520:	68cc      	ldr	r4, [r1, #12]
 8007522:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007528:	694c      	ldr	r4, [r1, #20]
 800752a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800752c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800752e:	688b      	ldr	r3, [r1, #8]
 8007530:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007532:	680b      	ldr	r3, [r1, #0]
 8007534:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007536:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <TIM_Base_SetConfig+0xe0>)
 8007538:	4298      	cmp	r0, r3
 800753a:	d00b      	beq.n	8007554 <TIM_Base_SetConfig+0xc4>
 800753c:	b952      	cbnz	r2, 8007554 <TIM_Base_SetConfig+0xc4>
 800753e:	4a0b      	ldr	r2, [pc, #44]	; (800756c <TIM_Base_SetConfig+0xdc>)
 8007540:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007544:	4298      	cmp	r0, r3
 8007546:	bf18      	it	ne
 8007548:	4290      	cmpne	r0, r2
 800754a:	d003      	beq.n	8007554 <TIM_Base_SetConfig+0xc4>
 800754c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007550:	4298      	cmp	r0, r3
 8007552:	d101      	bne.n	8007558 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007554:	690b      	ldr	r3, [r1, #16]
 8007556:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007558:	2301      	movs	r3, #1
 800755a:	6143      	str	r3, [r0, #20]
}
 800755c:	bc30      	pop	{r4, r5}
 800755e:	4770      	bx	lr
 8007560:	40010000 	.word	0x40010000
 8007564:	40000400 	.word	0x40000400
 8007568:	40000c00 	.word	0x40000c00
 800756c:	40014000 	.word	0x40014000
 8007570:	40010400 	.word	0x40010400

08007574 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007574:	b360      	cbz	r0, 80075d0 <HAL_TIM_Base_Init+0x5c>
{
 8007576:	b510      	push	{r4, lr}
 8007578:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800757a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800757e:	b313      	cbz	r3, 80075c6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8007580:	2302      	movs	r3, #2
 8007582:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007586:	4621      	mov	r1, r4
 8007588:	f851 0b04 	ldr.w	r0, [r1], #4
 800758c:	f7ff ff80 	bl	8007490 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007590:	2301      	movs	r3, #1
 8007592:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007596:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800759a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800759e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80075a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80075a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80075b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80075ba:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80075be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80075c2:	2000      	movs	r0, #0
}
 80075c4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80075c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80075ca:	f7f9 fdf9 	bl	80011c0 <HAL_TIM_Base_MspInit>
 80075ce:	e7d7      	b.n	8007580 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80075d0:	2001      	movs	r0, #1
}
 80075d2:	4770      	bx	lr

080075d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075d4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075d6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d8:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075dc:	430a      	orrs	r2, r1
 80075de:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80075e2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075e6:	6082      	str	r2, [r0, #8]
}
 80075e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80075f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	f000 80c2 	beq.w	800777e <HAL_TIM_ConfigClockSource+0x18e>
{
 80075fa:	b570      	push	{r4, r5, r6, lr}
 80075fc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80075fe:	2301      	movs	r3, #1
 8007600:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007604:	2302      	movs	r3, #2
 8007606:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800760a:	6802      	ldr	r2, [r0, #0]
 800760c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800760e:	4b5d      	ldr	r3, [pc, #372]	; (8007784 <HAL_TIM_ConfigClockSource+0x194>)
 8007610:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8007612:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007614:	680b      	ldr	r3, [r1, #0]
 8007616:	2b70      	cmp	r3, #112	; 0x70
 8007618:	d07a      	beq.n	8007710 <HAL_TIM_ConfigClockSource+0x120>
 800761a:	d84d      	bhi.n	80076b8 <HAL_TIM_ConfigClockSource+0xc8>
 800761c:	2b50      	cmp	r3, #80	; 0x50
 800761e:	f000 8091 	beq.w	8007744 <HAL_TIM_ConfigClockSource+0x154>
 8007622:	d91d      	bls.n	8007660 <HAL_TIM_ConfigClockSource+0x70>
 8007624:	2b60      	cmp	r3, #96	; 0x60
 8007626:	d145      	bne.n	80076b4 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	684d      	ldr	r5, [r1, #4]
 800762c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800762e:	6a18      	ldr	r0, [r3, #32]
 8007630:	f020 0010 	bic.w	r0, r0, #16
 8007634:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007636:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8007638:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800763a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800763e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007642:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007646:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800764a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800764c:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800764e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007650:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007652:	4b4d      	ldr	r3, [pc, #308]	; (8007788 <HAL_TIM_ConfigClockSource+0x198>)
 8007654:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007656:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800765a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800765c:	2000      	movs	r0, #0
}
 800765e:	e047      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 8007660:	2b40      	cmp	r3, #64	; 0x40
 8007662:	d11a      	bne.n	800769a <HAL_TIM_ConfigClockSource+0xaa>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	6848      	ldr	r0, [r1, #4]
 8007668:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800766a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	f022 0201 	bic.w	r2, r2, #1
 8007672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007674:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007676:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800767a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800767e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007682:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007684:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007686:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007688:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800768a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800768c:	4b3e      	ldr	r3, [pc, #248]	; (8007788 <HAL_TIM_ConfigClockSource+0x198>)
 800768e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007690:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007694:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007696:	2000      	movs	r0, #0
}
 8007698:	e02a      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 800769a:	d86e      	bhi.n	800777a <HAL_TIM_ConfigClockSource+0x18a>
 800769c:	2b20      	cmp	r3, #32
 800769e:	d019      	beq.n	80076d4 <HAL_TIM_ConfigClockSource+0xe4>
 80076a0:	d903      	bls.n	80076aa <HAL_TIM_ConfigClockSource+0xba>
 80076a2:	2b30      	cmp	r3, #48	; 0x30
 80076a4:	d016      	beq.n	80076d4 <HAL_TIM_ConfigClockSource+0xe4>
 80076a6:	2001      	movs	r0, #1
 80076a8:	e022      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
 80076aa:	f033 0210 	bics.w	r2, r3, #16
 80076ae:	d011      	beq.n	80076d4 <HAL_TIM_ConfigClockSource+0xe4>
 80076b0:	2001      	movs	r0, #1
 80076b2:	e01d      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
 80076b4:	2001      	movs	r0, #1
 80076b6:	e01b      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
 80076b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076bc:	d035      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x13a>
 80076be:	d913      	bls.n	80076e8 <HAL_TIM_ConfigClockSource+0xf8>
 80076c0:	4a32      	ldr	r2, [pc, #200]	; (800778c <HAL_TIM_ConfigClockSource+0x19c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d006      	beq.n	80076d4 <HAL_TIM_ConfigClockSource+0xe4>
 80076c6:	d91a      	bls.n	80076fe <HAL_TIM_ConfigClockSource+0x10e>
 80076c8:	4a31      	ldr	r2, [pc, #196]	; (8007790 <HAL_TIM_ConfigClockSource+0x1a0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d002      	beq.n	80076d4 <HAL_TIM_ConfigClockSource+0xe4>
 80076ce:	3210      	adds	r2, #16
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d11b      	bne.n	800770c <HAL_TIM_ConfigClockSource+0x11c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076d4:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80076d6:	6888      	ldr	r0, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80076d8:	4a2b      	ldr	r2, [pc, #172]	; (8007788 <HAL_TIM_ConfigClockSource+0x198>)
 80076da:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076dc:	4313      	orrs	r3, r2
 80076de:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80076e2:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80076e4:	2000      	movs	r0, #0
}
 80076e6:	e003      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
  HAL_StatusTypeDef status = HAL_OK;
 80076e8:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 80076ec:	bf18      	it	ne
 80076ee:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80076f0:	2301      	movs	r3, #1
 80076f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80076f6:	2300      	movs	r3, #0
 80076f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80076fc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80076fe:	f023 0210 	bic.w	r2, r3, #16
 8007702:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007706:	d0e5      	beq.n	80076d4 <HAL_TIM_ConfigClockSource+0xe4>
 8007708:	2001      	movs	r0, #1
 800770a:	e7f1      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
 800770c:	2001      	movs	r0, #1
 800770e:	e7ef      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
      TIM_ETR_SetConfig(htim->Instance,
 8007710:	68cb      	ldr	r3, [r1, #12]
 8007712:	684a      	ldr	r2, [r1, #4]
 8007714:	6889      	ldr	r1, [r1, #8]
 8007716:	6820      	ldr	r0, [r4, #0]
 8007718:	f7ff ff5c 	bl	80075d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007724:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007726:	2000      	movs	r0, #0
      break;
 8007728:	e7e2      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
      TIM_ETR_SetConfig(htim->Instance,
 800772a:	68cb      	ldr	r3, [r1, #12]
 800772c:	684a      	ldr	r2, [r1, #4]
 800772e:	6889      	ldr	r1, [r1, #8]
 8007730:	6820      	ldr	r0, [r4, #0]
 8007732:	f7ff ff4f 	bl	80075d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007736:	6822      	ldr	r2, [r4, #0]
 8007738:	6893      	ldr	r3, [r2, #8]
 800773a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800773e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007740:	2000      	movs	r0, #0
      break;
 8007742:	e7d5      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	6848      	ldr	r0, [r1, #4]
 8007748:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800774a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774c:	6a1a      	ldr	r2, [r3, #32]
 800774e:	f022 0201 	bic.w	r2, r2, #1
 8007752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007754:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007756:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800775a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800775e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007762:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007766:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007768:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800776a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <HAL_TIM_ConfigClockSource+0x198>)
 800776e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007770:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007774:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007776:	2000      	movs	r0, #0
}
 8007778:	e7ba      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 800777a:	2001      	movs	r0, #1
 800777c:	e7b8      	b.n	80076f0 <HAL_TIM_ConfigClockSource+0x100>
  __HAL_LOCK(htim);
 800777e:	2002      	movs	r0, #2
}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	ffce0088 	.word	0xffce0088
 8007788:	ffcfff8f 	.word	0xffcfff8f
 800778c:	00100020 	.word	0x00100020
 8007790:	00100030 	.word	0x00100030

08007794 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007794:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d051      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 800779c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800779e:	2301      	movs	r3, #1
 80077a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	2302      	movs	r3, #2
 80077a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077aa:	6802      	ldr	r2, [r0, #0]
 80077ac:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077ae:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077b0:	4d24      	ldr	r5, [pc, #144]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077b2:	42aa      	cmp	r2, r5
 80077b4:	d003      	beq.n	80077be <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 80077b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80077ba:	42aa      	cmp	r2, r5
 80077bc:	d103      	bne.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077c2:	684d      	ldr	r5, [r1, #4]
 80077c4:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077ca:	680d      	ldr	r5, [r1, #0]
 80077cc:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ce:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d0:	6802      	ldr	r2, [r0, #0]
 80077d2:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077d4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80077d8:	bf18      	it	ne
 80077da:	429a      	cmpne	r2, r3
 80077dc:	bf0c      	ite	eq
 80077de:	2301      	moveq	r3, #1
 80077e0:	2300      	movne	r3, #0
 80077e2:	4d19      	ldr	r5, [pc, #100]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077e4:	42aa      	cmp	r2, r5
 80077e6:	bf08      	it	eq
 80077e8:	f043 0301 	orreq.w	r3, r3, #1
 80077ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80077f0:	42aa      	cmp	r2, r5
 80077f2:	bf08      	it	eq
 80077f4:	f043 0301 	orreq.w	r3, r3, #1
 80077f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80077fc:	42aa      	cmp	r2, r5
 80077fe:	bf08      	it	eq
 8007800:	f043 0301 	orreq.w	r3, r3, #1
 8007804:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 8007808:	42aa      	cmp	r2, r5
 800780a:	bf08      	it	eq
 800780c:	f043 0301 	orreq.w	r3, r3, #1
 8007810:	f5a5 456c 	sub.w	r5, r5, #60416	; 0xec00
 8007814:	42aa      	cmp	r2, r5
 8007816:	bf08      	it	eq
 8007818:	f043 0301 	orreq.w	r3, r3, #1
 800781c:	b913      	cbnz	r3, 8007824 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800781e:	4b0b      	ldr	r3, [pc, #44]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007820:	429a      	cmp	r2, r3
 8007822:	d104      	bne.n	800782e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007824:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007828:	688b      	ldr	r3, [r1, #8]
 800782a:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800782c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800782e:	2301      	movs	r3, #1
 8007830:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007834:	2300      	movs	r3, #0
 8007836:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800783a:	4618      	mov	r0, r3
}
 800783c:	bc30      	pop	{r4, r5}
 800783e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007840:	2002      	movs	r0, #2
}
 8007842:	4770      	bx	lr
 8007844:	40010000 	.word	0x40010000
 8007848:	40000400 	.word	0x40000400
 800784c:	40014000 	.word	0x40014000

08007850 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007850:	4770      	bx	lr

08007852 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007852:	4770      	bx	lr

08007854 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007854:	4770      	bx	lr

08007856 <_ZNSt14numeric_limitsIsE3maxEv>:

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR short
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8007856:	b480      	push	{r7}
 8007858:	af00      	add	r7, sp, #0
 800785a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800785e:	4618      	mov	r0, r3
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <_ZN8AudioSys22getAudioSamplesInInputEP18SAIadapter_TypeDef>:
#include "AudioSys.hpp"
#include "Handy.h"

//__weak void includeModules(void) {;}

void AudioSys::getAudioSamplesInInput(SAIadapter_TypeDef* adapter) {
 8007868:	b580      	push	{r7, lr}
 800786a:	ed2d 8b02 	vpush	{d8}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	for (u8 lr = 0; lr < STEREO; lr++)		// convert input, left & right
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d81d      	bhi.n	80078bc <_ZN8AudioSys22getAudioSamplesInInputEP18SAIadapter_TypeDef+0x54>
		inputModule->output[lr] = ((float) saiAdapter_getNextSample(adapter)) / MY_INT16_MAX;
 8007880:	6838      	ldr	r0, [r7, #0]
 8007882:	f7f9 fd25 	bl	80012d0 <saiAdapter_getNextSample>
 8007886:	4603      	mov	r3, r0
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007890:	f7ff ffe1 	bl	8007856 <_ZNSt14numeric_limitsIsE3maxEv>
 8007894:	4603      	mov	r3, r0
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80078a8:	3302      	adds	r3, #2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	3304      	adds	r3, #4
 80078b0:	edc3 7a00 	vstr	s15, [r3]
	for (u8 lr = 0; lr < STEREO; lr++)		// convert input, left & right
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	3301      	adds	r3, #1
 80078b8:	73fb      	strb	r3, [r7, #15]
 80078ba:	e7de      	b.n	800787a <_ZN8AudioSys22getAudioSamplesInInputEP18SAIadapter_TypeDef+0x12>
}
 80078bc:	bf00      	nop
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	ecbd 8b02 	vpop	{d8}
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <_ZN8AudioSys23setAudioSamplesToOutputEP18SAIadapter_TypeDef>:

void AudioSys::setAudioSamplesToOutput(SAIadapter_TypeDef* adapter) {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	ed2d 8b02 	vpush	{d8}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
	for (u8 lr = 0; lr < STEREO; lr++) {		// convert output, left & right
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d820      	bhi.n	8007922 <_ZN8AudioSys23setAudioSamplesToOutputEP18SAIadapter_TypeDef+0x5a>
		int16_t tmp = (int16_t)  (*(outputModule->input[lr]) * MY_INT16_MAX);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	3304      	adds	r3, #4
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	ed93 8a00 	vldr	s16, [r3]
 80078f2:	f7ff ffb0 	bl	8007856 <_ZNSt14numeric_limitsIsE3maxEv>
 80078f6:	4603      	mov	r3, r0
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007900:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007908:	ee17 3a90 	vmov	r3, s15
 800790c:	81bb      	strh	r3, [r7, #12]
		saiAdapter_setNextSample(adapter, tmp);
 800790e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007912:	4619      	mov	r1, r3
 8007914:	6838      	ldr	r0, [r7, #0]
 8007916:	f7f9 fce9 	bl	80012ec <saiAdapter_setNextSample>
	for (u8 lr = 0; lr < STEREO; lr++) {		// convert output, left & right
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	3301      	adds	r3, #1
 800791e:	73fb      	strb	r3, [r7, #15]
 8007920:	e7db      	b.n	80078da <_ZN8AudioSys23setAudioSamplesToOutputEP18SAIadapter_TypeDef+0x12>
	}
}

 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	ecbd 8b02 	vpop	{d8}
 800792c:	bd80      	pop	{r7, pc}

0800792e <_ZN8AudioSys6updateEv>:
void AudioSys::update(void) {
	if(saiAdapterCheckUpdate(adapter1) && saiAdapterCheckUpdate(adapter2)) {
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
		for(uint8_t i = 0; i < SAI_HALF_BUF; i+=STEREO) {		// until half of RxBuf & TxBuf is not fully processed
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	4618      	mov	r0, r3
 800793c:	f7f9 fce3 	bl	8001306 <saiAdapterCheckUpdate>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <_ZN8AudioSys6updateEv+0x2c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	4618      	mov	r0, r3
 800794c:	f7f9 fcdb 	bl	8001306 <saiAdapterCheckUpdate>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <_ZN8AudioSys6updateEv+0x2c>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <_ZN8AudioSys6updateEv+0x2e>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d02d      	beq.n	80079bc <_ZN8AudioSys6updateEv+0x8e>
			getAudioSamplesInInput(adapter1);	// load next sample pair in input module
 8007960:	2300      	movs	r3, #0
 8007962:	73fb      	strb	r3, [r7, #15]
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d828      	bhi.n	80079bc <_ZN8AudioSys6updateEv+0x8e>
			//getAudioSamplesInInput(adapter2);	// load next sample pair in input module
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff ff79 	bl	8007868 <_ZN8AudioSys22getAudioSamplesInInputEP18SAIadapter_TypeDef>
			for(uint8_t m = 0; m < (modules[0]->instancesNum - IO_MODULES_NUM); m++) {	// -2 i/o modules
				modules[m]->process();
 8007976:	2300      	movs	r3, #0
 8007978:	73bb      	strb	r3, [r7, #14]
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d113      	bne.n	80079a8 <_ZN8AudioSys6updateEv+0x7a>
			}
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	3306      	adds	r3, #6
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	6859      	ldr	r1, [r3, #4]
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	3306      	adds	r3, #6
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4608      	mov	r0, r1
 800799e:	4798      	blx	r3
				modules[m]->process();
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	3301      	adds	r3, #1
 80079a4:	73bb      	strb	r3, [r7, #14]
 80079a6:	e7e8      	b.n	800797a <_ZN8AudioSys6updateEv+0x4c>

			setAudioSamplesToOutput(adapter1);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff ff8a 	bl	80078c8 <_ZN8AudioSys23setAudioSamplesToOutputEP18SAIadapter_TypeDef>
			getAudioSamplesInInput(adapter1);	// load next sample pair in input module
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	3302      	adds	r3, #2
 80079b8:	73fb      	strb	r3, [r7, #15]
 80079ba:	e7d3      	b.n	8007964 <_ZN8AudioSys6updateEv+0x36>
			//setAudioSamplesToOutput(adapter2);
		}
	}
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <_ZN9ParameterC1Ev>:
class Parameter {
public:
	float val;                          // value
	u32 index;                          // index in module

	Parameter(){
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
		val = 0;  						// value
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
		index = 0;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	605a      	str	r2, [r3, #4]
    }
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <_ZN6ModuleC1EP9Parameterm>:
	u32 paramNum;            // num of parameters in module
	Parameter * p;           // pointer for module params to be stored to
	float output[STEREO];
	float * input[STEREO];

	Module(Parameter *p, u32 paramNum) {   // feed (allocated param array addr) & (number of Module's params to allocate)
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	4a27      	ldr	r2, [pc, #156]	; (8007a94 <_ZN6ModuleC1EP9Parameterm+0xac>)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	601a      	str	r2, [r3, #0]
		instancesNum++;                    // new instance created
 80079fa:	4b27      	ldr	r3, [pc, #156]	; (8007a98 <_ZN6ModuleC1EP9Parameterm+0xb0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3301      	adds	r3, #1
 8007a00:	4a25      	ldr	r2, [pc, #148]	; (8007a98 <_ZN6ModuleC1EP9Parameterm+0xb0>)
 8007a02:	6013      	str	r3, [r2, #0]
		this->paramNum = paramNum;         // how many params do we have in Module (specify precisely in child class)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	605a      	str	r2, [r3, #4]
		if (Module::allParamNum + paramNum >= MAX_SYNTH_PARAMS) // if MAX_SYNTH_PARAMS is not enough to store
 8007a0a:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <_ZN6ModuleC1EP9Parameterm+0xb4>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4413      	add	r3, r2
 8007a12:	2b7f      	cmp	r3, #127	; 0x7f
 8007a14:	d900      	bls.n	8007a18 <_ZN6ModuleC1EP9Parameterm+0x30>
			while (1);                                    // error, increase MAX_SYNTH_PARAMS
 8007a16:	e7fe      	b.n	8007a16 <_ZN6ModuleC1EP9Parameterm+0x2e>
		else {
			this->p = p + Module::allParamNum; // find where to store Module params in allocated array
 8007a18:	4b20      	ldr	r3, [pc, #128]	; (8007a9c <_ZN6ModuleC1EP9Parameterm+0xb4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	441a      	add	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	609a      	str	r2, [r3, #8]
			Module::allParamNum += paramNum;   // increase alloc array offset (to store params of the next Module if created)
 8007a26:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <_ZN6ModuleC1EP9Parameterm+0xb4>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	4a1b      	ldr	r2, [pc, #108]	; (8007a9c <_ZN6ModuleC1EP9Parameterm+0xb4>)
 8007a30:	6013      	str	r3, [r2, #0]
			for(u32 i=0;i<paramNum;i++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d20a      	bcs.n	8007a54 <_ZN6ModuleC1EP9Parameterm+0x6c>
				this->p[i].index = i;           // init parameter indexes
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	4413      	add	r3, r2
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	605a      	str	r2, [r3, #4]
			for(u32 i=0;i<paramNum;i++)
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	e7f0      	b.n	8007a36 <_ZN6ModuleC1EP9Parameterm+0x4e>
		}
		for (int i = 0; i < STEREO; i++) {       // let in & output be zeroed
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	dc13      	bgt.n	8007a86 <_ZN6ModuleC1EP9Parameterm+0x9e>
			this->input[i] = NULL;
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3304      	adds	r3, #4
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	2200      	movs	r2, #0
 8007a6a:	605a      	str	r2, [r3, #4]
			this->output[i] = 0;
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	3302      	adds	r3, #2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	3304      	adds	r3, #4
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < STEREO; i++) {       // let in & output be zeroed
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	3301      	adds	r3, #1
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	e7e8      	b.n	8007a58 <_ZN6ModuleC1EP9Parameterm+0x70>
		}
	}
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	0800a690 	.word	0x0800a690
 8007a98:	24000784 	.word	0x24000784
 8007a9c:	24000780 	.word	0x24000780

08007aa0 <_ZN4WireC1EP6ModuleS1_>:
		srcModule = NULL;
		destModule = NULL;
	}

	// single parameter modulation
	Wire(Module *srcModule_, Module *destModule_) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
		Wire::instancesNum++;
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <_ZN4WireC1EP6ModuleS1_+0x34>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <_ZN4WireC1EP6ModuleS1_+0x34>)
 8007ab4:	6013      	str	r3, [r2, #0]
		srcModule = srcModule_;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	601a      	str	r2, [r3, #0]
		destModule = destModule_;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	605a      	str	r2, [r3, #4]
		Plug();
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f808 	bl	8007ad8 <_ZN4Wire4PlugEv>
	}
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	24000788 	.word	0x24000788

08007ad8 <_ZN4Wire4PlugEv>:
	void Unplug(void) {
		destModule->input[LEFT] = NULL;
		destModule->input[RIGHT] = NULL;
	}

	void Plug(void) {
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
		destModule->input[LEFT] = &srcModule->output[LEFT];
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	320c      	adds	r2, #12
 8007aea:	615a      	str	r2, [r3, #20]
		destModule->input[RIGHT] = &srcModule->output[RIGHT];
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	3210      	adds	r2, #16
 8007af6:	619a      	str	r2, [r3, #24]

	}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <_ZN3AmpC1EP9Parameter>:
class Amp: public Module {
public:
	Parameter *volume;

	Amp();
	Amp(Parameter *p) :
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
				Module(p, AMP_PARAMETERS) {
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff ff67 	bl	80079e8 <_ZN6ModuleC1EP9Parameterm>
 8007b1a:	4a0f      	ldr	r2, [pc, #60]	; (8007b58 <_ZN3AmpC1EP9Parameter+0x54>)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
		//----------------- parameter address init  ------------------//
		Parameter *tmp = this->p;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	60fb      	str	r3, [r7, #12]
		volume = tmp++;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f103 0208 	add.w	r2, r3, #8
 8007b2c:	60fa      	str	r2, [r7, #12]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	61d3      	str	r3, [r2, #28]
		this->paramNum = tmp - this->p; // calculate actual number of used parameters
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	10db      	asrs	r3, r3, #3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	605a      	str	r2, [r3, #4]
		//----------------- parameter values init  --------------------//
		volume->val = 1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007b4a:	601a      	str	r2, [r3, #0]
	}
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	0800a69c 	.word	0x0800a69c

08007b5c <_ZN8AudioSysC1Ev>:
#include "libModules/Parameter.hpp"
#include "libModules/Wire.hpp"

class AudioSys {
public:
	AudioSys() {
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	4a07      	ldr	r2, [pc, #28]	; (8007b84 <_ZN8AudioSysC1Ev+0x28>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	601a      	str	r2, [r3, #0]
		adapter1 = &sai1adapter;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a06      	ldr	r2, [pc, #24]	; (8007b88 <_ZN8AudioSysC1Ev+0x2c>)
 8007b6e:	615a      	str	r2, [r3, #20]
		adapter2 = &sai2adapter;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a06      	ldr	r2, [pc, #24]	; (8007b8c <_ZN8AudioSysC1Ev+0x30>)
 8007b74:	619a      	str	r2, [r3, #24]
	}
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	0800a684 	.word	0x0800a684
 8007b88:	2400072c 	.word	0x2400072c
 8007b8c:	24000754 	.word	0x24000754

08007b90 <_ZN8AudioSys14includeModulesEv>:
//	IN_RAMD1 Wire amp2rev(&amp1, &rev);



	// module update sequence (update MAX_MODULES_NUM)
	void AudioSys::includeModules() {
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
		this->modules[0] = &amp1;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a07      	ldr	r2, [pc, #28]	; (8007bb8 <_ZN8AudioSys14includeModulesEv+0x28>)
 8007b9c:	61da      	str	r2, [r3, #28]
		this->modules[1] = &rev;
		this->inputModule = &audioInput1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a06      	ldr	r2, [pc, #24]	; (8007bbc <_ZN8AudioSys14includeModulesEv+0x2c>)
 8007ba2:	605a      	str	r2, [r3, #4]
		this->outputModule = &audioOutput1;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a06      	ldr	r2, [pc, #24]	; (8007bc0 <_ZN8AudioSys14includeModulesEv+0x30>)
 8007ba8:	609a      	str	r2, [r3, #8]
	}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	24001430 	.word	0x24001430
 8007bbc:	240013f0 	.word	0x240013f0
 8007bc0:	24001410 	.word	0x24001410

08007bc4 <_Z41__static_initialization_and_destruction_0ii>:
 8007bc4:	b5b0      	push	{r4, r5, r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d128      	bne.n	8007c26 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d123      	bne.n	8007c26 <_Z41__static_initialization_and_destruction_0ii+0x62>
	IN_RAMD1 AudioSys audioSystem; 	// global audio instance
 8007bde:	4814      	ldr	r0, [pc, #80]	; (8007c30 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8007be0:	f7ff ffbc 	bl	8007b5c <_ZN8AudioSysC1Ev>
	IN_RAMD1 Parameter paramAlloc[MAX_SYNTH_PARAMS];
 8007be4:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007be6:	247f      	movs	r4, #127	; 0x7f
 8007be8:	461d      	mov	r5, r3
 8007bea:	2c00      	cmp	r4, #0
 8007bec:	db05      	blt.n	8007bfa <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f7ff fee8 	bl	80079c4 <_ZN9ParameterC1Ev>
 8007bf4:	3508      	adds	r5, #8
 8007bf6:	3c01      	subs	r4, #1
 8007bf8:	e7f7      	b.n	8007bea <_Z41__static_initialization_and_destruction_0ii+0x26>
	IN_RAMD1 Amp audioInput1(paramAlloc);
 8007bfa:	490e      	ldr	r1, [pc, #56]	; (8007c34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007bfc:	480e      	ldr	r0, [pc, #56]	; (8007c38 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8007bfe:	f7ff ff81 	bl	8007b04 <_ZN3AmpC1EP9Parameter>
	IN_RAMD1 Amp audioOutput1(paramAlloc);
 8007c02:	490c      	ldr	r1, [pc, #48]	; (8007c34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007c04:	480d      	ldr	r0, [pc, #52]	; (8007c3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007c06:	f7ff ff7d 	bl	8007b04 <_ZN3AmpC1EP9Parameter>
	IN_RAMD1 Amp amp1(paramAlloc);
 8007c0a:	490a      	ldr	r1, [pc, #40]	; (8007c34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007c0c:	480c      	ldr	r0, [pc, #48]	; (8007c40 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007c0e:	f7ff ff79 	bl	8007b04 <_ZN3AmpC1EP9Parameter>
	IN_RAMD1 Wire audioInput1Wire(&audioInput1, &rev);
 8007c12:	4a0b      	ldr	r2, [pc, #44]	; (8007c40 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007c14:	4908      	ldr	r1, [pc, #32]	; (8007c38 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8007c16:	480b      	ldr	r0, [pc, #44]	; (8007c44 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007c18:	f7ff ff42 	bl	8007aa0 <_ZN4WireC1EP6ModuleS1_>
	IN_RAMD1 Wire audioOutput1Wire(&rev, &audioOutput1);
 8007c1c:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007c1e:	4908      	ldr	r1, [pc, #32]	; (8007c40 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007c20:	4809      	ldr	r0, [pc, #36]	; (8007c48 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007c22:	f7ff ff3d 	bl	8007aa0 <_ZN4WireC1EP6ModuleS1_>
	}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	24000fd0 	.word	0x24000fd0
 8007c34:	24000ff0 	.word	0x24000ff0
 8007c38:	240013f0 	.word	0x240013f0
 8007c3c:	24001410 	.word	0x24001410
 8007c40:	24001430 	.word	0x24001430
 8007c44:	24001450 	.word	0x24001450
 8007c48:	24001458 	.word	0x24001458

08007c4c <_GLOBAL__sub_I_audioSystem>:
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c54:	2001      	movs	r0, #1
 8007c56:	f7ff ffb5 	bl	8007bc4 <_Z41__static_initialization_and_destruction_0ii>
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <_ZN3Amp7processEv>:
 */

#include "Amp.hpp"


void Amp::process(void) {
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]

	for (u8 lr = 0; lr < STEREO; lr++) {
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d819      	bhi.n	8007ca2 <_ZN3Amp7processEv+0x46>
		output[lr] = *input[lr] * volume->val;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	3304      	adds	r3, #4
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	ed93 7a00 	vldr	s14, [r3]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	edd3 7a00 	vldr	s15, [r3]
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	3302      	adds	r3, #2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	3304      	adds	r3, #4
 8007c96:	edc3 7a00 	vstr	s15, [r3]
	for (u8 lr = 0; lr < STEREO; lr++) {
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	73fb      	strb	r3, [r7, #15]
 8007ca0:	e7e2      	b.n	8007c68 <_ZN3Amp7processEv+0xc>
	}
}
 8007ca2:	bf00      	nop
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
	...

08007cb0 <_ZN8touchgfx4FontD1Ev>:
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	4a04      	ldr	r2, [pc, #16]	; (8007ccc <_ZN8touchgfx4FontD1Ev+0x1c>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	0800a700 	.word	0x0800a700

08007cd0 <_ZN8touchgfx4FontD0Ev>:
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff ffe9 	bl	8007cb0 <_ZN8touchgfx4FontD1Ev>
 8007cde:	2110      	movs	r1, #16
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 fa9f 	bl	8009224 <_ZdlPvj>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZNK8touchgfx4Font8getGlyphEt>:
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	807b      	strh	r3, [r7, #2]
 8007cfc:	887b      	ldrh	r3, [r7, #2]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
 8007d02:	2300      	movs	r3, #0
 8007d04:	e010      	b.n	8007d28 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
 8007d06:	2300      	movs	r3, #0
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	681c      	ldr	r4, [r3, #0]
 8007d16:	f107 030f 	add.w	r3, r7, #15
 8007d1a:	f107 0210 	add.w	r2, r7, #16
 8007d1e:	8879      	ldrh	r1, [r7, #2]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	47a0      	blx	r4
 8007d24:	6178      	str	r0, [r7, #20]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd90      	pop	{r4, r7, pc}

08007d30 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	895b      	ldrh	r3, [r3, #10]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	899b      	ldrh	r3, [r3, #12]
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	889b      	ldrh	r3, [r3, #4]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	889a      	ldrh	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	799b      	ldrb	r3, [r3, #6]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	4413      	add	r3, r2
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	79db      	ldrb	r3, [r3, #7]
 8007da6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	79db      	ldrb	r3, [r3, #7]
 8007dc4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
	...

08007dd8 <_ZN8touchgfx9ConstFontD1Ev>:
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff ff61 	bl	8007cb0 <_ZN8touchgfx4FontD1Ev>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	0800a754 	.word	0x0800a754

08007dfc <_ZN8touchgfx9ConstFontD0Ev>:
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff ffe7 	bl	8007dd8 <_ZN8touchgfx9ConstFontD1Ev>
 8007e0a:	2118      	movs	r1, #24
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 fa09 	bl	8009224 <_ZdlPvj>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <_ZN8touchgfx13GeneratedFontD1Ev>:
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	4a05      	ldr	r2, [pc, #20]	; (8007e3c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff ffd3 	bl	8007dd8 <_ZN8touchgfx9ConstFontD1Ev>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	0800a6a8 	.word	0x0800a6a8

08007e40 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff ffe7 	bl	8007e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8007e4e:	2128      	movs	r1, #40	; 0x28
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f9e7 	bl	8009224 <_ZdlPvj>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08c      	sub	sp, #48	; 0x30
 8007e94:	af08      	add	r7, sp, #32
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	80fb      	strh	r3, [r7, #6]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	80bb      	strh	r3, [r7, #4]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	88b9      	ldrh	r1, [r7, #4]
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007eae:	9306      	str	r3, [sp, #24]
 8007eb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007eb2:	9305      	str	r3, [sp, #20]
 8007eb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ec4:	9302      	str	r3, [sp, #8]
 8007ec6:	7f3b      	ldrb	r3, [r7, #28]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	7e3b      	ldrb	r3, [r7, #24]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	f000 fbdd 	bl	8008690 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8007ed6:	4a0a      	ldr	r2, [pc, #40]	; (8007f00 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ee0:	619a      	str	r2, [r3, #24]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee6:	61da      	str	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007eec:	621a      	str	r2, [r3, #32]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ef2:	625a      	str	r2, [r3, #36]	; 0x24
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	0800a6a8 	.word	0x0800a6a8

08007f04 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	889b      	ldrh	r3, [r3, #4]
 8007f18:	0adb      	lsrs	r3, r3, #11
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	4413      	add	r3, r2
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4413      	add	r3, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:
 8007f36:	b480      	push	{r7}
 8007f38:	b089      	sub	sp, #36	; 0x24
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	607a      	str	r2, [r7, #4]
 8007f42:	817b      	strh	r3, [r7, #10]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7b1b      	ldrb	r3, [r3, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
 8007f52:	2300      	movs	r3, #0
 8007f54:	e030      	b.n	8007fb8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	69da      	ldr	r2, [r3, #28]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	7b5b      	ldrb	r3, [r3, #13]
 8007f62:	021b      	lsls	r3, r3, #8
 8007f64:	b21b      	sxth	r3, r3
 8007f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f6a:	b219      	sxth	r1, r3
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	7adb      	ldrb	r3, [r3, #11]
 8007f70:	b21b      	sxth	r3, r3
 8007f72:	430b      	orrs	r3, r1
 8007f74:	b21b      	sxth	r3, r3
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7b1b      	ldrb	r3, [r3, #12]
 8007f82:	837b      	strh	r3, [r7, #26]
 8007f84:	8b7b      	ldrh	r3, [r7, #26]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d015      	beq.n	8007fb6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	897a      	ldrh	r2, [r7, #10]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d103      	bne.n	8007f9c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007f9a:	e00d      	b.n	8007fb8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	897a      	ldrh	r2, [r7, #10]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d306      	bcc.n	8007fb4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
 8007fa6:	8b7b      	ldrh	r3, [r7, #26]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	837b      	strh	r3, [r7, #26]
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	e7e7      	b.n	8007f84 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
 8007fb4:	bf00      	nop
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3724      	adds	r7, #36	; 0x24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <__tcf_0>:
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	4801      	ldr	r0, [pc, #4]	; (8007fd0 <__tcf_0+0xc>)
 8007fca:	f7ff ff27 	bl	8007e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	2400078c 	.word	0x2400078c

08007fd4 <_Z23getFont_verdana_10_4bppv>:
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08c      	sub	sp, #48	; 0x30
 8007fd8:	af0c      	add	r7, sp, #48	; 0x30
 8007fda:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	f3bf 8f5b 	dmb	ish
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bf0c      	ite	eq
 8007fec:	2301      	moveq	r3, #1
 8007fee:	2300      	movne	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d02c      	beq.n	8008050 <_Z23getFont_verdana_10_4bppv+0x7c>
 8007ff6:	4818      	ldr	r0, [pc, #96]	; (8008058 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007ff8:	f001 f916 	bl	8009228 <__cxa_guard_acquire>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bf14      	ite	ne
 8008002:	2301      	movne	r3, #1
 8008004:	2300      	moveq	r3, #0
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d021      	beq.n	8008050 <_Z23getFont_verdana_10_4bppv+0x7c>
 800800c:	2300      	movs	r3, #0
 800800e:	930a      	str	r3, [sp, #40]	; 0x28
 8008010:	2300      	movs	r3, #0
 8008012:	9309      	str	r3, [sp, #36]	; 0x24
 8008014:	2300      	movs	r3, #0
 8008016:	9308      	str	r3, [sp, #32]
 8008018:	233f      	movs	r3, #63	; 0x3f
 800801a:	9307      	str	r3, [sp, #28]
 800801c:	4b0f      	ldr	r3, [pc, #60]	; (800805c <_Z23getFont_verdana_10_4bppv+0x88>)
 800801e:	9306      	str	r3, [sp, #24]
 8008020:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8008022:	9305      	str	r3, [sp, #20]
 8008024:	2300      	movs	r3, #0
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	2300      	movs	r3, #0
 800802a:	9303      	str	r3, [sp, #12]
 800802c:	2301      	movs	r3, #1
 800802e:	9302      	str	r3, [sp, #8]
 8008030:	2304      	movs	r3, #4
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	2300      	movs	r3, #0
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	230a      	movs	r3, #10
 800803a:	2201      	movs	r2, #1
 800803c:	4909      	ldr	r1, [pc, #36]	; (8008064 <_Z23getFont_verdana_10_4bppv+0x90>)
 800803e:	480a      	ldr	r0, [pc, #40]	; (8008068 <_Z23getFont_verdana_10_4bppv+0x94>)
 8008040:	f7ff ff26 	bl	8007e90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008044:	4809      	ldr	r0, [pc, #36]	; (800806c <_Z23getFont_verdana_10_4bppv+0x98>)
 8008046:	f001 f939 	bl	80092bc <atexit>
 800804a:	4803      	ldr	r0, [pc, #12]	; (8008058 <_Z23getFont_verdana_10_4bppv+0x84>)
 800804c:	f001 f8f8 	bl	8009240 <__cxa_guard_release>
 8008050:	4b05      	ldr	r3, [pc, #20]	; (8008068 <_Z23getFont_verdana_10_4bppv+0x94>)
 8008052:	4618      	mov	r0, r3
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	240007b4 	.word	0x240007b4
 800805c:	0800b21c 	.word	0x0800b21c
 8008060:	0800b234 	.word	0x0800b234
 8008064:	0800b18c 	.word	0x0800b18c
 8008068:	2400078c 	.word	0x2400078c
 800806c:	08007fc5 	.word	0x08007fc5

08008070 <__tcf_0>:
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
 8008074:	4801      	ldr	r0, [pc, #4]	; (800807c <__tcf_0+0xc>)
 8008076:	f7ff fed1 	bl	8007e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 800807a:	bd80      	pop	{r7, pc}
 800807c:	240007b8 	.word	0x240007b8

08008080 <_Z23getFont_verdana_20_4bppv>:
 8008080:	b580      	push	{r7, lr}
 8008082:	b08c      	sub	sp, #48	; 0x30
 8008084:	af0c      	add	r7, sp, #48	; 0x30
 8008086:	4b1f      	ldr	r3, [pc, #124]	; (8008104 <_Z23getFont_verdana_20_4bppv+0x84>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	f3bf 8f5b 	dmb	ish
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d02c      	beq.n	80080fc <_Z23getFont_verdana_20_4bppv+0x7c>
 80080a2:	4818      	ldr	r0, [pc, #96]	; (8008104 <_Z23getFont_verdana_20_4bppv+0x84>)
 80080a4:	f001 f8c0 	bl	8009228 <__cxa_guard_acquire>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	bf14      	ite	ne
 80080ae:	2301      	movne	r3, #1
 80080b0:	2300      	moveq	r3, #0
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d021      	beq.n	80080fc <_Z23getFont_verdana_20_4bppv+0x7c>
 80080b8:	2300      	movs	r3, #0
 80080ba:	930a      	str	r3, [sp, #40]	; 0x28
 80080bc:	2300      	movs	r3, #0
 80080be:	9309      	str	r3, [sp, #36]	; 0x24
 80080c0:	2300      	movs	r3, #0
 80080c2:	9308      	str	r3, [sp, #32]
 80080c4:	233f      	movs	r3, #63	; 0x3f
 80080c6:	9307      	str	r3, [sp, #28]
 80080c8:	4b0f      	ldr	r3, [pc, #60]	; (8008108 <_Z23getFont_verdana_20_4bppv+0x88>)
 80080ca:	9306      	str	r3, [sp, #24]
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80080ce:	9305      	str	r3, [sp, #20]
 80080d0:	2301      	movs	r3, #1
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	2300      	movs	r3, #0
 80080d6:	9303      	str	r3, [sp, #12]
 80080d8:	2301      	movs	r3, #1
 80080da:	9302      	str	r3, [sp, #8]
 80080dc:	2304      	movs	r3, #4
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	2300      	movs	r3, #0
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	2314      	movs	r3, #20
 80080e6:	2208      	movs	r2, #8
 80080e8:	4909      	ldr	r1, [pc, #36]	; (8008110 <_Z23getFont_verdana_20_4bppv+0x90>)
 80080ea:	480a      	ldr	r0, [pc, #40]	; (8008114 <_Z23getFont_verdana_20_4bppv+0x94>)
 80080ec:	f7ff fed0 	bl	8007e90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80080f0:	4809      	ldr	r0, [pc, #36]	; (8008118 <_Z23getFont_verdana_20_4bppv+0x98>)
 80080f2:	f001 f8e3 	bl	80092bc <atexit>
 80080f6:	4803      	ldr	r0, [pc, #12]	; (8008104 <_Z23getFont_verdana_20_4bppv+0x84>)
 80080f8:	f001 f8a2 	bl	8009240 <__cxa_guard_release>
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <_Z23getFont_verdana_20_4bppv+0x94>)
 80080fe:	4618      	mov	r0, r3
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	240007e0 	.word	0x240007e0
 8008108:	0800b220 	.word	0x0800b220
 800810c:	0800b238 	.word	0x0800b238
 8008110:	0800b19c 	.word	0x0800b19c
 8008114:	240007b8 	.word	0x240007b8
 8008118:	08008071 	.word	0x08008071

0800811c <__tcf_0>:
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <__tcf_0+0xc>)
 8008122:	f7ff fe7b 	bl	8007e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8008126:	bd80      	pop	{r7, pc}
 8008128:	240007e4 	.word	0x240007e4

0800812c <_Z23getFont_verdana_40_4bppv>:
 800812c:	b580      	push	{r7, lr}
 800812e:	b08c      	sub	sp, #48	; 0x30
 8008130:	af0c      	add	r7, sp, #48	; 0x30
 8008132:	4b1f      	ldr	r3, [pc, #124]	; (80081b0 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f3bf 8f5b 	dmb	ish
 800813a:	b2db      	uxtb	r3, r3
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	bf0c      	ite	eq
 8008144:	2301      	moveq	r3, #1
 8008146:	2300      	movne	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d02c      	beq.n	80081a8 <_Z23getFont_verdana_40_4bppv+0x7c>
 800814e:	4818      	ldr	r0, [pc, #96]	; (80081b0 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008150:	f001 f86a 	bl	8009228 <__cxa_guard_acquire>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	bf14      	ite	ne
 800815a:	2301      	movne	r3, #1
 800815c:	2300      	moveq	r3, #0
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d021      	beq.n	80081a8 <_Z23getFont_verdana_40_4bppv+0x7c>
 8008164:	2300      	movs	r3, #0
 8008166:	930a      	str	r3, [sp, #40]	; 0x28
 8008168:	2300      	movs	r3, #0
 800816a:	9309      	str	r3, [sp, #36]	; 0x24
 800816c:	2300      	movs	r3, #0
 800816e:	9308      	str	r3, [sp, #32]
 8008170:	233f      	movs	r3, #63	; 0x3f
 8008172:	9307      	str	r3, [sp, #28]
 8008174:	4b0f      	ldr	r3, [pc, #60]	; (80081b4 <_Z23getFont_verdana_40_4bppv+0x88>)
 8008176:	9306      	str	r3, [sp, #24]
 8008178:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	2300      	movs	r3, #0
 800817e:	9304      	str	r3, [sp, #16]
 8008180:	2300      	movs	r3, #0
 8008182:	9303      	str	r3, [sp, #12]
 8008184:	2301      	movs	r3, #1
 8008186:	9302      	str	r3, [sp, #8]
 8008188:	2304      	movs	r3, #4
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	2300      	movs	r3, #0
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	2328      	movs	r3, #40	; 0x28
 8008192:	2201      	movs	r2, #1
 8008194:	4909      	ldr	r1, [pc, #36]	; (80081bc <_Z23getFont_verdana_40_4bppv+0x90>)
 8008196:	480a      	ldr	r0, [pc, #40]	; (80081c0 <_Z23getFont_verdana_40_4bppv+0x94>)
 8008198:	f7ff fe7a 	bl	8007e90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800819c:	4809      	ldr	r0, [pc, #36]	; (80081c4 <_Z23getFont_verdana_40_4bppv+0x98>)
 800819e:	f001 f88d 	bl	80092bc <atexit>
 80081a2:	4803      	ldr	r0, [pc, #12]	; (80081b0 <_Z23getFont_verdana_40_4bppv+0x84>)
 80081a4:	f001 f84c 	bl	8009240 <__cxa_guard_release>
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <_Z23getFont_verdana_40_4bppv+0x94>)
 80081aa:	4618      	mov	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	2400080c 	.word	0x2400080c
 80081b4:	0800b230 	.word	0x0800b230
 80081b8:	0800b23c 	.word	0x0800b23c
 80081bc:	0800b20c 	.word	0x0800b20c
 80081c0:	240007e4 	.word	0x240007e4
 80081c4:	0800811d 	.word	0x0800811d

080081c8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	460b      	mov	r3, r1
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	817b      	strh	r3, [r7, #10]
 80081d6:	2300      	movs	r3, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	2300      	movs	r3, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	2300      	movs	r3, #0
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8008210:	b40e      	push	{r1, r2, r3}
 8008212:	b580      	push	{r7, lr}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	f107 0320 	add.w	r3, r7, #32
 800821e:	60bb      	str	r3, [r7, #8]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	69fa      	ldr	r2, [r7, #28]
 8008224:	2100      	movs	r1, #0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f910 	bl	800844c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800822c:	4603      	mov	r3, r0
 800822e:	81fb      	strh	r3, [r7, #14]
 8008230:	89fb      	ldrh	r3, [r7, #14]
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800823c:	b003      	add	sp, #12
 800823e:	4770      	bx	lr

08008240 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8008240:	b40c      	push	{r2, r3}
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
 800824e:	f107 031c 	add.w	r3, r7, #28
 8008252:	60bb      	str	r3, [r7, #8]
 8008254:	78f9      	ldrb	r1, [r7, #3]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f8f6 	bl	800844c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008260:	4603      	mov	r3, r0
 8008262:	81fb      	strh	r3, [r7, #14]
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008270:	b002      	add	sp, #8
 8008272:	4770      	bx	lr

08008274 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	; 0x28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008284:	2b00      	cmp	r3, #0
 8008286:	d016      	beq.n	80082b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3322      	adds	r3, #34	; 0x22
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	8adb      	ldrh	r3, [r3, #22]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008296:	4b43      	ldr	r3, [pc, #268]	; (80083a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008298:	4a43      	ldr	r2, [pc, #268]	; (80083a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800829a:	21c0      	movs	r1, #192	; 0xc0
 800829c:	4843      	ldr	r0, [pc, #268]	; (80083ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800829e:	f000 ffef 	bl	8009280 <__assert_func>
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	8a9b      	ldrh	r3, [r3, #20]
 80082a6:	461a      	mov	r2, r3
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e000      	b.n	80082b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80082b6:	2300      	movs	r3, #0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d06a      	beq.n	8008392 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 ff83 	bl	80091c8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3322      	adds	r3, #34	; 0x22
 80082c6:	623b      	str	r3, [r7, #32]
 80082c8:	2301      	movs	r3, #1
 80082ca:	83fb      	strh	r3, [r7, #30]
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	8adb      	ldrh	r3, [r3, #22]
 80082d0:	8bfa      	ldrh	r2, [r7, #30]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d305      	bcc.n	80082e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80082d6:	4b36      	ldr	r3, [pc, #216]	; (80083b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80082d8:	4a36      	ldr	r2, [pc, #216]	; (80083b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80082da:	21c5      	movs	r1, #197	; 0xc5
 80082dc:	4833      	ldr	r0, [pc, #204]	; (80083ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80082de:	f000 ffcf 	bl	8009280 <__assert_func>
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	8a9a      	ldrh	r2, [r3, #20]
 80082e6:	8bfb      	ldrh	r3, [r7, #30]
 80082e8:	4413      	add	r3, r2
 80082ea:	83bb      	strh	r3, [r7, #28]
 80082ec:	8bbb      	ldrh	r3, [r7, #28]
 80082ee:	2b09      	cmp	r3, #9
 80082f0:	d801      	bhi.n	80082f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80082f2:	8bbb      	ldrh	r3, [r7, #28]
 80082f4:	e001      	b.n	80082fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80082f6:	8bbb      	ldrh	r3, [r7, #28]
 80082f8:	3b0a      	subs	r3, #10
 80082fa:	6a3a      	ldr	r2, [r7, #32]
 80082fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008300:	f640 123f 	movw	r2, #2367	; 0x93f
 8008304:	4293      	cmp	r3, r2
 8008306:	bf0c      	ite	eq
 8008308:	2301      	moveq	r3, #1
 800830a:	2300      	movne	r3, #0
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d03f      	beq.n	8008392 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	3322      	adds	r3, #34	; 0x22
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	3222      	adds	r2, #34	; 0x22
 800831a:	60ba      	str	r2, [r7, #8]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	8ad2      	ldrh	r2, [r2, #22]
 8008320:	2a00      	cmp	r2, #0
 8008322:	d105      	bne.n	8008330 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008324:	4b1f      	ldr	r3, [pc, #124]	; (80083a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008326:	4a20      	ldr	r2, [pc, #128]	; (80083a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008328:	21c0      	movs	r1, #192	; 0xc0
 800832a:	4820      	ldr	r0, [pc, #128]	; (80083ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800832c:	f000 ffa8 	bl	8009280 <__assert_func>
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	8a92      	ldrh	r2, [r2, #20]
 8008334:	4611      	mov	r1, r2
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800833c:	613b      	str	r3, [r7, #16]
 800833e:	4613      	mov	r3, r2
 8008340:	81fb      	strh	r3, [r7, #14]
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	8adb      	ldrh	r3, [r3, #22]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d806      	bhi.n	8008358 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800834a:	4b1b      	ldr	r3, [pc, #108]	; (80083b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800834c:	4a1b      	ldr	r2, [pc, #108]	; (80083bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800834e:	f240 110d 	movw	r1, #269	; 0x10d
 8008352:	4816      	ldr	r0, [pc, #88]	; (80083ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008354:	f000 ff94 	bl	8009280 <__assert_func>
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	8a9b      	ldrh	r3, [r3, #20]
 800835c:	3301      	adds	r3, #1
 800835e:	81bb      	strh	r3, [r7, #12]
 8008360:	89bb      	ldrh	r3, [r7, #12]
 8008362:	2b09      	cmp	r3, #9
 8008364:	d801      	bhi.n	800836a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008366:	89bb      	ldrh	r3, [r7, #12]
 8008368:	e000      	b.n	800836c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800836a:	2300      	movs	r3, #0
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	89f9      	ldrh	r1, [r7, #14]
 8008370:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008374:	bf00      	nop
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3322      	adds	r3, #34	; 0x22
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	f640 133f 	movw	r3, #2367	; 0x93f
 8008380:	82fb      	strh	r3, [r7, #22]
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	8a9b      	ldrh	r3, [r3, #20]
 8008386:	4619      	mov	r1, r3
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	8afa      	ldrh	r2, [r7, #22]
 800838c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8008390:	bf00      	nop
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fdfc 	bl	8008f90 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008398:	4603      	mov	r3, r0
 800839a:	4618      	mov	r0, r3
 800839c:	3728      	adds	r7, #40	; 0x28
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	0800a3c0 	.word	0x0800a3c0
 80083a8:	0800a3cc 	.word	0x0800a3cc
 80083ac:	0800a478 	.word	0x0800a478
 80083b0:	0800a4c0 	.word	0x0800a4c0
 80083b4:	0800a4d0 	.word	0x0800a4d0
 80083b8:	0800a5a4 	.word	0x0800a5a4
 80083bc:	0800a5b0 	.word	0x0800a5b0

080083c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fd99 	bl	8008f00 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <_Z41__static_initialization_and_destruction_0ii>:
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d113      	bne.n	8008410 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d10e      	bne.n	8008410 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80083f2:	f7ff fe45 	bl	8008080 <_Z23getFont_verdana_20_4bppv>
 80083f6:	4603      	mov	r3, r0
 80083f8:	4a07      	ldr	r2, [pc, #28]	; (8008418 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	f7ff fe96 	bl	800812c <_Z23getFont_verdana_40_4bppv>
 8008400:	4603      	mov	r3, r0
 8008402:	4a05      	ldr	r2, [pc, #20]	; (8008418 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008404:	6053      	str	r3, [r2, #4]
 8008406:	f7ff fde5 	bl	8007fd4 <_Z23getFont_verdana_10_4bppv>
 800840a:	4603      	mov	r3, r0
 800840c:	4a02      	ldr	r2, [pc, #8]	; (8008418 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800840e:	6093      	str	r3, [r2, #8]
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	24000810 	.word	0x24000810

0800841c <_GLOBAL__sub_I_touchgfx_fonts>:
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
 8008420:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008424:	2001      	movs	r0, #1
 8008426:	f7ff ffd7 	bl	80083d8 <_Z41__static_initialization_and_destruction_0ii>
 800842a:	bd80      	pop	{r7, pc}

0800842c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800842c:	4b01      	ldr	r3, [pc, #4]	; (8008434 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	4770      	bx	lr
 8008434:	2400081c 	.word	0x2400081c

08008438 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8008438:	4b03      	ldr	r3, [pc, #12]	; (8008448 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800843a:	2200      	movs	r2, #0
 800843c:	801a      	strh	r2, [r3, #0]
 800843e:	805a      	strh	r2, [r3, #2]
 8008440:	809a      	strh	r2, [r3, #4]
 8008442:	80da      	strh	r2, [r3, #6]
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	24000820 	.word	0x24000820

0800844c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	b09d      	sub	sp, #116	; 0x74
 8008452:	4606      	mov	r6, r0
 8008454:	4614      	mov	r4, r2
 8008456:	468a      	mov	sl, r1
 8008458:	a803      	add	r0, sp, #12
 800845a:	461d      	mov	r5, r3
 800845c:	f000 f9a4 	bl	80087a8 <_ZN8touchgfx12TextProviderC1Ev>
 8008460:	6833      	ldr	r3, [r6, #0]
 8008462:	4630      	mov	r0, r6
 8008464:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8008468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846a:	4798      	blx	r3
 800846c:	6833      	ldr	r3, [r6, #0]
 800846e:	4607      	mov	r7, r0
 8008470:	4630      	mov	r0, r6
 8008472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008474:	4798      	blx	r3
 8008476:	462a      	mov	r2, r5
 8008478:	2500      	movs	r5, #0
 800847a:	4621      	mov	r1, r4
 800847c:	9000      	str	r0, [sp, #0]
 800847e:	463b      	mov	r3, r7
 8008480:	462c      	mov	r4, r5
 8008482:	46a9      	mov	r9, r5
 8008484:	46a8      	mov	r8, r5
 8008486:	a803      	add	r0, sp, #12
 8008488:	f000 f9e1 	bl	800884e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800848c:	2300      	movs	r3, #0
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8008494:	429c      	cmp	r4, r3
 8008496:	d002      	beq.n	800849e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8008498:	455c      	cmp	r4, fp
 800849a:	bf18      	it	ne
 800849c:	4625      	movne	r5, r4
 800849e:	ab02      	add	r3, sp, #8
 80084a0:	4632      	mov	r2, r6
 80084a2:	4651      	mov	r1, sl
 80084a4:	a803      	add	r0, sp, #12
 80084a6:	f000 fcd3 	bl	8008e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80084aa:	4604      	mov	r4, r0
 80084ac:	b108      	cbz	r0, 80084b2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80084ae:	280a      	cmp	r0, #10
 80084b0:	d10a      	bne.n	80084c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80084b2:	45c1      	cmp	r9, r8
 80084b4:	bf38      	it	cc
 80084b6:	46c1      	movcc	r9, r8
 80084b8:	f04f 0800 	mov.w	r8, #0
 80084bc:	2c00      	cmp	r4, #0
 80084be:	d1e5      	bne.n	800848c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80084c0:	4648      	mov	r0, r9
 80084c2:	b01d      	add	sp, #116	; 0x74
 80084c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c8:	9a02      	ldr	r2, [sp, #8]
 80084ca:	2a00      	cmp	r2, #0
 80084cc:	d0de      	beq.n	800848c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80084ce:	7b57      	ldrb	r7, [r2, #13]
 80084d0:	4629      	mov	r1, r5
 80084d2:	6833      	ldr	r3, [r6, #0]
 80084d4:	007f      	lsls	r7, r7, #1
 80084d6:	8894      	ldrh	r4, [r2, #4]
 80084d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084da:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80084de:	7a97      	ldrb	r7, [r2, #10]
 80084e0:	4307      	orrs	r7, r0
 80084e2:	4630      	mov	r0, r6
 80084e4:	4798      	blx	r3
 80084e6:	4438      	add	r0, r7
 80084e8:	4480      	add	r8, r0
 80084ea:	fa1f f888 	uxth.w	r8, r8
 80084ee:	e7e5      	b.n	80084bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080084f0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80084f0:	b508      	push	{r3, lr}
 80084f2:	6803      	ldr	r3, [r0, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	4798      	blx	r3
 80084f8:	b128      	cbz	r0, 8008506 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80084fa:	7b43      	ldrb	r3, [r0, #13]
 80084fc:	7a80      	ldrb	r0, [r0, #10]
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008504:	4318      	orrs	r0, r3
 8008506:	bd08      	pop	{r3, pc}

08008508 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8008508:	b40e      	push	{r1, r2, r3}
 800850a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850c:	b09e      	sub	sp, #120	; 0x78
 800850e:	4605      	mov	r5, r0
 8008510:	ab23      	add	r3, sp, #140	; 0x8c
 8008512:	a805      	add	r0, sp, #20
 8008514:	f853 4b04 	ldr.w	r4, [r3], #4
 8008518:	9303      	str	r3, [sp, #12]
 800851a:	f000 f945 	bl	80087a8 <_ZN8touchgfx12TextProviderC1Ev>
 800851e:	682b      	ldr	r3, [r5, #0]
 8008520:	4628      	mov	r0, r5
 8008522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008524:	4798      	blx	r3
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	4606      	mov	r6, r0
 800852a:	4628      	mov	r0, r5
 800852c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800852e:	4798      	blx	r3
 8008530:	4633      	mov	r3, r6
 8008532:	4621      	mov	r1, r4
 8008534:	ae1e      	add	r6, sp, #120	; 0x78
 8008536:	2400      	movs	r4, #0
 8008538:	9000      	str	r0, [sp, #0]
 800853a:	9a03      	ldr	r2, [sp, #12]
 800853c:	a805      	add	r0, sp, #20
 800853e:	f000 f986 	bl	800884e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8008542:	f846 4d68 	str.w	r4, [r6, #-104]!
 8008546:	462a      	mov	r2, r5
 8008548:	4633      	mov	r3, r6
 800854a:	4621      	mov	r1, r4
 800854c:	a805      	add	r0, sp, #20
 800854e:	f000 fc7f 	bl	8008e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8008552:	b300      	cbz	r0, 8008596 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8008554:	280a      	cmp	r0, #10
 8008556:	d01a      	beq.n	800858e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8008558:	9f04      	ldr	r7, [sp, #16]
 800855a:	b1c7      	cbz	r7, 800858e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800855c:	7b78      	ldrb	r0, [r7, #13]
 800855e:	7a3b      	ldrb	r3, [r7, #8]
 8008560:	00c1      	lsls	r1, r0, #3
 8008562:	88aa      	ldrh	r2, [r5, #4]
 8008564:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8008568:	4319      	orrs	r1, r3
 800856a:	0643      	lsls	r3, r0, #25
 800856c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8008570:	bf48      	it	mi
 8008572:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8008576:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800857a:	bf48      	it	mi
 800857c:	b219      	sxthmi	r1, r3
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	4303      	orrs	r3, r0
 8008582:	4413      	add	r3, r2
 8008584:	1a5b      	subs	r3, r3, r1
 8008586:	b29b      	uxth	r3, r3
 8008588:	42a3      	cmp	r3, r4
 800858a:	bfc8      	it	gt
 800858c:	b21c      	sxthgt	r4, r3
 800858e:	4633      	mov	r3, r6
 8008590:	462a      	mov	r2, r5
 8008592:	2100      	movs	r1, #0
 8008594:	e7da      	b.n	800854c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8008596:	b2a0      	uxth	r0, r4
 8008598:	b01e      	add	sp, #120	; 0x78
 800859a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800859e:	b003      	add	sp, #12
 80085a0:	4770      	bx	lr

080085a2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80085a2:	b40e      	push	{r1, r2, r3}
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	b09d      	sub	sp, #116	; 0x74
 80085a8:	4604      	mov	r4, r0
 80085aa:	ab21      	add	r3, sp, #132	; 0x84
 80085ac:	a803      	add	r0, sp, #12
 80085ae:	f853 5b04 	ldr.w	r5, [r3], #4
 80085b2:	9302      	str	r3, [sp, #8]
 80085b4:	f000 f8f8 	bl	80087a8 <_ZN8touchgfx12TextProviderC1Ev>
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	4620      	mov	r0, r4
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	4798      	blx	r3
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	4606      	mov	r6, r0
 80085c4:	4620      	mov	r0, r4
 80085c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085c8:	2401      	movs	r4, #1
 80085ca:	4798      	blx	r3
 80085cc:	4633      	mov	r3, r6
 80085ce:	9000      	str	r0, [sp, #0]
 80085d0:	4629      	mov	r1, r5
 80085d2:	9a02      	ldr	r2, [sp, #8]
 80085d4:	a803      	add	r0, sp, #12
 80085d6:	f000 f93a 	bl	800884e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80085da:	a803      	add	r0, sp, #12
 80085dc:	f000 fcd8 	bl	8008f90 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80085e0:	b2a3      	uxth	r3, r4
 80085e2:	b138      	cbz	r0, 80085f4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80085e4:	280a      	cmp	r0, #10
 80085e6:	a803      	add	r0, sp, #12
 80085e8:	bf04      	itt	eq
 80085ea:	3301      	addeq	r3, #1
 80085ec:	b21c      	sxtheq	r4, r3
 80085ee:	f000 fccf 	bl	8008f90 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80085f2:	e7f5      	b.n	80085e0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80085f4:	4618      	mov	r0, r3
 80085f6:	b01d      	add	sp, #116	; 0x74
 80085f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085fc:	b003      	add	sp, #12
 80085fe:	4770      	bx	lr

08008600 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8008600:	b40e      	push	{r1, r2, r3}
 8008602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008604:	b09e      	sub	sp, #120	; 0x78
 8008606:	4604      	mov	r4, r0
 8008608:	ab23      	add	r3, sp, #140	; 0x8c
 800860a:	a805      	add	r0, sp, #20
 800860c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008610:	9303      	str	r3, [sp, #12]
 8008612:	f000 f8c9 	bl	80087a8 <_ZN8touchgfx12TextProviderC1Ev>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	4620      	mov	r0, r4
 800861a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861c:	4798      	blx	r3
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	4606      	mov	r6, r0
 8008622:	4620      	mov	r0, r4
 8008624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008626:	4798      	blx	r3
 8008628:	4633      	mov	r3, r6
 800862a:	4629      	mov	r1, r5
 800862c:	9000      	str	r0, [sp, #0]
 800862e:	9a03      	ldr	r2, [sp, #12]
 8008630:	a805      	add	r0, sp, #20
 8008632:	f000 f90c 	bl	800884e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8008636:	ad1e      	add	r5, sp, #120	; 0x78
 8008638:	2100      	movs	r1, #0
 800863a:	26ff      	movs	r6, #255	; 0xff
 800863c:	4622      	mov	r2, r4
 800863e:	a805      	add	r0, sp, #20
 8008640:	f845 1d68 	str.w	r1, [r5, #-104]!
 8008644:	462b      	mov	r3, r5
 8008646:	f000 fc03 	bl	8008e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800864a:	b1d8      	cbz	r0, 8008684 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 800864c:	280a      	cmp	r0, #10
 800864e:	d012      	beq.n	8008676 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8008650:	9804      	ldr	r0, [sp, #16]
 8008652:	b180      	cbz	r0, 8008676 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8008654:	7b47      	ldrb	r7, [r0, #13]
 8008656:	7922      	ldrb	r2, [r4, #4]
 8008658:	00fb      	lsls	r3, r7, #3
 800865a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800865e:	7a03      	ldrb	r3, [r0, #8]
 8008660:	430b      	orrs	r3, r1
 8008662:	0679      	lsls	r1, r7, #25
 8008664:	bf44      	itt	mi
 8008666:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800866a:	b21b      	sxthmi	r3, r3
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	b2db      	uxtb	r3, r3
 8008670:	429e      	cmp	r6, r3
 8008672:	bf28      	it	cs
 8008674:	461e      	movcs	r6, r3
 8008676:	462b      	mov	r3, r5
 8008678:	4622      	mov	r2, r4
 800867a:	2100      	movs	r1, #0
 800867c:	a805      	add	r0, sp, #20
 800867e:	f000 fbe7 	bl	8008e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8008682:	e7e2      	b.n	800864a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8008684:	4630      	mov	r0, r6
 8008686:	b01e      	add	sp, #120	; 0x78
 8008688:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800868c:	b003      	add	sp, #12
 800868e:	4770      	bx	lr

08008690 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8008690:	b530      	push	{r4, r5, lr}
 8008692:	8083      	strh	r3, [r0, #4]
 8008694:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008698:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800869c:	7183      	strb	r3, [r0, #6]
 800869e:	79c3      	ldrb	r3, [r0, #7]
 80086a0:	6101      	str	r1, [r0, #16]
 80086a2:	f365 0306 	bfi	r3, r5, #0, #7
 80086a6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80086aa:	8282      	strh	r2, [r0, #20]
 80086ac:	f365 13c7 	bfi	r3, r5, #7, #1
 80086b0:	71c3      	strb	r3, [r0, #7]
 80086b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80086b6:	7203      	strb	r3, [r0, #8]
 80086b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80086bc:	7243      	strb	r3, [r0, #9]
 80086be:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80086c2:	8143      	strh	r3, [r0, #10]
 80086c4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80086c8:	8183      	strh	r3, [r0, #12]
 80086ca:	4b01      	ldr	r3, [pc, #4]	; (80086d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80086cc:	6003      	str	r3, [r0, #0]
 80086ce:	bd30      	pop	{r4, r5, pc}
 80086d0:	0800a754 	.word	0x0800a754

080086d4 <_ZNK8touchgfx9ConstFont4findEt>:
 80086d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086d6:	6904      	ldr	r4, [r0, #16]
 80086d8:	b3bc      	cbz	r4, 800874a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80086da:	88a3      	ldrh	r3, [r4, #4]
 80086dc:	8a82      	ldrh	r2, [r0, #20]
 80086de:	1acb      	subs	r3, r1, r3
 80086e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80086e4:	d431      	bmi.n	800874a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80086e6:	4293      	cmp	r3, r2
 80086e8:	dd0c      	ble.n	8008704 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80086ea:	230e      	movs	r3, #14
 80086ec:	fb03 4302 	mla	r3, r3, r2, r4
 80086f0:	889b      	ldrh	r3, [r3, #4]
 80086f2:	1a5b      	subs	r3, r3, r1
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	429a      	cmp	r2, r3
 80086f8:	db27      	blt.n	800874a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bfbc      	itt	lt
 80086fe:	2302      	movlt	r3, #2
 8008700:	fb92 f3f3 	sdivlt	r3, r2, r3
 8008704:	2500      	movs	r5, #0
 8008706:	260e      	movs	r6, #14
 8008708:	4295      	cmp	r5, r2
 800870a:	dc1e      	bgt.n	800874a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800870c:	fb06 4003 	mla	r0, r6, r3, r4
 8008710:	8887      	ldrh	r7, [r0, #4]
 8008712:	42b9      	cmp	r1, r7
 8008714:	d01a      	beq.n	800874c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8008716:	d20d      	bcs.n	8008734 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8008718:	1e5a      	subs	r2, r3, #1
 800871a:	4295      	cmp	r5, r2
 800871c:	dc15      	bgt.n	800874a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800871e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8008722:	1a5b      	subs	r3, r3, r1
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	429a      	cmp	r2, r3
 8008728:	db0f      	blt.n	800874a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800872a:	429d      	cmp	r5, r3
 800872c:	ddec      	ble.n	8008708 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800872e:	1953      	adds	r3, r2, r5
 8008730:	105b      	asrs	r3, r3, #1
 8008732:	e7e9      	b.n	8008708 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8008734:	1c5d      	adds	r5, r3, #1
 8008736:	42aa      	cmp	r2, r5
 8008738:	db07      	blt.n	800874a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800873a:	8a43      	ldrh	r3, [r0, #18]
 800873c:	1acb      	subs	r3, r1, r3
 800873e:	442b      	add	r3, r5
 8008740:	429d      	cmp	r5, r3
 8008742:	dc02      	bgt.n	800874a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8008744:	429a      	cmp	r2, r3
 8008746:	dadf      	bge.n	8008708 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8008748:	e7f1      	b.n	800872e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800874a:	2000      	movs	r0, #0
 800874c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800874e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800874e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008750:	4604      	mov	r4, r0
 8008752:	4617      	mov	r7, r2
 8008754:	461e      	mov	r6, r3
 8008756:	b911      	cbnz	r1, 800875e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8008758:	2500      	movs	r5, #0
 800875a:	4628      	mov	r0, r5
 800875c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800875e:	290a      	cmp	r1, #10
 8008760:	d0fa      	beq.n	8008758 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8008762:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8008766:	4291      	cmp	r1, r2
 8008768:	d0f6      	beq.n	8008758 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800876a:	f242 020b 	movw	r2, #8203	; 0x200b
 800876e:	4291      	cmp	r1, r2
 8008770:	d0f2      	beq.n	8008758 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8008772:	f7ff ffaf 	bl	80086d4 <_ZNK8touchgfx9ConstFont4findEt>
 8008776:	4605      	mov	r5, r0
 8008778:	b950      	cbnz	r0, 8008790 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	4620      	mov	r0, r4
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	4798      	blx	r3
 8008782:	4601      	mov	r1, r0
 8008784:	4620      	mov	r0, r4
 8008786:	f7ff ffa5 	bl	80086d4 <_ZNK8touchgfx9ConstFont4findEt>
 800878a:	4605      	mov	r5, r0
 800878c:	2800      	cmp	r0, #0
 800878e:	d0e3      	beq.n	8008758 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	4629      	mov	r1, r5
 8008794:	4620      	mov	r0, r4
 8008796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008798:	4798      	blx	r3
 800879a:	6038      	str	r0, [r7, #0]
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	4620      	mov	r0, r4
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	4798      	blx	r3
 80087a4:	7030      	strb	r0, [r6, #0]
 80087a6:	e7d8      	b.n	800875a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080087a8 <_ZN8touchgfx12TextProviderC1Ev>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	2500      	movs	r5, #0
 80087ac:	2302      	movs	r3, #2
 80087ae:	4604      	mov	r4, r0
 80087b0:	220e      	movs	r2, #14
 80087b2:	7403      	strb	r3, [r0, #16]
 80087b4:	4629      	mov	r1, r5
 80087b6:	6145      	str	r5, [r0, #20]
 80087b8:	7605      	strb	r5, [r0, #24]
 80087ba:	83c5      	strh	r5, [r0, #30]
 80087bc:	8405      	strh	r5, [r0, #32]
 80087be:	86c5      	strh	r5, [r0, #54]	; 0x36
 80087c0:	8705      	strh	r5, [r0, #56]	; 0x38
 80087c2:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80087c4:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80087c8:	e9c0 5500 	strd	r5, r5, [r0]
 80087cc:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80087d0:	304c      	adds	r0, #76	; 0x4c
 80087d2:	f000 fdc5 	bl	8009360 <memset>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4620      	mov	r0, r4
 80087da:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80087de:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80087e2:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80087e6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80087ea:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80087ee:	f7ff fde7 	bl	80083c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80087f2:	4620      	mov	r0, r4
 80087f4:	bd38      	pop	{r3, r4, r5, pc}

080087f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80087f6:	b530      	push	{r4, r5, lr}
 80087f8:	2500      	movs	r5, #0
 80087fa:	2401      	movs	r4, #1
 80087fc:	6843      	ldr	r3, [r0, #4]
 80087fe:	b913      	cbnz	r3, 8008806 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8008800:	6803      	ldr	r3, [r0, #0]
 8008802:	b313      	cbz	r3, 800884a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8008804:	6043      	str	r3, [r0, #4]
 8008806:	7e03      	ldrb	r3, [r0, #24]
 8008808:	b143      	cbz	r3, 800881c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800880a:	6943      	ldr	r3, [r0, #20]
 800880c:	b12b      	cbz	r3, 800881a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800880e:	881a      	ldrh	r2, [r3, #0]
 8008810:	b11a      	cbz	r2, 800881a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8008812:	1c9a      	adds	r2, r3, #2
 8008814:	6142      	str	r2, [r0, #20]
 8008816:	8818      	ldrh	r0, [r3, #0]
 8008818:	bd30      	pop	{r4, r5, pc}
 800881a:	7605      	strb	r5, [r0, #24]
 800881c:	6843      	ldr	r3, [r0, #4]
 800881e:	8819      	ldrh	r1, [r3, #0]
 8008820:	b199      	cbz	r1, 800884a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8008822:	1c9a      	adds	r2, r3, #2
 8008824:	2902      	cmp	r1, #2
 8008826:	6042      	str	r2, [r0, #4]
 8008828:	d1f5      	bne.n	8008816 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800882a:	7c03      	ldrb	r3, [r0, #16]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d8e5      	bhi.n	80087fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	3302      	adds	r3, #2
 8008834:	7402      	strb	r2, [r0, #16]
 8008836:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800883a:	6143      	str	r3, [r0, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0dd      	beq.n	80087fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0da      	beq.n	80087fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8008846:	7604      	strb	r4, [r0, #24]
 8008848:	e7d8      	b.n	80087fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800884a:	2000      	movs	r0, #0
 800884c:	e7e4      	b.n	8008818 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800884e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800884e:	b430      	push	{r4, r5}
 8008850:	6815      	ldr	r5, [r2, #0]
 8008852:	6085      	str	r5, [r0, #8]
 8008854:	6852      	ldr	r2, [r2, #4]
 8008856:	6443      	str	r3, [r0, #68]	; 0x44
 8008858:	60c2      	str	r2, [r0, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	7402      	strb	r2, [r0, #16]
 8008860:	6001      	str	r1, [r0, #0]
 8008862:	6483      	str	r3, [r0, #72]	; 0x48
 8008864:	6042      	str	r2, [r0, #4]
 8008866:	6142      	str	r2, [r0, #20]
 8008868:	7602      	strb	r2, [r0, #24]
 800886a:	8702      	strh	r2, [r0, #56]	; 0x38
 800886c:	8402      	strh	r2, [r0, #32]
 800886e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8008872:	bc30      	pop	{r4, r5}
 8008874:	f7ff bda4 	b.w	80083c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08008878 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8008878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887a:	4605      	mov	r5, r0
 800887c:	4608      	mov	r0, r1
 800887e:	b1f1      	cbz	r1, 80088be <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8008880:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8008884:	460b      	mov	r3, r1
 8008886:	f101 0708 	add.w	r7, r1, #8
 800888a:	4622      	mov	r2, r4
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8008894:	4626      	mov	r6, r4
 8008896:	42bb      	cmp	r3, r7
 8008898:	c603      	stmia	r6!, {r0, r1}
 800889a:	4634      	mov	r4, r6
 800889c:	d1f6      	bne.n	800888c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	6030      	str	r0, [r6, #0]
 80088a2:	4610      	mov	r0, r2
 80088a4:	889b      	ldrh	r3, [r3, #4]
 80088a6:	80b3      	strh	r3, [r6, #4]
 80088a8:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80088ac:	015b      	lsls	r3, r3, #5
 80088ae:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80088b2:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80088b6:	430b      	orrs	r3, r1
 80088b8:	425b      	negs	r3, r3
 80088ba:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80088be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088c0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	460c      	mov	r4, r1
 80088c4:	6811      	ldr	r1, [r2, #0]
 80088c6:	4610      	mov	r0, r2
 80088c8:	68cd      	ldr	r5, [r1, #12]
 80088ca:	4619      	mov	r1, r3
 80088cc:	47a8      	blx	r5
 80088ce:	2800      	cmp	r0, #0
 80088d0:	bf08      	it	eq
 80088d2:	4620      	moveq	r0, r4
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080088d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	4604      	mov	r4, r0
 80088dc:	4615      	mov	r5, r2
 80088de:	4608      	mov	r0, r1
 80088e0:	b93a      	cbnz	r2, 80088f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80088e2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80088e6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80088ea:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80088ee:	4628      	mov	r0, r5
 80088f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80088f6:	8893      	ldrh	r3, [r2, #4]
 80088f8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80088fc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8008900:	79ee      	ldrb	r6, [r5, #7]
 8008902:	4316      	orrs	r6, r2
 8008904:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8008908:	189a      	adds	r2, r3, r2
 800890a:	b2b7      	uxth	r7, r6
 800890c:	b291      	uxth	r1, r2
 800890e:	291d      	cmp	r1, #29
 8008910:	f200 8084 	bhi.w	8008a1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8008914:	2201      	movs	r2, #1
 8008916:	10f6      	asrs	r6, r6, #3
 8008918:	408a      	lsls	r2, r1
 800891a:	4978      	ldr	r1, [pc, #480]	; (8008afc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 800891c:	420a      	tst	r2, r1
 800891e:	d12e      	bne.n	800897e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8008920:	f412 7f60 	tst.w	r2, #896	; 0x380
 8008924:	d07a      	beq.n	8008a1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8008926:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800892a:	462b      	mov	r3, r5
 800892c:	f105 0e08 	add.w	lr, r5, #8
 8008930:	4615      	mov	r5, r2
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	3308      	adds	r3, #8
 8008936:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800893a:	4694      	mov	ip, r2
 800893c:	4573      	cmp	r3, lr
 800893e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8008942:	4662      	mov	r2, ip
 8008944:	d1f5      	bne.n	8008932 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8008946:	6818      	ldr	r0, [r3, #0]
 8008948:	f8cc 0000 	str.w	r0, [ip]
 800894c:	889b      	ldrh	r3, [r3, #4]
 800894e:	f8ac 3004 	strh.w	r3, [ip, #4]
 8008952:	b2b3      	uxth	r3, r6
 8008954:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008958:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800895c:	1aca      	subs	r2, r1, r3
 800895e:	1bcf      	subs	r7, r1, r7
 8008960:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8008964:	b292      	uxth	r2, r2
 8008966:	1afb      	subs	r3, r7, r3
 8008968:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800896c:	10d2      	asrs	r2, r2, #3
 800896e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008972:	4302      	orrs	r2, r0
 8008974:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8008978:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800897c:	e7b7      	b.n	80088ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800897e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8008980:	b92b      	cbnz	r3, 800898e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8008982:	4b5f      	ldr	r3, [pc, #380]	; (8008b00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8008984:	21c0      	movs	r1, #192	; 0xc0
 8008986:	4a5f      	ldr	r2, [pc, #380]	; (8008b04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8008988:	485f      	ldr	r0, [pc, #380]	; (8008b08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 800898a:	f000 fc79 	bl	8009280 <__assert_func>
 800898e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008990:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008994:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8008996:	f640 6333 	movw	r3, #3635	; 0xe33
 800899a:	4299      	cmp	r1, r3
 800899c:	d110      	bne.n	80089c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 800899e:	6803      	ldr	r3, [r0, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	4798      	blx	r3
 80089a4:	7b41      	ldrb	r1, [r0, #13]
 80089a6:	00cb      	lsls	r3, r1, #3
 80089a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80089ac:	7a03      	ldrb	r3, [r0, #8]
 80089ae:	0648      	lsls	r0, r1, #25
 80089b0:	ea43 0302 	orr.w	r3, r3, r2
 80089b4:	bf44      	itt	mi
 80089b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80089ba:	b21b      	sxthmi	r3, r3
 80089bc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80089c0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80089c4:	462a      	mov	r2, r5
 80089c6:	f105 0c08 	add.w	ip, r5, #8
 80089ca:	443b      	add	r3, r7
 80089cc:	4433      	add	r3, r6
 80089ce:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4635      	mov	r5, r6
 80089d6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80089da:	6810      	ldr	r0, [r2, #0]
 80089dc:	3208      	adds	r2, #8
 80089de:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80089e2:	4637      	mov	r7, r6
 80089e4:	4562      	cmp	r2, ip
 80089e6:	c703      	stmia	r7!, {r0, r1}
 80089e8:	463e      	mov	r6, r7
 80089ea:	d1f6      	bne.n	80089da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 80089ec:	6810      	ldr	r0, [r2, #0]
 80089ee:	6038      	str	r0, [r7, #0]
 80089f0:	8892      	ldrh	r2, [r2, #4]
 80089f2:	80ba      	strh	r2, [r7, #4]
 80089f4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80089f8:	10db      	asrs	r3, r3, #3
 80089fa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80089fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008a06:	4313      	orrs	r3, r2
 8008a08:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8008a0c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8008a10:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8008a1a:	e768      	b.n	80088ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8008a1c:	f023 0204 	bic.w	r2, r3, #4
 8008a20:	f640 611b 	movw	r1, #3611	; 0xe1b
 8008a24:	428a      	cmp	r2, r1
 8008a26:	d003      	beq.n	8008a30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8008a28:	f640 621d 	movw	r2, #3613	; 0xe1d
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d120      	bne.n	8008a72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8008a30:	3b01      	subs	r3, #1
 8008a32:	4602      	mov	r2, r0
 8008a34:	4629      	mov	r1, r5
 8008a36:	4620      	mov	r0, r4
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	f7ff ff41 	bl	80088c0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8008a3e:	7b41      	ldrb	r1, [r0, #13]
 8008a40:	00cb      	lsls	r3, r1, #3
 8008a42:	0649      	lsls	r1, r1, #25
 8008a44:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008a48:	7a03      	ldrb	r3, [r0, #8]
 8008a4a:	ea43 0302 	orr.w	r3, r3, r2
 8008a4e:	bf44      	itt	mi
 8008a50:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008a54:	b21b      	sxthmi	r3, r3
 8008a56:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8008a5a:	7b6b      	ldrb	r3, [r5, #13]
 8008a5c:	7aaa      	ldrb	r2, [r5, #10]
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a64:	4313      	orrs	r3, r2
 8008a66:	115a      	asrs	r2, r3, #5
 8008a68:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8008a6c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8008a70:	e035      	b.n	8008ade <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8008a72:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8008a76:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8008a7a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8008a7e:	7a2a      	ldrb	r2, [r5, #8]
 8008a80:	ea42 0201 	orr.w	r2, r2, r1
 8008a84:	f640 6109 	movw	r1, #3593	; 0xe09
 8008a88:	bf1c      	itt	ne
 8008a8a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8008a8e:	b212      	sxthne	r2, r2
 8008a90:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8008a94:	f023 0210 	bic.w	r2, r3, #16
 8008a98:	428a      	cmp	r2, r1
 8008a9a:	d003      	beq.n	8008aa4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8008a9c:	f640 6213 	movw	r2, #3603	; 0xe13
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d129      	bne.n	8008af8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8008aa4:	7b6e      	ldrb	r6, [r5, #13]
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	0076      	lsls	r6, r6, #1
 8008aaa:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8008aae:	7aae      	ldrb	r6, [r5, #10]
 8008ab0:	4316      	orrs	r6, r2
 8008ab2:	f640 6213 	movw	r2, #3603	; 0xe13
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	4602      	mov	r2, r0
 8008aba:	4620      	mov	r0, r4
 8008abc:	bf16      	itet	ne
 8008abe:	f103 33ff 	addne.w	r3, r3, #4294967295
 8008ac2:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8008ac6:	b29b      	uxthne	r3, r3
 8008ac8:	f7ff fefa 	bl	80088c0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8008acc:	7b43      	ldrb	r3, [r0, #13]
 8008ace:	7a82      	ldrb	r2, [r0, #10]
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	1af6      	subs	r6, r6, r3
 8008ada:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8008ade:	7b69      	ldrb	r1, [r5, #13]
 8008ae0:	00cb      	lsls	r3, r1, #3
 8008ae2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008ae6:	7a2b      	ldrb	r3, [r5, #8]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	064a      	lsls	r2, r1, #25
 8008aec:	bf44      	itt	mi
 8008aee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008af2:	b21b      	sxthmi	r3, r3
 8008af4:	1bdb      	subs	r3, r3, r7
 8008af6:	e73f      	b.n	8008978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8008af8:	2300      	movs	r3, #0
 8008afa:	e7b7      	b.n	8008a6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8008afc:	3fc00079 	.word	0x3fc00079
 8008b00:	0800a7a4 	.word	0x0800a7a4
 8008b04:	0800aa16 	.word	0x0800aa16
 8008b08:	0800a7ad 	.word	0x0800a7ad

08008b0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8008b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b10:	4604      	mov	r4, r0
 8008b12:	b942      	cbnz	r2, 8008b26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8008b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b18:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8008b1c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8008b20:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8008b24:	e046      	b.n	8008bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8008b26:	7b51      	ldrb	r1, [r2, #13]
 8008b28:	8893      	ldrh	r3, [r2, #4]
 8008b2a:	010f      	lsls	r7, r1, #4
 8008b2c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8008b30:	79d7      	ldrb	r7, [r2, #7]
 8008b32:	4307      	orrs	r7, r0
 8008b34:	2f04      	cmp	r7, #4
 8008b36:	b2bd      	uxth	r5, r7
 8008b38:	bfcc      	ite	gt
 8008b3a:	08bf      	lsrgt	r7, r7, #2
 8008b3c:	2701      	movle	r7, #1
 8008b3e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8008b42:	f200 80ab 	bhi.w	8008c9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 8008b46:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8008b4a:	4283      	cmp	r3, r0
 8008b4c:	d216      	bcs.n	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008b4e:	f240 605b 	movw	r0, #1627	; 0x65b
 8008b52:	4283      	cmp	r3, r0
 8008b54:	d859      	bhi.n	8008c0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 8008b56:	f240 6057 	movw	r0, #1623	; 0x657
 8008b5a:	4283      	cmp	r3, r0
 8008b5c:	d20e      	bcs.n	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008b5e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8008b62:	d24a      	bcs.n	8008bfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 8008b64:	f240 604e 	movw	r0, #1614	; 0x64e
 8008b68:	4283      	cmp	r3, r0
 8008b6a:	d207      	bcs.n	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008b6c:	f240 601a 	movw	r0, #1562	; 0x61a
 8008b70:	4283      	cmp	r3, r0
 8008b72:	d02a      	beq.n	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008b74:	d821      	bhi.n	8008bba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 8008b76:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8008b7a:	d35b      	bcc.n	8008c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8008b7c:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8008b80:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008b84:	f040 80d0 	bne.w	8008d28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8008b88:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8008b8c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8008b90:	f040 80ca 	bne.w	8008d28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8008b94:	00cb      	lsls	r3, r1, #3
 8008b96:	0649      	lsls	r1, r1, #25
 8008b98:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8008b9c:	7a13      	ldrb	r3, [r2, #8]
 8008b9e:	ea43 0300 	orr.w	r3, r3, r0
 8008ba2:	bf44      	itt	mi
 8008ba4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008ba8:	b21b      	sxthmi	r3, r3
 8008baa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8008bae:	1b5d      	subs	r5, r3, r5
 8008bb0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bba:	f240 604b 	movw	r0, #1611	; 0x64b
 8008bbe:	4283      	cmp	r3, r0
 8008bc0:	d338      	bcc.n	8008c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8008bc2:	f240 604c 	movw	r0, #1612	; 0x64c
 8008bc6:	4283      	cmp	r3, r0
 8008bc8:	d9d8      	bls.n	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008bca:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8008bce:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8008bd2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8008bd6:	f040 80f2 	bne.w	8008dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8008bda:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008bde:	f040 80ee 	bne.w	8008dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8008be2:	00cb      	lsls	r3, r1, #3
 8008be4:	064e      	lsls	r6, r1, #25
 8008be6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8008bea:	7a13      	ldrb	r3, [r2, #8]
 8008bec:	ea43 0300 	orr.w	r3, r3, r0
 8008bf0:	bf44      	itt	mi
 8008bf2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008bf6:	b21b      	sxthmi	r3, r3
 8008bf8:	e7d9      	b.n	8008bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8008bfa:	f240 6054 	movw	r0, #1620	; 0x654
 8008bfe:	4283      	cmp	r3, r0
 8008c00:	d8e3      	bhi.n	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008c02:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8008c06:	d9e0      	bls.n	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008c08:	e7b8      	b.n	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008c0a:	f240 6074 	movw	r0, #1652	; 0x674
 8008c0e:	4283      	cmp	r3, r0
 8008c10:	d0b4      	beq.n	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008c12:	d82d      	bhi.n	8008c70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8008c14:	f240 605e 	movw	r0, #1630	; 0x65e
 8008c18:	4283      	cmp	r3, r0
 8008c1a:	d804      	bhi.n	8008c26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8008c1c:	f240 605d 	movw	r0, #1629	; 0x65d
 8008c20:	4283      	cmp	r3, r0
 8008c22:	d3d2      	bcc.n	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008c24:	e7aa      	b.n	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008c26:	f240 605f 	movw	r0, #1631	; 0x65f
 8008c2a:	4283      	cmp	r3, r0
 8008c2c:	d0cd      	beq.n	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008c2e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8008c32:	d0a3      	beq.n	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008c34:	00cb      	lsls	r3, r1, #3
 8008c36:	0649      	lsls	r1, r1, #25
 8008c38:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8008c3c:	7a13      	ldrb	r3, [r2, #8]
 8008c3e:	ea43 0300 	orr.w	r3, r3, r0
 8008c42:	bf44      	itt	mi
 8008c44:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008c48:	b21b      	sxthmi	r3, r3
 8008c4a:	1b5d      	subs	r5, r3, r5
 8008c4c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8008c50:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8008c54:	7b53      	ldrb	r3, [r2, #13]
 8008c56:	015b      	lsls	r3, r3, #5
 8008c58:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8008c5c:	7993      	ldrb	r3, [r2, #6]
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	2105      	movs	r1, #5
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	fb93 f3f1 	sdiv	r3, r3, r1
 8008c68:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	e757      	b.n	8008b20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8008c70:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8008c74:	4283      	cmp	r3, r0
 8008c76:	d809      	bhi.n	8008c8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8008c78:	f240 60df 	movw	r0, #1759	; 0x6df
 8008c7c:	4283      	cmp	r3, r0
 8008c7e:	f4bf af7d 	bcs.w	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008c82:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	d8d4      	bhi.n	8008c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8008c8a:	e777      	b.n	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008c8c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8008c90:	4283      	cmp	r3, r0
 8008c92:	d09a      	beq.n	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008c94:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8008c98:	4283      	cmp	r3, r0
 8008c9a:	e7ca      	b.n	8008c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8008c9c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8008ca0:	d22b      	bcs.n	8008cfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8008ca2:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8008ca6:	4283      	cmp	r3, r0
 8008ca8:	d28f      	bcs.n	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008caa:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008cae:	4283      	cmp	r3, r0
 8008cb0:	d816      	bhi.n	8008ce0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8008cb2:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8008cb6:	4283      	cmp	r3, r0
 8008cb8:	f4bf af60 	bcs.w	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008cbc:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8008cc0:	4283      	cmp	r3, r0
 8008cc2:	d80a      	bhi.n	8008cda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8008cc4:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8008cc8:	4283      	cmp	r3, r0
 8008cca:	f4bf af57 	bcs.w	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008cce:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8008cd2:	4283      	cmp	r3, r0
 8008cd4:	f43f af79 	beq.w	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008cd8:	e7ac      	b.n	8008c34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8008cda:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8008cde:	e7f8      	b.n	8008cd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8008ce0:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8008ce4:	4283      	cmp	r3, r0
 8008ce6:	d802      	bhi.n	8008cee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8008ce8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8008cec:	e798      	b.n	8008c20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8008cee:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8008cf2:	4283      	cmp	r3, r0
 8008cf4:	f47f af42 	bne.w	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008cf8:	e767      	b.n	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008cfa:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8008cfe:	4283      	cmp	r3, r0
 8008d00:	f43f af63 	beq.w	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008d04:	d802      	bhi.n	8008d0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8008d06:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8008d0a:	e7f2      	b.n	8008cf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8008d0c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8008d10:	4283      	cmp	r3, r0
 8008d12:	d805      	bhi.n	8008d20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8008d14:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8008d18:	4283      	cmp	r3, r0
 8008d1a:	f4ff af2f 	bcc.w	8008b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8008d1e:	e754      	b.n	8008bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8008d20:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8008d24:	4283      	cmp	r3, r0
 8008d26:	e7af      	b.n	8008c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8008d28:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8008d2c:	4617      	mov	r7, r2
 8008d2e:	f102 0808 	add.w	r8, r2, #8
 8008d32:	4666      	mov	r6, ip
 8008d34:	6838      	ldr	r0, [r7, #0]
 8008d36:	3708      	adds	r7, #8
 8008d38:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8008d3c:	46e6      	mov	lr, ip
 8008d3e:	4547      	cmp	r7, r8
 8008d40:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8008d44:	46f4      	mov	ip, lr
 8008d46:	d1f5      	bne.n	8008d34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8008d48:	6838      	ldr	r0, [r7, #0]
 8008d4a:	f8ce 0000 	str.w	r0, [lr]
 8008d4e:	88b9      	ldrh	r1, [r7, #4]
 8008d50:	f8ae 1004 	strh.w	r1, [lr, #4]
 8008d54:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8008d58:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8008d5c:	d009      	beq.n	8008d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8008d5e:	7b51      	ldrb	r1, [r2, #13]
 8008d60:	7992      	ldrb	r2, [r2, #6]
 8008d62:	0149      	lsls	r1, r1, #5
 8008d64:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8008d68:	4311      	orrs	r1, r2
 8008d6a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8008d6e:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8008d72:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008d76:	d00d      	beq.n	8008d94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8008d78:	442b      	add	r3, r5
 8008d7a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008d84:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8008d88:	10db      	asrs	r3, r3, #3
 8008d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8008d94:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8008d98:	00cb      	lsls	r3, r1, #3
 8008d9a:	064f      	lsls	r7, r1, #25
 8008d9c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008da0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8008da4:	ea43 0302 	orr.w	r3, r3, r2
 8008da8:	bf44      	itt	mi
 8008daa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008dae:	b21b      	sxthmi	r3, r3
 8008db0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8008db4:	1b5d      	subs	r5, r3, r5
 8008db6:	4632      	mov	r2, r6
 8008db8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8008dbc:	e6fa      	b.n	8008bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8008dbe:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8008dc2:	4694      	mov	ip, r2
 8008dc4:	f102 0908 	add.w	r9, r2, #8
 8008dc8:	4676      	mov	r6, lr
 8008dca:	f8dc 0000 	ldr.w	r0, [ip]
 8008dce:	f10c 0c08 	add.w	ip, ip, #8
 8008dd2:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8008dd6:	46f0      	mov	r8, lr
 8008dd8:	45cc      	cmp	ip, r9
 8008dda:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8008dde:	46c6      	mov	lr, r8
 8008de0:	d1f3      	bne.n	8008dca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8008de2:	f8dc 0000 	ldr.w	r0, [ip]
 8008de6:	f8c8 0000 	str.w	r0, [r8]
 8008dea:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8008dee:	f8a8 1004 	strh.w	r1, [r8, #4]
 8008df2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8008df6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8008dfa:	d009      	beq.n	8008e10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8008dfc:	7b51      	ldrb	r1, [r2, #13]
 8008dfe:	7992      	ldrb	r2, [r2, #6]
 8008e00:	0149      	lsls	r1, r1, #5
 8008e02:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8008e06:	4311      	orrs	r1, r2
 8008e08:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8008e0c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8008e10:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008e14:	d00d      	beq.n	8008e32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8008e16:	1bdb      	subs	r3, r3, r7
 8008e18:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008e22:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8008e26:	10db      	asrs	r3, r3, #3
 8008e28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8008e32:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8008e36:	00cb      	lsls	r3, r1, #3
 8008e38:	0648      	lsls	r0, r1, #25
 8008e3a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8008e3e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8008e42:	ea43 0302 	orr.w	r3, r3, r2
 8008e46:	bf44      	itt	mi
 8008e48:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8008e4c:	b21b      	sxthmi	r3, r3
 8008e4e:	e7b1      	b.n	8008db4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

08008e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8008e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e54:	461e      	mov	r6, r3
 8008e56:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8008e58:	4604      	mov	r4, r0
 8008e5a:	4617      	mov	r7, r2
 8008e5c:	b92b      	cbnz	r3, 8008e6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8008e5e:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8008e60:	21c0      	movs	r1, #192	; 0xc0
 8008e62:	4a25      	ldr	r2, [pc, #148]	; (8008ef8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8008e64:	4825      	ldr	r0, [pc, #148]	; (8008efc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8008e66:	f000 fa0b 	bl	8009280 <__assert_func>
 8008e6a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8008e6c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008e70:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8008e74:	f7ff f9fe 	bl	8008274 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8008e78:	4605      	mov	r5, r0
 8008e7a:	b918      	cbnz	r0, 8008e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8008e7c:	6030      	str	r0, [r6, #0]
 8008e7e:	4628      	mov	r0, r5
 8008e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	4601      	mov	r1, r0
 8008e88:	4638      	mov	r0, r7
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	4798      	blx	r3
 8008e8e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8008e92:	4602      	mov	r2, r0
 8008e94:	6030      	str	r0, [r6, #0]
 8008e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e9a:	d213      	bcs.n	8008ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8008e9c:	4643      	mov	r3, r8
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f7ff fe33 	bl	8008b0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8008ea6:	6030      	str	r0, [r6, #0]
 8008ea8:	6833      	ldr	r3, [r6, #0]
 8008eaa:	b143      	cbz	r3, 8008ebe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8008eac:	7b5a      	ldrb	r2, [r3, #13]
 8008eae:	7a9b      	ldrb	r3, [r3, #10]
 8008eb0:	0052      	lsls	r2, r2, #1
 8008eb2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	bf0c      	ite	eq
 8008eba:	2301      	moveq	r3, #1
 8008ebc:	2300      	movne	r3, #0
 8008ebe:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8008ec2:	e7dc      	b.n	8008e7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8008ec4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b7f      	cmp	r3, #127	; 0x7f
 8008ecc:	d804      	bhi.n	8008ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8008ece:	4639      	mov	r1, r7
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f7ff fd01 	bl	80088d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8008ed6:	e7e6      	b.n	8008ea6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8008ed8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0e3      	beq.n	8008ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8008ee0:	f640 1302 	movw	r3, #2306	; 0x902
 8008ee4:	429d      	cmp	r5, r3
 8008ee6:	d1df      	bne.n	8008ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8008ee8:	4601      	mov	r1, r0
 8008eea:	4620      	mov	r0, r4
 8008eec:	f7ff fcc4 	bl	8008878 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8008ef0:	e7d9      	b.n	8008ea6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8008ef2:	bf00      	nop
 8008ef4:	0800a7a4 	.word	0x0800a7a4
 8008ef8:	0800aa16 	.word	0x0800aa16
 8008efc:	0800a7ad 	.word	0x0800a7ad

08008f00 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8008f00:	b510      	push	{r4, lr}
 8008f02:	4604      	mov	r4, r0
 8008f04:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8008f08:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8008f0a:	b9d9      	cbnz	r1, 8008f44 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8008f0c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8008f0e:	2b0a      	cmp	r3, #10
 8008f10:	d037      	beq.n	8008f82 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8008f12:	4620      	mov	r0, r4
 8008f14:	f7ff fc6f 	bl	80087f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8008f18:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d906      	bls.n	8008f2c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8008f1e:	4b19      	ldr	r3, [pc, #100]	; (8008f84 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8008f20:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008f24:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8008f26:	4819      	ldr	r0, [pc, #100]	; (8008f8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8008f28:	f000 f9aa 	bl	8009280 <__assert_func>
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	8722      	strh	r2, [r4, #56]	; 0x38
 8008f30:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008f32:	4413      	add	r3, r2
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	2b09      	cmp	r3, #9
 8008f38:	bf88      	it	hi
 8008f3a:	3b0a      	subhi	r3, #10
 8008f3c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008f40:	8458      	strh	r0, [r3, #34]	; 0x22
 8008f42:	e7e3      	b.n	8008f0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8008f44:	2b0a      	cmp	r3, #10
 8008f46:	d01c      	beq.n	8008f82 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8008f48:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008f4a:	3901      	subs	r1, #1
 8008f4c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8008f50:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8008f52:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8008f56:	1c51      	adds	r1, r2, #1
 8008f58:	b289      	uxth	r1, r1
 8008f5a:	2901      	cmp	r1, #1
 8008f5c:	bf8a      	itet	hi
 8008f5e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008f62:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8008f64:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8008f66:	2b09      	cmp	r3, #9
 8008f68:	d8d9      	bhi.n	8008f1e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	8722      	strh	r2, [r4, #56]	; 0x38
 8008f6e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008f70:	4413      	add	r3, r2
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b09      	cmp	r3, #9
 8008f76:	bf88      	it	hi
 8008f78:	3b0a      	subhi	r3, #10
 8008f7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008f7e:	8458      	strh	r0, [r3, #34]	; 0x22
 8008f80:	e7c0      	b.n	8008f04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8008f82:	bd10      	pop	{r4, pc}
 8008f84:	0800a7d9 	.word	0x0800a7d9
 8008f88:	0800ab6c 	.word	0x0800ab6c
 8008f8c:	0800a7ad 	.word	0x0800a7ad

08008f90 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8008f94:	4604      	mov	r4, r0
 8008f96:	b92a      	cbnz	r2, 8008fa4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8008f98:	4b13      	ldr	r3, [pc, #76]	; (8008fe8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8008f9a:	21d5      	movs	r1, #213	; 0xd5
 8008f9c:	4a13      	ldr	r2, [pc, #76]	; (8008fec <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8008f9e:	4814      	ldr	r0, [pc, #80]	; (8008ff0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8008fa0:	f000 f96e 	bl	8009280 <__assert_func>
 8008fa4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8008fa6:	3a01      	subs	r2, #1
 8008fa8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8008fac:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8008fae:	8702      	strh	r2, [r0, #56]	; 0x38
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	b292      	uxth	r2, r2
 8008fb4:	2a09      	cmp	r2, #9
 8008fb6:	bf8a      	itet	hi
 8008fb8:	3b09      	subhi	r3, #9
 8008fba:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8008fbc:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8008fbe:	f7ff ff9f 	bl	8008f00 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8008fc2:	8c23      	ldrh	r3, [r4, #32]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	bf9c      	itt	ls
 8008fc8:	3301      	addls	r3, #1
 8008fca:	8423      	strhls	r3, [r4, #32]
 8008fcc:	8be3      	ldrh	r3, [r4, #30]
 8008fce:	b90b      	cbnz	r3, 8008fd4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	83e3      	strh	r3, [r4, #30]
 8008fd4:	8be3      	ldrh	r3, [r4, #30]
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	83e3      	strh	r3, [r4, #30]
 8008fde:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8008fe2:	8365      	strh	r5, [r4, #26]
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
 8008fe6:	bf00      	nop
 8008fe8:	0800a7a4 	.word	0x0800a7a4
 8008fec:	0800aac1 	.word	0x0800aac1
 8008ff0:	0800a7ad 	.word	0x0800a7ad

08008ff4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8008ff4:	428a      	cmp	r2, r1
 8008ff6:	b538      	push	{r3, r4, r5, lr}
 8008ff8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8008ffa:	d90c      	bls.n	8009016 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8008ffc:	b92c      	cbnz	r4, 800900a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8008ffe:	4b1c      	ldr	r3, [pc, #112]	; (8009070 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8009000:	21e1      	movs	r1, #225	; 0xe1
 8009002:	4a1c      	ldr	r2, [pc, #112]	; (8009074 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8009004:	481c      	ldr	r0, [pc, #112]	; (8009078 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8009006:	f000 f93b 	bl	8009280 <__assert_func>
 800900a:	3c01      	subs	r4, #1
 800900c:	4b1b      	ldr	r3, [pc, #108]	; (800907c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 800900e:	4a1c      	ldr	r2, [pc, #112]	; (8009080 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8009010:	21c5      	movs	r1, #197	; 0xc5
 8009012:	8704      	strh	r4, [r0, #56]	; 0x38
 8009014:	e7f6      	b.n	8009004 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8009016:	428c      	cmp	r4, r1
 8009018:	d203      	bcs.n	8009022 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 800901a:	4b1a      	ldr	r3, [pc, #104]	; (8009084 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 800901c:	21cb      	movs	r1, #203	; 0xcb
 800901e:	4a1a      	ldr	r2, [pc, #104]	; (8009088 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8009020:	e7f0      	b.n	8009004 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8009022:	1a64      	subs	r4, r4, r1
 8009024:	250a      	movs	r5, #10
 8009026:	8704      	strh	r4, [r0, #56]	; 0x38
 8009028:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 800902a:	4421      	add	r1, r4
 800902c:	b289      	uxth	r1, r1
 800902e:	2909      	cmp	r1, #9
 8009030:	bf88      	it	hi
 8009032:	390a      	subhi	r1, #10
 8009034:	86c1      	strh	r1, [r0, #54]	; 0x36
 8009036:	b1ba      	cbz	r2, 8009068 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8009038:	3a01      	subs	r2, #1
 800903a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800903c:	b292      	uxth	r2, r2
 800903e:	2909      	cmp	r1, #9
 8009040:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8009044:	d903      	bls.n	800904e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8009046:	4b11      	ldr	r3, [pc, #68]	; (800908c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8009048:	21e6      	movs	r1, #230	; 0xe6
 800904a:	4a11      	ldr	r2, [pc, #68]	; (8009090 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 800904c:	e7da      	b.n	8009004 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 800904e:	3101      	adds	r1, #1
 8009050:	8701      	strh	r1, [r0, #56]	; 0x38
 8009052:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8009054:	b901      	cbnz	r1, 8009058 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8009056:	86c5      	strh	r5, [r0, #54]	; 0x36
 8009058:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800905a:	3901      	subs	r1, #1
 800905c:	b289      	uxth	r1, r1
 800905e:	86c1      	strh	r1, [r0, #54]	; 0x36
 8009060:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8009064:	844c      	strh	r4, [r1, #34]	; 0x22
 8009066:	e7e6      	b.n	8009036 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8009068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800906c:	f7ff bf48 	b.w	8008f00 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8009070:	0800a7a4 	.word	0x0800a7a4
 8009074:	0800a89a 	.word	0x0800a89a
 8009078:	0800a7ad 	.word	0x0800a7ad
 800907c:	0800a7e5 	.word	0x0800a7e5
 8009080:	0800a944 	.word	0x0800a944
 8009084:	0800a7f3 	.word	0x0800a7f3
 8009088:	0800ac1b 	.word	0x0800ac1b
 800908c:	0800a7ff 	.word	0x0800a7ff
 8009090:	0800a812 	.word	0x0800a812

08009094 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8009094:	3a01      	subs	r2, #1
 8009096:	b570      	push	{r4, r5, r6, lr}
 8009098:	b292      	uxth	r2, r2
 800909a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800909e:	42b2      	cmp	r2, r6
 80090a0:	d019      	beq.n	80090d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80090a2:	8c04      	ldrh	r4, [r0, #32]
 80090a4:	f831 5b02 	ldrh.w	r5, [r1], #2
 80090a8:	4294      	cmp	r4, r2
 80090aa:	d805      	bhi.n	80090b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80090ac:	4b19      	ldr	r3, [pc, #100]	; (8009114 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80090ae:	4a1a      	ldr	r2, [pc, #104]	; (8009118 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80090b0:	21c5      	movs	r1, #197	; 0xc5
 80090b2:	481a      	ldr	r0, [pc, #104]	; (800911c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80090b4:	f000 f8e4 	bl	8009280 <__assert_func>
 80090b8:	8bc4      	ldrh	r4, [r0, #30]
 80090ba:	4414      	add	r4, r2
 80090bc:	3a01      	subs	r2, #1
 80090be:	b2a4      	uxth	r4, r4
 80090c0:	b292      	uxth	r2, r2
 80090c2:	2c01      	cmp	r4, #1
 80090c4:	bf88      	it	hi
 80090c6:	3c02      	subhi	r4, #2
 80090c8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80090cc:	8b64      	ldrh	r4, [r4, #26]
 80090ce:	42ac      	cmp	r4, r5
 80090d0:	d0e5      	beq.n	800909e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80090d2:	2000      	movs	r0, #0
 80090d4:	bd70      	pop	{r4, r5, r6, pc}
 80090d6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80090da:	2400      	movs	r4, #0
 80090dc:	4413      	add	r3, r2
 80090de:	b2a2      	uxth	r2, r4
 80090e0:	429a      	cmp	r2, r3
 80090e2:	da14      	bge.n	800910e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80090e4:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 80090e6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80090ea:	4296      	cmp	r6, r2
 80090ec:	d802      	bhi.n	80090f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80090ee:	4b09      	ldr	r3, [pc, #36]	; (8009114 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80090f0:	4a0b      	ldr	r2, [pc, #44]	; (8009120 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80090f2:	e7dd      	b.n	80090b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 80090f4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80090f6:	3401      	adds	r4, #1
 80090f8:	4432      	add	r2, r6
 80090fa:	b292      	uxth	r2, r2
 80090fc:	2a09      	cmp	r2, #9
 80090fe:	bf88      	it	hi
 8009100:	3a0a      	subhi	r2, #10
 8009102:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009106:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8009108:	42aa      	cmp	r2, r5
 800910a:	d0e8      	beq.n	80090de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 800910c:	e7e1      	b.n	80090d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 800910e:	2001      	movs	r0, #1
 8009110:	e7e0      	b.n	80090d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8009112:	bf00      	nop
 8009114:	0800a7e5 	.word	0x0800a7e5
 8009118:	0800ac9f 	.word	0x0800ac9f
 800911c:	0800a7ad 	.word	0x0800a7ad
 8009120:	0800a944 	.word	0x0800a944

08009124 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8009124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	4605      	mov	r5, r0
 800912a:	4616      	mov	r6, r2
 800912c:	1c8c      	adds	r4, r1, #2
 800912e:	8809      	ldrh	r1, [r1, #0]
 8009130:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8009134:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8009138:	42b3      	cmp	r3, r6
 800913a:	d124      	bne.n	8009186 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800913c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8009140:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8009144:	f001 070f 	and.w	r7, r1, #15
 8009148:	4652      	mov	r2, sl
 800914a:	f8cd 8000 	str.w	r8, [sp]
 800914e:	464b      	mov	r3, r9
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f7ff ff9e 	bl	8009094 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8009158:	4683      	mov	fp, r0
 800915a:	b168      	cbz	r0, 8009178 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800915c:	eb0a 0109 	add.w	r1, sl, r9
 8009160:	463a      	mov	r2, r7
 8009162:	4628      	mov	r0, r5
 8009164:	4441      	add	r1, r8
 8009166:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800916a:	4649      	mov	r1, r9
 800916c:	f7ff ff42 	bl	8008ff4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8009170:	4658      	mov	r0, fp
 8009172:	b003      	add	sp, #12
 8009174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009178:	eb07 010a 	add.w	r1, r7, sl
 800917c:	4449      	add	r1, r9
 800917e:	4441      	add	r1, r8
 8009180:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8009184:	e7d2      	b.n	800912c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8009186:	f04f 0b00 	mov.w	fp, #0
 800918a:	e7f1      	b.n	8009170 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800918c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	8810      	ldrh	r0, [r2, #0]
 8009190:	4298      	cmp	r0, r3
 8009192:	d817      	bhi.n	80091c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8009194:	1e48      	subs	r0, r1, #1
 8009196:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800919a:	4298      	cmp	r0, r3
 800919c:	d312      	bcc.n	80091c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800919e:	2400      	movs	r4, #0
 80091a0:	428c      	cmp	r4, r1
 80091a2:	d20f      	bcs.n	80091c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80091a4:	1860      	adds	r0, r4, r1
 80091a6:	1040      	asrs	r0, r0, #1
 80091a8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80091ac:	0085      	lsls	r5, r0, #2
 80091ae:	42b3      	cmp	r3, r6
 80091b0:	d902      	bls.n	80091b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80091b2:	3001      	adds	r0, #1
 80091b4:	b284      	uxth	r4, r0
 80091b6:	e7f3      	b.n	80091a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80091b8:	d201      	bcs.n	80091be <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80091ba:	b281      	uxth	r1, r0
 80091bc:	e7f0      	b.n	80091a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80091be:	442a      	add	r2, r5
 80091c0:	8850      	ldrh	r0, [r2, #2]
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	2000      	movs	r0, #0
 80091c6:	e7fc      	b.n	80091c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080091c8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80091c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091cc:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80091ce:	4604      	mov	r4, r0
 80091d0:	260b      	movs	r6, #11
 80091d2:	886f      	ldrh	r7, [r5, #2]
 80091d4:	087f      	lsrs	r7, r7, #1
 80091d6:	3e01      	subs	r6, #1
 80091d8:	d01b      	beq.n	8009212 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80091da:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80091dc:	b92b      	cbnz	r3, 80091ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80091de:	4b0e      	ldr	r3, [pc, #56]	; (8009218 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80091e0:	21c0      	movs	r1, #192	; 0xc0
 80091e2:	4a0e      	ldr	r2, [pc, #56]	; (800921c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80091e4:	480e      	ldr	r0, [pc, #56]	; (8009220 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80091e6:	f000 f84b 	bl	8009280 <__assert_func>
 80091ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80091ec:	462a      	mov	r2, r5
 80091ee:	4639      	mov	r1, r7
 80091f0:	4620      	mov	r0, r4
 80091f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80091f6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80091fa:	4643      	mov	r3, r8
 80091fc:	f7ff ffc6 	bl	800918c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8009200:	b138      	cbz	r0, 8009212 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8009202:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8009206:	4642      	mov	r2, r8
 8009208:	4620      	mov	r0, r4
 800920a:	f7ff ff8b 	bl	8009124 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800920e:	2800      	cmp	r0, #0
 8009210:	d1e1      	bne.n	80091d6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8009212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009216:	bf00      	nop
 8009218:	0800a7a4 	.word	0x0800a7a4
 800921c:	0800aa16 	.word	0x0800aa16
 8009220:	0800a7ad 	.word	0x0800a7ad

08009224 <_ZdlPvj>:
 8009224:	f000 b812 	b.w	800924c <_ZdlPv>

08009228 <__cxa_guard_acquire>:
 8009228:	6803      	ldr	r3, [r0, #0]
 800922a:	07db      	lsls	r3, r3, #31
 800922c:	d406      	bmi.n	800923c <__cxa_guard_acquire+0x14>
 800922e:	7843      	ldrb	r3, [r0, #1]
 8009230:	b103      	cbz	r3, 8009234 <__cxa_guard_acquire+0xc>
 8009232:	deff      	udf	#255	; 0xff
 8009234:	2301      	movs	r3, #1
 8009236:	7043      	strb	r3, [r0, #1]
 8009238:	4618      	mov	r0, r3
 800923a:	4770      	bx	lr
 800923c:	2000      	movs	r0, #0
 800923e:	4770      	bx	lr

08009240 <__cxa_guard_release>:
 8009240:	2301      	movs	r3, #1
 8009242:	6003      	str	r3, [r0, #0]
 8009244:	4770      	bx	lr

08009246 <__cxa_pure_virtual>:
 8009246:	b508      	push	{r3, lr}
 8009248:	f000 f80e 	bl	8009268 <_ZSt9terminatev>

0800924c <_ZdlPv>:
 800924c:	f000 b880 	b.w	8009350 <free>

08009250 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009250:	b508      	push	{r3, lr}
 8009252:	4780      	blx	r0
 8009254:	f000 f80d 	bl	8009272 <abort>

08009258 <_ZSt13get_terminatev>:
 8009258:	4b02      	ldr	r3, [pc, #8]	; (8009264 <_ZSt13get_terminatev+0xc>)
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	f3bf 8f5b 	dmb	ish
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	24000010 	.word	0x24000010

08009268 <_ZSt9terminatev>:
 8009268:	b508      	push	{r3, lr}
 800926a:	f7ff fff5 	bl	8009258 <_ZSt13get_terminatev>
 800926e:	f7ff ffef 	bl	8009250 <_ZN10__cxxabiv111__terminateEPFvvE>

08009272 <abort>:
 8009272:	b508      	push	{r3, lr}
 8009274:	2006      	movs	r0, #6
 8009276:	f000 fc81 	bl	8009b7c <raise>
 800927a:	2001      	movs	r0, #1
 800927c:	f7f7 feb0 	bl	8000fe0 <_exit>

08009280 <__assert_func>:
 8009280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009282:	4614      	mov	r4, r2
 8009284:	461a      	mov	r2, r3
 8009286:	4b09      	ldr	r3, [pc, #36]	; (80092ac <__assert_func+0x2c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4605      	mov	r5, r0
 800928c:	68d8      	ldr	r0, [r3, #12]
 800928e:	b14c      	cbz	r4, 80092a4 <__assert_func+0x24>
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <__assert_func+0x30>)
 8009292:	9100      	str	r1, [sp, #0]
 8009294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009298:	4906      	ldr	r1, [pc, #24]	; (80092b4 <__assert_func+0x34>)
 800929a:	462b      	mov	r3, r5
 800929c:	f000 f81a 	bl	80092d4 <fiprintf>
 80092a0:	f7ff ffe7 	bl	8009272 <abort>
 80092a4:	4b04      	ldr	r3, [pc, #16]	; (80092b8 <__assert_func+0x38>)
 80092a6:	461c      	mov	r4, r3
 80092a8:	e7f3      	b.n	8009292 <__assert_func+0x12>
 80092aa:	bf00      	nop
 80092ac:	24000014 	.word	0x24000014
 80092b0:	0800ad70 	.word	0x0800ad70
 80092b4:	0800ad7d 	.word	0x0800ad7d
 80092b8:	0800adab 	.word	0x0800adab

080092bc <atexit>:
 80092bc:	2300      	movs	r3, #0
 80092be:	4601      	mov	r1, r0
 80092c0:	461a      	mov	r2, r3
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 bd36 	b.w	8009d34 <__register_exitproc>

080092c8 <__errno>:
 80092c8:	4b01      	ldr	r3, [pc, #4]	; (80092d0 <__errno+0x8>)
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	24000014 	.word	0x24000014

080092d4 <fiprintf>:
 80092d4:	b40e      	push	{r1, r2, r3}
 80092d6:	b503      	push	{r0, r1, lr}
 80092d8:	4601      	mov	r1, r0
 80092da:	ab03      	add	r3, sp, #12
 80092dc:	4805      	ldr	r0, [pc, #20]	; (80092f4 <fiprintf+0x20>)
 80092de:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	f000 f94d 	bl	8009584 <_vfiprintf_r>
 80092ea:	b002      	add	sp, #8
 80092ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f0:	b003      	add	sp, #12
 80092f2:	4770      	bx	lr
 80092f4:	24000014 	.word	0x24000014

080092f8 <__libc_init_array>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	4d0d      	ldr	r5, [pc, #52]	; (8009330 <__libc_init_array+0x38>)
 80092fc:	4c0d      	ldr	r4, [pc, #52]	; (8009334 <__libc_init_array+0x3c>)
 80092fe:	1b64      	subs	r4, r4, r5
 8009300:	10a4      	asrs	r4, r4, #2
 8009302:	2600      	movs	r6, #0
 8009304:	42a6      	cmp	r6, r4
 8009306:	d109      	bne.n	800931c <__libc_init_array+0x24>
 8009308:	4d0b      	ldr	r5, [pc, #44]	; (8009338 <__libc_init_array+0x40>)
 800930a:	4c0c      	ldr	r4, [pc, #48]	; (800933c <__libc_init_array+0x44>)
 800930c:	f001 f84c 	bl	800a3a8 <_init>
 8009310:	1b64      	subs	r4, r4, r5
 8009312:	10a4      	asrs	r4, r4, #2
 8009314:	2600      	movs	r6, #0
 8009316:	42a6      	cmp	r6, r4
 8009318:	d105      	bne.n	8009326 <__libc_init_array+0x2e>
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009320:	4798      	blx	r3
 8009322:	3601      	adds	r6, #1
 8009324:	e7ee      	b.n	8009304 <__libc_init_array+0xc>
 8009326:	f855 3b04 	ldr.w	r3, [r5], #4
 800932a:	4798      	blx	r3
 800932c:	3601      	adds	r6, #1
 800932e:	e7f2      	b.n	8009316 <__libc_init_array+0x1e>
 8009330:	0800b240 	.word	0x0800b240
 8009334:	0800b240 	.word	0x0800b240
 8009338:	0800b240 	.word	0x0800b240
 800933c:	0800b254 	.word	0x0800b254

08009340 <malloc>:
 8009340:	4b02      	ldr	r3, [pc, #8]	; (800934c <malloc+0xc>)
 8009342:	4601      	mov	r1, r0
 8009344:	6818      	ldr	r0, [r3, #0]
 8009346:	f000 b87f 	b.w	8009448 <_malloc_r>
 800934a:	bf00      	nop
 800934c:	24000014 	.word	0x24000014

08009350 <free>:
 8009350:	4b02      	ldr	r3, [pc, #8]	; (800935c <free+0xc>)
 8009352:	4601      	mov	r1, r0
 8009354:	6818      	ldr	r0, [r3, #0]
 8009356:	f000 b80b 	b.w	8009370 <_free_r>
 800935a:	bf00      	nop
 800935c:	24000014 	.word	0x24000014

08009360 <memset>:
 8009360:	4402      	add	r2, r0
 8009362:	4603      	mov	r3, r0
 8009364:	4293      	cmp	r3, r2
 8009366:	d100      	bne.n	800936a <memset+0xa>
 8009368:	4770      	bx	lr
 800936a:	f803 1b01 	strb.w	r1, [r3], #1
 800936e:	e7f9      	b.n	8009364 <memset+0x4>

08009370 <_free_r>:
 8009370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009372:	2900      	cmp	r1, #0
 8009374:	d044      	beq.n	8009400 <_free_r+0x90>
 8009376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800937a:	9001      	str	r0, [sp, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	f1a1 0404 	sub.w	r4, r1, #4
 8009382:	bfb8      	it	lt
 8009384:	18e4      	addlt	r4, r4, r3
 8009386:	f000 ff57 	bl	800a238 <__malloc_lock>
 800938a:	4a1e      	ldr	r2, [pc, #120]	; (8009404 <_free_r+0x94>)
 800938c:	9801      	ldr	r0, [sp, #4]
 800938e:	6813      	ldr	r3, [r2, #0]
 8009390:	b933      	cbnz	r3, 80093a0 <_free_r+0x30>
 8009392:	6063      	str	r3, [r4, #4]
 8009394:	6014      	str	r4, [r2, #0]
 8009396:	b003      	add	sp, #12
 8009398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800939c:	f000 bf52 	b.w	800a244 <__malloc_unlock>
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	d908      	bls.n	80093b6 <_free_r+0x46>
 80093a4:	6825      	ldr	r5, [r4, #0]
 80093a6:	1961      	adds	r1, r4, r5
 80093a8:	428b      	cmp	r3, r1
 80093aa:	bf01      	itttt	eq
 80093ac:	6819      	ldreq	r1, [r3, #0]
 80093ae:	685b      	ldreq	r3, [r3, #4]
 80093b0:	1949      	addeq	r1, r1, r5
 80093b2:	6021      	streq	r1, [r4, #0]
 80093b4:	e7ed      	b.n	8009392 <_free_r+0x22>
 80093b6:	461a      	mov	r2, r3
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	b10b      	cbz	r3, 80093c0 <_free_r+0x50>
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d9fa      	bls.n	80093b6 <_free_r+0x46>
 80093c0:	6811      	ldr	r1, [r2, #0]
 80093c2:	1855      	adds	r5, r2, r1
 80093c4:	42a5      	cmp	r5, r4
 80093c6:	d10b      	bne.n	80093e0 <_free_r+0x70>
 80093c8:	6824      	ldr	r4, [r4, #0]
 80093ca:	4421      	add	r1, r4
 80093cc:	1854      	adds	r4, r2, r1
 80093ce:	42a3      	cmp	r3, r4
 80093d0:	6011      	str	r1, [r2, #0]
 80093d2:	d1e0      	bne.n	8009396 <_free_r+0x26>
 80093d4:	681c      	ldr	r4, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	6053      	str	r3, [r2, #4]
 80093da:	4421      	add	r1, r4
 80093dc:	6011      	str	r1, [r2, #0]
 80093de:	e7da      	b.n	8009396 <_free_r+0x26>
 80093e0:	d902      	bls.n	80093e8 <_free_r+0x78>
 80093e2:	230c      	movs	r3, #12
 80093e4:	6003      	str	r3, [r0, #0]
 80093e6:	e7d6      	b.n	8009396 <_free_r+0x26>
 80093e8:	6825      	ldr	r5, [r4, #0]
 80093ea:	1961      	adds	r1, r4, r5
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf04      	itt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	bf04      	itt	eq
 80093f8:	1949      	addeq	r1, r1, r5
 80093fa:	6021      	streq	r1, [r4, #0]
 80093fc:	6054      	str	r4, [r2, #4]
 80093fe:	e7ca      	b.n	8009396 <_free_r+0x26>
 8009400:	b003      	add	sp, #12
 8009402:	bd30      	pop	{r4, r5, pc}
 8009404:	24000828 	.word	0x24000828

08009408 <sbrk_aligned>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4e0e      	ldr	r6, [pc, #56]	; (8009444 <sbrk_aligned+0x3c>)
 800940c:	460c      	mov	r4, r1
 800940e:	6831      	ldr	r1, [r6, #0]
 8009410:	4605      	mov	r5, r0
 8009412:	b911      	cbnz	r1, 800941a <sbrk_aligned+0x12>
 8009414:	f000 fb7a 	bl	8009b0c <_sbrk_r>
 8009418:	6030      	str	r0, [r6, #0]
 800941a:	4621      	mov	r1, r4
 800941c:	4628      	mov	r0, r5
 800941e:	f000 fb75 	bl	8009b0c <_sbrk_r>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d00a      	beq.n	800943c <sbrk_aligned+0x34>
 8009426:	1cc4      	adds	r4, r0, #3
 8009428:	f024 0403 	bic.w	r4, r4, #3
 800942c:	42a0      	cmp	r0, r4
 800942e:	d007      	beq.n	8009440 <sbrk_aligned+0x38>
 8009430:	1a21      	subs	r1, r4, r0
 8009432:	4628      	mov	r0, r5
 8009434:	f000 fb6a 	bl	8009b0c <_sbrk_r>
 8009438:	3001      	adds	r0, #1
 800943a:	d101      	bne.n	8009440 <sbrk_aligned+0x38>
 800943c:	f04f 34ff 	mov.w	r4, #4294967295
 8009440:	4620      	mov	r0, r4
 8009442:	bd70      	pop	{r4, r5, r6, pc}
 8009444:	2400082c 	.word	0x2400082c

08009448 <_malloc_r>:
 8009448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944c:	1ccd      	adds	r5, r1, #3
 800944e:	f025 0503 	bic.w	r5, r5, #3
 8009452:	3508      	adds	r5, #8
 8009454:	2d0c      	cmp	r5, #12
 8009456:	bf38      	it	cc
 8009458:	250c      	movcc	r5, #12
 800945a:	2d00      	cmp	r5, #0
 800945c:	4607      	mov	r7, r0
 800945e:	db01      	blt.n	8009464 <_malloc_r+0x1c>
 8009460:	42a9      	cmp	r1, r5
 8009462:	d905      	bls.n	8009470 <_malloc_r+0x28>
 8009464:	230c      	movs	r3, #12
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	2600      	movs	r6, #0
 800946a:	4630      	mov	r0, r6
 800946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009470:	4e2e      	ldr	r6, [pc, #184]	; (800952c <_malloc_r+0xe4>)
 8009472:	f000 fee1 	bl	800a238 <__malloc_lock>
 8009476:	6833      	ldr	r3, [r6, #0]
 8009478:	461c      	mov	r4, r3
 800947a:	bb34      	cbnz	r4, 80094ca <_malloc_r+0x82>
 800947c:	4629      	mov	r1, r5
 800947e:	4638      	mov	r0, r7
 8009480:	f7ff ffc2 	bl	8009408 <sbrk_aligned>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	4604      	mov	r4, r0
 8009488:	d14d      	bne.n	8009526 <_malloc_r+0xde>
 800948a:	6834      	ldr	r4, [r6, #0]
 800948c:	4626      	mov	r6, r4
 800948e:	2e00      	cmp	r6, #0
 8009490:	d140      	bne.n	8009514 <_malloc_r+0xcc>
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	4631      	mov	r1, r6
 8009496:	4638      	mov	r0, r7
 8009498:	eb04 0803 	add.w	r8, r4, r3
 800949c:	f000 fb36 	bl	8009b0c <_sbrk_r>
 80094a0:	4580      	cmp	r8, r0
 80094a2:	d13a      	bne.n	800951a <_malloc_r+0xd2>
 80094a4:	6821      	ldr	r1, [r4, #0]
 80094a6:	3503      	adds	r5, #3
 80094a8:	1a6d      	subs	r5, r5, r1
 80094aa:	f025 0503 	bic.w	r5, r5, #3
 80094ae:	3508      	adds	r5, #8
 80094b0:	2d0c      	cmp	r5, #12
 80094b2:	bf38      	it	cc
 80094b4:	250c      	movcc	r5, #12
 80094b6:	4629      	mov	r1, r5
 80094b8:	4638      	mov	r0, r7
 80094ba:	f7ff ffa5 	bl	8009408 <sbrk_aligned>
 80094be:	3001      	adds	r0, #1
 80094c0:	d02b      	beq.n	800951a <_malloc_r+0xd2>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	442b      	add	r3, r5
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	e00e      	b.n	80094e8 <_malloc_r+0xa0>
 80094ca:	6822      	ldr	r2, [r4, #0]
 80094cc:	1b52      	subs	r2, r2, r5
 80094ce:	d41e      	bmi.n	800950e <_malloc_r+0xc6>
 80094d0:	2a0b      	cmp	r2, #11
 80094d2:	d916      	bls.n	8009502 <_malloc_r+0xba>
 80094d4:	1961      	adds	r1, r4, r5
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	6025      	str	r5, [r4, #0]
 80094da:	bf18      	it	ne
 80094dc:	6059      	strne	r1, [r3, #4]
 80094de:	6863      	ldr	r3, [r4, #4]
 80094e0:	bf08      	it	eq
 80094e2:	6031      	streq	r1, [r6, #0]
 80094e4:	5162      	str	r2, [r4, r5]
 80094e6:	604b      	str	r3, [r1, #4]
 80094e8:	4638      	mov	r0, r7
 80094ea:	f104 060b 	add.w	r6, r4, #11
 80094ee:	f000 fea9 	bl	800a244 <__malloc_unlock>
 80094f2:	f026 0607 	bic.w	r6, r6, #7
 80094f6:	1d23      	adds	r3, r4, #4
 80094f8:	1af2      	subs	r2, r6, r3
 80094fa:	d0b6      	beq.n	800946a <_malloc_r+0x22>
 80094fc:	1b9b      	subs	r3, r3, r6
 80094fe:	50a3      	str	r3, [r4, r2]
 8009500:	e7b3      	b.n	800946a <_malloc_r+0x22>
 8009502:	6862      	ldr	r2, [r4, #4]
 8009504:	42a3      	cmp	r3, r4
 8009506:	bf0c      	ite	eq
 8009508:	6032      	streq	r2, [r6, #0]
 800950a:	605a      	strne	r2, [r3, #4]
 800950c:	e7ec      	b.n	80094e8 <_malloc_r+0xa0>
 800950e:	4623      	mov	r3, r4
 8009510:	6864      	ldr	r4, [r4, #4]
 8009512:	e7b2      	b.n	800947a <_malloc_r+0x32>
 8009514:	4634      	mov	r4, r6
 8009516:	6876      	ldr	r6, [r6, #4]
 8009518:	e7b9      	b.n	800948e <_malloc_r+0x46>
 800951a:	230c      	movs	r3, #12
 800951c:	603b      	str	r3, [r7, #0]
 800951e:	4638      	mov	r0, r7
 8009520:	f000 fe90 	bl	800a244 <__malloc_unlock>
 8009524:	e7a1      	b.n	800946a <_malloc_r+0x22>
 8009526:	6025      	str	r5, [r4, #0]
 8009528:	e7de      	b.n	80094e8 <_malloc_r+0xa0>
 800952a:	bf00      	nop
 800952c:	24000828 	.word	0x24000828

08009530 <__sfputc_r>:
 8009530:	6893      	ldr	r3, [r2, #8]
 8009532:	3b01      	subs	r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	b410      	push	{r4}
 8009538:	6093      	str	r3, [r2, #8]
 800953a:	da08      	bge.n	800954e <__sfputc_r+0x1e>
 800953c:	6994      	ldr	r4, [r2, #24]
 800953e:	42a3      	cmp	r3, r4
 8009540:	db01      	blt.n	8009546 <__sfputc_r+0x16>
 8009542:	290a      	cmp	r1, #10
 8009544:	d103      	bne.n	800954e <__sfputc_r+0x1e>
 8009546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800954a:	f000 bb33 	b.w	8009bb4 <__swbuf_r>
 800954e:	6813      	ldr	r3, [r2, #0]
 8009550:	1c58      	adds	r0, r3, #1
 8009552:	6010      	str	r0, [r2, #0]
 8009554:	7019      	strb	r1, [r3, #0]
 8009556:	4608      	mov	r0, r1
 8009558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800955c:	4770      	bx	lr

0800955e <__sfputs_r>:
 800955e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009560:	4606      	mov	r6, r0
 8009562:	460f      	mov	r7, r1
 8009564:	4614      	mov	r4, r2
 8009566:	18d5      	adds	r5, r2, r3
 8009568:	42ac      	cmp	r4, r5
 800956a:	d101      	bne.n	8009570 <__sfputs_r+0x12>
 800956c:	2000      	movs	r0, #0
 800956e:	e007      	b.n	8009580 <__sfputs_r+0x22>
 8009570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009574:	463a      	mov	r2, r7
 8009576:	4630      	mov	r0, r6
 8009578:	f7ff ffda 	bl	8009530 <__sfputc_r>
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d1f3      	bne.n	8009568 <__sfputs_r+0xa>
 8009580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009584 <_vfiprintf_r>:
 8009584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	460d      	mov	r5, r1
 800958a:	b09d      	sub	sp, #116	; 0x74
 800958c:	4614      	mov	r4, r2
 800958e:	4698      	mov	r8, r3
 8009590:	4606      	mov	r6, r0
 8009592:	b118      	cbz	r0, 800959c <_vfiprintf_r+0x18>
 8009594:	6983      	ldr	r3, [r0, #24]
 8009596:	b90b      	cbnz	r3, 800959c <_vfiprintf_r+0x18>
 8009598:	f000 fd48 	bl	800a02c <__sinit>
 800959c:	4b89      	ldr	r3, [pc, #548]	; (80097c4 <_vfiprintf_r+0x240>)
 800959e:	429d      	cmp	r5, r3
 80095a0:	d11b      	bne.n	80095da <_vfiprintf_r+0x56>
 80095a2:	6875      	ldr	r5, [r6, #4]
 80095a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095a6:	07d9      	lsls	r1, r3, #31
 80095a8:	d405      	bmi.n	80095b6 <_vfiprintf_r+0x32>
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	059a      	lsls	r2, r3, #22
 80095ae:	d402      	bmi.n	80095b6 <_vfiprintf_r+0x32>
 80095b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095b2:	f000 fdd9 	bl	800a168 <__retarget_lock_acquire_recursive>
 80095b6:	89ab      	ldrh	r3, [r5, #12]
 80095b8:	071b      	lsls	r3, r3, #28
 80095ba:	d501      	bpl.n	80095c0 <_vfiprintf_r+0x3c>
 80095bc:	692b      	ldr	r3, [r5, #16]
 80095be:	b9eb      	cbnz	r3, 80095fc <_vfiprintf_r+0x78>
 80095c0:	4629      	mov	r1, r5
 80095c2:	4630      	mov	r0, r6
 80095c4:	f000 fb48 	bl	8009c58 <__swsetup_r>
 80095c8:	b1c0      	cbz	r0, 80095fc <_vfiprintf_r+0x78>
 80095ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095cc:	07dc      	lsls	r4, r3, #31
 80095ce:	d50e      	bpl.n	80095ee <_vfiprintf_r+0x6a>
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	b01d      	add	sp, #116	; 0x74
 80095d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095da:	4b7b      	ldr	r3, [pc, #492]	; (80097c8 <_vfiprintf_r+0x244>)
 80095dc:	429d      	cmp	r5, r3
 80095de:	d101      	bne.n	80095e4 <_vfiprintf_r+0x60>
 80095e0:	68b5      	ldr	r5, [r6, #8]
 80095e2:	e7df      	b.n	80095a4 <_vfiprintf_r+0x20>
 80095e4:	4b79      	ldr	r3, [pc, #484]	; (80097cc <_vfiprintf_r+0x248>)
 80095e6:	429d      	cmp	r5, r3
 80095e8:	bf08      	it	eq
 80095ea:	68f5      	ldreq	r5, [r6, #12]
 80095ec:	e7da      	b.n	80095a4 <_vfiprintf_r+0x20>
 80095ee:	89ab      	ldrh	r3, [r5, #12]
 80095f0:	0598      	lsls	r0, r3, #22
 80095f2:	d4ed      	bmi.n	80095d0 <_vfiprintf_r+0x4c>
 80095f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095f6:	f000 fdb9 	bl	800a16c <__retarget_lock_release_recursive>
 80095fa:	e7e9      	b.n	80095d0 <_vfiprintf_r+0x4c>
 80095fc:	2300      	movs	r3, #0
 80095fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009600:	2320      	movs	r3, #32
 8009602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009606:	f8cd 800c 	str.w	r8, [sp, #12]
 800960a:	2330      	movs	r3, #48	; 0x30
 800960c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097d0 <_vfiprintf_r+0x24c>
 8009610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009614:	f04f 0901 	mov.w	r9, #1
 8009618:	4623      	mov	r3, r4
 800961a:	469a      	mov	sl, r3
 800961c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009620:	b10a      	cbz	r2, 8009626 <_vfiprintf_r+0xa2>
 8009622:	2a25      	cmp	r2, #37	; 0x25
 8009624:	d1f9      	bne.n	800961a <_vfiprintf_r+0x96>
 8009626:	ebba 0b04 	subs.w	fp, sl, r4
 800962a:	d00b      	beq.n	8009644 <_vfiprintf_r+0xc0>
 800962c:	465b      	mov	r3, fp
 800962e:	4622      	mov	r2, r4
 8009630:	4629      	mov	r1, r5
 8009632:	4630      	mov	r0, r6
 8009634:	f7ff ff93 	bl	800955e <__sfputs_r>
 8009638:	3001      	adds	r0, #1
 800963a:	f000 80aa 	beq.w	8009792 <_vfiprintf_r+0x20e>
 800963e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009640:	445a      	add	r2, fp
 8009642:	9209      	str	r2, [sp, #36]	; 0x24
 8009644:	f89a 3000 	ldrb.w	r3, [sl]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 80a2 	beq.w	8009792 <_vfiprintf_r+0x20e>
 800964e:	2300      	movs	r3, #0
 8009650:	f04f 32ff 	mov.w	r2, #4294967295
 8009654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009658:	f10a 0a01 	add.w	sl, sl, #1
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	9307      	str	r3, [sp, #28]
 8009660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009664:	931a      	str	r3, [sp, #104]	; 0x68
 8009666:	4654      	mov	r4, sl
 8009668:	2205      	movs	r2, #5
 800966a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966e:	4858      	ldr	r0, [pc, #352]	; (80097d0 <_vfiprintf_r+0x24c>)
 8009670:	f7f6 fe36 	bl	80002e0 <memchr>
 8009674:	9a04      	ldr	r2, [sp, #16]
 8009676:	b9d8      	cbnz	r0, 80096b0 <_vfiprintf_r+0x12c>
 8009678:	06d1      	lsls	r1, r2, #27
 800967a:	bf44      	itt	mi
 800967c:	2320      	movmi	r3, #32
 800967e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009682:	0713      	lsls	r3, r2, #28
 8009684:	bf44      	itt	mi
 8009686:	232b      	movmi	r3, #43	; 0x2b
 8009688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800968c:	f89a 3000 	ldrb.w	r3, [sl]
 8009690:	2b2a      	cmp	r3, #42	; 0x2a
 8009692:	d015      	beq.n	80096c0 <_vfiprintf_r+0x13c>
 8009694:	9a07      	ldr	r2, [sp, #28]
 8009696:	4654      	mov	r4, sl
 8009698:	2000      	movs	r0, #0
 800969a:	f04f 0c0a 	mov.w	ip, #10
 800969e:	4621      	mov	r1, r4
 80096a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a4:	3b30      	subs	r3, #48	; 0x30
 80096a6:	2b09      	cmp	r3, #9
 80096a8:	d94e      	bls.n	8009748 <_vfiprintf_r+0x1c4>
 80096aa:	b1b0      	cbz	r0, 80096da <_vfiprintf_r+0x156>
 80096ac:	9207      	str	r2, [sp, #28]
 80096ae:	e014      	b.n	80096da <_vfiprintf_r+0x156>
 80096b0:	eba0 0308 	sub.w	r3, r0, r8
 80096b4:	fa09 f303 	lsl.w	r3, r9, r3
 80096b8:	4313      	orrs	r3, r2
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	46a2      	mov	sl, r4
 80096be:	e7d2      	b.n	8009666 <_vfiprintf_r+0xe2>
 80096c0:	9b03      	ldr	r3, [sp, #12]
 80096c2:	1d19      	adds	r1, r3, #4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	9103      	str	r1, [sp, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bfbb      	ittet	lt
 80096cc:	425b      	neglt	r3, r3
 80096ce:	f042 0202 	orrlt.w	r2, r2, #2
 80096d2:	9307      	strge	r3, [sp, #28]
 80096d4:	9307      	strlt	r3, [sp, #28]
 80096d6:	bfb8      	it	lt
 80096d8:	9204      	strlt	r2, [sp, #16]
 80096da:	7823      	ldrb	r3, [r4, #0]
 80096dc:	2b2e      	cmp	r3, #46	; 0x2e
 80096de:	d10c      	bne.n	80096fa <_vfiprintf_r+0x176>
 80096e0:	7863      	ldrb	r3, [r4, #1]
 80096e2:	2b2a      	cmp	r3, #42	; 0x2a
 80096e4:	d135      	bne.n	8009752 <_vfiprintf_r+0x1ce>
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	1d1a      	adds	r2, r3, #4
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	9203      	str	r2, [sp, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bfb8      	it	lt
 80096f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096f6:	3402      	adds	r4, #2
 80096f8:	9305      	str	r3, [sp, #20]
 80096fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097e0 <_vfiprintf_r+0x25c>
 80096fe:	7821      	ldrb	r1, [r4, #0]
 8009700:	2203      	movs	r2, #3
 8009702:	4650      	mov	r0, sl
 8009704:	f7f6 fdec 	bl	80002e0 <memchr>
 8009708:	b140      	cbz	r0, 800971c <_vfiprintf_r+0x198>
 800970a:	2340      	movs	r3, #64	; 0x40
 800970c:	eba0 000a 	sub.w	r0, r0, sl
 8009710:	fa03 f000 	lsl.w	r0, r3, r0
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	4303      	orrs	r3, r0
 8009718:	3401      	adds	r4, #1
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009720:	482c      	ldr	r0, [pc, #176]	; (80097d4 <_vfiprintf_r+0x250>)
 8009722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009726:	2206      	movs	r2, #6
 8009728:	f7f6 fdda 	bl	80002e0 <memchr>
 800972c:	2800      	cmp	r0, #0
 800972e:	d03f      	beq.n	80097b0 <_vfiprintf_r+0x22c>
 8009730:	4b29      	ldr	r3, [pc, #164]	; (80097d8 <_vfiprintf_r+0x254>)
 8009732:	bb1b      	cbnz	r3, 800977c <_vfiprintf_r+0x1f8>
 8009734:	9b03      	ldr	r3, [sp, #12]
 8009736:	3307      	adds	r3, #7
 8009738:	f023 0307 	bic.w	r3, r3, #7
 800973c:	3308      	adds	r3, #8
 800973e:	9303      	str	r3, [sp, #12]
 8009740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009742:	443b      	add	r3, r7
 8009744:	9309      	str	r3, [sp, #36]	; 0x24
 8009746:	e767      	b.n	8009618 <_vfiprintf_r+0x94>
 8009748:	fb0c 3202 	mla	r2, ip, r2, r3
 800974c:	460c      	mov	r4, r1
 800974e:	2001      	movs	r0, #1
 8009750:	e7a5      	b.n	800969e <_vfiprintf_r+0x11a>
 8009752:	2300      	movs	r3, #0
 8009754:	3401      	adds	r4, #1
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	4619      	mov	r1, r3
 800975a:	f04f 0c0a 	mov.w	ip, #10
 800975e:	4620      	mov	r0, r4
 8009760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009764:	3a30      	subs	r2, #48	; 0x30
 8009766:	2a09      	cmp	r2, #9
 8009768:	d903      	bls.n	8009772 <_vfiprintf_r+0x1ee>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0c5      	beq.n	80096fa <_vfiprintf_r+0x176>
 800976e:	9105      	str	r1, [sp, #20]
 8009770:	e7c3      	b.n	80096fa <_vfiprintf_r+0x176>
 8009772:	fb0c 2101 	mla	r1, ip, r1, r2
 8009776:	4604      	mov	r4, r0
 8009778:	2301      	movs	r3, #1
 800977a:	e7f0      	b.n	800975e <_vfiprintf_r+0x1da>
 800977c:	ab03      	add	r3, sp, #12
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	462a      	mov	r2, r5
 8009782:	4b16      	ldr	r3, [pc, #88]	; (80097dc <_vfiprintf_r+0x258>)
 8009784:	a904      	add	r1, sp, #16
 8009786:	4630      	mov	r0, r6
 8009788:	f3af 8000 	nop.w
 800978c:	4607      	mov	r7, r0
 800978e:	1c78      	adds	r0, r7, #1
 8009790:	d1d6      	bne.n	8009740 <_vfiprintf_r+0x1bc>
 8009792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009794:	07d9      	lsls	r1, r3, #31
 8009796:	d405      	bmi.n	80097a4 <_vfiprintf_r+0x220>
 8009798:	89ab      	ldrh	r3, [r5, #12]
 800979a:	059a      	lsls	r2, r3, #22
 800979c:	d402      	bmi.n	80097a4 <_vfiprintf_r+0x220>
 800979e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a0:	f000 fce4 	bl	800a16c <__retarget_lock_release_recursive>
 80097a4:	89ab      	ldrh	r3, [r5, #12]
 80097a6:	065b      	lsls	r3, r3, #25
 80097a8:	f53f af12 	bmi.w	80095d0 <_vfiprintf_r+0x4c>
 80097ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ae:	e711      	b.n	80095d4 <_vfiprintf_r+0x50>
 80097b0:	ab03      	add	r3, sp, #12
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	462a      	mov	r2, r5
 80097b6:	4b09      	ldr	r3, [pc, #36]	; (80097dc <_vfiprintf_r+0x258>)
 80097b8:	a904      	add	r1, sp, #16
 80097ba:	4630      	mov	r0, r6
 80097bc:	f000 f880 	bl	80098c0 <_printf_i>
 80097c0:	e7e4      	b.n	800978c <_vfiprintf_r+0x208>
 80097c2:	bf00      	nop
 80097c4:	0800ae08 	.word	0x0800ae08
 80097c8:	0800ae28 	.word	0x0800ae28
 80097cc:	0800ade8 	.word	0x0800ade8
 80097d0:	0800adb0 	.word	0x0800adb0
 80097d4:	0800adba 	.word	0x0800adba
 80097d8:	00000000 	.word	0x00000000
 80097dc:	0800955f 	.word	0x0800955f
 80097e0:	0800adb6 	.word	0x0800adb6

080097e4 <_printf_common>:
 80097e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e8:	4616      	mov	r6, r2
 80097ea:	4699      	mov	r9, r3
 80097ec:	688a      	ldr	r2, [r1, #8]
 80097ee:	690b      	ldr	r3, [r1, #16]
 80097f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097f4:	4293      	cmp	r3, r2
 80097f6:	bfb8      	it	lt
 80097f8:	4613      	movlt	r3, r2
 80097fa:	6033      	str	r3, [r6, #0]
 80097fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009800:	4607      	mov	r7, r0
 8009802:	460c      	mov	r4, r1
 8009804:	b10a      	cbz	r2, 800980a <_printf_common+0x26>
 8009806:	3301      	adds	r3, #1
 8009808:	6033      	str	r3, [r6, #0]
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	0699      	lsls	r1, r3, #26
 800980e:	bf42      	ittt	mi
 8009810:	6833      	ldrmi	r3, [r6, #0]
 8009812:	3302      	addmi	r3, #2
 8009814:	6033      	strmi	r3, [r6, #0]
 8009816:	6825      	ldr	r5, [r4, #0]
 8009818:	f015 0506 	ands.w	r5, r5, #6
 800981c:	d106      	bne.n	800982c <_printf_common+0x48>
 800981e:	f104 0a19 	add.w	sl, r4, #25
 8009822:	68e3      	ldr	r3, [r4, #12]
 8009824:	6832      	ldr	r2, [r6, #0]
 8009826:	1a9b      	subs	r3, r3, r2
 8009828:	42ab      	cmp	r3, r5
 800982a:	dc26      	bgt.n	800987a <_printf_common+0x96>
 800982c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009830:	1e13      	subs	r3, r2, #0
 8009832:	6822      	ldr	r2, [r4, #0]
 8009834:	bf18      	it	ne
 8009836:	2301      	movne	r3, #1
 8009838:	0692      	lsls	r2, r2, #26
 800983a:	d42b      	bmi.n	8009894 <_printf_common+0xb0>
 800983c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009840:	4649      	mov	r1, r9
 8009842:	4638      	mov	r0, r7
 8009844:	47c0      	blx	r8
 8009846:	3001      	adds	r0, #1
 8009848:	d01e      	beq.n	8009888 <_printf_common+0xa4>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	68e5      	ldr	r5, [r4, #12]
 800984e:	6832      	ldr	r2, [r6, #0]
 8009850:	f003 0306 	and.w	r3, r3, #6
 8009854:	2b04      	cmp	r3, #4
 8009856:	bf08      	it	eq
 8009858:	1aad      	subeq	r5, r5, r2
 800985a:	68a3      	ldr	r3, [r4, #8]
 800985c:	6922      	ldr	r2, [r4, #16]
 800985e:	bf0c      	ite	eq
 8009860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009864:	2500      	movne	r5, #0
 8009866:	4293      	cmp	r3, r2
 8009868:	bfc4      	itt	gt
 800986a:	1a9b      	subgt	r3, r3, r2
 800986c:	18ed      	addgt	r5, r5, r3
 800986e:	2600      	movs	r6, #0
 8009870:	341a      	adds	r4, #26
 8009872:	42b5      	cmp	r5, r6
 8009874:	d11a      	bne.n	80098ac <_printf_common+0xc8>
 8009876:	2000      	movs	r0, #0
 8009878:	e008      	b.n	800988c <_printf_common+0xa8>
 800987a:	2301      	movs	r3, #1
 800987c:	4652      	mov	r2, sl
 800987e:	4649      	mov	r1, r9
 8009880:	4638      	mov	r0, r7
 8009882:	47c0      	blx	r8
 8009884:	3001      	adds	r0, #1
 8009886:	d103      	bne.n	8009890 <_printf_common+0xac>
 8009888:	f04f 30ff 	mov.w	r0, #4294967295
 800988c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009890:	3501      	adds	r5, #1
 8009892:	e7c6      	b.n	8009822 <_printf_common+0x3e>
 8009894:	18e1      	adds	r1, r4, r3
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	2030      	movs	r0, #48	; 0x30
 800989a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800989e:	4422      	add	r2, r4
 80098a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098a8:	3302      	adds	r3, #2
 80098aa:	e7c7      	b.n	800983c <_printf_common+0x58>
 80098ac:	2301      	movs	r3, #1
 80098ae:	4622      	mov	r2, r4
 80098b0:	4649      	mov	r1, r9
 80098b2:	4638      	mov	r0, r7
 80098b4:	47c0      	blx	r8
 80098b6:	3001      	adds	r0, #1
 80098b8:	d0e6      	beq.n	8009888 <_printf_common+0xa4>
 80098ba:	3601      	adds	r6, #1
 80098bc:	e7d9      	b.n	8009872 <_printf_common+0x8e>
	...

080098c0 <_printf_i>:
 80098c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098c4:	7e0f      	ldrb	r7, [r1, #24]
 80098c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098c8:	2f78      	cmp	r7, #120	; 0x78
 80098ca:	4691      	mov	r9, r2
 80098cc:	4680      	mov	r8, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	469a      	mov	sl, r3
 80098d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098d6:	d807      	bhi.n	80098e8 <_printf_i+0x28>
 80098d8:	2f62      	cmp	r7, #98	; 0x62
 80098da:	d80a      	bhi.n	80098f2 <_printf_i+0x32>
 80098dc:	2f00      	cmp	r7, #0
 80098de:	f000 80d8 	beq.w	8009a92 <_printf_i+0x1d2>
 80098e2:	2f58      	cmp	r7, #88	; 0x58
 80098e4:	f000 80a3 	beq.w	8009a2e <_printf_i+0x16e>
 80098e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098f0:	e03a      	b.n	8009968 <_printf_i+0xa8>
 80098f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098f6:	2b15      	cmp	r3, #21
 80098f8:	d8f6      	bhi.n	80098e8 <_printf_i+0x28>
 80098fa:	a101      	add	r1, pc, #4	; (adr r1, 8009900 <_printf_i+0x40>)
 80098fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009900:	08009959 	.word	0x08009959
 8009904:	0800996d 	.word	0x0800996d
 8009908:	080098e9 	.word	0x080098e9
 800990c:	080098e9 	.word	0x080098e9
 8009910:	080098e9 	.word	0x080098e9
 8009914:	080098e9 	.word	0x080098e9
 8009918:	0800996d 	.word	0x0800996d
 800991c:	080098e9 	.word	0x080098e9
 8009920:	080098e9 	.word	0x080098e9
 8009924:	080098e9 	.word	0x080098e9
 8009928:	080098e9 	.word	0x080098e9
 800992c:	08009a79 	.word	0x08009a79
 8009930:	0800999d 	.word	0x0800999d
 8009934:	08009a5b 	.word	0x08009a5b
 8009938:	080098e9 	.word	0x080098e9
 800993c:	080098e9 	.word	0x080098e9
 8009940:	08009a9b 	.word	0x08009a9b
 8009944:	080098e9 	.word	0x080098e9
 8009948:	0800999d 	.word	0x0800999d
 800994c:	080098e9 	.word	0x080098e9
 8009950:	080098e9 	.word	0x080098e9
 8009954:	08009a63 	.word	0x08009a63
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	1d1a      	adds	r2, r3, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	602a      	str	r2, [r5, #0]
 8009960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009968:	2301      	movs	r3, #1
 800996a:	e0a3      	b.n	8009ab4 <_printf_i+0x1f4>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	6829      	ldr	r1, [r5, #0]
 8009970:	0606      	lsls	r6, r0, #24
 8009972:	f101 0304 	add.w	r3, r1, #4
 8009976:	d50a      	bpl.n	800998e <_printf_i+0xce>
 8009978:	680e      	ldr	r6, [r1, #0]
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	2e00      	cmp	r6, #0
 800997e:	da03      	bge.n	8009988 <_printf_i+0xc8>
 8009980:	232d      	movs	r3, #45	; 0x2d
 8009982:	4276      	negs	r6, r6
 8009984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009988:	485e      	ldr	r0, [pc, #376]	; (8009b04 <_printf_i+0x244>)
 800998a:	230a      	movs	r3, #10
 800998c:	e019      	b.n	80099c2 <_printf_i+0x102>
 800998e:	680e      	ldr	r6, [r1, #0]
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009996:	bf18      	it	ne
 8009998:	b236      	sxthne	r6, r6
 800999a:	e7ef      	b.n	800997c <_printf_i+0xbc>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	6820      	ldr	r0, [r4, #0]
 80099a0:	1d19      	adds	r1, r3, #4
 80099a2:	6029      	str	r1, [r5, #0]
 80099a4:	0601      	lsls	r1, r0, #24
 80099a6:	d501      	bpl.n	80099ac <_printf_i+0xec>
 80099a8:	681e      	ldr	r6, [r3, #0]
 80099aa:	e002      	b.n	80099b2 <_printf_i+0xf2>
 80099ac:	0646      	lsls	r6, r0, #25
 80099ae:	d5fb      	bpl.n	80099a8 <_printf_i+0xe8>
 80099b0:	881e      	ldrh	r6, [r3, #0]
 80099b2:	4854      	ldr	r0, [pc, #336]	; (8009b04 <_printf_i+0x244>)
 80099b4:	2f6f      	cmp	r7, #111	; 0x6f
 80099b6:	bf0c      	ite	eq
 80099b8:	2308      	moveq	r3, #8
 80099ba:	230a      	movne	r3, #10
 80099bc:	2100      	movs	r1, #0
 80099be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099c2:	6865      	ldr	r5, [r4, #4]
 80099c4:	60a5      	str	r5, [r4, #8]
 80099c6:	2d00      	cmp	r5, #0
 80099c8:	bfa2      	ittt	ge
 80099ca:	6821      	ldrge	r1, [r4, #0]
 80099cc:	f021 0104 	bicge.w	r1, r1, #4
 80099d0:	6021      	strge	r1, [r4, #0]
 80099d2:	b90e      	cbnz	r6, 80099d8 <_printf_i+0x118>
 80099d4:	2d00      	cmp	r5, #0
 80099d6:	d04d      	beq.n	8009a74 <_printf_i+0x1b4>
 80099d8:	4615      	mov	r5, r2
 80099da:	fbb6 f1f3 	udiv	r1, r6, r3
 80099de:	fb03 6711 	mls	r7, r3, r1, r6
 80099e2:	5dc7      	ldrb	r7, [r0, r7]
 80099e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099e8:	4637      	mov	r7, r6
 80099ea:	42bb      	cmp	r3, r7
 80099ec:	460e      	mov	r6, r1
 80099ee:	d9f4      	bls.n	80099da <_printf_i+0x11a>
 80099f0:	2b08      	cmp	r3, #8
 80099f2:	d10b      	bne.n	8009a0c <_printf_i+0x14c>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	07de      	lsls	r6, r3, #31
 80099f8:	d508      	bpl.n	8009a0c <_printf_i+0x14c>
 80099fa:	6923      	ldr	r3, [r4, #16]
 80099fc:	6861      	ldr	r1, [r4, #4]
 80099fe:	4299      	cmp	r1, r3
 8009a00:	bfde      	ittt	le
 8009a02:	2330      	movle	r3, #48	; 0x30
 8009a04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a0c:	1b52      	subs	r2, r2, r5
 8009a0e:	6122      	str	r2, [r4, #16]
 8009a10:	f8cd a000 	str.w	sl, [sp]
 8009a14:	464b      	mov	r3, r9
 8009a16:	aa03      	add	r2, sp, #12
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	f7ff fee2 	bl	80097e4 <_printf_common>
 8009a20:	3001      	adds	r0, #1
 8009a22:	d14c      	bne.n	8009abe <_printf_i+0x1fe>
 8009a24:	f04f 30ff 	mov.w	r0, #4294967295
 8009a28:	b004      	add	sp, #16
 8009a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2e:	4835      	ldr	r0, [pc, #212]	; (8009b04 <_printf_i+0x244>)
 8009a30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a34:	6829      	ldr	r1, [r5, #0]
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a3c:	6029      	str	r1, [r5, #0]
 8009a3e:	061d      	lsls	r5, r3, #24
 8009a40:	d514      	bpl.n	8009a6c <_printf_i+0x1ac>
 8009a42:	07df      	lsls	r7, r3, #31
 8009a44:	bf44      	itt	mi
 8009a46:	f043 0320 	orrmi.w	r3, r3, #32
 8009a4a:	6023      	strmi	r3, [r4, #0]
 8009a4c:	b91e      	cbnz	r6, 8009a56 <_printf_i+0x196>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	f023 0320 	bic.w	r3, r3, #32
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	2310      	movs	r3, #16
 8009a58:	e7b0      	b.n	80099bc <_printf_i+0xfc>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	f043 0320 	orr.w	r3, r3, #32
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	2378      	movs	r3, #120	; 0x78
 8009a64:	4828      	ldr	r0, [pc, #160]	; (8009b08 <_printf_i+0x248>)
 8009a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a6a:	e7e3      	b.n	8009a34 <_printf_i+0x174>
 8009a6c:	0659      	lsls	r1, r3, #25
 8009a6e:	bf48      	it	mi
 8009a70:	b2b6      	uxthmi	r6, r6
 8009a72:	e7e6      	b.n	8009a42 <_printf_i+0x182>
 8009a74:	4615      	mov	r5, r2
 8009a76:	e7bb      	b.n	80099f0 <_printf_i+0x130>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	6826      	ldr	r6, [r4, #0]
 8009a7c:	6961      	ldr	r1, [r4, #20]
 8009a7e:	1d18      	adds	r0, r3, #4
 8009a80:	6028      	str	r0, [r5, #0]
 8009a82:	0635      	lsls	r5, r6, #24
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	d501      	bpl.n	8009a8c <_printf_i+0x1cc>
 8009a88:	6019      	str	r1, [r3, #0]
 8009a8a:	e002      	b.n	8009a92 <_printf_i+0x1d2>
 8009a8c:	0670      	lsls	r0, r6, #25
 8009a8e:	d5fb      	bpl.n	8009a88 <_printf_i+0x1c8>
 8009a90:	8019      	strh	r1, [r3, #0]
 8009a92:	2300      	movs	r3, #0
 8009a94:	6123      	str	r3, [r4, #16]
 8009a96:	4615      	mov	r5, r2
 8009a98:	e7ba      	b.n	8009a10 <_printf_i+0x150>
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	1d1a      	adds	r2, r3, #4
 8009a9e:	602a      	str	r2, [r5, #0]
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	6862      	ldr	r2, [r4, #4]
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f7f6 fc1a 	bl	80002e0 <memchr>
 8009aac:	b108      	cbz	r0, 8009ab2 <_printf_i+0x1f2>
 8009aae:	1b40      	subs	r0, r0, r5
 8009ab0:	6060      	str	r0, [r4, #4]
 8009ab2:	6863      	ldr	r3, [r4, #4]
 8009ab4:	6123      	str	r3, [r4, #16]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009abc:	e7a8      	b.n	8009a10 <_printf_i+0x150>
 8009abe:	6923      	ldr	r3, [r4, #16]
 8009ac0:	462a      	mov	r2, r5
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	47d0      	blx	sl
 8009ac8:	3001      	adds	r0, #1
 8009aca:	d0ab      	beq.n	8009a24 <_printf_i+0x164>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	079b      	lsls	r3, r3, #30
 8009ad0:	d413      	bmi.n	8009afa <_printf_i+0x23a>
 8009ad2:	68e0      	ldr	r0, [r4, #12]
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	4298      	cmp	r0, r3
 8009ad8:	bfb8      	it	lt
 8009ada:	4618      	movlt	r0, r3
 8009adc:	e7a4      	b.n	8009a28 <_printf_i+0x168>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4632      	mov	r2, r6
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	47d0      	blx	sl
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d09b      	beq.n	8009a24 <_printf_i+0x164>
 8009aec:	3501      	adds	r5, #1
 8009aee:	68e3      	ldr	r3, [r4, #12]
 8009af0:	9903      	ldr	r1, [sp, #12]
 8009af2:	1a5b      	subs	r3, r3, r1
 8009af4:	42ab      	cmp	r3, r5
 8009af6:	dcf2      	bgt.n	8009ade <_printf_i+0x21e>
 8009af8:	e7eb      	b.n	8009ad2 <_printf_i+0x212>
 8009afa:	2500      	movs	r5, #0
 8009afc:	f104 0619 	add.w	r6, r4, #25
 8009b00:	e7f5      	b.n	8009aee <_printf_i+0x22e>
 8009b02:	bf00      	nop
 8009b04:	0800adc1 	.word	0x0800adc1
 8009b08:	0800add2 	.word	0x0800add2

08009b0c <_sbrk_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d06      	ldr	r5, [pc, #24]	; (8009b28 <_sbrk_r+0x1c>)
 8009b10:	2300      	movs	r3, #0
 8009b12:	4604      	mov	r4, r0
 8009b14:	4608      	mov	r0, r1
 8009b16:	602b      	str	r3, [r5, #0]
 8009b18:	f7f7 fa8e 	bl	8001038 <_sbrk>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_sbrk_r+0x1a>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_sbrk_r+0x1a>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	240009cc 	.word	0x240009cc

08009b2c <_raise_r>:
 8009b2c:	291f      	cmp	r1, #31
 8009b2e:	b538      	push	{r3, r4, r5, lr}
 8009b30:	4604      	mov	r4, r0
 8009b32:	460d      	mov	r5, r1
 8009b34:	d904      	bls.n	8009b40 <_raise_r+0x14>
 8009b36:	2316      	movs	r3, #22
 8009b38:	6003      	str	r3, [r0, #0]
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b42:	b112      	cbz	r2, 8009b4a <_raise_r+0x1e>
 8009b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b48:	b94b      	cbnz	r3, 8009b5e <_raise_r+0x32>
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 f830 	bl	8009bb0 <_getpid_r>
 8009b50:	462a      	mov	r2, r5
 8009b52:	4601      	mov	r1, r0
 8009b54:	4620      	mov	r0, r4
 8009b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b5a:	f000 b817 	b.w	8009b8c <_kill_r>
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d00a      	beq.n	8009b78 <_raise_r+0x4c>
 8009b62:	1c59      	adds	r1, r3, #1
 8009b64:	d103      	bne.n	8009b6e <_raise_r+0x42>
 8009b66:	2316      	movs	r3, #22
 8009b68:	6003      	str	r3, [r0, #0]
 8009b6a:	2001      	movs	r0, #1
 8009b6c:	e7e7      	b.n	8009b3e <_raise_r+0x12>
 8009b6e:	2400      	movs	r4, #0
 8009b70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b74:	4628      	mov	r0, r5
 8009b76:	4798      	blx	r3
 8009b78:	2000      	movs	r0, #0
 8009b7a:	e7e0      	b.n	8009b3e <_raise_r+0x12>

08009b7c <raise>:
 8009b7c:	4b02      	ldr	r3, [pc, #8]	; (8009b88 <raise+0xc>)
 8009b7e:	4601      	mov	r1, r0
 8009b80:	6818      	ldr	r0, [r3, #0]
 8009b82:	f7ff bfd3 	b.w	8009b2c <_raise_r>
 8009b86:	bf00      	nop
 8009b88:	24000014 	.word	0x24000014

08009b8c <_kill_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4d07      	ldr	r5, [pc, #28]	; (8009bac <_kill_r+0x20>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	4604      	mov	r4, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	4611      	mov	r1, r2
 8009b98:	602b      	str	r3, [r5, #0]
 8009b9a:	f7f7 fa19 	bl	8000fd0 <_kill>
 8009b9e:	1c43      	adds	r3, r0, #1
 8009ba0:	d102      	bne.n	8009ba8 <_kill_r+0x1c>
 8009ba2:	682b      	ldr	r3, [r5, #0]
 8009ba4:	b103      	cbz	r3, 8009ba8 <_kill_r+0x1c>
 8009ba6:	6023      	str	r3, [r4, #0]
 8009ba8:	bd38      	pop	{r3, r4, r5, pc}
 8009baa:	bf00      	nop
 8009bac:	240009cc 	.word	0x240009cc

08009bb0 <_getpid_r>:
 8009bb0:	f7f7 ba0c 	b.w	8000fcc <_getpid>

08009bb4 <__swbuf_r>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	460e      	mov	r6, r1
 8009bb8:	4614      	mov	r4, r2
 8009bba:	4605      	mov	r5, r0
 8009bbc:	b118      	cbz	r0, 8009bc6 <__swbuf_r+0x12>
 8009bbe:	6983      	ldr	r3, [r0, #24]
 8009bc0:	b90b      	cbnz	r3, 8009bc6 <__swbuf_r+0x12>
 8009bc2:	f000 fa33 	bl	800a02c <__sinit>
 8009bc6:	4b21      	ldr	r3, [pc, #132]	; (8009c4c <__swbuf_r+0x98>)
 8009bc8:	429c      	cmp	r4, r3
 8009bca:	d12b      	bne.n	8009c24 <__swbuf_r+0x70>
 8009bcc:	686c      	ldr	r4, [r5, #4]
 8009bce:	69a3      	ldr	r3, [r4, #24]
 8009bd0:	60a3      	str	r3, [r4, #8]
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	071a      	lsls	r2, r3, #28
 8009bd6:	d52f      	bpl.n	8009c38 <__swbuf_r+0x84>
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	b36b      	cbz	r3, 8009c38 <__swbuf_r+0x84>
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	1ac0      	subs	r0, r0, r3
 8009be2:	6963      	ldr	r3, [r4, #20]
 8009be4:	b2f6      	uxtb	r6, r6
 8009be6:	4283      	cmp	r3, r0
 8009be8:	4637      	mov	r7, r6
 8009bea:	dc04      	bgt.n	8009bf6 <__swbuf_r+0x42>
 8009bec:	4621      	mov	r1, r4
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f000 f988 	bl	8009f04 <_fflush_r>
 8009bf4:	bb30      	cbnz	r0, 8009c44 <__swbuf_r+0x90>
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	60a3      	str	r3, [r4, #8]
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	6022      	str	r2, [r4, #0]
 8009c02:	701e      	strb	r6, [r3, #0]
 8009c04:	6963      	ldr	r3, [r4, #20]
 8009c06:	3001      	adds	r0, #1
 8009c08:	4283      	cmp	r3, r0
 8009c0a:	d004      	beq.n	8009c16 <__swbuf_r+0x62>
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	07db      	lsls	r3, r3, #31
 8009c10:	d506      	bpl.n	8009c20 <__swbuf_r+0x6c>
 8009c12:	2e0a      	cmp	r6, #10
 8009c14:	d104      	bne.n	8009c20 <__swbuf_r+0x6c>
 8009c16:	4621      	mov	r1, r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f000 f973 	bl	8009f04 <_fflush_r>
 8009c1e:	b988      	cbnz	r0, 8009c44 <__swbuf_r+0x90>
 8009c20:	4638      	mov	r0, r7
 8009c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c24:	4b0a      	ldr	r3, [pc, #40]	; (8009c50 <__swbuf_r+0x9c>)
 8009c26:	429c      	cmp	r4, r3
 8009c28:	d101      	bne.n	8009c2e <__swbuf_r+0x7a>
 8009c2a:	68ac      	ldr	r4, [r5, #8]
 8009c2c:	e7cf      	b.n	8009bce <__swbuf_r+0x1a>
 8009c2e:	4b09      	ldr	r3, [pc, #36]	; (8009c54 <__swbuf_r+0xa0>)
 8009c30:	429c      	cmp	r4, r3
 8009c32:	bf08      	it	eq
 8009c34:	68ec      	ldreq	r4, [r5, #12]
 8009c36:	e7ca      	b.n	8009bce <__swbuf_r+0x1a>
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f000 f80c 	bl	8009c58 <__swsetup_r>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d0cb      	beq.n	8009bdc <__swbuf_r+0x28>
 8009c44:	f04f 37ff 	mov.w	r7, #4294967295
 8009c48:	e7ea      	b.n	8009c20 <__swbuf_r+0x6c>
 8009c4a:	bf00      	nop
 8009c4c:	0800ae08 	.word	0x0800ae08
 8009c50:	0800ae28 	.word	0x0800ae28
 8009c54:	0800ade8 	.word	0x0800ade8

08009c58 <__swsetup_r>:
 8009c58:	4b32      	ldr	r3, [pc, #200]	; (8009d24 <__swsetup_r+0xcc>)
 8009c5a:	b570      	push	{r4, r5, r6, lr}
 8009c5c:	681d      	ldr	r5, [r3, #0]
 8009c5e:	4606      	mov	r6, r0
 8009c60:	460c      	mov	r4, r1
 8009c62:	b125      	cbz	r5, 8009c6e <__swsetup_r+0x16>
 8009c64:	69ab      	ldr	r3, [r5, #24]
 8009c66:	b913      	cbnz	r3, 8009c6e <__swsetup_r+0x16>
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f000 f9df 	bl	800a02c <__sinit>
 8009c6e:	4b2e      	ldr	r3, [pc, #184]	; (8009d28 <__swsetup_r+0xd0>)
 8009c70:	429c      	cmp	r4, r3
 8009c72:	d10f      	bne.n	8009c94 <__swsetup_r+0x3c>
 8009c74:	686c      	ldr	r4, [r5, #4]
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c7c:	0719      	lsls	r1, r3, #28
 8009c7e:	d42c      	bmi.n	8009cda <__swsetup_r+0x82>
 8009c80:	06dd      	lsls	r5, r3, #27
 8009c82:	d411      	bmi.n	8009ca8 <__swsetup_r+0x50>
 8009c84:	2309      	movs	r3, #9
 8009c86:	6033      	str	r3, [r6, #0]
 8009c88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c92:	e03e      	b.n	8009d12 <__swsetup_r+0xba>
 8009c94:	4b25      	ldr	r3, [pc, #148]	; (8009d2c <__swsetup_r+0xd4>)
 8009c96:	429c      	cmp	r4, r3
 8009c98:	d101      	bne.n	8009c9e <__swsetup_r+0x46>
 8009c9a:	68ac      	ldr	r4, [r5, #8]
 8009c9c:	e7eb      	b.n	8009c76 <__swsetup_r+0x1e>
 8009c9e:	4b24      	ldr	r3, [pc, #144]	; (8009d30 <__swsetup_r+0xd8>)
 8009ca0:	429c      	cmp	r4, r3
 8009ca2:	bf08      	it	eq
 8009ca4:	68ec      	ldreq	r4, [r5, #12]
 8009ca6:	e7e6      	b.n	8009c76 <__swsetup_r+0x1e>
 8009ca8:	0758      	lsls	r0, r3, #29
 8009caa:	d512      	bpl.n	8009cd2 <__swsetup_r+0x7a>
 8009cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cae:	b141      	cbz	r1, 8009cc2 <__swsetup_r+0x6a>
 8009cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	d002      	beq.n	8009cbe <__swsetup_r+0x66>
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f7ff fb59 	bl	8009370 <_free_r>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	6363      	str	r3, [r4, #52]	; 0x34
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	6063      	str	r3, [r4, #4]
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	f043 0308 	orr.w	r3, r3, #8
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	b94b      	cbnz	r3, 8009cf2 <__swsetup_r+0x9a>
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ce8:	d003      	beq.n	8009cf2 <__swsetup_r+0x9a>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4630      	mov	r0, r6
 8009cee:	f000 fa63 	bl	800a1b8 <__smakebuf_r>
 8009cf2:	89a0      	ldrh	r0, [r4, #12]
 8009cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cf8:	f010 0301 	ands.w	r3, r0, #1
 8009cfc:	d00a      	beq.n	8009d14 <__swsetup_r+0xbc>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60a3      	str	r3, [r4, #8]
 8009d02:	6963      	ldr	r3, [r4, #20]
 8009d04:	425b      	negs	r3, r3
 8009d06:	61a3      	str	r3, [r4, #24]
 8009d08:	6923      	ldr	r3, [r4, #16]
 8009d0a:	b943      	cbnz	r3, 8009d1e <__swsetup_r+0xc6>
 8009d0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d10:	d1ba      	bne.n	8009c88 <__swsetup_r+0x30>
 8009d12:	bd70      	pop	{r4, r5, r6, pc}
 8009d14:	0781      	lsls	r1, r0, #30
 8009d16:	bf58      	it	pl
 8009d18:	6963      	ldrpl	r3, [r4, #20]
 8009d1a:	60a3      	str	r3, [r4, #8]
 8009d1c:	e7f4      	b.n	8009d08 <__swsetup_r+0xb0>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e7f7      	b.n	8009d12 <__swsetup_r+0xba>
 8009d22:	bf00      	nop
 8009d24:	24000014 	.word	0x24000014
 8009d28:	0800ae08 	.word	0x0800ae08
 8009d2c:	0800ae28 	.word	0x0800ae28
 8009d30:	0800ade8 	.word	0x0800ade8

08009d34 <__register_exitproc>:
 8009d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d38:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009df4 <__register_exitproc+0xc0>
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	f8d8 0000 	ldr.w	r0, [r8]
 8009d42:	461f      	mov	r7, r3
 8009d44:	460d      	mov	r5, r1
 8009d46:	4691      	mov	r9, r2
 8009d48:	f000 fa0e 	bl	800a168 <__retarget_lock_acquire_recursive>
 8009d4c:	4b25      	ldr	r3, [pc, #148]	; (8009de4 <__register_exitproc+0xb0>)
 8009d4e:	681c      	ldr	r4, [r3, #0]
 8009d50:	b934      	cbnz	r4, 8009d60 <__register_exitproc+0x2c>
 8009d52:	4c25      	ldr	r4, [pc, #148]	; (8009de8 <__register_exitproc+0xb4>)
 8009d54:	601c      	str	r4, [r3, #0]
 8009d56:	4b25      	ldr	r3, [pc, #148]	; (8009dec <__register_exitproc+0xb8>)
 8009d58:	b113      	cbz	r3, 8009d60 <__register_exitproc+0x2c>
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8009d60:	6863      	ldr	r3, [r4, #4]
 8009d62:	2b1f      	cmp	r3, #31
 8009d64:	dd07      	ble.n	8009d76 <__register_exitproc+0x42>
 8009d66:	f8d8 0000 	ldr.w	r0, [r8]
 8009d6a:	f000 f9ff 	bl	800a16c <__retarget_lock_release_recursive>
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d76:	b34e      	cbz	r6, 8009dcc <__register_exitproc+0x98>
 8009d78:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009d7c:	b988      	cbnz	r0, 8009da2 <__register_exitproc+0x6e>
 8009d7e:	4b1c      	ldr	r3, [pc, #112]	; (8009df0 <__register_exitproc+0xbc>)
 8009d80:	b923      	cbnz	r3, 8009d8c <__register_exitproc+0x58>
 8009d82:	f8d8 0000 	ldr.w	r0, [r8]
 8009d86:	f000 f9f0 	bl	800a16a <__retarget_lock_release>
 8009d8a:	e7f0      	b.n	8009d6e <__register_exitproc+0x3a>
 8009d8c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009d90:	f7ff fad6 	bl	8009340 <malloc>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d0f4      	beq.n	8009d82 <__register_exitproc+0x4e>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8009d9e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8009da2:	6863      	ldr	r3, [r4, #4]
 8009da4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8009da8:	2201      	movs	r2, #1
 8009daa:	409a      	lsls	r2, r3
 8009dac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8009db0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009db4:	4313      	orrs	r3, r2
 8009db6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8009dba:	2e02      	cmp	r6, #2
 8009dbc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8009dc0:	bf02      	ittt	eq
 8009dc2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8009dc6:	4313      	orreq	r3, r2
 8009dc8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8009dcc:	6863      	ldr	r3, [r4, #4]
 8009dce:	f8d8 0000 	ldr.w	r0, [r8]
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	3302      	adds	r3, #2
 8009dd6:	6062      	str	r2, [r4, #4]
 8009dd8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8009ddc:	f000 f9c6 	bl	800a16c <__retarget_lock_release_recursive>
 8009de0:	2000      	movs	r0, #0
 8009de2:	e7c6      	b.n	8009d72 <__register_exitproc+0x3e>
 8009de4:	240009c4 	.word	0x240009c4
 8009de8:	24000938 	.word	0x24000938
 8009dec:	0800ade4 	.word	0x0800ade4
 8009df0:	08009341 	.word	0x08009341
 8009df4:	24000078 	.word	0x24000078

08009df8 <__sflush_r>:
 8009df8:	898a      	ldrh	r2, [r1, #12]
 8009dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfe:	4605      	mov	r5, r0
 8009e00:	0710      	lsls	r0, r2, #28
 8009e02:	460c      	mov	r4, r1
 8009e04:	d458      	bmi.n	8009eb8 <__sflush_r+0xc0>
 8009e06:	684b      	ldr	r3, [r1, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	dc05      	bgt.n	8009e18 <__sflush_r+0x20>
 8009e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	dc02      	bgt.n	8009e18 <__sflush_r+0x20>
 8009e12:	2000      	movs	r0, #0
 8009e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e1a:	2e00      	cmp	r6, #0
 8009e1c:	d0f9      	beq.n	8009e12 <__sflush_r+0x1a>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e24:	682f      	ldr	r7, [r5, #0]
 8009e26:	602b      	str	r3, [r5, #0]
 8009e28:	d032      	beq.n	8009e90 <__sflush_r+0x98>
 8009e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	075a      	lsls	r2, r3, #29
 8009e30:	d505      	bpl.n	8009e3e <__sflush_r+0x46>
 8009e32:	6863      	ldr	r3, [r4, #4]
 8009e34:	1ac0      	subs	r0, r0, r3
 8009e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e38:	b10b      	cbz	r3, 8009e3e <__sflush_r+0x46>
 8009e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e3c:	1ac0      	subs	r0, r0, r3
 8009e3e:	2300      	movs	r3, #0
 8009e40:	4602      	mov	r2, r0
 8009e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e44:	6a21      	ldr	r1, [r4, #32]
 8009e46:	4628      	mov	r0, r5
 8009e48:	47b0      	blx	r6
 8009e4a:	1c43      	adds	r3, r0, #1
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	d106      	bne.n	8009e5e <__sflush_r+0x66>
 8009e50:	6829      	ldr	r1, [r5, #0]
 8009e52:	291d      	cmp	r1, #29
 8009e54:	d82c      	bhi.n	8009eb0 <__sflush_r+0xb8>
 8009e56:	4a2a      	ldr	r2, [pc, #168]	; (8009f00 <__sflush_r+0x108>)
 8009e58:	40ca      	lsrs	r2, r1
 8009e5a:	07d6      	lsls	r6, r2, #31
 8009e5c:	d528      	bpl.n	8009eb0 <__sflush_r+0xb8>
 8009e5e:	2200      	movs	r2, #0
 8009e60:	6062      	str	r2, [r4, #4]
 8009e62:	04d9      	lsls	r1, r3, #19
 8009e64:	6922      	ldr	r2, [r4, #16]
 8009e66:	6022      	str	r2, [r4, #0]
 8009e68:	d504      	bpl.n	8009e74 <__sflush_r+0x7c>
 8009e6a:	1c42      	adds	r2, r0, #1
 8009e6c:	d101      	bne.n	8009e72 <__sflush_r+0x7a>
 8009e6e:	682b      	ldr	r3, [r5, #0]
 8009e70:	b903      	cbnz	r3, 8009e74 <__sflush_r+0x7c>
 8009e72:	6560      	str	r0, [r4, #84]	; 0x54
 8009e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e76:	602f      	str	r7, [r5, #0]
 8009e78:	2900      	cmp	r1, #0
 8009e7a:	d0ca      	beq.n	8009e12 <__sflush_r+0x1a>
 8009e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e80:	4299      	cmp	r1, r3
 8009e82:	d002      	beq.n	8009e8a <__sflush_r+0x92>
 8009e84:	4628      	mov	r0, r5
 8009e86:	f7ff fa73 	bl	8009370 <_free_r>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e8e:	e7c1      	b.n	8009e14 <__sflush_r+0x1c>
 8009e90:	6a21      	ldr	r1, [r4, #32]
 8009e92:	2301      	movs	r3, #1
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b0      	blx	r6
 8009e98:	1c41      	adds	r1, r0, #1
 8009e9a:	d1c7      	bne.n	8009e2c <__sflush_r+0x34>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0c4      	beq.n	8009e2c <__sflush_r+0x34>
 8009ea2:	2b1d      	cmp	r3, #29
 8009ea4:	d001      	beq.n	8009eaa <__sflush_r+0xb2>
 8009ea6:	2b16      	cmp	r3, #22
 8009ea8:	d101      	bne.n	8009eae <__sflush_r+0xb6>
 8009eaa:	602f      	str	r7, [r5, #0]
 8009eac:	e7b1      	b.n	8009e12 <__sflush_r+0x1a>
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	e7ad      	b.n	8009e14 <__sflush_r+0x1c>
 8009eb8:	690f      	ldr	r7, [r1, #16]
 8009eba:	2f00      	cmp	r7, #0
 8009ebc:	d0a9      	beq.n	8009e12 <__sflush_r+0x1a>
 8009ebe:	0793      	lsls	r3, r2, #30
 8009ec0:	680e      	ldr	r6, [r1, #0]
 8009ec2:	bf08      	it	eq
 8009ec4:	694b      	ldreq	r3, [r1, #20]
 8009ec6:	600f      	str	r7, [r1, #0]
 8009ec8:	bf18      	it	ne
 8009eca:	2300      	movne	r3, #0
 8009ecc:	eba6 0807 	sub.w	r8, r6, r7
 8009ed0:	608b      	str	r3, [r1, #8]
 8009ed2:	f1b8 0f00 	cmp.w	r8, #0
 8009ed6:	dd9c      	ble.n	8009e12 <__sflush_r+0x1a>
 8009ed8:	6a21      	ldr	r1, [r4, #32]
 8009eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009edc:	4643      	mov	r3, r8
 8009ede:	463a      	mov	r2, r7
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b0      	blx	r6
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	dc06      	bgt.n	8009ef6 <__sflush_r+0xfe>
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eee:	81a3      	strh	r3, [r4, #12]
 8009ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef4:	e78e      	b.n	8009e14 <__sflush_r+0x1c>
 8009ef6:	4407      	add	r7, r0
 8009ef8:	eba8 0800 	sub.w	r8, r8, r0
 8009efc:	e7e9      	b.n	8009ed2 <__sflush_r+0xda>
 8009efe:	bf00      	nop
 8009f00:	20400001 	.word	0x20400001

08009f04 <_fflush_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	690b      	ldr	r3, [r1, #16]
 8009f08:	4605      	mov	r5, r0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	b913      	cbnz	r3, 8009f14 <_fflush_r+0x10>
 8009f0e:	2500      	movs	r5, #0
 8009f10:	4628      	mov	r0, r5
 8009f12:	bd38      	pop	{r3, r4, r5, pc}
 8009f14:	b118      	cbz	r0, 8009f1e <_fflush_r+0x1a>
 8009f16:	6983      	ldr	r3, [r0, #24]
 8009f18:	b90b      	cbnz	r3, 8009f1e <_fflush_r+0x1a>
 8009f1a:	f000 f887 	bl	800a02c <__sinit>
 8009f1e:	4b14      	ldr	r3, [pc, #80]	; (8009f70 <_fflush_r+0x6c>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	d11b      	bne.n	8009f5c <_fflush_r+0x58>
 8009f24:	686c      	ldr	r4, [r5, #4]
 8009f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0ef      	beq.n	8009f0e <_fflush_r+0xa>
 8009f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f30:	07d0      	lsls	r0, r2, #31
 8009f32:	d404      	bmi.n	8009f3e <_fflush_r+0x3a>
 8009f34:	0599      	lsls	r1, r3, #22
 8009f36:	d402      	bmi.n	8009f3e <_fflush_r+0x3a>
 8009f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f3a:	f000 f915 	bl	800a168 <__retarget_lock_acquire_recursive>
 8009f3e:	4628      	mov	r0, r5
 8009f40:	4621      	mov	r1, r4
 8009f42:	f7ff ff59 	bl	8009df8 <__sflush_r>
 8009f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f48:	07da      	lsls	r2, r3, #31
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	d4e0      	bmi.n	8009f10 <_fflush_r+0xc>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	059b      	lsls	r3, r3, #22
 8009f52:	d4dd      	bmi.n	8009f10 <_fflush_r+0xc>
 8009f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f56:	f000 f909 	bl	800a16c <__retarget_lock_release_recursive>
 8009f5a:	e7d9      	b.n	8009f10 <_fflush_r+0xc>
 8009f5c:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <_fflush_r+0x70>)
 8009f5e:	429c      	cmp	r4, r3
 8009f60:	d101      	bne.n	8009f66 <_fflush_r+0x62>
 8009f62:	68ac      	ldr	r4, [r5, #8]
 8009f64:	e7df      	b.n	8009f26 <_fflush_r+0x22>
 8009f66:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <_fflush_r+0x74>)
 8009f68:	429c      	cmp	r4, r3
 8009f6a:	bf08      	it	eq
 8009f6c:	68ec      	ldreq	r4, [r5, #12]
 8009f6e:	e7da      	b.n	8009f26 <_fflush_r+0x22>
 8009f70:	0800ae08 	.word	0x0800ae08
 8009f74:	0800ae28 	.word	0x0800ae28
 8009f78:	0800ade8 	.word	0x0800ade8

08009f7c <std>:
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	b510      	push	{r4, lr}
 8009f80:	4604      	mov	r4, r0
 8009f82:	e9c0 3300 	strd	r3, r3, [r0]
 8009f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f8a:	6083      	str	r3, [r0, #8]
 8009f8c:	8181      	strh	r1, [r0, #12]
 8009f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8009f90:	81c2      	strh	r2, [r0, #14]
 8009f92:	6183      	str	r3, [r0, #24]
 8009f94:	4619      	mov	r1, r3
 8009f96:	2208      	movs	r2, #8
 8009f98:	305c      	adds	r0, #92	; 0x5c
 8009f9a:	f7ff f9e1 	bl	8009360 <memset>
 8009f9e:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <std+0x38>)
 8009fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8009fa2:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <std+0x3c>)
 8009fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fa6:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <std+0x40>)
 8009fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009faa:	4b05      	ldr	r3, [pc, #20]	; (8009fc0 <std+0x44>)
 8009fac:	6224      	str	r4, [r4, #32]
 8009fae:	6323      	str	r3, [r4, #48]	; 0x30
 8009fb0:	bd10      	pop	{r4, pc}
 8009fb2:	bf00      	nop
 8009fb4:	0800a251 	.word	0x0800a251
 8009fb8:	0800a273 	.word	0x0800a273
 8009fbc:	0800a2ab 	.word	0x0800a2ab
 8009fc0:	0800a2cf 	.word	0x0800a2cf

08009fc4 <_cleanup_r>:
 8009fc4:	4901      	ldr	r1, [pc, #4]	; (8009fcc <_cleanup_r+0x8>)
 8009fc6:	f000 b8af 	b.w	800a128 <_fwalk_reent>
 8009fca:	bf00      	nop
 8009fcc:	08009f05 	.word	0x08009f05

08009fd0 <__sfmoreglue>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	2268      	movs	r2, #104	; 0x68
 8009fd4:	1e4d      	subs	r5, r1, #1
 8009fd6:	4355      	muls	r5, r2
 8009fd8:	460e      	mov	r6, r1
 8009fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fde:	f7ff fa33 	bl	8009448 <_malloc_r>
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	b140      	cbz	r0, 8009ff8 <__sfmoreglue+0x28>
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8009fec:	300c      	adds	r0, #12
 8009fee:	60a0      	str	r0, [r4, #8]
 8009ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ff4:	f7ff f9b4 	bl	8009360 <memset>
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}

08009ffc <__sfp_lock_acquire>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	; (800a004 <__sfp_lock_acquire+0x8>)
 8009ffe:	f000 b8b3 	b.w	800a168 <__retarget_lock_acquire_recursive>
 800a002:	bf00      	nop
 800a004:	240009ca 	.word	0x240009ca

0800a008 <__sfp_lock_release>:
 800a008:	4801      	ldr	r0, [pc, #4]	; (800a010 <__sfp_lock_release+0x8>)
 800a00a:	f000 b8af 	b.w	800a16c <__retarget_lock_release_recursive>
 800a00e:	bf00      	nop
 800a010:	240009ca 	.word	0x240009ca

0800a014 <__sinit_lock_acquire>:
 800a014:	4801      	ldr	r0, [pc, #4]	; (800a01c <__sinit_lock_acquire+0x8>)
 800a016:	f000 b8a7 	b.w	800a168 <__retarget_lock_acquire_recursive>
 800a01a:	bf00      	nop
 800a01c:	240009cb 	.word	0x240009cb

0800a020 <__sinit_lock_release>:
 800a020:	4801      	ldr	r0, [pc, #4]	; (800a028 <__sinit_lock_release+0x8>)
 800a022:	f000 b8a3 	b.w	800a16c <__retarget_lock_release_recursive>
 800a026:	bf00      	nop
 800a028:	240009cb 	.word	0x240009cb

0800a02c <__sinit>:
 800a02c:	b510      	push	{r4, lr}
 800a02e:	4604      	mov	r4, r0
 800a030:	f7ff fff0 	bl	800a014 <__sinit_lock_acquire>
 800a034:	69a3      	ldr	r3, [r4, #24]
 800a036:	b11b      	cbz	r3, 800a040 <__sinit+0x14>
 800a038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a03c:	f7ff bff0 	b.w	800a020 <__sinit_lock_release>
 800a040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a044:	6523      	str	r3, [r4, #80]	; 0x50
 800a046:	4b13      	ldr	r3, [pc, #76]	; (800a094 <__sinit+0x68>)
 800a048:	4a13      	ldr	r2, [pc, #76]	; (800a098 <__sinit+0x6c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a04e:	42a3      	cmp	r3, r4
 800a050:	bf04      	itt	eq
 800a052:	2301      	moveq	r3, #1
 800a054:	61a3      	streq	r3, [r4, #24]
 800a056:	4620      	mov	r0, r4
 800a058:	f000 f820 	bl	800a09c <__sfp>
 800a05c:	6060      	str	r0, [r4, #4]
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 f81c 	bl	800a09c <__sfp>
 800a064:	60a0      	str	r0, [r4, #8]
 800a066:	4620      	mov	r0, r4
 800a068:	f000 f818 	bl	800a09c <__sfp>
 800a06c:	2200      	movs	r2, #0
 800a06e:	60e0      	str	r0, [r4, #12]
 800a070:	2104      	movs	r1, #4
 800a072:	6860      	ldr	r0, [r4, #4]
 800a074:	f7ff ff82 	bl	8009f7c <std>
 800a078:	68a0      	ldr	r0, [r4, #8]
 800a07a:	2201      	movs	r2, #1
 800a07c:	2109      	movs	r1, #9
 800a07e:	f7ff ff7d 	bl	8009f7c <std>
 800a082:	68e0      	ldr	r0, [r4, #12]
 800a084:	2202      	movs	r2, #2
 800a086:	2112      	movs	r1, #18
 800a088:	f7ff ff78 	bl	8009f7c <std>
 800a08c:	2301      	movs	r3, #1
 800a08e:	61a3      	str	r3, [r4, #24]
 800a090:	e7d2      	b.n	800a038 <__sinit+0xc>
 800a092:	bf00      	nop
 800a094:	0800adac 	.word	0x0800adac
 800a098:	08009fc5 	.word	0x08009fc5

0800a09c <__sfp>:
 800a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09e:	4607      	mov	r7, r0
 800a0a0:	f7ff ffac 	bl	8009ffc <__sfp_lock_acquire>
 800a0a4:	4b1e      	ldr	r3, [pc, #120]	; (800a120 <__sfp+0x84>)
 800a0a6:	681e      	ldr	r6, [r3, #0]
 800a0a8:	69b3      	ldr	r3, [r6, #24]
 800a0aa:	b913      	cbnz	r3, 800a0b2 <__sfp+0x16>
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff ffbd 	bl	800a02c <__sinit>
 800a0b2:	3648      	adds	r6, #72	; 0x48
 800a0b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	d503      	bpl.n	800a0c4 <__sfp+0x28>
 800a0bc:	6833      	ldr	r3, [r6, #0]
 800a0be:	b30b      	cbz	r3, 800a104 <__sfp+0x68>
 800a0c0:	6836      	ldr	r6, [r6, #0]
 800a0c2:	e7f7      	b.n	800a0b4 <__sfp+0x18>
 800a0c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0c8:	b9d5      	cbnz	r5, 800a100 <__sfp+0x64>
 800a0ca:	4b16      	ldr	r3, [pc, #88]	; (800a124 <__sfp+0x88>)
 800a0cc:	60e3      	str	r3, [r4, #12]
 800a0ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0d2:	6665      	str	r5, [r4, #100]	; 0x64
 800a0d4:	f000 f847 	bl	800a166 <__retarget_lock_init_recursive>
 800a0d8:	f7ff ff96 	bl	800a008 <__sfp_lock_release>
 800a0dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0e4:	6025      	str	r5, [r4, #0]
 800a0e6:	61a5      	str	r5, [r4, #24]
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0f0:	f7ff f936 	bl	8009360 <memset>
 800a0f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a100:	3468      	adds	r4, #104	; 0x68
 800a102:	e7d9      	b.n	800a0b8 <__sfp+0x1c>
 800a104:	2104      	movs	r1, #4
 800a106:	4638      	mov	r0, r7
 800a108:	f7ff ff62 	bl	8009fd0 <__sfmoreglue>
 800a10c:	4604      	mov	r4, r0
 800a10e:	6030      	str	r0, [r6, #0]
 800a110:	2800      	cmp	r0, #0
 800a112:	d1d5      	bne.n	800a0c0 <__sfp+0x24>
 800a114:	f7ff ff78 	bl	800a008 <__sfp_lock_release>
 800a118:	230c      	movs	r3, #12
 800a11a:	603b      	str	r3, [r7, #0]
 800a11c:	e7ee      	b.n	800a0fc <__sfp+0x60>
 800a11e:	bf00      	nop
 800a120:	0800adac 	.word	0x0800adac
 800a124:	ffff0001 	.word	0xffff0001

0800a128 <_fwalk_reent>:
 800a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a12c:	4606      	mov	r6, r0
 800a12e:	4688      	mov	r8, r1
 800a130:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a134:	2700      	movs	r7, #0
 800a136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a13a:	f1b9 0901 	subs.w	r9, r9, #1
 800a13e:	d505      	bpl.n	800a14c <_fwalk_reent+0x24>
 800a140:	6824      	ldr	r4, [r4, #0]
 800a142:	2c00      	cmp	r4, #0
 800a144:	d1f7      	bne.n	800a136 <_fwalk_reent+0xe>
 800a146:	4638      	mov	r0, r7
 800a148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a14c:	89ab      	ldrh	r3, [r5, #12]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d907      	bls.n	800a162 <_fwalk_reent+0x3a>
 800a152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a156:	3301      	adds	r3, #1
 800a158:	d003      	beq.n	800a162 <_fwalk_reent+0x3a>
 800a15a:	4629      	mov	r1, r5
 800a15c:	4630      	mov	r0, r6
 800a15e:	47c0      	blx	r8
 800a160:	4307      	orrs	r7, r0
 800a162:	3568      	adds	r5, #104	; 0x68
 800a164:	e7e9      	b.n	800a13a <_fwalk_reent+0x12>

0800a166 <__retarget_lock_init_recursive>:
 800a166:	4770      	bx	lr

0800a168 <__retarget_lock_acquire_recursive>:
 800a168:	4770      	bx	lr

0800a16a <__retarget_lock_release>:
 800a16a:	4770      	bx	lr

0800a16c <__retarget_lock_release_recursive>:
 800a16c:	4770      	bx	lr

0800a16e <__swhatbuf_r>:
 800a16e:	b570      	push	{r4, r5, r6, lr}
 800a170:	460e      	mov	r6, r1
 800a172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a176:	2900      	cmp	r1, #0
 800a178:	b096      	sub	sp, #88	; 0x58
 800a17a:	4614      	mov	r4, r2
 800a17c:	461d      	mov	r5, r3
 800a17e:	da08      	bge.n	800a192 <__swhatbuf_r+0x24>
 800a180:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	602a      	str	r2, [r5, #0]
 800a188:	061a      	lsls	r2, r3, #24
 800a18a:	d410      	bmi.n	800a1ae <__swhatbuf_r+0x40>
 800a18c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a190:	e00e      	b.n	800a1b0 <__swhatbuf_r+0x42>
 800a192:	466a      	mov	r2, sp
 800a194:	f000 f8c2 	bl	800a31c <_fstat_r>
 800a198:	2800      	cmp	r0, #0
 800a19a:	dbf1      	blt.n	800a180 <__swhatbuf_r+0x12>
 800a19c:	9a01      	ldr	r2, [sp, #4]
 800a19e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1a6:	425a      	negs	r2, r3
 800a1a8:	415a      	adcs	r2, r3
 800a1aa:	602a      	str	r2, [r5, #0]
 800a1ac:	e7ee      	b.n	800a18c <__swhatbuf_r+0x1e>
 800a1ae:	2340      	movs	r3, #64	; 0x40
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	b016      	add	sp, #88	; 0x58
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}

0800a1b8 <__smakebuf_r>:
 800a1b8:	898b      	ldrh	r3, [r1, #12]
 800a1ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1bc:	079d      	lsls	r5, r3, #30
 800a1be:	4606      	mov	r6, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	d507      	bpl.n	800a1d4 <__smakebuf_r+0x1c>
 800a1c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	6123      	str	r3, [r4, #16]
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	6163      	str	r3, [r4, #20]
 800a1d0:	b002      	add	sp, #8
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	ab01      	add	r3, sp, #4
 800a1d6:	466a      	mov	r2, sp
 800a1d8:	f7ff ffc9 	bl	800a16e <__swhatbuf_r>
 800a1dc:	9900      	ldr	r1, [sp, #0]
 800a1de:	4605      	mov	r5, r0
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7ff f931 	bl	8009448 <_malloc_r>
 800a1e6:	b948      	cbnz	r0, 800a1fc <__smakebuf_r+0x44>
 800a1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ec:	059a      	lsls	r2, r3, #22
 800a1ee:	d4ef      	bmi.n	800a1d0 <__smakebuf_r+0x18>
 800a1f0:	f023 0303 	bic.w	r3, r3, #3
 800a1f4:	f043 0302 	orr.w	r3, r3, #2
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	e7e3      	b.n	800a1c4 <__smakebuf_r+0xc>
 800a1fc:	4b0d      	ldr	r3, [pc, #52]	; (800a234 <__smakebuf_r+0x7c>)
 800a1fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	6020      	str	r0, [r4, #0]
 800a204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	9b00      	ldr	r3, [sp, #0]
 800a20c:	6163      	str	r3, [r4, #20]
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	6120      	str	r0, [r4, #16]
 800a212:	b15b      	cbz	r3, 800a22c <__smakebuf_r+0x74>
 800a214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a218:	4630      	mov	r0, r6
 800a21a:	f000 f891 	bl	800a340 <_isatty_r>
 800a21e:	b128      	cbz	r0, 800a22c <__smakebuf_r+0x74>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	89a0      	ldrh	r0, [r4, #12]
 800a22e:	4305      	orrs	r5, r0
 800a230:	81a5      	strh	r5, [r4, #12]
 800a232:	e7cd      	b.n	800a1d0 <__smakebuf_r+0x18>
 800a234:	08009fc5 	.word	0x08009fc5

0800a238 <__malloc_lock>:
 800a238:	4801      	ldr	r0, [pc, #4]	; (800a240 <__malloc_lock+0x8>)
 800a23a:	f7ff bf95 	b.w	800a168 <__retarget_lock_acquire_recursive>
 800a23e:	bf00      	nop
 800a240:	240009c9 	.word	0x240009c9

0800a244 <__malloc_unlock>:
 800a244:	4801      	ldr	r0, [pc, #4]	; (800a24c <__malloc_unlock+0x8>)
 800a246:	f7ff bf91 	b.w	800a16c <__retarget_lock_release_recursive>
 800a24a:	bf00      	nop
 800a24c:	240009c9 	.word	0x240009c9

0800a250 <__sread>:
 800a250:	b510      	push	{r4, lr}
 800a252:	460c      	mov	r4, r1
 800a254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a258:	f000 f894 	bl	800a384 <_read_r>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	bfab      	itete	ge
 800a260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a262:	89a3      	ldrhlt	r3, [r4, #12]
 800a264:	181b      	addge	r3, r3, r0
 800a266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a26a:	bfac      	ite	ge
 800a26c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a26e:	81a3      	strhlt	r3, [r4, #12]
 800a270:	bd10      	pop	{r4, pc}

0800a272 <__swrite>:
 800a272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a276:	461f      	mov	r7, r3
 800a278:	898b      	ldrh	r3, [r1, #12]
 800a27a:	05db      	lsls	r3, r3, #23
 800a27c:	4605      	mov	r5, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	4616      	mov	r6, r2
 800a282:	d505      	bpl.n	800a290 <__swrite+0x1e>
 800a284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a288:	2302      	movs	r3, #2
 800a28a:	2200      	movs	r2, #0
 800a28c:	f000 f868 	bl	800a360 <_lseek_r>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a6:	f000 b817 	b.w	800a2d8 <_write_r>

0800a2aa <__sseek>:
 800a2aa:	b510      	push	{r4, lr}
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b2:	f000 f855 	bl	800a360 <_lseek_r>
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	bf15      	itete	ne
 800a2bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2c6:	81a3      	strheq	r3, [r4, #12]
 800a2c8:	bf18      	it	ne
 800a2ca:	81a3      	strhne	r3, [r4, #12]
 800a2cc:	bd10      	pop	{r4, pc}

0800a2ce <__sclose>:
 800a2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d2:	f000 b813 	b.w	800a2fc <_close_r>
	...

0800a2d8 <_write_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d07      	ldr	r5, [pc, #28]	; (800a2f8 <_write_r+0x20>)
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f7f6 fe8d 	bl	8001006 <_write>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_write_r+0x1e>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_write_r+0x1e>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	240009cc 	.word	0x240009cc

0800a2fc <_close_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d06      	ldr	r5, [pc, #24]	; (800a318 <_close_r+0x1c>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	602b      	str	r3, [r5, #0]
 800a308:	f7f6 fe8a 	bl	8001020 <_close>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_close_r+0x1a>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	b103      	cbz	r3, 800a316 <_close_r+0x1a>
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	240009cc 	.word	0x240009cc

0800a31c <_fstat_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d07      	ldr	r5, [pc, #28]	; (800a33c <_fstat_r+0x20>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	f7f6 fe7c 	bl	8001026 <_fstat>
 800a32e:	1c43      	adds	r3, r0, #1
 800a330:	d102      	bne.n	800a338 <_fstat_r+0x1c>
 800a332:	682b      	ldr	r3, [r5, #0]
 800a334:	b103      	cbz	r3, 800a338 <_fstat_r+0x1c>
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	bf00      	nop
 800a33c:	240009cc 	.word	0x240009cc

0800a340 <_isatty_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d06      	ldr	r5, [pc, #24]	; (800a35c <_isatty_r+0x1c>)
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	f7f6 fe70 	bl	8001030 <_isatty>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d102      	bne.n	800a35a <_isatty_r+0x1a>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	b103      	cbz	r3, 800a35a <_isatty_r+0x1a>
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	240009cc 	.word	0x240009cc

0800a360 <_lseek_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d07      	ldr	r5, [pc, #28]	; (800a380 <_lseek_r+0x20>)
 800a364:	4604      	mov	r4, r0
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	f7f6 fe60 	bl	8001034 <_lseek>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_lseek_r+0x1e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_lseek_r+0x1e>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	240009cc 	.word	0x240009cc

0800a384 <_read_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	; (800a3a4 <_read_r+0x20>)
 800a388:	4604      	mov	r4, r0
 800a38a:	4608      	mov	r0, r1
 800a38c:	4611      	mov	r1, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f7f6 fe2a 	bl	8000fec <_read>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_read_r+0x1e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_read_r+0x1e>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	240009cc 	.word	0x240009cc

0800a3a8 <_init>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	bf00      	nop
 800a3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ae:	bc08      	pop	{r3}
 800a3b0:	469e      	mov	lr, r3
 800a3b2:	4770      	bx	lr

0800a3b4 <_fini>:
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b6:	bf00      	nop
 800a3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ba:	bc08      	pop	{r3}
 800a3bc:	469e      	mov	lr, r3
 800a3be:	4770      	bx	lr
