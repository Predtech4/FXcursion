
h743vi_empty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800dcf8  0800dcf8  0001dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800dee4  0800dee4  0001dee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800dee8  0800dee8  0001dee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  24000000  0800deec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00008ef8  24000094  0800df80  00020094  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24008f8c  0800df80  00028f8c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .debug_info   00024193  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004661  00000000  00000000  00044255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001bd8  00000000  00000000  000488b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000019f0  00000000  00000000  0004a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00006831  00000000  00000000  0004be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002281d  00000000  00000000  000526b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016de8a  00000000  00000000  00074ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e2d58  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007774  00000000  00000000  001e2da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dce0 	.word	0x0800dce0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	0800dce0 	.word	0x0800dce0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint8_t cnt  = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002fa:	f000 f9e9 	bl	80006d0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <main+0xa0>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000306:	2b00      	cmp	r3, #0
 8000308:	d11b      	bne.n	8000342 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800030a:	f3bf 8f4f 	dsb	sy
}
 800030e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000310:	f3bf 8f6f 	isb	sy
}
 8000314:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <main+0xa0>)
 8000318:	2200      	movs	r2, #0
 800031a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800031e:	f3bf 8f4f 	dsb	sy
}
 8000322:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000324:	f3bf 8f6f 	isb	sy
}
 8000328:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800032a:	4b19      	ldr	r3, [pc, #100]	; (8000390 <main+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a18      	ldr	r2, [pc, #96]	; (8000390 <main+0xa0>)
 8000330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000334:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000336:	f3bf 8f4f 	dsb	sy
}
 800033a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800033c:	f3bf 8f6f 	isb	sy
}
 8000340:	e000      	b.n	8000344 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000342:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000344:	f000 fc0a 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000348:	f000 f830 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034c:	f000 f8fc 	bl	8000548 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000350:	f000 f8dc 	bl	800050c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000354:	f006 fe8c 	bl	8007070 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000358:	f00a f90e 	bl	800a578 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <main+0xa4>)
 800035e:	2100      	movs	r1, #0
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <main+0xa8>)
 8000362:	f00a f98a 	bl	800a67a <osThreadNew>
 8000366:	4603      	mov	r3, r0
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <main+0xac>)
 800036a:	6013      	str	r3, [r2, #0]

  /* creation of writeSDTask */
  writeSDTaskHandle = osThreadNew(StartWriteSDTask, NULL, &writeSDTask_attributes);
 800036c:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <main+0xb0>)
 800036e:	2100      	movs	r1, #0
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <main+0xb4>)
 8000372:	f00a f982 	bl	800a67a <osThreadNew>
 8000376:	4603      	mov	r3, r0
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <main+0xb8>)
 800037a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800037c:	f00a f942 	bl	800a604 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cnt++;
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	3301      	adds	r3, #1
 8000384:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(1000);
 8000386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038a:	f000 fc43 	bl	8000c14 <HAL_Delay>
	  cnt++;
 800038e:	e7f7      	b.n	8000380 <main+0x90>
 8000390:	e000ed00 	.word	0xe000ed00
 8000394:	0800dd78 	.word	0x0800dd78
 8000398:	08000601 	.word	0x08000601
 800039c:	2400012c 	.word	0x2400012c
 80003a0:	0800dd9c 	.word	0x0800dd9c
 80003a4:	08000611 	.word	0x08000611
 80003a8:	240003fc 	.word	0x240003fc

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b09e      	sub	sp, #120	; 0x78
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003b6:	224c      	movs	r2, #76	; 0x4c
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f00d fbc6 	bl	800db4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	2220      	movs	r2, #32
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f00d fbbf 	bl	800db4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ce:	2002      	movs	r0, #2
 80003d0:	f000 ff74 	bl	80012bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003d4:	2300      	movs	r3, #0
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	4b49      	ldr	r3, [pc, #292]	; (8000500 <SystemClock_Config+0x154>)
 80003da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003dc:	4a48      	ldr	r2, [pc, #288]	; (8000500 <SystemClock_Config+0x154>)
 80003de:	f023 0301 	bic.w	r3, r3, #1
 80003e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003e4:	4b46      	ldr	r3, [pc, #280]	; (8000500 <SystemClock_Config+0x154>)
 80003e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	4b45      	ldr	r3, [pc, #276]	; (8000504 <SystemClock_Config+0x158>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a44      	ldr	r2, [pc, #272]	; (8000504 <SystemClock_Config+0x158>)
 80003f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b42      	ldr	r3, [pc, #264]	; (8000504 <SystemClock_Config+0x158>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000406:	bf00      	nop
 8000408:	4b3e      	ldr	r3, [pc, #248]	; (8000504 <SystemClock_Config+0x158>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000414:	d1f8      	bne.n	8000408 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000416:	4b3c      	ldr	r3, [pc, #240]	; (8000508 <SystemClock_Config+0x15c>)
 8000418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800041c:	4a3a      	ldr	r2, [pc, #232]	; (8000508 <SystemClock_Config+0x15c>)
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000426:	4b38      	ldr	r3, [pc, #224]	; (8000508 <SystemClock_Config+0x15c>)
 8000428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800042c:	f003 0302 	and.w	r3, r3, #2
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000434:	2300      	movs	r3, #0
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	4b32      	ldr	r3, [pc, #200]	; (8000504 <SystemClock_Config+0x158>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a31      	ldr	r2, [pc, #196]	; (8000504 <SystemClock_Config+0x158>)
 800043e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b2f      	ldr	r3, [pc, #188]	; (8000504 <SystemClock_Config+0x158>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <SystemClock_Config+0x154>)
 8000450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000452:	4a2b      	ldr	r2, [pc, #172]	; (8000500 <SystemClock_Config+0x154>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	62d3      	str	r3, [r2, #44]	; 0x2c
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <SystemClock_Config+0x154>)
 800045c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000466:	bf00      	nop
 8000468:	4b26      	ldr	r3, [pc, #152]	; (8000504 <SystemClock_Config+0x158>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000474:	d1f8      	bne.n	8000468 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000476:	2301      	movs	r3, #1
 8000478:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000480:	2302      	movs	r3, #2
 8000482:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000484:	2302      	movs	r3, #2
 8000486:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000488:	2304      	movs	r3, #4
 800048a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 160;
 800048c:	23a0      	movs	r3, #160	; 0xa0
 800048e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000490:	2302      	movs	r3, #2
 8000492:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000494:	2314      	movs	r3, #20
 8000496:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000498:	2302      	movs	r3, #2
 800049a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800049c:	2308      	movs	r3, #8
 800049e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 ff3f 	bl	8001330 <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x110>
  {
    Error_Handler();
 80004b8:	f000 f950 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	233f      	movs	r3, #63	; 0x3f
 80004be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	2303      	movs	r3, #3
 80004c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004c8:	2308      	movs	r3, #8
 80004ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004cc:	2340      	movs	r3, #64	; 0x40
 80004ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004d0:	2340      	movs	r3, #64	; 0x40
 80004d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004da:	2340      	movs	r3, #64	; 0x40
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2104      	movs	r1, #4
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fb51 	bl	8001b8c <HAL_RCC_ClockConfig>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80004f0:	f000 f934 	bl	800075c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80004f4:	f001 fd00 	bl	8001ef8 <HAL_RCC_EnableCSS>
}
 80004f8:	bf00      	nop
 80004fa:	3778      	adds	r7, #120	; 0x78
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	58000400 	.word	0x58000400
 8000504:	58024800 	.word	0x58024800
 8000508:	58024400 	.word	0x58024400

0800050c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_SDMMC1_SD_Init+0x34>)
 8000512:	4a0c      	ldr	r2, [pc, #48]	; (8000544 <MX_SDMMC1_SD_Init+0x38>)
 8000514:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <MX_SDMMC1_SD_Init+0x34>)
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_SDMMC1_SD_Init+0x34>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <MX_SDMMC1_SD_Init+0x34>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <MX_SDMMC1_SD_Init+0x34>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <MX_SDMMC1_SD_Init+0x34>)
 8000530:	2201      	movs	r2, #1
 8000532:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	240000b0 	.word	0x240000b0
 8000544:	52007000 	.word	0x52007000

08000548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <MX_GPIO_Init+0xb0>)
 8000560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000564:	4a24      	ldr	r2, [pc, #144]	; (80005f8 <MX_GPIO_Init+0xb0>)
 8000566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <MX_GPIO_Init+0xb0>)
 8000570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_GPIO_Init+0xb0>)
 800057e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000582:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <MX_GPIO_Init+0xb0>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_GPIO_Init+0xb0>)
 800058e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_GPIO_Init+0xb0>)
 800059c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <MX_GPIO_Init+0xb0>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_GPIO_Init+0xb0>)
 80005ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_GPIO_Init+0xb0>)
 80005ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <MX_GPIO_Init+0xb0>)
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_GPIO_Init+0xb0>)
 80005ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005d6:	2301      	movs	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_GPIO_Init+0xb4>)
 80005ea:	f000 fc9f 	bl	8000f2c <HAL_GPIO_Init>

}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	; 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	58024400 	.word	0x58024400
 80005fc:	58020800 	.word	0x58020800

08000600 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f00a f8c8 	bl	800a79e <osDelay>
 800060e:	e7fb      	b.n	8000608 <StartDefaultTask+0x8>

08000610 <StartWriteSDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteSDTask */
void StartWriteSDTask(void *argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteSDTask */
  /* Infinite loop */
  for(;;)
  {
	  	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8000618:	2200      	movs	r2, #0
 800061a:	4924      	ldr	r1, [pc, #144]	; (80006ac <StartWriteSDTask+0x9c>)
 800061c:	4824      	ldr	r0, [pc, #144]	; (80006b0 <StartWriteSDTask+0xa0>)
 800061e:	f008 fdc3 	bl	80091a8 <f_mount>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <StartWriteSDTask+0x1e>
	  	{
	  		Error_Handler();
 8000628:	f000 f898 	bl	800075c <Error_Handler>
 800062c:	e034      	b.n	8000698 <StartWriteSDTask+0x88>
	  	}
	  	else
	  	{
	  		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <StartWriteSDTask+0xa4>)
 8000636:	2200      	movs	r2, #0
 8000638:	2107      	movs	r1, #7
 800063a:	481c      	ldr	r0, [pc, #112]	; (80006ac <StartWriteSDTask+0x9c>)
 800063c:	f009 fa66 	bl	8009b0c <f_mkfs>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <StartWriteSDTask+0x3c>
	  	    {
	  			Error_Handler();
 8000646:	f000 f889 	bl	800075c <Error_Handler>
 800064a:	e025      	b.n	8000698 <StartWriteSDTask+0x88>
	  	    }
	  		else
	  		{
	  			//Open file for writing (Create)
	  			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800064c:	220a      	movs	r2, #10
 800064e:	491a      	ldr	r1, [pc, #104]	; (80006b8 <StartWriteSDTask+0xa8>)
 8000650:	481a      	ldr	r0, [pc, #104]	; (80006bc <StartWriteSDTask+0xac>)
 8000652:	f008 fe0d 	bl	8009270 <f_open>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <StartWriteSDTask+0x52>
	  			{
	  				Error_Handler();
 800065c:	f000 f87e 	bl	800075c <Error_Handler>
 8000660:	e01a      	b.n	8000698 <StartWriteSDTask+0x88>
	  			}
	  			else
	  			{

	  				//Write to the text file
	  				res = f_write(&SDFile, (void *)wtext, strlen((char *)wtext), (UINT *)&byteswritten);
 8000662:	4817      	ldr	r0, [pc, #92]	; (80006c0 <StartWriteSDTask+0xb0>)
 8000664:	f7ff fe3c 	bl	80002e0 <strlen>
 8000668:	4602      	mov	r2, r0
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <StartWriteSDTask+0xb4>)
 800066c:	4914      	ldr	r1, [pc, #80]	; (80006c0 <StartWriteSDTask+0xb0>)
 800066e:	4813      	ldr	r0, [pc, #76]	; (80006bc <StartWriteSDTask+0xac>)
 8000670:	f008 ffd1 	bl	8009616 <f_write>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <StartWriteSDTask+0xb8>)
 800067a:	701a      	strb	r2, [r3, #0]
	  				if((byteswritten == 0) || (res != FR_OK))
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <StartWriteSDTask+0xb4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <StartWriteSDTask+0x7c>
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <StartWriteSDTask+0xb8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <StartWriteSDTask+0x82>
	  				{
	  					Error_Handler();
 800068c:	f000 f866 	bl	800075c <Error_Handler>
 8000690:	e002      	b.n	8000698 <StartWriteSDTask+0x88>
	  				}
	  				else
	  				{

	  					f_close(&SDFile);
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <StartWriteSDTask+0xac>)
 8000694:	f009 fa0b 	bl	8009aae <f_close>
	  				}
	  			}
	  		}
	  	}
	  	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <StartWriteSDTask+0xa0>)
 800069e:	f008 fd83 	bl	80091a8 <f_mount>
    osDelay(1000000);
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <StartWriteSDTask+0xbc>)
 80006a4:	f00a f87b 	bl	800a79e <osDelay>
	  	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80006a8:	e7b6      	b.n	8000618 <StartWriteSDTask+0x8>
 80006aa:	bf00      	nop
 80006ac:	240024c8 	.word	0x240024c8
 80006b0:	240024cc 	.word	0x240024cc
 80006b4:	24001474 	.word	0x24001474
 80006b8:	0800dd10 	.word	0x0800dd10
 80006bc:	24003504 	.word	0x24003504
 80006c0:	24000000 	.word	0x24000000
 80006c4:	24001470 	.word	0x24001470
 80006c8:	2400146c 	.word	0x2400146c
 80006cc:	000f4240 	.word	0x000f4240

080006d0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006e2:	f000 fba7 	bl	8000e34 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006e6:	2301      	movs	r3, #1
 80006e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80006ee:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80006f2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80006f4:	2317      	movs	r3, #23
 80006f6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000700:	2303      	movs	r3, #3
 8000702:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000704:	2301      	movs	r3, #1
 8000706:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800070c:	2301      	movs	r3, #1
 800070e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000710:	2301      	movs	r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000714:	463b      	mov	r3, r7
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fbc4 	bl	8000ea4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800071c:	2301      	movs	r3, #1
 800071e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000720:	2313      	movs	r3, #19
 8000722:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000728:	463b      	mov	r3, r7
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fbba 	bl	8000ea4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000730:	2004      	movs	r0, #4
 8000732:	f000 fb97 	bl	8000e64 <HAL_MPU_Enable>

}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800074e:	d101      	bne.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000750:	f000 fa40 	bl	8000bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x38>)
 8000770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000774:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_MspInit+0x38>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x38>)
 8000780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	210f      	movs	r1, #15
 8000790:	f06f 0001 	mvn.w	r0, #1
 8000794:	f000 fb26 	bl	8000de4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	58024400 	.word	0x58024400

080007a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0ba      	sub	sp, #232	; 0xe8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	22bc      	movs	r2, #188	; 0xbc
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f00d f9c1 	bl	800db4c <memset>
  if(hsd->Instance==SDMMC1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a3b      	ldr	r2, [pc, #236]	; (80008bc <HAL_SD_MspInit+0x118>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d16e      	bne.n	80008b2 <HAL_SD_MspInit+0x10e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80007da:	2300      	movs	r3, #0
 80007dc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fdb6 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 80007ee:	f7ff ffb5 	bl	800075c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <HAL_SD_MspInit+0x11c>)
 80007f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80007f8:	4a31      	ldr	r2, [pc, #196]	; (80008c0 <HAL_SD_MspInit+0x11c>)
 80007fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007fe:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000802:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <HAL_SD_MspInit+0x11c>)
 8000804:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <HAL_SD_MspInit+0x11c>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	4a2a      	ldr	r2, [pc, #168]	; (80008c0 <HAL_SD_MspInit+0x11c>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <HAL_SD_MspInit+0x11c>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <HAL_SD_MspInit+0x11c>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <HAL_SD_MspInit+0x11c>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <HAL_SD_MspInit+0x11c>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800084c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085a:	2301      	movs	r3, #1
 800085c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000866:	230c      	movs	r3, #12
 8000868:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000870:	4619      	mov	r1, r3
 8000872:	4814      	ldr	r0, [pc, #80]	; (80008c4 <HAL_SD_MspInit+0x120>)
 8000874:	f000 fb5a 	bl	8000f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000878:	2304      	movs	r3, #4
 800087a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000890:	230c      	movs	r3, #12
 8000892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000896:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800089a:	4619      	mov	r1, r3
 800089c:	480a      	ldr	r0, [pc, #40]	; (80008c8 <HAL_SD_MspInit+0x124>)
 800089e:	f000 fb45 	bl	8000f2c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	2031      	movs	r0, #49	; 0x31
 80008a8:	f000 fa9c 	bl	8000de4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008ac:	2031      	movs	r0, #49	; 0x31
 80008ae:	f000 fab3 	bl	8000e18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80008b2:	bf00      	nop
 80008b4:	37e8      	adds	r7, #232	; 0xe8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	52007000 	.word	0x52007000
 80008c0:	58024400 	.word	0x58024400
 80008c4:	58020800 	.word	0x58020800
 80008c8:	58020c00 	.word	0x58020c00

080008cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	; 0x40
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d827      	bhi.n	800092a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 80008da:	2200      	movs	r2, #0
 80008dc:	6879      	ldr	r1, [r7, #4]
 80008de:	201c      	movs	r0, #28
 80008e0:	f000 fa80 	bl	8000de4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008e4:	201c      	movs	r0, #28
 80008e6:	f000 fa97 	bl	8000e18 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80008ea:	4a29      	ldr	r2, [pc, #164]	; (8000990 <HAL_InitTick+0xc4>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <HAL_InitTick+0xc8>)
 80008f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008f6:	4a27      	ldr	r2, [pc, #156]	; (8000994 <HAL_InitTick+0xc8>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <HAL_InitTick+0xc8>)
 8000902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090e:	f107 0210 	add.w	r2, r7, #16
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fcbd 	bl	8002298 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000924:	2b00      	cmp	r3, #0
 8000926:	d106      	bne.n	8000936 <HAL_InitTick+0x6a>
 8000928:	e001      	b.n	800092e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e02c      	b.n	8000988 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800092e:	f001 fc9d 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 8000932:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000934:	e004      	b.n	8000940 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000936:	f001 fc99 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 800093a:	4603      	mov	r3, r0
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000942:	4a15      	ldr	r2, [pc, #84]	; (8000998 <HAL_InitTick+0xcc>)
 8000944:	fba2 2303 	umull	r2, r3, r2, r3
 8000948:	0c9b      	lsrs	r3, r3, #18
 800094a:	3b01      	subs	r3, #1
 800094c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_InitTick+0xd0>)
 8000950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_InitTick+0xd0>)
 8000958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_InitTick+0xd0>)
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_InitTick+0xd0>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_InitTick+0xd0>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000970:	480a      	ldr	r0, [pc, #40]	; (800099c <HAL_InitTick+0xd0>)
 8000972:	f005 fad9 	bl	8005f28 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d104      	bne.n	8000986 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800097c:	4807      	ldr	r0, [pc, #28]	; (800099c <HAL_InitTick+0xd0>)
 800097e:	f005 fb35 	bl	8005fec <HAL_TIM_Base_Start_IT>
 8000982:	4603      	mov	r3, r0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3740      	adds	r7, #64	; 0x40
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000024 	.word	0x24000024
 8000994:	58024400 	.word	0x58024400
 8000998:	431bde83 	.word	0x431bde83
 800099c:	24002474 	.word	0x24002474

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80009a4:	f001 fcba 	bl	800231c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x8>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <TIM2_IRQHandler+0x10>)
 80009d6:	f005 fb81 	bl	80060dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	24002474 	.word	0x24002474

080009e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <SDMMC1_IRQHandler+0x10>)
 80009ea:	f004 f8a9 	bl	8004b40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	240000b0 	.word	0x240000b0

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
 /* USER CODE END 0 */


  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <SystemInit+0xe4>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a36      	ldr	r2, [pc, #216]	; (8000adc <SystemInit+0xe4>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a0c:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <SystemInit+0xe8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 030f 	and.w	r3, r3, #15
 8000a14:	2b06      	cmp	r3, #6
 8000a16:	d807      	bhi.n	8000a28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a18:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <SystemInit+0xe8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f023 030f 	bic.w	r3, r3, #15
 8000a20:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <SystemInit+0xe8>)
 8000a22:	f043 0307 	orr.w	r3, r3, #7
 8000a26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <SystemInit+0xec>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ae4 <SystemInit+0xec>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <SystemInit+0xec>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <SystemInit+0xec>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4929      	ldr	r1, [pc, #164]	; (8000ae4 <SystemInit+0xec>)
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <SystemInit+0xf0>)
 8000a42:	4013      	ands	r3, r2
 8000a44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <SystemInit+0xe8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d007      	beq.n	8000a62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <SystemInit+0xe8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f023 030f 	bic.w	r3, r3, #15
 8000a5a:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <SystemInit+0xe8>)
 8000a5c:	f043 0307 	orr.w	r3, r3, #7
 8000a60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <SystemInit+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <SystemInit+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <SystemInit+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <SystemInit+0xec>)
 8000a76:	4a1d      	ldr	r2, [pc, #116]	; (8000aec <SystemInit+0xf4>)
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <SystemInit+0xec>)
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <SystemInit+0xf8>)
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <SystemInit+0xec>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <SystemInit+0xfc>)
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <SystemInit+0xec>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <SystemInit+0xec>)
 8000a8e:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <SystemInit+0xfc>)
 8000a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <SystemInit+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <SystemInit+0xec>)
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <SystemInit+0xfc>)
 8000a9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <SystemInit+0xec>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <SystemInit+0xec>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <SystemInit+0xec>)
 8000aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <SystemInit+0xec>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <SystemInit+0x100>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <SystemInit+0x104>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ac2:	d202      	bcs.n	8000aca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <SystemInit+0x108>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <SystemInit+0x10c>)
 8000acc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ad0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00
 8000ae0:	52002000 	.word	0x52002000
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000aec:	02020200 	.word	0x02020200
 8000af0:	01ff0000 	.word	0x01ff0000
 8000af4:	01010280 	.word	0x01010280
 8000af8:	5c001000 	.word	0x5c001000
 8000afc:	ffff0000 	.word	0xffff0000
 8000b00:	51008108 	.word	0x51008108
 8000b04:	52004000 	.word	0x52004000

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff ff74 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f00c ffd5 	bl	800dae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fbd9 	bl	80002f0 <main>
  bx  lr
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b48:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8000b4c:	0800deec 	.word	0x0800deec
  ldr r2, =_sbss
 8000b50:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 8000b54:	24008f8c 	.word	0x24008f8c

08000b58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC3_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b62:	2003      	movs	r0, #3
 8000b64:	f000 f933 	bl	8000dce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b68:	f001 f9d6 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_Init+0x68>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	f003 030f 	and.w	r3, r3, #15
 8000b78:	4913      	ldr	r1, [pc, #76]	; (8000bc8 <HAL_Init+0x6c>)
 8000b7a:	5ccb      	ldrb	r3, [r1, r3]
 8000b7c:	f003 031f 	and.w	r3, r3, #31
 8000b80:	fa22 f303 	lsr.w	r3, r2, r3
 8000b84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_Init+0x68>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_Init+0x6c>)
 8000b90:	5cd3      	ldrb	r3, [r2, r3]
 8000b92:	f003 031f 	and.w	r3, r3, #31
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_Init+0x70>)
 8000b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_Init+0x74>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fe90 	bl	80008cc <HAL_InitTick>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e002      	b.n	8000bbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb6:	f7ff fdd7 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	0800ddc0 	.word	0x0800ddc0
 8000bcc:	24000020 	.word	0x24000020
 8000bd0:	2400001c 	.word	0x2400001c

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	24000028 	.word	0x24000028
 8000bf8:	240024c0 	.word	0x240024c0

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	240024c0 	.word	0x240024c0

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000028 	.word	0x24000028

08000c5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetREVID+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	0c1b      	lsrs	r3, r3, #16
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	5c001000 	.word	0x5c001000

08000c74 <__NVIC_SetPriorityGrouping>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	05fa0000 	.word	0x05fa0000

08000cbc <__NVIC_GetPriorityGrouping>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff4c 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff63 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb3 	bl	8000d68 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff82 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff56 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e38:	f3bf 8f5f 	dmb	sy
}
 8000e3c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <HAL_MPU_Disable+0x28>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_MPU_Disable+0x28>)
 8000e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e48:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_MPU_Disable+0x2c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	e000ed90 	.word	0xe000ed90

08000e64 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_MPU_Enable+0x38>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_MPU_Enable+0x3c>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <HAL_MPU_Enable+0x3c>)
 8000e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e80:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed90 	.word	0xe000ed90
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	785a      	ldrb	r2, [r3, #1]
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_MPU_ConfigRegion+0x84>)
 8000eb2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d029      	beq.n	8000f10 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000ebc:	4a1a      	ldr	r2, [pc, #104]	; (8000f28 <HAL_MPU_ConfigRegion+0x84>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7b1b      	ldrb	r3, [r3, #12]
 8000ec8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7adb      	ldrb	r3, [r3, #11]
 8000ece:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ed0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7a9b      	ldrb	r3, [r3, #10]
 8000ed6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ed8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7b5b      	ldrb	r3, [r3, #13]
 8000ede:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ee0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7b9b      	ldrb	r3, [r3, #14]
 8000ee6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ee8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7bdb      	ldrb	r3, [r3, #15]
 8000eee:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ef0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7a5b      	ldrb	r3, [r3, #9]
 8000ef6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ef8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7a1b      	ldrb	r3, [r3, #8]
 8000efe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f00:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f0a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f0c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000f0e:	e005      	b.n	8000f1c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_MPU_ConfigRegion+0x84>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_MPU_ConfigRegion+0x84>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed90 	.word	0xe000ed90

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f3a:	4b89      	ldr	r3, [pc, #548]	; (8001160 <HAL_GPIO_Init+0x234>)
 8000f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f3e:	e194      	b.n	800126a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8186 	beq.w	8001264 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d005      	beq.n	8000f70 <HAL_GPIO_Init+0x44>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	f003 0201 	and.w	r2, r3, #1
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d017      	beq.n	800100e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d123      	bne.n	8001062 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	69b9      	ldr	r1, [r7, #24]
 800105e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0203 	and.w	r2, r3, #3
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 80e0 	beq.w	8001264 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a4:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <HAL_GPIO_Init+0x238>)
 80010a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010aa:	4a2e      	ldr	r2, [pc, #184]	; (8001164 <HAL_GPIO_Init+0x238>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010b4:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <HAL_GPIO_Init+0x238>)
 80010b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c2:	4a29      	ldr	r2, [pc, #164]	; (8001168 <HAL_GPIO_Init+0x23c>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <HAL_GPIO_Init+0x240>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d052      	beq.n	8001194 <HAL_GPIO_Init+0x268>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <HAL_GPIO_Init+0x244>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d031      	beq.n	800115a <HAL_GPIO_Init+0x22e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <HAL_GPIO_Init+0x248>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <HAL_GPIO_Init+0x22a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_GPIO_Init+0x24c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d025      	beq.n	8001152 <HAL_GPIO_Init+0x226>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a1c      	ldr	r2, [pc, #112]	; (800117c <HAL_GPIO_Init+0x250>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01f      	beq.n	800114e <HAL_GPIO_Init+0x222>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <HAL_GPIO_Init+0x254>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d019      	beq.n	800114a <HAL_GPIO_Init+0x21e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_GPIO_Init+0x258>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0x21a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <HAL_GPIO_Init+0x25c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00d      	beq.n	8001142 <HAL_GPIO_Init+0x216>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a18      	ldr	r2, [pc, #96]	; (800118c <HAL_GPIO_Init+0x260>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d007      	beq.n	800113e <HAL_GPIO_Init+0x212>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_GPIO_Init+0x264>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d101      	bne.n	800113a <HAL_GPIO_Init+0x20e>
 8001136:	2309      	movs	r3, #9
 8001138:	e02d      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 800113a:	230a      	movs	r3, #10
 800113c:	e02b      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 800113e:	2308      	movs	r3, #8
 8001140:	e029      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 8001142:	2307      	movs	r3, #7
 8001144:	e027      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 8001146:	2306      	movs	r3, #6
 8001148:	e025      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 800114a:	2305      	movs	r3, #5
 800114c:	e023      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 800114e:	2304      	movs	r3, #4
 8001150:	e021      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 8001152:	2303      	movs	r3, #3
 8001154:	e01f      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 8001156:	2302      	movs	r3, #2
 8001158:	e01d      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 800115a:	2301      	movs	r3, #1
 800115c:	e01b      	b.n	8001196 <HAL_GPIO_Init+0x26a>
 800115e:	bf00      	nop
 8001160:	58000080 	.word	0x58000080
 8001164:	58024400 	.word	0x58024400
 8001168:	58000400 	.word	0x58000400
 800116c:	58020000 	.word	0x58020000
 8001170:	58020400 	.word	0x58020400
 8001174:	58020800 	.word	0x58020800
 8001178:	58020c00 	.word	0x58020c00
 800117c:	58021000 	.word	0x58021000
 8001180:	58021400 	.word	0x58021400
 8001184:	58021800 	.word	0x58021800
 8001188:	58021c00 	.word	0x58021c00
 800118c:	58022000 	.word	0x58022000
 8001190:	58022400 	.word	0x58022400
 8001194:	2300      	movs	r3, #0
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	f002 0203 	and.w	r2, r2, #3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4093      	lsls	r3, r2
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a6:	4938      	ldr	r1, [pc, #224]	; (8001288 <HAL_GPIO_Init+0x35c>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	3301      	adds	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	f47f ae63 	bne.w	8000f40 <HAL_GPIO_Init+0x14>
  }
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3724      	adds	r7, #36	; 0x24
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	58000400 	.word	0x58000400

0800128c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_PWREx_ConfigSupply+0x70>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d00a      	beq.n	80012e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_PWREx_ConfigSupply+0x70>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e01f      	b.n	8001322 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e01d      	b.n	8001322 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_PWREx_ConfigSupply+0x70>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f023 0207 	bic.w	r2, r3, #7
 80012ee:	490f      	ldr	r1, [pc, #60]	; (800132c <HAL_PWREx_ConfigSupply+0x70>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012f6:	f7ff fc81 	bl	8000bfc <HAL_GetTick>
 80012fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012fc:	e009      	b.n	8001312 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012fe:	f7ff fc7d 	bl	8000bfc <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800130c:	d901      	bls.n	8001312 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e007      	b.n	8001322 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_PWREx_ConfigSupply+0x70>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800131e:	d1ee      	bne.n	80012fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	58024800 	.word	0x58024800

08001330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f000 bc1d 	b.w	8001b7e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8087 	beq.w	8001460 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001352:	4b99      	ldr	r3, [pc, #612]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800135c:	4b96      	ldr	r3, [pc, #600]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001364:	2b10      	cmp	r3, #16
 8001366:	d007      	beq.n	8001378 <HAL_RCC_OscConfig+0x48>
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136a:	2b18      	cmp	r3, #24
 800136c:	d110      	bne.n	8001390 <HAL_RCC_OscConfig+0x60>
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d10b      	bne.n	8001390 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	4b8f      	ldr	r3, [pc, #572]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d06c      	beq.n	800145e <HAL_RCC_OscConfig+0x12e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d168      	bne.n	800145e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e3f6      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d106      	bne.n	80013a8 <HAL_RCC_OscConfig+0x78>
 800139a:	4b87      	ldr	r3, [pc, #540]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a86      	ldr	r2, [pc, #536]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e02e      	b.n	8001406 <HAL_RCC_OscConfig+0xd6>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10c      	bne.n	80013ca <HAL_RCC_OscConfig+0x9a>
 80013b0:	4b81      	ldr	r3, [pc, #516]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a80      	ldr	r2, [pc, #512]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b7e      	ldr	r3, [pc, #504]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a7d      	ldr	r2, [pc, #500]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e01d      	b.n	8001406 <HAL_RCC_OscConfig+0xd6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d2:	d10c      	bne.n	80013ee <HAL_RCC_OscConfig+0xbe>
 80013d4:	4b78      	ldr	r3, [pc, #480]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a77      	ldr	r2, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b75      	ldr	r3, [pc, #468]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a74      	ldr	r2, [pc, #464]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e00b      	b.n	8001406 <HAL_RCC_OscConfig+0xd6>
 80013ee:	4b72      	ldr	r3, [pc, #456]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a71      	ldr	r2, [pc, #452]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b6f      	ldr	r3, [pc, #444]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a6e      	ldr	r2, [pc, #440]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d013      	beq.n	8001436 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fbf5 	bl	8000bfc <HAL_GetTick>
 8001412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001416:	f7ff fbf1 	bl	8000bfc <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	; 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e3aa      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0xe6>
 8001434:	e014      	b.n	8001460 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fbe1 	bl	8000bfc <HAL_GetTick>
 800143a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143e:	f7ff fbdd 	bl	8000bfc <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e396      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001450:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x10e>
 800145c:	e000      	b.n	8001460 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80cb 	beq.w	8001604 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146e:	4b52      	ldr	r3, [pc, #328]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001476:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001478:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <HAL_RCC_OscConfig+0x164>
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	2b18      	cmp	r3, #24
 8001488:	d156      	bne.n	8001538 <HAL_RCC_OscConfig+0x208>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d151      	bne.n	8001538 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001494:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_OscConfig+0x17c>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e368      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014ac:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 0219 	bic.w	r2, r3, #25
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	493f      	ldr	r1, [pc, #252]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014be:	f7ff fb9d 	bl	8000bfc <HAL_GetTick>
 80014c2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff fb99 	bl	8000bfc <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e352      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014d8:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	f7ff fbba 	bl	8000c5c <HAL_GetREVID>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d817      	bhi.n	8001522 <HAL_RCC_OscConfig+0x1f2>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b40      	cmp	r3, #64	; 0x40
 80014f8:	d108      	bne.n	800150c <HAL_RCC_OscConfig+0x1dc>
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001502:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150a:	e07b      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	031b      	lsls	r3, r3, #12
 800151a:	4927      	ldr	r1, [pc, #156]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001520:	e070      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	4921      	ldr	r1, [pc, #132]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001536:	e065      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d048      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 0219 	bic.w	r2, r3, #25
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	491a      	ldr	r1, [pc, #104]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fb53 	bl	8000bfc <HAL_GetTick>
 8001556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fb4f 	bl	8000bfc <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e308      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	f7ff fb70 	bl	8000c5c <HAL_GetREVID>
 800157c:	4603      	mov	r3, r0
 800157e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001582:	4293      	cmp	r3, r2
 8001584:	d81a      	bhi.n	80015bc <HAL_RCC_OscConfig+0x28c>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b40      	cmp	r3, #64	; 0x40
 800158c:	d108      	bne.n	80015a0 <HAL_RCC_OscConfig+0x270>
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	6053      	str	r3, [r2, #4]
 800159e:	e031      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	031b      	lsls	r3, r3, #12
 80015ae:	4902      	ldr	r1, [pc, #8]	; (80015b8 <HAL_RCC_OscConfig+0x288>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e026      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
 80015b6:	bf00      	nop
 80015b8:	58024400 	.word	0x58024400
 80015bc:	4b9a      	ldr	r3, [pc, #616]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	4997      	ldr	r1, [pc, #604]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e018      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b95      	ldr	r3, [pc, #596]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a94      	ldr	r2, [pc, #592]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fb0d 	bl	8000bfc <HAL_GetTick>
 80015e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fb09 	bl	8000bfc <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e2c2      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015f8:	4b8b      	ldr	r3, [pc, #556]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a9 	beq.w	8001764 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001612:	4b85      	ldr	r3, [pc, #532]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800161a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800161c:	4b82      	ldr	r3, [pc, #520]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b08      	cmp	r3, #8
 8001626:	d007      	beq.n	8001638 <HAL_RCC_OscConfig+0x308>
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b18      	cmp	r3, #24
 800162c:	d13a      	bne.n	80016a4 <HAL_RCC_OscConfig+0x374>
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d135      	bne.n	80016a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001638:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x320>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b80      	cmp	r3, #128	; 0x80
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e296      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001650:	f7ff fb04 	bl	8000c5c <HAL_GetREVID>
 8001654:	4603      	mov	r3, r0
 8001656:	f241 0203 	movw	r2, #4099	; 0x1003
 800165a:	4293      	cmp	r3, r2
 800165c:	d817      	bhi.n	800168e <HAL_RCC_OscConfig+0x35e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	2b20      	cmp	r3, #32
 8001664:	d108      	bne.n	8001678 <HAL_RCC_OscConfig+0x348>
 8001666:	4b70      	ldr	r3, [pc, #448]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800166e:	4a6e      	ldr	r2, [pc, #440]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001674:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001676:	e075      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001678:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	069b      	lsls	r3, r3, #26
 8001686:	4968      	ldr	r1, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800168c:	e06a      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800168e:	4b66      	ldr	r3, [pc, #408]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	061b      	lsls	r3, r3, #24
 800169c:	4962      	ldr	r1, [pc, #392]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016a2:	e05f      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d042      	beq.n	8001732 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016ac:	4b5e      	ldr	r3, [pc, #376]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a5d      	ldr	r2, [pc, #372]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff faa0 	bl	8000bfc <HAL_GetTick>
 80016bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016c0:	f7ff fa9c 	bl	8000bfc <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e255      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016d2:	4b55      	ldr	r3, [pc, #340]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016de:	f7ff fabd 	bl	8000c5c <HAL_GetREVID>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d817      	bhi.n	800171c <HAL_RCC_OscConfig+0x3ec>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d108      	bne.n	8001706 <HAL_RCC_OscConfig+0x3d6>
 80016f4:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016fc:	4a4a      	ldr	r2, [pc, #296]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001702:	6053      	str	r3, [r2, #4]
 8001704:	e02e      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
 8001706:	4b48      	ldr	r3, [pc, #288]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	069b      	lsls	r3, r3, #26
 8001714:	4944      	ldr	r1, [pc, #272]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
 800171a:	e023      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	493f      	ldr	r1, [pc, #252]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800172c:	4313      	orrs	r3, r2
 800172e:	60cb      	str	r3, [r1, #12]
 8001730:	e018      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a3c      	ldr	r2, [pc, #240]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fa5d 	bl	8000bfc <HAL_GetTick>
 8001742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001746:	f7ff fa59 	bl	8000bfc <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e212      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001758:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d036      	beq.n	80017de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d019      	beq.n	80017ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177c:	4a2a      	ldr	r2, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fa3a 	bl	8000bfc <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff fa36 	bl	8000bfc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1ef      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x45c>
 80017aa:	e018      	b.n	80017de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ac:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b0:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff fa20 	bl	8000bfc <HAL_GetTick>
 80017bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fa1c 	bl	8000bfc <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1d5      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d039      	beq.n	800185e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d01c      	beq.n	800182c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017fe:	f7ff f9fd 	bl	8000bfc <HAL_GetTick>
 8001802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001806:	f7ff f9f9 	bl	8000bfc <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1b2      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x4d6>
 8001824:	e01b      	b.n	800185e <HAL_RCC_OscConfig+0x52e>
 8001826:	bf00      	nop
 8001828:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800182c:	4b9b      	ldr	r3, [pc, #620]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a9a      	ldr	r2, [pc, #616]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001836:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001838:	f7ff f9e0 	bl	8000bfc <HAL_GetTick>
 800183c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001840:	f7ff f9dc 	bl	8000bfc <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e195      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001852:	4b92      	ldr	r3, [pc, #584]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8081 	beq.w	800196e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800186c:	4b8c      	ldr	r3, [pc, #560]	; (8001aa0 <HAL_RCC_OscConfig+0x770>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a8b      	ldr	r2, [pc, #556]	; (8001aa0 <HAL_RCC_OscConfig+0x770>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001878:	f7ff f9c0 	bl	8000bfc <HAL_GetTick>
 800187c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001880:	f7ff f9bc 	bl	8000bfc <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e175      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001892:	4b83      	ldr	r3, [pc, #524]	; (8001aa0 <HAL_RCC_OscConfig+0x770>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d106      	bne.n	80018b4 <HAL_RCC_OscConfig+0x584>
 80018a6:	4b7d      	ldr	r3, [pc, #500]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a7c      	ldr	r2, [pc, #496]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
 80018b2:	e02d      	b.n	8001910 <HAL_RCC_OscConfig+0x5e0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5a6>
 80018bc:	4b77      	ldr	r3, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a76      	ldr	r2, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a73      	ldr	r2, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x5e0>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5c8>
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a6b      	ldr	r2, [pc, #428]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0x5e0>
 80018f8:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a67      	ldr	r2, [pc, #412]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
 8001904:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a64      	ldr	r2, [pc, #400]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d015      	beq.n	8001944 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff f970 	bl	8000bfc <HAL_GetTick>
 800191c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff f96c 	bl	8000bfc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e123      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001936:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ee      	beq.n	8001920 <HAL_RCC_OscConfig+0x5f0>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff f95a 	bl	8000bfc <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff f956 	bl	8000bfc <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e10d      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001962:	4b4e      	ldr	r3, [pc, #312]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ee      	bne.n	800194c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8102 	beq.w	8001b7c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001978:	4b48      	ldr	r3, [pc, #288]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001980:	2b18      	cmp	r3, #24
 8001982:	f000 80bd 	beq.w	8001b00 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	2b02      	cmp	r3, #2
 800198c:	f040 809e 	bne.w	8001acc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a41      	ldr	r2, [pc, #260]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f92e 	bl	8000bfc <HAL_GetTick>
 80019a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f92a 	bl	8000bfc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0e3      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019b6:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c2:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80019c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_RCC_OscConfig+0x774>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	430a      	orrs	r2, r1
 80019d6:	4931      	ldr	r1, [pc, #196]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	628b      	str	r3, [r1, #40]	; 0x28
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	3b01      	subs	r3, #1
 80019e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	3b01      	subs	r3, #1
 80019ec:	025b      	lsls	r3, r3, #9
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	3b01      	subs	r3, #1
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a04:	3b01      	subs	r3, #1
 8001a06:	061b      	lsls	r3, r3, #24
 8001a08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a0c:	4923      	ldr	r1, [pc, #140]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_RCC_OscConfig+0x778>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a2a:	00d2      	lsls	r2, r2, #3
 8001a2c:	491b      	ldr	r1, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	f023 020c 	bic.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4917      	ldr	r1, [pc, #92]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	f023 0202 	bic.w	r2, r3, #2
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	4912      	ldr	r1, [pc, #72]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff f8b3 	bl	8000bfc <HAL_GetTick>
 8001a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a98:	e011      	b.n	8001abe <HAL_RCC_OscConfig+0x78e>
 8001a9a:	bf00      	nop
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	58024800 	.word	0x58024800
 8001aa4:	fffffc0c 	.word	0xfffffc0c
 8001aa8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f8a6 	bl	8000bfc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e05f      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCC_OscConfig+0x858>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x77c>
 8001aca:	e057      	b.n	8001b7c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_RCC_OscConfig+0x858>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a2d      	ldr	r2, [pc, #180]	; (8001b88 <HAL_RCC_OscConfig+0x858>)
 8001ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f890 	bl	8000bfc <HAL_GetTick>
 8001adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f88c 	bl	8000bfc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e045      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001af2:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_RCC_OscConfig+0x858>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x7b0>
 8001afe:	e03d      	b.n	8001b7c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_OscConfig+0x858>)
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_RCC_OscConfig+0x858>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d031      	beq.n	8001b78 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0203 	and.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d12a      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d122      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d11a      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	0a5b      	lsrs	r3, r3, #9
 8001b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d111      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	0e1b      	lsrs	r3, r3, #24
 8001b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3730      	adds	r7, #48	; 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	58024400 	.word	0x58024400

08001b8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e19c      	b.n	8001eda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b8a      	ldr	r3, [pc, #552]	; (8001dcc <HAL_RCC_ClockConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d910      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b87      	ldr	r3, [pc, #540]	; (8001dcc <HAL_RCC_ClockConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 020f 	bic.w	r2, r3, #15
 8001bb6:	4985      	ldr	r1, [pc, #532]	; (8001dcc <HAL_RCC_ClockConfig+0x240>)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b83      	ldr	r3, [pc, #524]	; (8001dcc <HAL_RCC_ClockConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e184      	b.n	8001eda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d908      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bec:	4b78      	ldr	r3, [pc, #480]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	4975      	ldr	r1, [pc, #468]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d010      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d908      	bls.n	8001c2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c1a:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	496a      	ldr	r1, [pc, #424]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699a      	ldr	r2, [r3, #24]
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d908      	bls.n	8001c5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	495e      	ldr	r1, [pc, #376]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d908      	bls.n	8001c88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c76:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4953      	ldr	r1, [pc, #332]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d908      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f023 020f 	bic.w	r2, r3, #15
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4947      	ldr	r1, [pc, #284]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d055      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4940      	ldr	r1, [pc, #256]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cdc:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d121      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0f6      	b.n	8001eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d115      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0ea      	b.n	8001eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0de      	b.n	8001eda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0d6      	b.n	8001eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f023 0207 	bic.w	r2, r3, #7
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4925      	ldr	r1, [pc, #148]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7fe ff5d 	bl	8000bfc <HAL_GetTick>
 8001d42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d46:	f7fe ff59 	bl	8000bfc <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0be      	b.n	8001eda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d1eb      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d010      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d208      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f023 020f 	bic.w	r2, r3, #15
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_RCC_ClockConfig+0x244>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d214      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_RCC_ClockConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 020f 	bic.w	r2, r3, #15
 8001db2:	4906      	ldr	r1, [pc, #24]	; (8001dcc <HAL_RCC_ClockConfig+0x240>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <HAL_RCC_ClockConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e086      	b.n	8001eda <HAL_RCC_ClockConfig+0x34e>
 8001dcc:	52002000 	.word	0x52002000
 8001dd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d208      	bcs.n	8001e02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001df0:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4939      	ldr	r1, [pc, #228]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d208      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	492e      	ldr	r1, [pc, #184]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d208      	bcs.n	8001e5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	4922      	ldr	r1, [pc, #136]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d208      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4917      	ldr	r1, [pc, #92]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e8c:	f000 f844 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	4912      	ldr	r1, [pc, #72]	; (8001ee8 <HAL_RCC_ClockConfig+0x35c>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_RCC_ClockConfig+0x358>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <HAL_RCC_ClockConfig+0x35c>)
 8001eb4:	5cd3      	ldrb	r3, [r2, r3]
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_RCC_ClockConfig+0x360>)
 8001ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_RCC_ClockConfig+0x364>)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x368>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fcfc 	bl	80008cc <HAL_InitTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	0800ddc0 	.word	0x0800ddc0
 8001eec:	24000020 	.word	0x24000020
 8001ef0:	2400001c 	.word	0x2400001c
 8001ef4:	24000024 	.word	0x24000024

08001ef8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_EnableCSS+0x1c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_RCC_EnableCSS+0x1c>)
 8001f02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	58024400 	.word	0x58024400

08001f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f1e:	4bb3      	ldr	r3, [pc, #716]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f26:	2b18      	cmp	r3, #24
 8001f28:	f200 8155 	bhi.w	80021d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f2c:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f32:	bf00      	nop
 8001f34:	08001f99 	.word	0x08001f99
 8001f38:	080021d7 	.word	0x080021d7
 8001f3c:	080021d7 	.word	0x080021d7
 8001f40:	080021d7 	.word	0x080021d7
 8001f44:	080021d7 	.word	0x080021d7
 8001f48:	080021d7 	.word	0x080021d7
 8001f4c:	080021d7 	.word	0x080021d7
 8001f50:	080021d7 	.word	0x080021d7
 8001f54:	08001fbf 	.word	0x08001fbf
 8001f58:	080021d7 	.word	0x080021d7
 8001f5c:	080021d7 	.word	0x080021d7
 8001f60:	080021d7 	.word	0x080021d7
 8001f64:	080021d7 	.word	0x080021d7
 8001f68:	080021d7 	.word	0x080021d7
 8001f6c:	080021d7 	.word	0x080021d7
 8001f70:	080021d7 	.word	0x080021d7
 8001f74:	08001fc5 	.word	0x08001fc5
 8001f78:	080021d7 	.word	0x080021d7
 8001f7c:	080021d7 	.word	0x080021d7
 8001f80:	080021d7 	.word	0x080021d7
 8001f84:	080021d7 	.word	0x080021d7
 8001f88:	080021d7 	.word	0x080021d7
 8001f8c:	080021d7 	.word	0x080021d7
 8001f90:	080021d7 	.word	0x080021d7
 8001f94:	08001fcb 	.word	0x08001fcb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f98:	4b94      	ldr	r3, [pc, #592]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fa4:	4b91      	ldr	r3, [pc, #580]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	4a90      	ldr	r2, [pc, #576]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001fb6:	e111      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001fb8:	4b8d      	ldr	r3, [pc, #564]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fba:	61bb      	str	r3, [r7, #24]
    break;
 8001fbc:	e10e      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001fbe:	4b8d      	ldr	r3, [pc, #564]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fc0:	61bb      	str	r3, [r7, #24]
    break;
 8001fc2:	e10b      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001fc4:	4b8c      	ldr	r3, [pc, #560]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001fc6:	61bb      	str	r3, [r7, #24]
    break;
 8001fc8:	e108      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001fca:	4b88      	ldr	r3, [pc, #544]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001fd4:	4b85      	ldr	r3, [pc, #532]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fde:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001fe0:	4b82      	ldr	r3, [pc, #520]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001fea:	4b80      	ldr	r3, [pc, #512]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002002:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80e1 	beq.w	80021d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b02      	cmp	r3, #2
 8002012:	f000 8083 	beq.w	800211c <HAL_RCC_GetSysClockFreq+0x204>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b02      	cmp	r3, #2
 800201a:	f200 80a1 	bhi.w	8002160 <HAL_RCC_GetSysClockFreq+0x248>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x114>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d056      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800202a:	e099      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800202c:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b00      	cmp	r3, #0
 8002036:	d02d      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002038:	4b6c      	ldr	r3, [pc, #432]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	4a6b      	ldr	r2, [pc, #428]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002062:	4b62      	ldr	r3, [pc, #392]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002072:	ed97 6a02 	vldr	s12, [r7, #8]
 8002076:	eddf 5a61 	vldr	s11, [pc, #388]	; 80021fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800207a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800207e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002092:	e087      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002200 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a6:	4b51      	ldr	r3, [pc, #324]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80021fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80020be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020d6:	e065      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002204 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ea:	4b40      	ldr	r3, [pc, #256]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80020fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80021fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800210a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800210e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800211a:	e043      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002126:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002208 <HAL_RCC_GetSysClockFreq+0x2f0>
 800212a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212e:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800213e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002142:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80021fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800214a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800214e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800215e:	e021      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002204 <HAL_RCC_GetSysClockFreq+0x2ec>
 800216e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002182:	ed97 6a02 	vldr	s12, [r7, #8]
 8002186:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80021fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800218a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800218e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	0a5b      	lsrs	r3, r3, #9
 80021aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ae:	3301      	adds	r3, #1
 80021b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80021c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021c8:	ee17 3a90 	vmov	r3, s15
 80021cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80021ce:	e005      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
    break;
 80021d4:	e002      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021d8:	61bb      	str	r3, [r7, #24]
    break;
 80021da:	bf00      	nop
  }

  return sysclockfreq;
 80021dc:	69bb      	ldr	r3, [r7, #24]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	58024400 	.word	0x58024400
 80021f0:	03d09000 	.word	0x03d09000
 80021f4:	003d0900 	.word	0x003d0900
 80021f8:	016e3600 	.word	0x016e3600
 80021fc:	46000000 	.word	0x46000000
 8002200:	4c742400 	.word	0x4c742400
 8002204:	4a742400 	.word	0x4a742400
 8002208:	4bb71b00 	.word	0x4bb71b00

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002212:	f7ff fe81 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_RCC_GetHCLKFreq+0x50>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	490f      	ldr	r1, [pc, #60]	; (8002260 <HAL_RCC_GetHCLKFreq+0x54>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_RCC_GetHCLKFreq+0x50>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_GetHCLKFreq+0x54>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_RCC_GetHCLKFreq+0x58>)
 8002248:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800224a:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_RCC_GetHCLKFreq+0x5c>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <HAL_RCC_GetHCLKFreq+0x58>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	58024400 	.word	0x58024400
 8002260:	0800ddc0 	.word	0x0800ddc0
 8002264:	24000020 	.word	0x24000020
 8002268:	2400001c 	.word	0x2400001c

0800226c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002270:	f7ff ffcc 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	4904      	ldr	r1, [pc, #16]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	58024400 	.word	0x58024400
 8002294:	0800ddc0 	.word	0x0800ddc0

08002298 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	223f      	movs	r2, #63	; 0x3f
 80022a6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_RCC_GetClockConfig+0x7c>)
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f003 0207 	and.w	r2, r3, #7
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_RCC_GetClockConfig+0x7c>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_RCC_GetClockConfig+0x7c>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_RCC_GetClockConfig+0x7c>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_RCC_GetClockConfig+0x7c>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_GetClockConfig+0x7c>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_RCC_GetClockConfig+0x7c>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetClockConfig+0x80>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 020f 	and.w	r2, r3, #15
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	601a      	str	r2, [r3, #0]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	58024400 	.word	0x58024400
 8002318:	52002000 	.word	0x52002000

0800231c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232c:	d105      	bne.n	800233a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800232e:	f000 f809 	bl	8002344 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002332:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002338:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	58024400 	.word	0x58024400

08002344 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800235c:	2300      	movs	r3, #0
 800235e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002360:	2300      	movs	r3, #0
 8002362:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d03f      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002374:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002378:	d02a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800237a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800237e:	d824      	bhi.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002384:	d018      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800238a:	d81e      	bhi.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002394:	d007      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002396:	e018      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002398:	4ba3      	ldr	r3, [pc, #652]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	4aa2      	ldr	r2, [pc, #648]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800239e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80023a4:	e015      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2102      	movs	r1, #2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 fff9 	bl	80043a4 <RCCEx_PLL2_Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80023b6:	e00c      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3324      	adds	r3, #36	; 0x24
 80023bc:	2102      	movs	r1, #2
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 f8a2 	bl	8004508 <RCCEx_PLL3_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80023c8:	e003      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	75fb      	strb	r3, [r7, #23]
      break;
 80023ce:	e000      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023d8:	4b93      	ldr	r3, [pc, #588]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e4:	4990      	ldr	r1, [pc, #576]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	650b      	str	r3, [r1, #80]	; 0x50
 80023ea:	e001      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03d      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	2b04      	cmp	r3, #4
 8002402:	d826      	bhi.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002404:	a201      	add	r2, pc, #4	; (adr r2, 800240c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	08002421 	.word	0x08002421
 8002410:	0800242f 	.word	0x0800242f
 8002414:	08002441 	.word	0x08002441
 8002418:	08002459 	.word	0x08002459
 800241c:	08002459 	.word	0x08002459
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002420:	4b81      	ldr	r3, [pc, #516]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	4a80      	ldr	r2, [pc, #512]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800242c:	e015      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f001 ffb5 	bl	80043a4 <RCCEx_PLL2_Config>
 800243a:	4603      	mov	r3, r0
 800243c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800243e:	e00c      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3324      	adds	r3, #36	; 0x24
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f002 f85e 	bl	8004508 <RCCEx_PLL3_Config>
 800244c:	4603      	mov	r3, r0
 800244e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002450:	e003      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
      break;
 8002456:	e000      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002460:	4b71      	ldr	r3, [pc, #452]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	f023 0207 	bic.w	r2, r3, #7
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	496e      	ldr	r1, [pc, #440]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	650b      	str	r3, [r1, #80]	; 0x50
 8002472:	e001      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002480:	2b00      	cmp	r3, #0
 8002482:	d042      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248c:	d02b      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800248e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002492:	d825      	bhi.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002494:	2bc0      	cmp	r3, #192	; 0xc0
 8002496:	d028      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002498:	2bc0      	cmp	r3, #192	; 0xc0
 800249a:	d821      	bhi.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800249c:	2b80      	cmp	r3, #128	; 0x80
 800249e:	d016      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80024a0:	2b80      	cmp	r3, #128	; 0x80
 80024a2:	d81d      	bhi.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d007      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80024ac:	e018      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ae:	4b5e      	ldr	r3, [pc, #376]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	4a5d      	ldr	r2, [pc, #372]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024ba:	e017      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 ff6e 	bl	80043a4 <RCCEx_PLL2_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024cc:	e00e      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3324      	adds	r3, #36	; 0x24
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 f817 	bl	8004508 <RCCEx_PLL3_Config>
 80024da:	4603      	mov	r3, r0
 80024dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024de:	e005      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	75fb      	strb	r3, [r7, #23]
      break;
 80024e4:	e002      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80024e6:	bf00      	nop
 80024e8:	e000      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80024ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80024f2:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	494a      	ldr	r1, [pc, #296]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	650b      	str	r3, [r1, #80]	; 0x50
 8002504:	e001      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002512:	2b00      	cmp	r3, #0
 8002514:	d049      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800251c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002520:	d030      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002522:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002526:	d82a      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002528:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800252c:	d02c      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800252e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002532:	d824      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d018      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800253a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800253e:	d81e      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002548:	d007      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800254a:	e018      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	4a35      	ldr	r2, [pc, #212]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002558:	e017      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f001 ff1f 	bl	80043a4 <RCCEx_PLL2_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800256a:	e00e      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3324      	adds	r3, #36	; 0x24
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f001 ffc8 	bl	8004508 <RCCEx_PLL3_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800257c:	e005      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
      break;
 8002582:	e002      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002584:	bf00      	nop
 8002586:	e000      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800259e:	4922      	ldr	r1, [pc, #136]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	658b      	str	r3, [r1, #88]	; 0x58
 80025a4:	e001      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d04b      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80025bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c0:	d030      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80025c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c6:	d82a      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025cc:	d02e      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80025ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025d2:	d824      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025d8:	d018      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80025da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025de:	d81e      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80025e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e8:	d007      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80025ea:	e018      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025f8:	e019      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f001 fecf 	bl	80043a4 <RCCEx_PLL2_Config>
 8002606:	4603      	mov	r3, r0
 8002608:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800260a:	e010      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3324      	adds	r3, #36	; 0x24
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f001 ff78 	bl	8004508 <RCCEx_PLL3_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800261c:	e007      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
      break;
 8002622:	e004      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002624:	bf00      	nop
 8002626:	e002      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002628:	58024400 	.word	0x58024400
      break;
 800262c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002634:	4b99      	ldr	r3, [pc, #612]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002642:	4996      	ldr	r1, [pc, #600]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002644:	4313      	orrs	r3, r2
 8002646:	658b      	str	r3, [r1, #88]	; 0x58
 8002648:	e001      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d032      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265e:	2b30      	cmp	r3, #48	; 0x30
 8002660:	d01c      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002662:	2b30      	cmp	r3, #48	; 0x30
 8002664:	d817      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002666:	2b20      	cmp	r3, #32
 8002668:	d00c      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800266a:	2b20      	cmp	r3, #32
 800266c:	d813      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002672:	2b10      	cmp	r3, #16
 8002674:	d10f      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002676:	4b89      	ldr	r3, [pc, #548]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	4a88      	ldr	r2, [pc, #544]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002682:	e00e      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f001 fe8a 	bl	80043a4 <RCCEx_PLL2_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002694:	e005      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
      break;
 800269a:	e002      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80026a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80026a8:	4b7c      	ldr	r3, [pc, #496]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	4979      	ldr	r1, [pc, #484]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80026ba:	e001      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d047      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026d4:	d030      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026da:	d82a      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026e0:	d02c      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80026e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026e6:	d824      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ec:	d018      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f2:	d81e      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80026f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fc:	d007      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80026fe:	e018      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002700:	4b66      	ldr	r3, [pc, #408]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800270c:	e017      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f001 fe45 	bl	80043a4 <RCCEx_PLL2_Config>
 800271a:	4603      	mov	r3, r0
 800271c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800271e:	e00e      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3324      	adds	r3, #36	; 0x24
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f001 feee 	bl	8004508 <RCCEx_PLL3_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002730:	e005      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
      break;
 8002736:	e002      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002738:	bf00      	nop
 800273a:	e000      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800273c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002744:	4b55      	ldr	r3, [pc, #340]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002748:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	4952      	ldr	r1, [pc, #328]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002752:	4313      	orrs	r3, r2
 8002754:	650b      	str	r3, [r1, #80]	; 0x50
 8002756:	e001      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d049      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002770:	d02e      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002776:	d828      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002778:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800277c:	d02a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800277e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002782:	d822      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002784:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002788:	d026      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800278a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800278e:	d81c      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002794:	d010      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800279a:	d816      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01d      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d111      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 fdf9 	bl	80043a4 <RCCEx_PLL2_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027b6:	e012      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3324      	adds	r3, #36	; 0x24
 80027bc:	2101      	movs	r1, #1
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fea2 	bl	8004508 <RCCEx_PLL3_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027c8:	e009      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
      break;
 80027ce:	e006      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027d0:	bf00      	nop
 80027d2:	e004      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027d4:	bf00      	nop
 80027d6:	e002      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027d8:	bf00      	nop
 80027da:	e000      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80027e4:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	492a      	ldr	r1, [pc, #168]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	650b      	str	r3, [r1, #80]	; 0x50
 80027f6:	e001      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d04d      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800280e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002812:	d02e      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002818:	d828      	bhi.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d02a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d822      	bhi.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800282a:	d026      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800282c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002830:	d81c      	bhi.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002836:	d010      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800283c:	d816      	bhi.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01d      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002846:	d111      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3304      	adds	r3, #4
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fda8 	bl	80043a4 <RCCEx_PLL2_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002858:	e012      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3324      	adds	r3, #36	; 0x24
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f001 fe51 	bl	8004508 <RCCEx_PLL3_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800286a:	e009      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
      break;
 8002870:	e006      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002872:	bf00      	nop
 8002874:	e004      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002876:	bf00      	nop
 8002878:	e002      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800287a:	bf00      	nop
 800287c:	e000      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800287e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002894:	4901      	ldr	r1, [pc, #4]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002896:	4313      	orrs	r3, r2
 8002898:	658b      	str	r3, [r1, #88]	; 0x58
 800289a:	e003      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800289c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d02f      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b8:	d00e      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80028ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028be:	d814      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x596>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80028c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028c8:	d10f      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ca:	4baf      	ldr	r3, [pc, #700]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	4aae      	ldr	r2, [pc, #696]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028d6:	e00c      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	2101      	movs	r1, #1
 80028de:	4618      	mov	r0, r3
 80028e0:	f001 fd60 	bl	80043a4 <RCCEx_PLL2_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028e8:	e003      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
      break;
 80028ee:	e000      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80028f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028f8:	4ba3      	ldr	r3, [pc, #652]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002904:	49a0      	ldr	r1, [pc, #640]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002906:	4313      	orrs	r3, r2
 8002908:	650b      	str	r3, [r1, #80]	; 0x50
 800290a:	e001      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d032      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	2b03      	cmp	r3, #3
 8002922:	d81b      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002924:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292a:	bf00      	nop
 800292c:	08002963 	.word	0x08002963
 8002930:	0800293d 	.word	0x0800293d
 8002934:	0800294b 	.word	0x0800294b
 8002938:	08002963 	.word	0x08002963
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293c:	4b92      	ldr	r3, [pc, #584]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	4a91      	ldr	r2, [pc, #580]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002948:	e00c      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	2102      	movs	r1, #2
 8002950:	4618      	mov	r0, r3
 8002952:	f001 fd27 	bl	80043a4 <RCCEx_PLL2_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800295a:	e003      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	75fb      	strb	r3, [r7, #23]
      break;
 8002960:	e000      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800296a:	4b87      	ldr	r3, [pc, #540]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4984      	ldr	r1, [pc, #528]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002978:	4313      	orrs	r3, r2
 800297a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800297c:	e001      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8086 	beq.w	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002990:	4b7e      	ldr	r3, [pc, #504]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a7d      	ldr	r2, [pc, #500]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800299c:	f7fe f92e 	bl	8000bfc <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a2:	e009      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe f92a 	bl	8000bfc <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d902      	bls.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	75fb      	strb	r3, [r7, #23]
        break;
 80029b6:	e005      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029b8:	4b74      	ldr	r3, [pc, #464]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ef      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d166      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029ca:	4b6f      	ldr	r3, [pc, #444]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029d4:	4053      	eors	r3, r2
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029de:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029e8:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a66      	ldr	r2, [pc, #408]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029f4:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a63      	ldr	r2, [pc, #396]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002a00:	4a61      	ldr	r2, [pc, #388]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a10:	d115      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe f8f3 	bl	8000bfc <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a18:	e00b      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe f8ef 	bl	8000bfc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d902      	bls.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	75fb      	strb	r3, [r7, #23]
            break;
 8002a30:	e005      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a32:	4b55      	ldr	r3, [pc, #340]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ed      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d126      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002a54:	4b4c      	ldr	r3, [pc, #304]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a62:	0919      	lsrs	r1, r3, #4
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002a66:	400b      	ands	r3, r1
 8002a68:	4947      	ldr	r1, [pc, #284]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	610b      	str	r3, [r1, #16]
 8002a6e:	e005      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002a70:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	4a44      	ldr	r2, [pc, #272]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a7a:	6113      	str	r3, [r2, #16]
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8a:	493f      	ldr	r1, [pc, #252]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	670b      	str	r3, [r1, #112]	; 0x70
 8002a90:	e004      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	75bb      	strb	r3, [r7, #22]
 8002a96:	e001      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8085 	beq.w	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aae:	2b28      	cmp	r3, #40	; 0x28
 8002ab0:	d866      	bhi.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002b95 	.word	0x08002b95
 8002abc:	08002b81 	.word	0x08002b81
 8002ac0:	08002b81 	.word	0x08002b81
 8002ac4:	08002b81 	.word	0x08002b81
 8002ac8:	08002b81 	.word	0x08002b81
 8002acc:	08002b81 	.word	0x08002b81
 8002ad0:	08002b81 	.word	0x08002b81
 8002ad4:	08002b81 	.word	0x08002b81
 8002ad8:	08002b5d 	.word	0x08002b5d
 8002adc:	08002b81 	.word	0x08002b81
 8002ae0:	08002b81 	.word	0x08002b81
 8002ae4:	08002b81 	.word	0x08002b81
 8002ae8:	08002b81 	.word	0x08002b81
 8002aec:	08002b81 	.word	0x08002b81
 8002af0:	08002b81 	.word	0x08002b81
 8002af4:	08002b81 	.word	0x08002b81
 8002af8:	08002b6f 	.word	0x08002b6f
 8002afc:	08002b81 	.word	0x08002b81
 8002b00:	08002b81 	.word	0x08002b81
 8002b04:	08002b81 	.word	0x08002b81
 8002b08:	08002b81 	.word	0x08002b81
 8002b0c:	08002b81 	.word	0x08002b81
 8002b10:	08002b81 	.word	0x08002b81
 8002b14:	08002b81 	.word	0x08002b81
 8002b18:	08002b95 	.word	0x08002b95
 8002b1c:	08002b81 	.word	0x08002b81
 8002b20:	08002b81 	.word	0x08002b81
 8002b24:	08002b81 	.word	0x08002b81
 8002b28:	08002b81 	.word	0x08002b81
 8002b2c:	08002b81 	.word	0x08002b81
 8002b30:	08002b81 	.word	0x08002b81
 8002b34:	08002b81 	.word	0x08002b81
 8002b38:	08002b95 	.word	0x08002b95
 8002b3c:	08002b81 	.word	0x08002b81
 8002b40:	08002b81 	.word	0x08002b81
 8002b44:	08002b81 	.word	0x08002b81
 8002b48:	08002b81 	.word	0x08002b81
 8002b4c:	08002b81 	.word	0x08002b81
 8002b50:	08002b81 	.word	0x08002b81
 8002b54:	08002b81 	.word	0x08002b81
 8002b58:	08002b95 	.word	0x08002b95
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 fc1e 	bl	80043a4 <RCCEx_PLL2_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b6c:	e013      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3324      	adds	r3, #36	; 0x24
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 fcc7 	bl	8004508 <RCCEx_PLL3_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	75fb      	strb	r3, [r7, #23]
      break;
 8002b84:	e007      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b86:	bf00      	nop
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	58024800 	.word	0x58024800
 8002b90:	00ffffcf 	.word	0x00ffffcf
      break;
 8002b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b9c:	4b96      	ldr	r3, [pc, #600]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba8:	4993      	ldr	r1, [pc, #588]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	654b      	str	r3, [r1, #84]	; 0x54
 8002bae:	e001      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d038      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d821      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002bc8:	a201      	add	r2, pc, #4	; (adr r2, 8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bce:	bf00      	nop
 8002bd0:	08002c13 	.word	0x08002c13
 8002bd4:	08002be9 	.word	0x08002be9
 8002bd8:	08002bfb 	.word	0x08002bfb
 8002bdc:	08002c13 	.word	0x08002c13
 8002be0:	08002c13 	.word	0x08002c13
 8002be4:	08002c13 	.word	0x08002c13
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 fbd8 	bl	80043a4 <RCCEx_PLL2_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bf8:	e00c      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3324      	adds	r3, #36	; 0x24
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 fc81 	bl	8004508 <RCCEx_PLL3_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c0a:	e003      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c10:	e000      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c1a:	4b77      	ldr	r3, [pc, #476]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f023 0207 	bic.w	r2, r3, #7
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	4974      	ldr	r1, [pc, #464]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	654b      	str	r3, [r1, #84]	; 0x54
 8002c2c:	e001      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d03a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d821      	bhi.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c93 	.word	0x08002c93
 8002c54:	08002c69 	.word	0x08002c69
 8002c58:	08002c7b 	.word	0x08002c7b
 8002c5c:	08002c93 	.word	0x08002c93
 8002c60:	08002c93 	.word	0x08002c93
 8002c64:	08002c93 	.word	0x08002c93
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 fb98 	bl	80043a4 <RCCEx_PLL2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c78:	e00c      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3324      	adds	r3, #36	; 0x24
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 fc41 	bl	8004508 <RCCEx_PLL3_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c8a:	e003      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c90:	e000      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c9a:	4b57      	ldr	r3, [pc, #348]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	f023 0207 	bic.w	r2, r3, #7
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	4953      	ldr	r1, [pc, #332]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	658b      	str	r3, [r1, #88]	; 0x58
 8002cae:	e001      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d04b      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cca:	d02e      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd0:	d828      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd6:	d02a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cdc:	d822      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ce2:	d026      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002ce4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ce8:	d81c      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cee:	d010      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf4:	d816      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01d      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfe:	d111      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 fb4c 	bl	80043a4 <RCCEx_PLL2_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d10:	e012      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3324      	adds	r3, #36	; 0x24
 8002d16:	2102      	movs	r1, #2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 fbf5 	bl	8004508 <RCCEx_PLL3_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d22:	e009      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
      break;
 8002d28:	e006      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e004      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e002      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d32:	bf00      	nop
 8002d34:	e000      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d4c:	492a      	ldr	r1, [pc, #168]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	654b      	str	r3, [r1, #84]	; 0x54
 8002d52:	e001      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d04d      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d6e:	d02e      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002d70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d74:	d828      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7a:	d02a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	d822      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d86:	d026      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d8c:	d81c      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d92:	d010      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d98:	d816      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01d      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da2:	d111      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fafa 	bl	80043a4 <RCCEx_PLL2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002db4:	e012      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3324      	adds	r3, #36	; 0x24
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fba3 	bl	8004508 <RCCEx_PLL3_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002dc6:	e009      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
      break;
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e004      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df0:	4901      	ldr	r1, [pc, #4]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	658b      	str	r3, [r1, #88]	; 0x58
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d04b      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e12:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e16:	d02e      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002e18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e1c:	d828      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e22:	d02a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e28:	d822      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e2e:	d026      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002e30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e34:	d81c      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e3a:	d010      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e40:	d816      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01d      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4a:	d111      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 faa6 	bl	80043a4 <RCCEx_PLL2_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e5c:	e012      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3324      	adds	r3, #36	; 0x24
 8002e62:	2102      	movs	r1, #2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 fb4f 	bl	8004508 <RCCEx_PLL3_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e6e:	e009      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	75fb      	strb	r3, [r7, #23]
      break;
 8002e74:	e006      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e76:	bf00      	nop
 8002e78:	e004      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e002      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e000      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e8a:	4b9d      	ldr	r3, [pc, #628]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e98:	4999      	ldr	r1, [pc, #612]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e9e:	e001      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eba:	d10a      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3324      	adds	r3, #36	; 0x24
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 fb20 	bl	8004508 <RCCEx_PLL3_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002ed2:	4b8b      	ldr	r3, [pc, #556]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee0:	4987      	ldr	r1, [pc, #540]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efc:	d10a      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3324      	adds	r3, #36	; 0x24
 8002f02:	2102      	movs	r1, #2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 faff 	bl	8004508 <RCCEx_PLL3_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f14:	4b7a      	ldr	r3, [pc, #488]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f22:	4977      	ldr	r1, [pc, #476]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d034      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f3e:	d01d      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f44:	d817      	bhi.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d009      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002f50:	e011      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 fa23 	bl	80043a4 <RCCEx_PLL2_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f62:	e00c      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3324      	adds	r3, #36	; 0x24
 8002f68:	2102      	movs	r1, #2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 facc 	bl	8004508 <RCCEx_PLL3_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f74:	e003      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
      break;
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f84:	4b5e      	ldr	r3, [pc, #376]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f92:	495b      	ldr	r1, [pc, #364]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	658b      	str	r3, [r1, #88]	; 0x58
 8002f98:	e001      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d033      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fb4:	d01c      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002fb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fba:	d816      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc0:	d003      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fc6:	d007      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002fc8:	e00f      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fca:	4b4d      	ldr	r3, [pc, #308]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	4a4c      	ldr	r2, [pc, #304]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fd6:	e00c      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3324      	adds	r3, #36	; 0x24
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 fa92 	bl	8004508 <RCCEx_PLL3_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fe8:	e003      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
      break;
 8002fee:	e000      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ff8:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003006:	493e      	ldr	r1, [pc, #248]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003008:	4313      	orrs	r3, r2
 800300a:	654b      	str	r3, [r1, #84]	; 0x54
 800300c:	e001      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d029      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302a:	d007      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800302c:	e00f      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302e:	4b34      	ldr	r3, [pc, #208]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	4a33      	ldr	r2, [pc, #204]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800303a:	e00b      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f001 f9ae 	bl	80043a4 <RCCEx_PLL2_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800304c:	e002      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
      break;
 8003052:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800305a:	4b29      	ldr	r3, [pc, #164]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800305c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	4926      	ldr	r1, [pc, #152]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003068:	4313      	orrs	r3, r2
 800306a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800306c:	e001      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3324      	adds	r3, #36	; 0x24
 8003082:	2102      	movs	r1, #2
 8003084:	4618      	mov	r0, r3
 8003086:	f001 fa3f 	bl	8004508 <RCCEx_PLL3_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d033      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a8:	d017      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80030aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ae:	d811      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80030b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b4:	d013      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80030b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ba:	d80b      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d010      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80030c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c4:	d106      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	4a0d      	ldr	r2, [pc, #52]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80030d2:	e007      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	75fb      	strb	r3, [r7, #23]
      break;
 80030d8:	e004      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80030da:	bf00      	nop
 80030dc:	e002      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80030e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f6:	4902      	ldr	r1, [pc, #8]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	654b      	str	r3, [r1, #84]	; 0x54
 80030fc:	e004      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80030fe:	bf00      	nop
 8003100:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003114:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003118:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	492e      	ldr	r1, [pc, #184]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003122:	4313      	orrs	r3, r2
 8003124:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003132:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003140:	4926      	ldr	r1, [pc, #152]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003142:	4313      	orrs	r3, r2
 8003144:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003156:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800315e:	491f      	ldr	r1, [pc, #124]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003160:	4313      	orrs	r3, r2
 8003162:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00d      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003176:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800317a:	6113      	str	r3, [r2, #16]
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003186:	4915      	ldr	r1, [pc, #84]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003188:	4313      	orrs	r3, r2
 800318a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da08      	bge.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a0:	490e      	ldr	r1, [pc, #56]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	4906      	ldr	r1, [pc, #24]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80031c6:	7dbb      	ldrb	r3, [r7, #22]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	58024400 	.word	0x58024400

080031e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b090      	sub	sp, #64	; 0x40
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ee:	f040 8095 	bne.w	800331c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80031f2:	4b97      	ldr	r3, [pc, #604]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80031f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	2b04      	cmp	r3, #4
 8003200:	f200 8088 	bhi.w	8003314 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003204:	a201      	add	r2, pc, #4	; (adr r2, 800320c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	08003221 	.word	0x08003221
 8003210:	08003249 	.word	0x08003249
 8003214:	08003271 	.word	0x08003271
 8003218:	0800330d 	.word	0x0800330d
 800321c:	08003299 	.word	0x08003299
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003220:	4b8b      	ldr	r3, [pc, #556]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800322c:	d108      	bne.n	8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800322e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ff64 	bl	8004100 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800323c:	f000 bc94 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003244:	f000 bc90 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003248:	4b81      	ldr	r3, [pc, #516]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003254:	d108      	bne.n	8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003256:	f107 0318 	add.w	r3, r7, #24
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fca8 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003264:	f000 bc80 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800326c:	f000 bc7c 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003270:	4b77      	ldr	r3, [pc, #476]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327c:	d108      	bne.n	8003290 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fde8 	bl	8003e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800328c:	f000 bc6c 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003294:	f000 bc68 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003298:	4b6d      	ldr	r3, [pc, #436]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80032a2:	4b6b      	ldr	r3, [pc, #428]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032b4:	4b66      	ldr	r3, [pc, #408]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	08db      	lsrs	r3, r3, #3
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	4a65      	ldr	r2, [pc, #404]	; (8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c6:	e01f      	b.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80032c8:	4b61      	ldr	r3, [pc, #388]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d4:	d106      	bne.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032dc:	d102      	bne.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80032de:	4b5e      	ldr	r3, [pc, #376]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80032e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e2:	e011      	b.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80032e4:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f0:	d106      	bne.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80032f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f8:	d102      	bne.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80032fa:	4b58      	ldr	r3, [pc, #352]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80032fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fe:	e003      	b.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003304:	f000 bc30 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003308:	f000 bc2e 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800330c:	4b54      	ldr	r3, [pc, #336]	; (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003310:	f000 bc2a 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003318:	f000 bc26 	b.w	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003322:	f040 809f 	bne.w	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003326:	4b4a      	ldr	r3, [pc, #296]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800332e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d04d      	beq.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333e:	f200 8084 	bhi.w	800344a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	2bc0      	cmp	r3, #192	; 0xc0
 8003346:	d07d      	beq.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	2bc0      	cmp	r3, #192	; 0xc0
 800334c:	d87d      	bhi.n	800344a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	2b80      	cmp	r3, #128	; 0x80
 8003352:	d02d      	beq.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	2b80      	cmp	r3, #128	; 0x80
 8003358:	d877      	bhi.n	800344a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	d012      	beq.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003366:	e070      	b.n	800344a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003368:	4b39      	ldr	r3, [pc, #228]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003374:	d107      	bne.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fec0 	bl	8004100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003384:	e3f0      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800338a:	e3ed      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800338c:	4b30      	ldr	r3, [pc, #192]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003398:	d107      	bne.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800339a:	f107 0318 	add.w	r3, r7, #24
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fc06 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80033a8:	e3de      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033ae:	e3db      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80033b0:	4b27      	ldr	r3, [pc, #156]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033bc:	d107      	bne.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fd48 	bl	8003e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80033cc:	e3cc      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033d2:	e3c9      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80033d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d10c      	bne.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80033ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	08db      	lsrs	r3, r3, #3
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	4a16      	ldr	r2, [pc, #88]	; (8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003402:	e01e      	b.n	8003442 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003410:	d106      	bne.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003418:	d102      	bne.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800341c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341e:	e010      	b.n	8003442 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800342c:	d106      	bne.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003434:	d102      	bne.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343a:	e002      	b.n	8003442 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003440:	e392      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003442:	e391      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8003446:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003448:	e38e      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800344e:	e38b      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003450:	58024400 	.word	0x58024400
 8003454:	03d09000 	.word	0x03d09000
 8003458:	003d0900 	.word	0x003d0900
 800345c:	016e3600 	.word	0x016e3600
 8003460:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346a:	f040 809c 	bne.w	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800346e:	4b9d      	ldr	r3, [pc, #628]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003476:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800347e:	d054      	beq.n	800352a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003486:	f200 808b 	bhi.w	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003490:	f000 8083 	beq.w	800359a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800349a:	f200 8081 	bhi.w	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a4:	d02f      	beq.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ac:	d878      	bhi.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ba:	d012      	beq.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80034bc:	e070      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80034be:	4b89      	ldr	r3, [pc, #548]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ca:	d107      	bne.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80034cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fe15 	bl	8004100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80034da:	e345      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034e0:	e342      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80034e2:	4b80      	ldr	r3, [pc, #512]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ee:	d107      	bne.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80034f0:	f107 0318 	add.w	r3, r7, #24
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fb5b 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80034fe:	e333      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003504:	e330      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003506:	4b77      	ldr	r3, [pc, #476]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800350e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003512:	d107      	bne.n	8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003514:	f107 030c 	add.w	r3, r7, #12
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fc9d 	bl	8003e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003522:	e321      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003528:	e31e      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800352a:	4b6e      	ldr	r3, [pc, #440]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003532:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003534:	4b6b      	ldr	r3, [pc, #428]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d10c      	bne.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003546:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	08db      	lsrs	r3, r3, #3
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	4a65      	ldr	r2, [pc, #404]	; (80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003558:	e01e      	b.n	8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800355a:	4b62      	ldr	r3, [pc, #392]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003566:	d106      	bne.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800356e:	d102      	bne.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003570:	4b5e      	ldr	r3, [pc, #376]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003574:	e010      	b.n	8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003576:	4b5b      	ldr	r3, [pc, #364]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003582:	d106      	bne.n	8003592 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800358a:	d102      	bne.n	8003592 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800358c:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003590:	e002      	b.n	8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003596:	e2e7      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003598:	e2e6      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800359a:	4b56      	ldr	r3, [pc, #344]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800359e:	e2e3      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035a4:	e2e0      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ac:	f040 80a7 	bne.w	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80035b0:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c0:	d055      	beq.n	800366e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c8:	f200 8096 	bhi.w	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035d2:	f000 8084 	beq.w	80036de <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035dc:	f200 808c 	bhi.w	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035e6:	d030      	beq.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035ee:	f200 8083 	bhi.w	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fe:	d012      	beq.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003600:	e07a      	b.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003602:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800360e:	d107      	bne.n	8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fd73 	bl	8004100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800361e:	e2a3      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003624:	e2a0      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003626:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003632:	d107      	bne.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003634:	f107 0318 	add.w	r3, r7, #24
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fab9 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003642:	e291      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003648:	e28e      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003656:	d107      	bne.n	8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003658:	f107 030c 	add.w	r3, r7, #12
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fbfb 	bl	8003e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003666:	e27f      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800366c:	e27c      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003676:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003678:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d10c      	bne.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	08db      	lsrs	r3, r3, #3
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369c:	e01e      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036aa:	d106      	bne.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80036ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b2:	d102      	bne.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b8:	e010      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036c6:	d106      	bne.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80036c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ce:	d102      	bne.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d4:	e002      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80036da:	e245      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80036dc:	e244      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80036e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036e2:	e241      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80036e4:	58024400 	.word	0x58024400
 80036e8:	03d09000 	.word	0x03d09000
 80036ec:	003d0900 	.word	0x003d0900
 80036f0:	016e3600 	.word	0x016e3600
 80036f4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036fc:	e234      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	f040 809c 	bne.w	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003708:	4b9b      	ldr	r3, [pc, #620]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003710:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003718:	d054      	beq.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003720:	f200 808b 	bhi.w	800383a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800372a:	f000 8083 	beq.w	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003734:	f200 8081 	bhi.w	800383a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373e:	d02f      	beq.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003746:	d878      	bhi.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003754:	d012      	beq.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8003756:	e070      	b.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003758:	4b87      	ldr	r3, [pc, #540]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003764:	d107      	bne.n	8003776 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fcc8 	bl	8004100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003774:	e1f8      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800377a:	e1f5      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800377c:	4b7e      	ldr	r3, [pc, #504]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003788:	d107      	bne.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800378a:	f107 0318 	add.w	r3, r7, #24
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fa0e 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003798:	e1e6      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800379e:	e1e3      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80037a0:	4b75      	ldr	r3, [pc, #468]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ac:	d107      	bne.n	80037be <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fb50 	bl	8003e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80037bc:	e1d4      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037c2:	e1d1      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80037c4:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80037ce:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80037da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037e0:	4b65      	ldr	r3, [pc, #404]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	08db      	lsrs	r3, r3, #3
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	4a64      	ldr	r2, [pc, #400]	; (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
 80037f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f2:	e01e      	b.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80037f4:	4b60      	ldr	r3, [pc, #384]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003800:	d106      	bne.n	8003810 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003808:	d102      	bne.n	8003810 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800380a:	4b5d      	ldr	r3, [pc, #372]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800380c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380e:	e010      	b.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800381c:	d106      	bne.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800381e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003824:	d102      	bne.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003826:	4b57      	ldr	r3, [pc, #348]	; (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382a:	e002      	b.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003830:	e19a      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003832:	e199      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003834:	4b54      	ldr	r3, [pc, #336]	; (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003838:	e196      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800383e:	e193      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003846:	d173      	bne.n	8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003850:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003858:	d02f      	beq.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003860:	d863      	bhi.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386e:	d012      	beq.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8003870:	e05b      	b.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800387a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800387e:	d107      	bne.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003880:	f107 0318 	add.w	r3, r7, #24
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f993 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800388e:	e16b      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003894:	e168      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800389e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a2:	d107      	bne.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fad5 	bl	8003e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80038b2:	e159      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038b8:	e156      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80038ba:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80038c4:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d10c      	bne.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80038d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038d6:	4b28      	ldr	r3, [pc, #160]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	08db      	lsrs	r3, r3, #3
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	4a26      	ldr	r2, [pc, #152]	; (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e8:	e01e      	b.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f6:	d106      	bne.n	8003906 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fe:	d102      	bne.n	8003906 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003904:	e010      	b.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003906:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003912:	d106      	bne.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8003914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800391a:	d102      	bne.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003920:	e002      	b.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003926:	e11f      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003928:	e11e      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800392e:	e11b      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003936:	d13e      	bne.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003940:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	2b00      	cmp	r3, #0
 8003946:	d004      	beq.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394e:	d01d      	beq.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003950:	e02e      	b.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800395e:	d107      	bne.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fbcb 	bl	8004100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800396e:	e0fb      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003974:	e0f8      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003976:	bf00      	nop
 8003978:	58024400 	.word	0x58024400
 800397c:	03d09000 	.word	0x03d09000
 8003980:	003d0900 	.word	0x003d0900
 8003984:	016e3600 	.word	0x016e3600
 8003988:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800398c:	4b79      	ldr	r3, [pc, #484]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003998:	d107      	bne.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800399a:	f107 0318 	add.w	r3, r7, #24
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f906 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80039a8:	e0de      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039ae:	e0db      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039b4:	e0d8      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039bc:	f040 8085 	bne.w	8003aca <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80039c0:	4b6c      	ldr	r3, [pc, #432]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80039c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d0:	d06b      	beq.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d8:	d874      	bhi.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d056      	beq.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d86c      	bhi.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f0:	d03b      	beq.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f8:	d864      	bhi.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a00:	d021      	beq.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a08:	d85c      	bhi.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a16:	d004      	beq.n	8003a22 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8003a18:	e054      	b.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8003a1a:	f000 f8b3 	bl	8003b84 <HAL_RCCEx_GetD3PCLK1Freq>
 8003a1e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8003a20:	e0a2      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003a22:	4b54      	ldr	r3, [pc, #336]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a30:	f107 0318 	add.w	r3, r7, #24
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f8bb 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003a3e:	e093      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a44:	e090      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a46:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a52:	d107      	bne.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a54:	f107 030c 	add.w	r3, r7, #12
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 f9fd 	bl	8003e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003a62:	e081      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a68:	e07e      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a6a:	4b42      	ldr	r3, [pc, #264]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d109      	bne.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a76:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	08db      	lsrs	r3, r3, #3
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	4a3d      	ldr	r2, [pc, #244]	; (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003a88:	e06e      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a8e:	e06b      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003a90:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a9c:	d102      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8003a9e:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003aa2:	e061      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aa8:	e05e      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003aaa:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ab6:	d102      	bne.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8003ab8:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003abc:	e054      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ac2:	e051      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ac8:	e04e      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad0:	d148      	bne.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8003ad2:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae2:	d02a      	beq.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aea:	d838      	bhi.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af8:	d00d      	beq.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8003afa:	e030      	b.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b08:	d102      	bne.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003b0e:	e02b      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b14:	e028      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b16:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b22:	d107      	bne.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fae9 	bl	8004100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003b32:	e019      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b38:	e016      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b46:	d107      	bne.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b48:	f107 0318 	add.w	r3, r7, #24
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f82f 	bl	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003b56:	e007      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b5c:	e004      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b62:	e001      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8003b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3740      	adds	r7, #64	; 0x40
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	58024400 	.word	0x58024400
 8003b78:	03d09000 	.word	0x03d09000
 8003b7c:	003d0900 	.word	0x003d0900
 8003b80:	016e3600 	.word	0x016e3600

08003b84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b88:	f7fe fb40 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4904      	ldr	r1, [pc, #16]	; (8003bac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	58024400 	.word	0x58024400
 8003bac:	0800ddc0 	.word	0x0800ddc0

08003bb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bb8:	4ba1      	ldr	r3, [pc, #644]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003bc2:	4b9f      	ldr	r3, [pc, #636]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	0b1b      	lsrs	r3, r3, #12
 8003bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003bce:	4b9c      	ldr	r3, [pc, #624]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003bda:	4b99      	ldr	r3, [pc, #612]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	08db      	lsrs	r3, r3, #3
 8003be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8111 	beq.w	8003e20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	f000 8083 	beq.w	8003d0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	f200 80a1 	bhi.w	8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d056      	beq.n	8003cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c1a:	e099      	b.n	8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c1c:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d02d      	beq.n	8003c84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c28:	4b85      	ldr	r3, [pc, #532]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	08db      	lsrs	r3, r3, #3
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	4a84      	ldr	r2, [pc, #528]	; (8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
 8003c38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	ee07 3a90 	vmov	s15, r3
 8003c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c52:	4b7b      	ldr	r3, [pc, #492]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003c82:	e087      	b.n	8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c96:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003caa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cc6:	e065      	b.n	8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cda:	4b59      	ldr	r3, [pc, #356]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d0a:	e043      	b.n	8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d1e:	4b48      	ldr	r3, [pc, #288]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d4e:	e021      	b.n	8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d62:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003d94:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	0a5b      	lsrs	r3, r3, #9
 8003d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8003db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dba:	ee17 2a90 	vmov	r2, s15
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003dc2:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	0c1b      	lsrs	r3, r3, #16
 8003dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de8:	ee17 2a90 	vmov	r2, s15
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e16:	ee17 2a90 	vmov	r2, s15
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e1e:	e008      	b.n	8003e32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
}
 8003e32:	bf00      	nop
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	58024400 	.word	0x58024400
 8003e44:	03d09000 	.word	0x03d09000
 8003e48:	46000000 	.word	0x46000000
 8003e4c:	4c742400 	.word	0x4c742400
 8003e50:	4a742400 	.word	0x4a742400
 8003e54:	4bb71b00 	.word	0x4bb71b00

08003e58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e60:	4ba1      	ldr	r3, [pc, #644]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003e6a:	4b9f      	ldr	r3, [pc, #636]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	0d1b      	lsrs	r3, r3, #20
 8003e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e76:	4b9c      	ldr	r3, [pc, #624]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003e82:	4b99      	ldr	r3, [pc, #612]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	08db      	lsrs	r3, r3, #3
 8003e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8111 	beq.w	80040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	f000 8083 	beq.w	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	f200 80a1 	bhi.w	8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d056      	beq.n	8003f70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ec2:	e099      	b.n	8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec4:	4b88      	ldr	r3, [pc, #544]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02d      	beq.n	8003f2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ed0:	4b85      	ldr	r3, [pc, #532]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	08db      	lsrs	r3, r3, #3
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	4a84      	ldr	r2, [pc, #528]	; (80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efa:	4b7b      	ldr	r3, [pc, #492]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f2a:	e087      	b.n	800403c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3e:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f52:	eddf 5a67 	vldr	s11, [pc, #412]	; 80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f6e:	e065      	b.n	800403c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f82:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f96:	eddf 5a56 	vldr	s11, [pc, #344]	; 80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fb2:	e043      	b.n	800403c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80040fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	4b48      	ldr	r3, [pc, #288]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fda:	eddf 5a45 	vldr	s11, [pc, #276]	; 80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ff6:	e021      	b.n	800403c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400a:	4b37      	ldr	r3, [pc, #220]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401a:	ed97 6a03 	vldr	s12, [r7, #12]
 800401e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800403a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800403c:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	0a5b      	lsrs	r3, r3, #9
 8004042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004056:	edd7 6a07 	vldr	s13, [r7, #28]
 800405a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004062:	ee17 2a90 	vmov	r2, s15
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800406a:	4b1f      	ldr	r3, [pc, #124]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	0c1b      	lsrs	r3, r3, #16
 8004070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004080:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004084:	edd7 6a07 	vldr	s13, [r7, #28]
 8004088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800408c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004090:	ee17 2a90 	vmov	r2, s15
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	0e1b      	lsrs	r3, r3, #24
 800409e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040be:	ee17 2a90 	vmov	r2, s15
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040c6:	e008      	b.n	80040da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
}
 80040da:	bf00      	nop
 80040dc:	3724      	adds	r7, #36	; 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	58024400 	.word	0x58024400
 80040ec:	03d09000 	.word	0x03d09000
 80040f0:	46000000 	.word	0x46000000
 80040f4:	4c742400 	.word	0x4c742400
 80040f8:	4a742400 	.word	0x4a742400
 80040fc:	4bb71b00 	.word	0x4bb71b00

08004100 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	; 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004108:	4ba0      	ldr	r3, [pc, #640]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8004112:	4b9e      	ldr	r3, [pc, #632]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800411c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800411e:	4b9b      	ldr	r3, [pc, #620]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004128:	4b98      	ldr	r3, [pc, #608]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800412a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412c:	08db      	lsrs	r3, r3, #3
 800412e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	fb02 f303 	mul.w	r3, r2, r3
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004140:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8111 	beq.w	800436e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b02      	cmp	r3, #2
 8004150:	f000 8083 	beq.w	800425a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b02      	cmp	r3, #2
 8004158:	f200 80a1 	bhi.w	800429e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d056      	beq.n	8004216 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004168:	e099      	b.n	800429e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800416a:	4b88      	ldr	r3, [pc, #544]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d02d      	beq.n	80041d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004176:	4b85      	ldr	r3, [pc, #532]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	08db      	lsrs	r3, r3, #3
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	4a83      	ldr	r2, [pc, #524]	; (8004390 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a0:	4b7a      	ldr	r3, [pc, #488]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80041b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041cc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80041d0:	e087      	b.n	80042e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	ee07 3a90 	vmov	s15, r3
 80041d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004398 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80041e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e4:	4b69      	ldr	r3, [pc, #420]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ec:	ee07 3a90 	vmov	s15, r3
 80041f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80041f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80041fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004210:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004214:	e065      	b.n	80042e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004220:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800439c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004228:	4b58      	ldr	r3, [pc, #352]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004238:	ed97 6a03 	vldr	s12, [r7, #12]
 800423c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800424c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004254:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004258:	e043      	b.n	80042e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	ee07 3a90 	vmov	s15, r3
 8004260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004264:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80043a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426c:	4b47      	ldr	r3, [pc, #284]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004274:	ee07 3a90 	vmov	s15, r3
 8004278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004280:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004298:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800429c:	e021      	b.n	80042e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004398 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80042ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b0:	4b36      	ldr	r3, [pc, #216]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b8:	ee07 3a90 	vmov	s15, r3
 80042bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80042c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80042c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80042e2:	4b2a      	ldr	r3, [pc, #168]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	0a5b      	lsrs	r3, r3, #9
 80042e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004308:	ee17 2a90 	vmov	r2, s15
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800432a:	edd7 6a07 	vldr	s13, [r7, #28]
 800432e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004336:	ee17 2a90 	vmov	r2, s15
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	0e1b      	lsrs	r3, r3, #24
 8004344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004348:	ee07 3a90 	vmov	s15, r3
 800434c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004354:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004358:	edd7 6a07 	vldr	s13, [r7, #28]
 800435c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004364:	ee17 2a90 	vmov	r2, s15
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800436c:	e008      	b.n	8004380 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	609a      	str	r2, [r3, #8]
}
 8004380:	bf00      	nop
 8004382:	3724      	adds	r7, #36	; 0x24
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	58024400 	.word	0x58024400
 8004390:	03d09000 	.word	0x03d09000
 8004394:	46000000 	.word	0x46000000
 8004398:	4c742400 	.word	0x4c742400
 800439c:	4a742400 	.word	0x4a742400
 80043a0:	4bb71b00 	.word	0x4bb71b00

080043a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043b2:	4b53      	ldr	r3, [pc, #332]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d101      	bne.n	80043c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e099      	b.n	80044f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043c2:	4b4f      	ldr	r3, [pc, #316]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4e      	ldr	r2, [pc, #312]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ce:	f7fc fc15 	bl	8000bfc <HAL_GetTick>
 80043d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043d4:	e008      	b.n	80043e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043d6:	f7fc fc11 	bl	8000bfc <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e086      	b.n	80044f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043e8:	4b45      	ldr	r3, [pc, #276]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f0      	bne.n	80043d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043f4:	4b42      	ldr	r3, [pc, #264]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	493f      	ldr	r1, [pc, #252]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	628b      	str	r3, [r1, #40]	; 0x28
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	3b01      	subs	r3, #1
 800440e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	3b01      	subs	r3, #1
 8004418:	025b      	lsls	r3, r3, #9
 800441a:	b29b      	uxth	r3, r3
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	3b01      	subs	r3, #1
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	3b01      	subs	r3, #1
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004438:	4931      	ldr	r1, [pc, #196]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800443e:	4b30      	ldr	r3, [pc, #192]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	492d      	ldr	r1, [pc, #180]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	f023 0220 	bic.w	r2, r3, #32
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4928      	ldr	r1, [pc, #160]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 800445e:	4313      	orrs	r3, r2
 8004460:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004462:	4b27      	ldr	r3, [pc, #156]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	4a26      	ldr	r2, [pc, #152]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004468:	f023 0310 	bic.w	r3, r3, #16
 800446c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <RCCEx_PLL2_Config+0x160>)
 8004474:	4013      	ands	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	69d2      	ldr	r2, [r2, #28]
 800447a:	00d2      	lsls	r2, r2, #3
 800447c:	4920      	ldr	r1, [pc, #128]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004482:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004488:	f043 0310 	orr.w	r3, r3, #16
 800448c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	4a19      	ldr	r2, [pc, #100]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 800449a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800449e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044a0:	e00f      	b.n	80044c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044b4:	e005      	b.n	80044c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	4a11      	ldr	r2, [pc, #68]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ce:	f7fc fb95 	bl	8000bfc <HAL_GetTick>
 80044d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044d4:	e008      	b.n	80044e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044d6:	f7fc fb91 	bl	8000bfc <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e006      	b.n	80044f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <RCCEx_PLL2_Config+0x15c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	58024400 	.word	0x58024400
 8004504:	ffff0007 	.word	0xffff0007

08004508 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004516:	4b53      	ldr	r3, [pc, #332]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b03      	cmp	r3, #3
 8004520:	d101      	bne.n	8004526 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e099      	b.n	800465a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004526:	4b4f      	ldr	r3, [pc, #316]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a4e      	ldr	r2, [pc, #312]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 800452c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004532:	f7fc fb63 	bl	8000bfc <HAL_GetTick>
 8004536:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004538:	e008      	b.n	800454c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800453a:	f7fc fb5f 	bl	8000bfc <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e086      	b.n	800465a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800454c:	4b45      	ldr	r3, [pc, #276]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004558:	4b42      	ldr	r3, [pc, #264]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	051b      	lsls	r3, r3, #20
 8004566:	493f      	ldr	r1, [pc, #252]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	628b      	str	r3, [r1, #40]	; 0x28
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	3b01      	subs	r3, #1
 8004572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	3b01      	subs	r3, #1
 800457c:	025b      	lsls	r3, r3, #9
 800457e:	b29b      	uxth	r3, r3
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	3b01      	subs	r3, #1
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	3b01      	subs	r3, #1
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800459c:	4931      	ldr	r1, [pc, #196]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045a2:	4b30      	ldr	r3, [pc, #192]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	492d      	ldr	r1, [pc, #180]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045b4:	4b2b      	ldr	r3, [pc, #172]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	4928      	ldr	r1, [pc, #160]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045c6:	4b27      	ldr	r3, [pc, #156]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	4a26      	ldr	r2, [pc, #152]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d6:	4b24      	ldr	r3, [pc, #144]	; (8004668 <RCCEx_PLL3_Config+0x160>)
 80045d8:	4013      	ands	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	69d2      	ldr	r2, [r2, #28]
 80045de:	00d2      	lsls	r2, r2, #3
 80045e0:	4920      	ldr	r1, [pc, #128]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045e6:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 80045fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004602:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004604:	e00f      	b.n	8004626 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800460c:	4b15      	ldr	r3, [pc, #84]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	4a14      	ldr	r2, [pc, #80]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004618:	e005      	b.n	8004626 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	4a11      	ldr	r2, [pc, #68]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004624:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004632:	f7fc fae3 	bl	8000bfc <HAL_GetTick>
 8004636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004638:	e008      	b.n	800464c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800463a:	f7fc fadf 	bl	8000bfc <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e006      	b.n	800465a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <RCCEx_PLL3_Config+0x15c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	58024400 	.word	0x58024400
 8004668:	ffff0007 	.word	0xffff0007

0800466c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e075      	b.n	800476a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7fc f887 	bl	80007a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2204      	movs	r2, #4
 800469a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f868 	bl	8004774 <HAL_SD_InitCard>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e05d      	b.n	800476a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80046ae:	f107 0308 	add.w	r3, r7, #8
 80046b2:	4619      	mov	r1, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fda9 	bl	800520c <HAL_SD_GetCardStatus>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e052      	b.n	800476a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80046c4:	7e3b      	ldrb	r3, [r7, #24]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80046ca:	7e7b      	ldrb	r3, [r7, #25]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d10a      	bne.n	80046ee <HAL_SD_Init+0x82>
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <HAL_SD_Init+0x78>
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ea:	659a      	str	r2, [r3, #88]	; 0x58
 80046ec:	e00b      	b.n	8004706 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d104      	bne.n	8004700 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046fc:	659a      	str	r2, [r3, #88]	; 0x58
 80046fe:	e002      	b.n	8004706 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fe67 	bl	80053e0 <HAL_SD_ConfigWideBusOperation>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e026      	b.n	800476a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800471c:	f7fc fa6e 	bl	8000bfc <HAL_GetTick>
 8004720:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004722:	e011      	b.n	8004748 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004724:	f7fc fa6a 	bl	8000bfc <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d109      	bne.n	8004748 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800473a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e010      	b.n	800476a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 ff5b 	bl	8005604 <HAL_SD_GetCardState>
 800474e:	4603      	mov	r3, r0
 8004750:	2b04      	cmp	r3, #4
 8004752:	d1e7      	bne.n	8004724 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b08d      	sub	sp, #52	; 0x34
 8004778:	af02      	add	r7, sp, #8
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004790:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004794:	f7fe fd24 	bl	80031e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e06a      	b.n	800488a <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	4a36      	ldr	r2, [pc, #216]	; (8004894 <HAL_SD_InitCard+0x120>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681c      	ldr	r4, [r3, #0]
 80047c6:	466a      	mov	r2, sp
 80047c8:	f107 0318 	add.w	r3, r7, #24
 80047cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80047d4:	f107 030c 	add.w	r3, r7, #12
 80047d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047da:	4620      	mov	r0, r4
 80047dc:	f001 fe7e 	bl	80064dc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 fec1 	bl	800656c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80047f6:	4a28      	ldr	r2, [pc, #160]	; (8004898 <HAL_SD_InitCard+0x124>)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	4618      	mov	r0, r3
 8004802:	f7fc fa07 	bl	8000c14 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 ffea 	bl	80057e0 <SD_PowerON>
 800480c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00b      	beq.n	800482c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e02e      	b.n	800488a <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 ff09 	bl	8005644 <SD_InitCard>
 8004832:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e01b      	b.n	800488a <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800485a:	4618      	mov	r0, r3
 800485c:	f001 ff1c 	bl	8006698 <SDMMC_CmdBlockLength>
 8004860:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00f      	beq.n	8004888 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0b      	ldr	r2, [pc, #44]	; (800489c <HAL_SD_InitCard+0x128>)
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	372c      	adds	r7, #44	; 0x2c
 800488e:	46bd      	mov	sp, r7
 8004890:	bd90      	pop	{r4, r7, pc}
 8004892:	bf00      	nop
 8004894:	014f8b59 	.word	0x014f8b59
 8004898:	00012110 	.word	0x00012110
 800489c:	1fe00fff 	.word	0x1fe00fff

080048a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08c      	sub	sp, #48	; 0x30
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e08d      	b.n	80049e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	f040 8086 	bne.w	80049e2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80048dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	441a      	add	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d907      	bls.n	80048fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e074      	b.n	80049e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	025a      	lsls	r2, r3, #9
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	2b01      	cmp	r3, #1
 800491e:	d002      	beq.n	8004926 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	025b      	lsls	r3, r3, #9
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004926:	f04f 33ff 	mov.w	r3, #4294967295
 800492a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	025b      	lsls	r3, r3, #9
 8004930:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004932:	2390      	movs	r3, #144	; 0x90
 8004934:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004936:	2302      	movs	r3, #2
 8004938:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800493a:	2300      	movs	r3, #0
 800493c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800493e:	2300      	movs	r3, #0
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f107 0210 	add.w	r2, r7, #16
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f001 fe77 	bl	8006640 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004960:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2201      	movs	r2, #1
 8004970:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d90a      	bls.n	800498e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2282      	movs	r2, #130	; 0x82
 800497c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004984:	4618      	mov	r0, r3
 8004986:	f001 fecd 	bl	8006724 <SDMMC_CmdReadMultiBlock>
 800498a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800498c:	e009      	b.n	80049a2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2281      	movs	r2, #129	; 0x81
 8004992:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800499a:	4618      	mov	r0, r3
 800499c:	f001 fe9f 	bl	80066de <SDMMC_CmdReadSingleBlock>
 80049a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d012      	beq.n	80049ce <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <HAL_SD_ReadBlocks_DMA+0x14c>)
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e00a      	b.n	80049e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80049dc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3730      	adds	r7, #48	; 0x30
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	1fe00fff 	.word	0x1fe00fff

080049f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08c      	sub	sp, #48	; 0x30
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d107      	bne.n	8004a18 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e08d      	b.n	8004b34 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	f040 8086 	bne.w	8004b32 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	441a      	add	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d907      	bls.n	8004a4a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e074      	b.n	8004b34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	025a      	lsls	r2, r3, #9
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d002      	beq.n	8004a76 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	025b      	lsls	r3, r3, #9
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	025b      	lsls	r3, r3, #9
 8004a80:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004a82:	2390      	movs	r3, #144	; 0x90
 8004a84:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f107 0210 	add.w	r2, r7, #16
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 fdcf 	bl	8006640 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d90a      	bls.n	8004ade <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	22a0      	movs	r2, #160	; 0xa0
 8004acc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 fe6b 	bl	80067b0 <SDMMC_CmdWriteMultiBlock>
 8004ada:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004adc:	e009      	b.n	8004af2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2290      	movs	r2, #144	; 0x90
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 fe3d 	bl	800676a <SDMMC_CmdWriteSingleBlock>
 8004af0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a0f      	ldr	r2, [pc, #60]	; (8004b3c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e00a      	b.n	8004b34 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3730      	adds	r7, #48	; 0x30
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	1fe00fff 	.word	0x1fe00fff

08004b40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_SD_IRQHandler+0x2e>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f001 f926 	bl	8005db8 <SD_Read_IT>
 8004b6c:	e19a      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80ac 	beq.w	8004cd6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <HAL_SD_IRQHandler+0x1b8>)
 8004b94:	400b      	ands	r3, r1
 8004b96:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d038      	beq.n	8004c34 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <HAL_SD_IRQHandler+0x96>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d011      	beq.n	8004bfa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fe0c 	bl	80067f8 <SDMMC_CmdStopTransfer>
 8004be0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f95b 	bl	8004eb0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a3f      	ldr	r2, [pc, #252]	; (8004cfc <HAL_SD_IRQHandler+0x1bc>)
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <HAL_SD_IRQHandler+0xe4>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f002 fab1 	bl	800718c <HAL_SD_RxCpltCallback>
 8004c2a:	e13b      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f002 faa3 	bl	8007178 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c32:	e137      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8132 	beq.w	8004ea4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2200      	movs	r2, #0
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <HAL_SD_IRQHandler+0x12c>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d011      	beq.n	8004c90 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 fdc1 	bl	80067f8 <SDMMC_CmdStopTransfer>
 8004c76:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f910 	bl	8004eb0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_SD_IRQHandler+0x172>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f002 fa60 	bl	8007178 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d105      	bne.n	8004cce <HAL_SD_IRQHandler+0x18e>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80eb 	beq.w	8004ea4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f002 fa5c 	bl	800718c <HAL_SD_RxCpltCallback>
}
 8004cd4:	e0e6      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00d      	beq.n	8004d00 <HAL_SD_IRQHandler+0x1c0>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f001 f8a8 	bl	8005e44 <SD_Write_IT>
 8004cf4:	e0d6      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
 8004cf6:	bf00      	nop
 8004cf8:	ffff3ec5 	.word	0xffff3ec5
 8004cfc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 809d 	beq.w	8004e4a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d22:	f043 0202 	orr.w	r2, r3, #2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	f043 0208 	orr.w	r2, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d70:	f043 0210 	orr.w	r2, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a4b      	ldr	r2, [pc, #300]	; (8004eac <HAL_SD_IRQHandler+0x36c>)
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004d8e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dbe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fd17 	bl	80067f8 <SDMMC_CmdStopTransfer>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004de4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f851 	bl	8004eb0 <HAL_SD_ErrorCallback>
}
 8004e0e:	e049      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d044      	beq.n	8004ea4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d040      	beq.n	8004ea4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e30:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2200      	movs	r2, #0
 8004e38:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f834 	bl	8004eb0 <HAL_SD_ErrorCallback>
}
 8004e48:	e02c      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d025      	beq.n	8004ea4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10c      	bne.n	8004e8a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 f84a 	bl	8005f14 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8004e80:	e010      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 f832 	bl	8005eec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8004e88:	e00c      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f001 f833 	bl	8005f00 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8004e9a:	e003      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f001 f81b 	bl	8005ed8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8004ea2:	e7ff      	b.n	8004ea4 <HAL_SD_IRQHandler+0x364>
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	18000f3a 	.word	0x18000f3a

08004eb0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	0f9b      	lsrs	r3, r3, #30
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	0e9b      	lsrs	r3, r3, #26
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	0e1b      	lsrs	r3, r3, #24
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f24:	0d1b      	lsrs	r3, r3, #20
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f42:	0bdb      	lsrs	r3, r3, #15
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f54:	0b9b      	lsrs	r3, r3, #14
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f66:	0b5b      	lsrs	r3, r3, #13
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f78:	0b1b      	lsrs	r3, r3, #12
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d163      	bne.n	800505c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f98:	009a      	lsls	r2, r3, #2
 8004f9a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004fa4:	0f92      	lsrs	r2, r2, #30
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb0:	0edb      	lsrs	r3, r3, #27
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc2:	0e1b      	lsrs	r3, r3, #24
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd4:	0d5b      	lsrs	r3, r3, #21
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe6:	0c9b      	lsrs	r3, r3, #18
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff8:	0bdb      	lsrs	r3, r3, #15
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	b2da      	uxtb	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	7e1b      	ldrb	r3, [r3, #24]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	3302      	adds	r3, #2
 800501c:	2201      	movs	r2, #1
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005026:	fb03 f202 	mul.w	r2, r3, r2
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	7a1b      	ldrb	r3, [r3, #8]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	2201      	movs	r2, #1
 800503a:	409a      	lsls	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005048:	0a52      	lsrs	r2, r2, #9
 800504a:	fb03 f202 	mul.w	r2, r3, r2
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
 800505a:	e031      	b.n	80050c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	2b01      	cmp	r3, #1
 8005062:	d11d      	bne.n	80050a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	431a      	orrs	r2, r3
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	3301      	adds	r3, #1
 8005080:	029a      	lsls	r2, r3, #10
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005094:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
 800509e:	e00f      	b.n	80050c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a58      	ldr	r2, [pc, #352]	; (8005208 <HAL_SD_GetCardCSD+0x344>)
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e09d      	b.n	80051fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c4:	0b9b      	lsrs	r3, r3, #14
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d6:	09db      	lsrs	r3, r3, #7
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050f8:	0fdb      	lsrs	r3, r3, #31
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005104:	0f5b      	lsrs	r3, r3, #29
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	b2da      	uxtb	r2, r3
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005116:	0e9b      	lsrs	r3, r3, #26
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	b2da      	uxtb	r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005128:	0d9b      	lsrs	r3, r3, #22
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	b2da      	uxtb	r2, r3
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800513a:	0d5b      	lsrs	r3, r3, #21
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	b2da      	uxtb	r2, r3
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005156:	0c1b      	lsrs	r3, r3, #16
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800516a:	0bdb      	lsrs	r3, r3, #15
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800517e:	0b9b      	lsrs	r3, r3, #14
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005192:	0b5b      	lsrs	r3, r3, #13
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	b2da      	uxtb	r2, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a6:	0b1b      	lsrs	r3, r3, #12
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ba:	0a9b      	lsrs	r3, r3, #10
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	1fe00fff 	.word	0x1fe00fff

0800520c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b094      	sub	sp, #80	; 0x50
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b03      	cmp	r3, #3
 8005226:	d101      	bne.n	800522c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0a7      	b.n	800537c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800522c:	f107 0308 	add.w	r3, r7, #8
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fb62 	bl	80058fc <SD_SendSDStatus>
 8005238:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800523a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800523c:	2b00      	cmp	r3, #0
 800523e:	d011      	beq.n	8005264 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a4f      	ldr	r2, [pc, #316]	; (8005384 <HAL_SD_GetCardStatus+0x178>)
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800524c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005262:	e070      	b.n	8005346 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	b2da      	uxtb	r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	b29b      	uxth	r3, r3
 800528a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800528e:	b29a      	uxth	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	0e1b      	lsrs	r3, r3, #24
 8005294:	b29b      	uxth	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b29a      	uxth	r2, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	061a      	lsls	r2, r3, #24
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80052b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	0e1b      	lsrs	r3, r3, #24
 80052ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	0d1b      	lsrs	r3, r3, #20
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	4313      	orrs	r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	0a9b      	lsrs	r3, r3, #10
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005308:	b2da      	uxtb	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	b2da      	uxtb	r2, r3
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	b2da      	uxtb	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	b2da      	uxtb	r2, r3
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	0e1b      	lsrs	r3, r3, #24
 8005340:	b2da      	uxtb	r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800534e:	4618      	mov	r0, r3
 8005350:	f001 f9a2 	bl	8006698 <SDMMC_CmdBlockLength>
 8005354:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00d      	beq.n	8005378 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a08      	ldr	r2, [pc, #32]	; (8005384 <HAL_SD_GetCardStatus+0x178>)
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005368:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8005378:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800537c:	4618      	mov	r0, r3
 800537e:	3750      	adds	r7, #80	; 0x50
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	1fe00fff 	.word	0x1fe00fff

08005388 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b08d      	sub	sp, #52	; 0x34
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2203      	movs	r2, #3
 80053f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	2b03      	cmp	r3, #3
 8005402:	d02e      	beq.n	8005462 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540a:	d106      	bne.n	800541a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	635a      	str	r2, [r3, #52]	; 0x34
 8005418:	e029      	b.n	800546e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005420:	d10a      	bne.n	8005438 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fb62 	bl	8005aec <SD_WideBus_Enable>
 8005428:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	635a      	str	r2, [r3, #52]	; 0x34
 8005436:	e01a      	b.n	800546e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fb9f 	bl	8005b82 <SD_WideBus_Disable>
 8005444:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	635a      	str	r2, [r3, #52]	; 0x34
 8005452:	e00c      	b.n	800546e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	635a      	str	r2, [r3, #52]	; 0x34
 8005460:	e005      	b.n	800546e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005466:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a5e      	ldr	r2, [pc, #376]	; (80055f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005484:	e094      	b.n	80055b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005486:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800548a:	f7fd fea9 	bl	80031e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800548e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8083 	beq.w	800559e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	4950      	ldr	r1, [pc, #320]	; (80055f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80054b6:	fba1 1303 	umull	r1, r3, r1, r3
 80054ba:	0e1b      	lsrs	r3, r3, #24
 80054bc:	429a      	cmp	r2, r3
 80054be:	d303      	bcc.n	80054c8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e05a      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d0:	d103      	bne.n	80054da <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	e051      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e2:	d126      	bne.n	8005532 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10e      	bne.n	800550a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	4a43      	ldr	r2, [pc, #268]	; (80055fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d906      	bls.n	8005502 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	4a40      	ldr	r2, [pc, #256]	; (80055f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	0e5b      	lsrs	r3, r3, #25
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	e03d      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e039      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	6a3a      	ldr	r2, [r7, #32]
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	4a39      	ldr	r2, [pc, #228]	; (80055fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d906      	bls.n	800552a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	4a36      	ldr	r2, [pc, #216]	; (80055f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	0e5b      	lsrs	r3, r3, #25
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e029      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	e025      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10e      	bne.n	8005558 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	4a30      	ldr	r2, [pc, #192]	; (8005600 <HAL_SD_ConfigWideBusOperation+0x220>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d906      	bls.n	8005550 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	4a2c      	ldr	r2, [pc, #176]	; (80055f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	0e1b      	lsrs	r3, r3, #24
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e016      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e012      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	6a3a      	ldr	r2, [r7, #32]
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	4a26      	ldr	r2, [pc, #152]	; (8005600 <HAL_SD_ConfigWideBusOperation+0x220>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d906      	bls.n	8005578 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	4a22      	ldr	r2, [pc, #136]	; (80055f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	0e1b      	lsrs	r3, r3, #24
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e002      	b.n	800557e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681c      	ldr	r4, [r3, #0]
 8005582:	466a      	mov	r2, sp
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	e893 0003 	ldmia.w	r3, {r0, r1}
 800558c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005590:	f107 0308 	add.w	r3, r7, #8
 8005594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005596:	4620      	mov	r0, r4
 8005598:	f000 ffa0 	bl	80064dc <SDMMC_Init>
 800559c:	e008      	b.n	80055b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 f86d 	bl	8006698 <SDMMC_CmdBlockLength>
 80055be:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00c      	beq.n	80055e0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 80055cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80055e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	372c      	adds	r7, #44	; 0x2c
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd90      	pop	{r4, r7, pc}
 80055f4:	1fe00fff 	.word	0x1fe00fff
 80055f8:	55e63b89 	.word	0x55e63b89
 80055fc:	02faf080 	.word	0x02faf080
 8005600:	017d7840 	.word	0x017d7840

08005604 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005610:	f107 030c 	add.w	r3, r7, #12
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa40 	bl	8005a9c <SD_SendStatus>
 800561c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	0a5b      	lsrs	r3, r3, #9
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800563a:	693b      	ldr	r3, [r7, #16]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b090      	sub	sp, #64	; 0x40
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8005650:	f7fb fad4 	bl	8000bfc <HAL_GetTick>
 8005654:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 ff97 	bl	800658e <SDMMC_GetPowerState>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005666:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800566a:	e0b5      	b.n	80057d8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	2b03      	cmp	r3, #3
 8005672:	d02e      	beq.n	80056d2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f001 f9e2 	bl	8006a42 <SDMMC_CmdSendCID>
 800567e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <SD_InitCard+0x46>
    {
      return errorstate;
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	e0a6      	b.n	80057d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2100      	movs	r1, #0
 8005690:	4618      	mov	r0, r3
 8005692:	f000 ffc2 	bl	800661a <SDMMC_GetResponse>
 8005696:	4602      	mov	r2, r0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2104      	movs	r1, #4
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 ffb9 	bl	800661a <SDMMC_GetResponse>
 80056a8:	4602      	mov	r2, r0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2108      	movs	r1, #8
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 ffb0 	bl	800661a <SDMMC_GetResponse>
 80056ba:	4602      	mov	r2, r0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	210c      	movs	r1, #12
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 ffa7 	bl	800661a <SDMMC_GetResponse>
 80056cc:	4602      	mov	r2, r0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d01d      	beq.n	8005716 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80056da:	e019      	b.n	8005710 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f107 020a 	add.w	r2, r7, #10
 80056e4:	4611      	mov	r1, r2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 f9ea 	bl	8006ac0 <SDMMC_CmdSetRelAdd>
 80056ec:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	e06f      	b.n	80057d8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80056f8:	f7fb fa80 	bl	8000bfc <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3287 	movw	r2, #4999	; 0x1387
 8005706:	4293      	cmp	r3, r2
 8005708:	d902      	bls.n	8005710 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800570a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800570e:	e063      	b.n	80057d8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8005710:	897b      	ldrh	r3, [r7, #10]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0e2      	beq.n	80056dc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	2b03      	cmp	r3, #3
 800571c:	d036      	beq.n	800578c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800571e:	897b      	ldrh	r3, [r7, #10]
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f001 f9a4 	bl	8006a80 <SDMMC_CmdSendCSD>
 8005738:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <SD_InitCard+0x100>
    {
      return errorstate;
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	e049      	b.n	80057d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2100      	movs	r1, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f000 ff65 	bl	800661a <SDMMC_GetResponse>
 8005750:	4602      	mov	r2, r0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2104      	movs	r1, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f000 ff5c 	bl	800661a <SDMMC_GetResponse>
 8005762:	4602      	mov	r2, r0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2108      	movs	r1, #8
 800576e:	4618      	mov	r0, r3
 8005770:	f000 ff53 	bl	800661a <SDMMC_GetResponse>
 8005774:	4602      	mov	r2, r0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	210c      	movs	r1, #12
 8005780:	4618      	mov	r0, r3
 8005782:	f000 ff4a 	bl	800661a <SDMMC_GetResponse>
 8005786:	4602      	mov	r2, r0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2104      	movs	r1, #4
 8005792:	4618      	mov	r0, r3
 8005794:	f000 ff41 	bl	800661a <SDMMC_GetResponse>
 8005798:	4603      	mov	r3, r0
 800579a:	0d1a      	lsrs	r2, r3, #20
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80057a0:	f107 030c 	add.w	r3, r7, #12
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fb8c 	bl	8004ec4 <HAL_SD_GetCardCSD>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057b6:	e00f      	b.n	80057d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f001 f853 	bl	8006870 <SDMMC_CmdSelDesel>
 80057ca:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <SD_InitCard+0x192>
  {
    return errorstate;
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	e000      	b.n	80057d8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3740      	adds	r7, #64	; 0x40
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 f85c 	bl	80068b6 <SDMMC_CmdGoIdleState>
 80057fe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	e072      	b.n	80058f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f001 f86f 	bl	80068f2 <SDMMC_CmdOperCond>
 8005814:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800581c:	d10d      	bne.n	800583a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f001 f844 	bl	80068b6 <SDMMC_CmdGoIdleState>
 800582e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <SD_PowerON+0x60>
    {
      return errorstate;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	e05a      	b.n	80058f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d137      	bne.n	80058b8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2100      	movs	r1, #0
 800584e:	4618      	mov	r0, r3
 8005850:	f001 f86f 	bl	8006932 <SDMMC_CmdAppCommand>
 8005854:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d02d      	beq.n	80058b8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800585c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005860:	e046      	b.n	80058f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f001 f862 	bl	8006932 <SDMMC_CmdAppCommand>
 800586e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <SD_PowerON+0x9a>
    {
      return errorstate;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	e03a      	b.n	80058f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	491e      	ldr	r1, [pc, #120]	; (80058f8 <SD_PowerON+0x118>)
 8005880:	4618      	mov	r0, r3
 8005882:	f001 f879 	bl	8006978 <SDMMC_CmdAppOperCommand>
 8005886:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800588e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005892:	e02d      	b.n	80058f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f000 febd 	bl	800661a <SDMMC_GetResponse>
 80058a0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	0fdb      	lsrs	r3, r3, #31
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <SD_PowerON+0xce>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <SD_PowerON+0xd0>
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]

    count++;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058be:	4293      	cmp	r3, r2
 80058c0:	d802      	bhi.n	80058c8 <SD_PowerON+0xe8>
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0cc      	beq.n	8005862 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d902      	bls.n	80058d8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80058d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058d6:	e00b      	b.n	80058f0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	c1100000 	.word	0xc1100000

080058fc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08c      	sub	sp, #48	; 0x30
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005906:	f7fb f979 	bl	8000bfc <HAL_GetTick>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2100      	movs	r1, #0
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fe7f 	bl	800661a <SDMMC_GetResponse>
 800591c:	4603      	mov	r3, r0
 800591e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005926:	d102      	bne.n	800592e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800592c:	e0b0      	b.n	8005a90 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2140      	movs	r1, #64	; 0x40
 8005934:	4618      	mov	r0, r3
 8005936:	f000 feaf 	bl	8006698 <SDMMC_CmdBlockLength>
 800593a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	e0a0      	b.n	8005a90 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	041b      	lsls	r3, r3, #16
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f000 ffe9 	bl	8006932 <SDMMC_CmdAppCommand>
 8005960:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	e08d      	b.n	8005a90 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005974:	f04f 33ff 	mov.w	r3, #4294967295
 8005978:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800597a:	2340      	movs	r3, #64	; 0x40
 800597c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800597e:	2360      	movs	r3, #96	; 0x60
 8005980:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005982:	2302      	movs	r3, #2
 8005984:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005986:	2300      	movs	r3, #0
 8005988:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800598a:	2301      	movs	r3, #1
 800598c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f107 0208 	add.w	r2, r7, #8
 8005996:	4611      	mov	r1, r2
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fe51 	bl	8006640 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 f8d1 	bl	8006b4a <SDMMC_CmdStatusRegister>
 80059a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d02b      	beq.n	8005a08 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	e069      	b.n	8005a90 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d013      	beq.n	80059f2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ce:	e00d      	b.n	80059ec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fdab 	bl	8006530 <SDMMC_ReadFIFO>
 80059da:	4602      	mov	r2, r0
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	601a      	str	r2, [r3, #0]
        pData++;
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	3304      	adds	r3, #4
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	3301      	adds	r3, #1
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	2b07      	cmp	r3, #7
 80059f0:	d9ee      	bls.n	80059d0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80059f2:	f7fb f903 	bl	8000bfc <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d102      	bne.n	8005a08 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005a02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a06:	e043      	b.n	8005a90 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0d2      	beq.n	80059bc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005a24:	2308      	movs	r3, #8
 8005a26:	e033      	b.n	8005a90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a36:	2302      	movs	r3, #2
 8005a38:	e02a      	b.n	8005a90 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d017      	beq.n	8005a78 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005a48:	2320      	movs	r3, #32
 8005a4a:	e021      	b.n	8005a90 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fd6d 	bl	8006530 <SDMMC_ReadFIFO>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	601a      	str	r2, [r3, #0]
    pData++;
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	3304      	adds	r3, #4
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a62:	f7fb f8cb 	bl	8000bfc <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d102      	bne.n	8005a78 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005a72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a76:	e00b      	b.n	8005a90 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e2      	bne.n	8005a4c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a03      	ldr	r2, [pc, #12]	; (8005a98 <SD_SendSDStatus+0x19c>)
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3730      	adds	r7, #48	; 0x30
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	18000f3a 	.word	0x18000f3a

08005a9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005aac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ab0:	e018      	b.n	8005ae4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	041b      	lsls	r3, r3, #16
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f001 f820 	bl	8006b04 <SDMMC_CmdSendStatus>
 8005ac4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	e009      	b.n	8005ae4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fd9f 	bl	800661a <SDMMC_GetResponse>
 8005adc:	4602      	mov	r2, r0
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	2300      	movs	r3, #0
 8005afa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fd89 	bl	800661a <SDMMC_GetResponse>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b12:	d102      	bne.n	8005b1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b18:	e02f      	b.n	8005b7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f879 	bl	8005c18 <SD_FindSCR>
 8005b26:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	e023      	b.n	8005b7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01c      	beq.n	8005b76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b44:	041b      	lsls	r3, r3, #16
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f000 fef2 	bl	8006932 <SDMMC_CmdAppCommand>
 8005b4e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	e00f      	b.n	8005b7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2102      	movs	r1, #2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 ff29 	bl	80069b8 <SDMMC_CmdBusWidth>
 8005b66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	e003      	b.n	8005b7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e001      	b.n	8005b7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2100      	movs	r1, #0
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fd3e 	bl	800661a <SDMMC_GetResponse>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ba8:	d102      	bne.n	8005bb0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bae:	e02f      	b.n	8005c10 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005bb0:	f107 030c 	add.w	r3, r7, #12
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f82e 	bl	8005c18 <SD_FindSCR>
 8005bbc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	e023      	b.n	8005c10 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01c      	beq.n	8005c0c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	041b      	lsls	r3, r3, #16
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f000 fea7 	bl	8006932 <SDMMC_CmdAppCommand>
 8005be4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	e00f      	b.n	8005c10 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fede 	bl	80069b8 <SDMMC_CmdBusWidth>
 8005bfc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	e003      	b.n	8005c10 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e001      	b.n	8005c10 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	; 0x38
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c22:	f7fa ffeb 	bl	8000bfc <HAL_GetTick>
 8005c26:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2108      	movs	r1, #8
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fd2a 	bl	8006698 <SDMMC_CmdBlockLength>
 8005c44:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	e0ad      	b.n	8005dac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f000 fe68 	bl	8006932 <SDMMC_CmdAppCommand>
 8005c62:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <SD_FindSCR+0x56>
  {
    return errorstate;
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	e09e      	b.n	8005dac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c72:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005c74:	2308      	movs	r3, #8
 8005c76:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005c78:	2330      	movs	r3, #48	; 0x30
 8005c7a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f107 0210 	add.w	r2, r7, #16
 8005c90:	4611      	mov	r1, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fcd4 	bl	8006640 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 feae 	bl	80069fe <SDMMC_CmdSendSCR>
 8005ca2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d027      	beq.n	8005cfa <SD_FindSCR+0xe2>
  {
    return errorstate;
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	e07e      	b.n	8005dac <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d113      	bne.n	8005ce4 <SD_FindSCR+0xcc>
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d110      	bne.n	8005ce4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fc32 	bl	8006530 <SDMMC_ReadFIFO>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fc2b 	bl	8006530 <SDMMC_ReadFIFO>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	60fb      	str	r3, [r7, #12]
      index++;
 8005cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ce4:	f7fa ff8a 	bl	8000bfc <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d102      	bne.n	8005cfa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005cf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cf8:	e058      	b.n	8005dac <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d00:	f240 532a 	movw	r3, #1322	; 0x52a
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0d1      	beq.n	8005cae <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d20:	2308      	movs	r3, #8
 8005d22:	e043      	b.n	8005dac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2202      	movs	r2, #2
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e036      	b.n	8005dac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2220      	movs	r2, #32
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005d54:	2320      	movs	r3, #32
 8005d56:	e029      	b.n	8005dac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <SD_FindSCR+0x19c>)
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	061a      	lsls	r2, r3, #24
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	0a1b      	lsrs	r3, r3, #8
 8005d72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005d76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	0e1b      	lsrs	r3, r3, #24
 8005d7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	601a      	str	r2, [r3, #0]
    scr++;
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	3304      	adds	r3, #4
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	061a      	lsls	r2, r3, #24
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	021b      	lsls	r3, r3, #8
 8005d90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005d9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	0e1b      	lsrs	r3, r3, #24
 8005da4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3738      	adds	r7, #56	; 0x38
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	18000f3a 	.word	0x18000f3a

08005db8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	2b1f      	cmp	r3, #31
 8005dcc:	d936      	bls.n	8005e3c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	e027      	b.n	8005e24 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fba9 	bl	8006530 <SDMMC_ReadFIFO>
 8005dde:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	3301      	adds	r3, #1
 8005dec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	0a1b      	lsrs	r3, r3, #8
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	0e1b      	lsrs	r3, r3, #24
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	3301      	adds	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b07      	cmp	r3, #7
 8005e28:	d9d4      	bls.n	8005dd4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	f1a3 0220 	sub.w	r2, r3, #32
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	2b1f      	cmp	r3, #31
 8005e58:	d93a      	bls.n	8005ed0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e02b      	b.n	8005eb8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	021a      	lsls	r2, r3, #8
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	041a      	lsls	r2, r3, #16
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	061a      	lsls	r2, r3, #24
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f107 020c 	add.w	r2, r7, #12
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fb4c 	bl	800654a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2b07      	cmp	r3, #7
 8005ebc:	d9d0      	bls.n	8005e60 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f1a3 0220 	sub.w	r2, r3, #32
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	621a      	str	r2, [r3, #32]
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e049      	b.n	8005fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f841 	bl	8005fd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f000 fa00 	bl	800636c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d001      	beq.n	8006004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e054      	b.n	80060ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a26      	ldr	r2, [pc, #152]	; (80060bc <HAL_TIM_Base_Start_IT+0xd0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602e:	d01d      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1f      	ldr	r2, [pc, #124]	; (80060c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <HAL_TIM_Base_Start_IT+0xe0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x80>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d115      	bne.n	8006098 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <HAL_TIM_Base_Start_IT+0xec>)
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b06      	cmp	r3, #6
 800607c:	d015      	beq.n	80060aa <HAL_TIM_Base_Start_IT+0xbe>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d011      	beq.n	80060aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006096:	e008      	b.n	80060aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	e000      	b.n	80060ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40001800 	.word	0x40001800
 80060d4:	40014000 	.word	0x40014000
 80060d8:	00010007 	.word	0x00010007

080060dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d122      	bne.n	8006138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d11b      	bne.n	8006138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0202 	mvn.w	r2, #2
 8006108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f905 	bl	800632e <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8f7 	bl	800631a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f908 	bl	8006342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d122      	bne.n	800618c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b04      	cmp	r3, #4
 8006152:	d11b      	bne.n	800618c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0204 	mvn.w	r2, #4
 800615c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f8db 	bl	800632e <HAL_TIM_IC_CaptureCallback>
 8006178:	e005      	b.n	8006186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f8cd 	bl	800631a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f8de 	bl	8006342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b08      	cmp	r3, #8
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0208 	mvn.w	r2, #8
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2204      	movs	r2, #4
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8b1 	bl	800632e <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f8a3 	bl	800631a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f8b4 	bl	8006342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b10      	cmp	r3, #16
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0210 	mvn.w	r2, #16
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2208      	movs	r2, #8
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f887 	bl	800632e <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f879 	bl	800631a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f88a 	bl	8006342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b01      	cmp	r3, #1
 8006240:	d10e      	bne.n	8006260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0201 	mvn.w	r2, #1
 8006258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fa fa6f 	bl	800073e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d10e      	bne.n	800628c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006278:	2b80      	cmp	r3, #128	; 0x80
 800627a:	d107      	bne.n	800628c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f914 	bl	80064b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629a:	d10e      	bne.n	80062ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a6:	2b80      	cmp	r3, #128	; 0x80
 80062a8:	d107      	bne.n	80062ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f907 	bl	80064c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d10e      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d107      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f838 	bl	8006356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d10e      	bne.n	8006312 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d107      	bne.n	8006312 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f06f 0220 	mvn.w	r2, #32
 800630a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8c7 	bl	80064a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
	...

0800636c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a40      	ldr	r2, [pc, #256]	; (8006480 <TIM_Base_SetConfig+0x114>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638a:	d00f      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3d      	ldr	r2, [pc, #244]	; (8006484 <TIM_Base_SetConfig+0x118>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00b      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3c      	ldr	r2, [pc, #240]	; (8006488 <TIM_Base_SetConfig+0x11c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3b      	ldr	r2, [pc, #236]	; (800648c <TIM_Base_SetConfig+0x120>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a3a      	ldr	r2, [pc, #232]	; (8006490 <TIM_Base_SetConfig+0x124>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a2f      	ldr	r2, [pc, #188]	; (8006480 <TIM_Base_SetConfig+0x114>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01f      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063cc:	d01b      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a2c      	ldr	r2, [pc, #176]	; (8006484 <TIM_Base_SetConfig+0x118>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d017      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2b      	ldr	r2, [pc, #172]	; (8006488 <TIM_Base_SetConfig+0x11c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2a      	ldr	r2, [pc, #168]	; (800648c <TIM_Base_SetConfig+0x120>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00f      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a29      	ldr	r2, [pc, #164]	; (8006490 <TIM_Base_SetConfig+0x124>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00b      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a28      	ldr	r2, [pc, #160]	; (8006494 <TIM_Base_SetConfig+0x128>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d007      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a27      	ldr	r2, [pc, #156]	; (8006498 <TIM_Base_SetConfig+0x12c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_Base_SetConfig+0x9a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a26      	ldr	r2, [pc, #152]	; (800649c <TIM_Base_SetConfig+0x130>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d108      	bne.n	8006418 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800640c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a10      	ldr	r2, [pc, #64]	; (8006480 <TIM_Base_SetConfig+0x114>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00f      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <TIM_Base_SetConfig+0x124>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00b      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a11      	ldr	r2, [pc, #68]	; (8006494 <TIM_Base_SetConfig+0x128>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d007      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <TIM_Base_SetConfig+0x12c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a0f      	ldr	r2, [pc, #60]	; (800649c <TIM_Base_SetConfig+0x130>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d103      	bne.n	800646c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	615a      	str	r2, [r3, #20]
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40010000 	.word	0x40010000
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800
 800648c:	40000c00 	.word	0x40000c00
 8006490:	40010400 	.word	0x40010400
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80064dc:	b084      	sub	sp, #16
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	f107 001c 	add.w	r0, r7, #28
 80064ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80064f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80064f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80064f6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80064fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80064fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8006502:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	4b07      	ldr	r3, [pc, #28]	; (800652c <SDMMC_Init+0x50>)
 8006510:	4013      	ands	r3, r2
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	b004      	add	sp, #16
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	ffc02c00 	.word	0xffc02c00

08006530 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f043 0203 	orr.w	r2, r3, #3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0303 	and.w	r3, r3, #3
}
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80065ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80065d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80065d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <SDMMC_SendCommand+0x50>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	fffee0c0 	.word	0xfffee0c0

08006600 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	b2db      	uxtb	r3, r3
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3314      	adds	r3, #20
 8006628:	461a      	mov	r2, r3
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	4413      	add	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006666:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800666c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8006672:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800668a:	2300      	movs	r3, #0

}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80066a6:	2310      	movs	r3, #16
 80066a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066ba:	f107 0308 	add.w	r3, r7, #8
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff ff73 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80066c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ca:	2110      	movs	r1, #16
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fa5f 	bl	8006b90 <SDMMC_GetCmdResp1>
 80066d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066d4:	69fb      	ldr	r3, [r7, #28]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3720      	adds	r7, #32
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b088      	sub	sp, #32
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80066ec:	2311      	movs	r3, #17
 80066ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066f6:	2300      	movs	r3, #0
 80066f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff ff50 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800670c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006710:	2111      	movs	r1, #17
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa3c 	bl	8006b90 <SDMMC_GetCmdResp1>
 8006718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800671a:	69fb      	ldr	r3, [r7, #28]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006732:	2312      	movs	r3, #18
 8006734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800673a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006744:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006746:	f107 0308 	add.w	r3, r7, #8
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff ff2d 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006752:	f241 3288 	movw	r2, #5000	; 0x1388
 8006756:	2112      	movs	r1, #18
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fa19 	bl	8006b90 <SDMMC_GetCmdResp1>
 800675e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006760:	69fb      	ldr	r3, [r7, #28]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3720      	adds	r7, #32
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006778:	2318      	movs	r3, #24
 800677a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800677c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800678a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800678c:	f107 0308 	add.w	r3, r7, #8
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff ff0a 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006798:	f241 3288 	movw	r2, #5000	; 0x1388
 800679c:	2118      	movs	r1, #24
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9f6 	bl	8006b90 <SDMMC_GetCmdResp1>
 80067a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067a6:	69fb      	ldr	r3, [r7, #28]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80067be:	2319      	movs	r3, #25
 80067c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067d2:	f107 0308 	add.w	r3, r7, #8
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff fee7 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80067de:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e2:	2119      	movs	r1, #25
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9d3 	bl	8006b90 <SDMMC_GetCmdResp1>
 80067ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067ec:	69fb      	ldr	r3, [r7, #28]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3720      	adds	r7, #32
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006804:	230c      	movs	r3, #12
 8006806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800680c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006816:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006830:	f107 0308 	add.w	r3, r7, #8
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff feb8 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800683c:	4a0b      	ldr	r2, [pc, #44]	; (800686c <SDMMC_CmdStopTransfer+0x74>)
 800683e:	210c      	movs	r1, #12
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9a5 	bl	8006b90 <SDMMC_GetCmdResp1>
 8006846:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800685a:	d101      	bne.n	8006860 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800685c:	2300      	movs	r3, #0
 800685e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8006860:	69fb      	ldr	r3, [r7, #28]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3720      	adds	r7, #32
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	05f5e100 	.word	0x05f5e100

08006870 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800687e:	2307      	movs	r3, #7
 8006880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800688c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006890:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff fe87 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800689e:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a2:	2107      	movs	r1, #7
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f973 	bl	8006b90 <SDMMC_GetCmdResp1>
 80068aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ac:	69fb      	ldr	r3, [r7, #28]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b088      	sub	sp, #32
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80068c6:	2300      	movs	r3, #0
 80068c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068d4:	f107 0308 	add.w	r3, r7, #8
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fe66 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fb97 	bl	8007014 <SDMMC_GetCmdError>
 80068e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068e8:	69fb      	ldr	r3, [r7, #28]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3720      	adds	r7, #32
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b088      	sub	sp, #32
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80068fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80068fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006900:	2308      	movs	r3, #8
 8006902:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800690e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006912:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006914:	f107 0308 	add.w	r3, r7, #8
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fe46 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fb29 	bl	8006f78 <SDMMC_GetCmdResp7>
 8006926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006928:	69fb      	ldr	r3, [r7, #28]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b088      	sub	sp, #32
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006940:	2337      	movs	r3, #55	; 0x37
 8006942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800694e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fe26 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006960:	f241 3288 	movw	r2, #5000	; 0x1388
 8006964:	2137      	movs	r1, #55	; 0x37
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f912 	bl	8006b90 <SDMMC_GetCmdResp1>
 800696c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800696e:	69fb      	ldr	r3, [r7, #28]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3720      	adds	r7, #32
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006986:	2329      	movs	r3, #41	; 0x29
 8006988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800698a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800698e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006998:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800699a:	f107 0308 	add.w	r3, r7, #8
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff fe03 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa2e 	bl	8006e08 <SDMMC_GetCmdResp3>
 80069ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069ae:	69fb      	ldr	r3, [r7, #28]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80069c6:	2306      	movs	r3, #6
 80069c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069da:	f107 0308 	add.w	r3, r7, #8
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff fde3 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80069e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ea:	2106      	movs	r1, #6
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8cf 	bl	8006b90 <SDMMC_GetCmdResp1>
 80069f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069f4:	69fb      	ldr	r3, [r7, #28]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b088      	sub	sp, #32
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006a0a:	2333      	movs	r3, #51	; 0x33
 8006a0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a1e:	f107 0308 	add.w	r3, r7, #8
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff fdc1 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2e:	2133      	movs	r1, #51	; 0x33
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f8ad 	bl	8006b90 <SDMMC_GetCmdResp1>
 8006a36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a38:	69fb      	ldr	r3, [r7, #28]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3720      	adds	r7, #32
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b088      	sub	sp, #32
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a62:	f107 0308 	add.w	r3, r7, #8
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff fd9f 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f980 	bl	8006d74 <SDMMC_GetCmdResp2>
 8006a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a76:	69fb      	ldr	r3, [r7, #28]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006a8e:	2309      	movs	r3, #9
 8006a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006aa2:	f107 0308 	add.w	r3, r7, #8
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff fd7f 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f960 	bl	8006d74 <SDMMC_GetCmdResp2>
 8006ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ae2:	f107 0308 	add.w	r3, r7, #8
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fd5f 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	2103      	movs	r1, #3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9c8 	bl	8006e88 <SDMMC_GetCmdResp6>
 8006af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006afa:	69fb      	ldr	r3, [r7, #28]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006b12:	230d      	movs	r3, #13
 8006b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b26:	f107 0308 	add.w	r3, r7, #8
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fd3d 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b36:	210d      	movs	r1, #13
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f829 	bl	8006b90 <SDMMC_GetCmdResp1>
 8006b3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b40:	69fb      	ldr	r3, [r7, #28]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b088      	sub	sp, #32
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006b56:	230d      	movs	r3, #13
 8006b58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b60:	2300      	movs	r3, #0
 8006b62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b6a:	f107 0308 	add.w	r3, r7, #8
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff fd1b 	bl	80065ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7a:	210d      	movs	r1, #13
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f807 	bl	8006b90 <SDMMC_GetCmdResp1>
 8006b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b84:	69fb      	ldr	r3, [r7, #28]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006b9e:	4b70      	ldr	r3, [pc, #448]	; (8006d60 <SDMMC_GetCmdResp1+0x1d0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a70      	ldr	r2, [pc, #448]	; (8006d64 <SDMMC_GetCmdResp1+0x1d4>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	0a5a      	lsrs	r2, r3, #9
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	61fa      	str	r2, [r7, #28]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bc0:	e0c9      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	4b67      	ldr	r3, [pc, #412]	; (8006d68 <SDMMC_GetCmdResp1+0x1d8>)
 8006bcc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0ef      	beq.n	8006bb2 <SDMMC_GetCmdResp1+0x22>
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ea      	bne.n	8006bb2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2204      	movs	r2, #4
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006bee:	2304      	movs	r3, #4
 8006bf0:	e0b1      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0a6      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a58      	ldr	r2, [pc, #352]	; (8006d6c <SDMMC_GetCmdResp1+0x1dc>)
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7ff fcf6 	bl	8006600 <SDMMC_GetCommandResponse>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d001      	beq.n	8006c22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e099      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006c22:	2100      	movs	r1, #0
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff fcf8 	bl	800661a <SDMMC_GetResponse>
 8006c2a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4b50      	ldr	r3, [pc, #320]	; (8006d70 <SDMMC_GetCmdResp1+0x1e0>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e08d      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	da02      	bge.n	8006c46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c44:	e087      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	e080      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006c5e:	2380      	movs	r3, #128	; 0x80
 8006c60:	e079      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c70:	e071      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c80:	e069      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c90:	e061      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ca0:	e059      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cb0:	e051      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cc0:	e049      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006ccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cd0:	e041      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ce0:	e039      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cf0:	e031      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006cfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d00:	e029      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006d0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d10:	e021      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006d1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d20:	e019      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d30:	e011      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006d3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d40:	e009      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006d4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006d50:	e001      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3720      	adds	r7, #32
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2400001c 	.word	0x2400001c
 8006d64:	10624dd3 	.word	0x10624dd3
 8006d68:	00200045 	.word	0x00200045
 8006d6c:	002000c5 	.word	0x002000c5
 8006d70:	fdffe008 	.word	0xfdffe008

08006d74 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006d7c:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <SDMMC_GetCmdResp2+0x88>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <SDMMC_GetCmdResp2+0x8c>)
 8006d82:	fba2 2303 	umull	r2, r3, r2, r3
 8006d86:	0a5b      	lsrs	r3, r3, #9
 8006d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8c:	fb02 f303 	mul.w	r3, r2, r3
 8006d90:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1e5a      	subs	r2, r3, #1
 8006d96:	60fa      	str	r2, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006da0:	e026      	b.n	8006df0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0ef      	beq.n	8006d92 <SDMMC_GetCmdResp2+0x1e>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1ea      	bne.n	8006d92 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2204      	movs	r2, #4
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006dce:	2304      	movs	r3, #4
 8006dd0:	e00e      	b.n	8006df0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e003      	b.n	8006df0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a06      	ldr	r2, [pc, #24]	; (8006e04 <SDMMC_GetCmdResp2+0x90>)
 8006dec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	2400001c 	.word	0x2400001c
 8006e00:	10624dd3 	.word	0x10624dd3
 8006e04:	002000c5 	.word	0x002000c5

08006e08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006e10:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <SDMMC_GetCmdResp3+0x74>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1a      	ldr	r2, [pc, #104]	; (8006e80 <SDMMC_GetCmdResp3+0x78>)
 8006e16:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1a:	0a5b      	lsrs	r3, r3, #9
 8006e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e20:	fb02 f303 	mul.w	r3, r2, r3
 8006e24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	1e5a      	subs	r2, r3, #1
 8006e2a:	60fa      	str	r2, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e34:	e01b      	b.n	8006e6e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0ef      	beq.n	8006e26 <SDMMC_GetCmdResp3+0x1e>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1ea      	bne.n	8006e26 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2204      	movs	r2, #4
 8006e60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e62:	2304      	movs	r3, #4
 8006e64:	e003      	b.n	8006e6e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a06      	ldr	r2, [pc, #24]	; (8006e84 <SDMMC_GetCmdResp3+0x7c>)
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	2400001c 	.word	0x2400001c
 8006e80:	10624dd3 	.word	0x10624dd3
 8006e84:	002000c5 	.word	0x002000c5

08006e88 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	460b      	mov	r3, r1
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006e96:	4b35      	ldr	r3, [pc, #212]	; (8006f6c <SDMMC_GetCmdResp6+0xe4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a35      	ldr	r2, [pc, #212]	; (8006f70 <SDMMC_GetCmdResp6+0xe8>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	0a5b      	lsrs	r3, r3, #9
 8006ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea6:	fb02 f303 	mul.w	r3, r2, r3
 8006eaa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	1e5a      	subs	r2, r3, #1
 8006eb0:	61fa      	str	r2, [r7, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006eb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006eba:	e052      	b.n	8006f62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0ef      	beq.n	8006eac <SDMMC_GetCmdResp6+0x24>
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ea      	bne.n	8006eac <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ee8:	2304      	movs	r3, #4
 8006eea:	e03a      	b.n	8006f62 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e02f      	b.n	8006f62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fb7c 	bl	8006600 <SDMMC_GetCommandResponse>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d001      	beq.n	8006f16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e025      	b.n	8006f62 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4a16      	ldr	r2, [pc, #88]	; (8006f74 <SDMMC_GetCmdResp6+0xec>)
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff fb7b 	bl	800661a <SDMMC_GetResponse>
 8006f24:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	0c1b      	lsrs	r3, r3, #16
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e011      	b.n	8006f62 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f4c:	e009      	b.n	8006f62 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f5c:	e001      	b.n	8006f62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3720      	adds	r7, #32
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	2400001c 	.word	0x2400001c
 8006f70:	10624dd3 	.word	0x10624dd3
 8006f74:	002000c5 	.word	0x002000c5

08006f78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006f80:	4b22      	ldr	r3, [pc, #136]	; (800700c <SDMMC_GetCmdResp7+0x94>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a22      	ldr	r2, [pc, #136]	; (8007010 <SDMMC_GetCmdResp7+0x98>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	0a5b      	lsrs	r3, r3, #9
 8006f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f90:	fb02 f303 	mul.w	r3, r2, r3
 8006f94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	1e5a      	subs	r2, r3, #1
 8006f9a:	60fa      	str	r2, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fa4:	e02c      	b.n	8007000 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006faa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0ef      	beq.n	8006f96 <SDMMC_GetCmdResp7+0x1e>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1ea      	bne.n	8006f96 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2204      	movs	r2, #4
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fd2:	2304      	movs	r3, #4
 8006fd4:	e014      	b.n	8007000 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e009      	b.n	8007000 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2240      	movs	r2, #64	; 0x40
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006ffe:	2300      	movs	r3, #0

}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	2400001c 	.word	0x2400001c
 8007010:	10624dd3 	.word	0x10624dd3

08007014 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800701c:	4b11      	ldr	r3, [pc, #68]	; (8007064 <SDMMC_GetCmdError+0x50>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a11      	ldr	r2, [pc, #68]	; (8007068 <SDMMC_GetCmdError+0x54>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	0a5b      	lsrs	r3, r3, #9
 8007028:	f241 3288 	movw	r2, #5000	; 0x1388
 800702c:	fb02 f303 	mul.w	r3, r2, r3
 8007030:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1e5a      	subs	r2, r3, #1
 8007036:	60fa      	str	r2, [r7, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800703c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007040:	e009      	b.n	8007056 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f1      	beq.n	8007032 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a06      	ldr	r2, [pc, #24]	; (800706c <SDMMC_GetCmdError+0x58>)
 8007052:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	2400001c 	.word	0x2400001c
 8007068:	10624dd3 	.word	0x10624dd3
 800706c:	002000c5 	.word	0x002000c5

08007070 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007074:	4904      	ldr	r1, [pc, #16]	; (8007088 <MX_FATFS_Init+0x18>)
 8007076:	4805      	ldr	r0, [pc, #20]	; (800708c <MX_FATFS_Init+0x1c>)
 8007078:	f003 f9e4 	bl	800a444 <FATFS_LinkDriver>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	4b03      	ldr	r3, [pc, #12]	; (8007090 <MX_FATFS_Init+0x20>)
 8007082:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007084:	bf00      	nop
 8007086:	bd80      	pop	{r7, pc}
 8007088:	240024c8 	.word	0x240024c8
 800708c:	0800ddd0 	.word	0x0800ddd0
 8007090:	240024c4 	.word	0x240024c4

08007094 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007098:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800709a:	4618      	mov	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80070ae:	f000 f877 	bl	80071a0 <BSP_SD_IsDetected>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d001      	beq.n	80070bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80070b8:	2302      	movs	r3, #2
 80070ba:	e005      	b.n	80070c8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80070bc:	4804      	ldr	r0, [pc, #16]	; (80070d0 <BSP_SD_Init+0x2c>)
 80070be:	f7fd fad5 	bl	800466c <HAL_SD_Init>
 80070c2:	4603      	mov	r3, r0
 80070c4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80070c6:	79fb      	ldrb	r3, [r7, #7]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	240000b0 	.word	0x240000b0

080070d4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	68f9      	ldr	r1, [r7, #12]
 80070ea:	4806      	ldr	r0, [pc, #24]	; (8007104 <BSP_SD_ReadBlocks_DMA+0x30>)
 80070ec:	f7fd fbd8 	bl	80048a0 <HAL_SD_ReadBlocks_DMA>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	240000b0 	.word	0x240000b0

08007108 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	68f9      	ldr	r1, [r7, #12]
 800711e:	4806      	ldr	r0, [pc, #24]	; (8007138 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007120:	f7fd fc66 	bl	80049f0 <HAL_SD_WriteBlocks_DMA>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800712e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	240000b0 	.word	0x240000b0

0800713c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007140:	4805      	ldr	r0, [pc, #20]	; (8007158 <BSP_SD_GetCardState+0x1c>)
 8007142:	f7fe fa5f 	bl	8005604 <HAL_SD_GetCardState>
 8007146:	4603      	mov	r3, r0
 8007148:	2b04      	cmp	r3, #4
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
}
 8007152:	4618      	mov	r0, r3
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	240000b0 	.word	0x240000b0

0800715c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	4803      	ldr	r0, [pc, #12]	; (8007174 <BSP_SD_GetCardInfo+0x18>)
 8007168:	f7fe f90e 	bl	8005388 <HAL_SD_GetCardInfo>
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	240000b0 	.word	0x240000b0

08007178 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007180:	f000 f9ac 	bl	80074dc <BSP_SD_WriteCpltCallback>
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007194:	f000 f9b4 	bl	8007500 <BSP_SD_ReadCpltCallback>
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80071a6:	2301      	movs	r3, #1
 80071a8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80071aa:	f000 f80b 	bl	80071c4 <BSP_PlatformIsDetected>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80071b4:	2300      	movs	r3, #0
 80071b6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	b2db      	uxtb	r3, r3
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80071ca:	2301      	movs	r3, #1
 80071cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80071ce:	2101      	movs	r1, #1
 80071d0:	4806      	ldr	r0, [pc, #24]	; (80071ec <BSP_PlatformIsDetected+0x28>)
 80071d2:	f7fa f85b 	bl	800128c <HAL_GPIO_ReadPin>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80071dc:	2300      	movs	r3, #0
 80071de:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80071e0:	79fb      	ldrb	r3, [r7, #7]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	58020800 	.word	0x58020800

080071f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80071f8:	f003 fa2a 	bl	800a650 <osKernelGetTickCount>
 80071fc:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80071fe:	e006      	b.n	800720e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007200:	f7ff ff9c 	bl	800713c <BSP_SD_GetCardState>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800720a:	2300      	movs	r3, #0
 800720c:	e009      	b.n	8007222 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800720e:	f003 fa1f 	bl	800a650 <osKernelGetTickCount>
 8007212:	4602      	mov	r2, r0
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	429a      	cmp	r2, r3
 800721c:	d8f0      	bhi.n	8007200 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800721e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007236:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <SD_CheckStatus+0x38>)
 8007238:	2201      	movs	r2, #1
 800723a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800723c:	f7ff ff7e 	bl	800713c <BSP_SD_GetCardState>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d107      	bne.n	8007256 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <SD_CheckStatus+0x38>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f023 0301 	bic.w	r3, r3, #1
 8007250:	b2da      	uxtb	r2, r3
 8007252:	4b04      	ldr	r3, [pc, #16]	; (8007264 <SD_CheckStatus+0x38>)
 8007254:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007256:	4b03      	ldr	r3, [pc, #12]	; (8007264 <SD_CheckStatus+0x38>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	b2db      	uxtb	r3, r3
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	24000029 	.word	0x24000029

08007268 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007272:	4b1c      	ldr	r3, [pc, #112]	; (80072e4 <SD_initialize+0x7c>)
 8007274:	2201      	movs	r2, #1
 8007276:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8007278:	f003 f9a2 	bl	800a5c0 <osKernelGetState>
 800727c:	4603      	mov	r3, r0
 800727e:	2b02      	cmp	r3, #2
 8007280:	d129      	bne.n	80072d6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007282:	f7ff ff0f 	bl	80070a4 <BSP_SD_Init>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d107      	bne.n	800729c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff ffcc 	bl	800722c <SD_CheckStatus>
 8007294:	4603      	mov	r3, r0
 8007296:	461a      	mov	r2, r3
 8007298:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <SD_initialize+0x7c>)
 800729a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800729c:	4b11      	ldr	r3, [pc, #68]	; (80072e4 <SD_initialize+0x7c>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d017      	beq.n	80072d6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <SD_initialize+0x80>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d107      	bne.n	80072be <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80072ae:	2200      	movs	r2, #0
 80072b0:	2102      	movs	r1, #2
 80072b2:	200a      	movs	r0, #10
 80072b4:	f003 fbbe 	bl	800aa34 <osMessageQueueNew>
 80072b8:	4603      	mov	r3, r0
 80072ba:	4a0b      	ldr	r2, [pc, #44]	; (80072e8 <SD_initialize+0x80>)
 80072bc:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80072be:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <SD_initialize+0x80>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d107      	bne.n	80072d6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <SD_initialize+0x7c>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <SD_initialize+0x7c>)
 80072d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80072d6:	4b03      	ldr	r3, [pc, #12]	; (80072e4 <SD_initialize+0x7c>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	b2db      	uxtb	r3, r3
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	24000029 	.word	0x24000029
 80072e8:	24004534 	.word	0x24004534

080072ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff ff97 	bl	800722c <SD_CheckStatus>
 80072fe:	4603      	mov	r3, r0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af00      	add	r7, sp, #0
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800731c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007320:	f7ff ff66 	bl	80071f0 <SD_CheckStatusWithTimeout>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	da01      	bge.n	800732e <SD_read+0x26>
  {
    return res;
 800732a:	7ffb      	ldrb	r3, [r7, #31]
 800732c:	e02f      	b.n	800738e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	68b8      	ldr	r0, [r7, #8]
 8007334:	f7ff fece 	bl	80070d4 <BSP_SD_ReadBlocks_DMA>
 8007338:	4603      	mov	r3, r0
 800733a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800733c:	7fbb      	ldrb	r3, [r7, #30]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d124      	bne.n	800738c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <SD_read+0x90>)
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	f107 0112 	add.w	r1, r7, #18
 800734a:	f247 5330 	movw	r3, #30000	; 0x7530
 800734e:	2200      	movs	r2, #0
 8007350:	f003 fc44 	bl	800abdc <osMessageQueueGet>
 8007354:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d117      	bne.n	800738c <SD_read+0x84>
 800735c:	8a7b      	ldrh	r3, [r7, #18]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d114      	bne.n	800738c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8007362:	f003 f975 	bl	800a650 <osKernelGetTickCount>
 8007366:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007368:	e007      	b.n	800737a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800736a:	f7ff fee7 	bl	800713c <BSP_SD_GetCardState>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <SD_read+0x72>
              {
                res = RES_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007378:	e008      	b.n	800738c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800737a:	f003 f969 	bl	800a650 <osKernelGetTickCount>
 800737e:	4602      	mov	r2, r0
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	f247 522f 	movw	r2, #29999	; 0x752f
 8007388:	4293      	cmp	r3, r2
 800738a:	d9ee      	bls.n	800736a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800738c:	7ffb      	ldrb	r3, [r7, #31]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	24004534 	.word	0x24004534

0800739c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80073b0:	f247 5030 	movw	r0, #30000	; 0x7530
 80073b4:	f7ff ff1c 	bl	80071f0 <SD_CheckStatusWithTimeout>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	da01      	bge.n	80073c2 <SD_write+0x26>
  {
    return res;
 80073be:	7ffb      	ldrb	r3, [r7, #31]
 80073c0:	e02d      	b.n	800741e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	68b8      	ldr	r0, [r7, #8]
 80073c8:	f7ff fe9e 	bl	8007108 <BSP_SD_WriteBlocks_DMA>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d124      	bne.n	800741c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80073d2:	4b15      	ldr	r3, [pc, #84]	; (8007428 <SD_write+0x8c>)
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	f107 0112 	add.w	r1, r7, #18
 80073da:	f247 5330 	movw	r3, #30000	; 0x7530
 80073de:	2200      	movs	r2, #0
 80073e0:	f003 fbfc 	bl	800abdc <osMessageQueueGet>
 80073e4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d117      	bne.n	800741c <SD_write+0x80>
 80073ec:	8a7b      	ldrh	r3, [r7, #18]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d114      	bne.n	800741c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80073f2:	f003 f92d 	bl	800a650 <osKernelGetTickCount>
 80073f6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80073f8:	e007      	b.n	800740a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80073fa:	f7ff fe9f 	bl	800713c <BSP_SD_GetCardState>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d102      	bne.n	800740a <SD_write+0x6e>
          {
            res = RES_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	77fb      	strb	r3, [r7, #31]
            break;
 8007408:	e008      	b.n	800741c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800740a:	f003 f921 	bl	800a650 <osKernelGetTickCount>
 800740e:	4602      	mov	r2, r0
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f247 522f 	movw	r2, #29999	; 0x752f
 8007418:	4293      	cmp	r3, r2
 800741a:	d9ee      	bls.n	80073fa <SD_write+0x5e>
    }

  }
#endif

  return res;
 800741c:	7ffb      	ldrb	r3, [r7, #31]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	24004534 	.word	0x24004534

0800742c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08c      	sub	sp, #48	; 0x30
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	603a      	str	r2, [r7, #0]
 8007436:	71fb      	strb	r3, [r7, #7]
 8007438:	460b      	mov	r3, r1
 800743a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007442:	4b25      	ldr	r3, [pc, #148]	; (80074d8 <SD_ioctl+0xac>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <SD_ioctl+0x28>
 8007450:	2303      	movs	r3, #3
 8007452:	e03c      	b.n	80074ce <SD_ioctl+0xa2>

  switch (cmd)
 8007454:	79bb      	ldrb	r3, [r7, #6]
 8007456:	2b03      	cmp	r3, #3
 8007458:	d834      	bhi.n	80074c4 <SD_ioctl+0x98>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <SD_ioctl+0x34>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007471 	.word	0x08007471
 8007464:	08007479 	.word	0x08007479
 8007468:	08007491 	.word	0x08007491
 800746c:	080074ab 	.word	0x080074ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007476:	e028      	b.n	80074ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007478:	f107 0308 	add.w	r3, r7, #8
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fe6d 	bl	800715c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007482:	6a3a      	ldr	r2, [r7, #32]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800748e:	e01c      	b.n	80074ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007490:	f107 0308 	add.w	r3, r7, #8
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff fe61 	bl	800715c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	b29a      	uxth	r2, r3
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074a8:	e00f      	b.n	80074ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80074aa:	f107 0308 	add.w	r3, r7, #8
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fe54 	bl	800715c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	0a5a      	lsrs	r2, r3, #9
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074c2:	e002      	b.n	80074ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80074c4:	2304      	movs	r3, #4
 80074c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80074ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3730      	adds	r7, #48	; 0x30
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	24000029 	.word	0x24000029

080074dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80074e2:	2302      	movs	r3, #2
 80074e4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80074e6:	4b05      	ldr	r3, [pc, #20]	; (80074fc <BSP_SD_WriteCpltCallback+0x20>)
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	1db9      	adds	r1, r7, #6
 80074ec:	2300      	movs	r3, #0
 80074ee:	2200      	movs	r2, #0
 80074f0:	f003 fb14 	bl	800ab1c <osMessageQueuePut>
#endif
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	24004534 	.word	0x24004534

08007500 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8007506:	2301      	movs	r3, #1
 8007508:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <BSP_SD_ReadCpltCallback+0x20>)
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	1db9      	adds	r1, r7, #6
 8007510:	2300      	movs	r3, #0
 8007512:	2200      	movs	r2, #0
 8007514:	f003 fb02 	bl	800ab1c <osMessageQueuePut>
#endif
}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	24004534 	.word	0x24004534

08007524 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	4a08      	ldr	r2, [pc, #32]	; (8007554 <disk_status+0x30>)
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	79fa      	ldrb	r2, [r7, #7]
 800753c:	4905      	ldr	r1, [pc, #20]	; (8007554 <disk_status+0x30>)
 800753e:	440a      	add	r2, r1
 8007540:	7a12      	ldrb	r2, [r2, #8]
 8007542:	4610      	mov	r0, r2
 8007544:	4798      	blx	r3
 8007546:	4603      	mov	r3, r0
 8007548:	73fb      	strb	r3, [r7, #15]
  return stat;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	24004560 	.word	0x24004560

08007558 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	4603      	mov	r3, r0
 8007560:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	4a0d      	ldr	r2, [pc, #52]	; (80075a0 <disk_initialize+0x48>)
 800756a:	5cd3      	ldrb	r3, [r2, r3]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d111      	bne.n	8007594 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	4a0b      	ldr	r2, [pc, #44]	; (80075a0 <disk_initialize+0x48>)
 8007574:	2101      	movs	r1, #1
 8007576:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <disk_initialize+0x48>)
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	79fa      	ldrb	r2, [r7, #7]
 8007586:	4906      	ldr	r1, [pc, #24]	; (80075a0 <disk_initialize+0x48>)
 8007588:	440a      	add	r2, r1
 800758a:	7a12      	ldrb	r2, [r2, #8]
 800758c:	4610      	mov	r0, r2
 800758e:	4798      	blx	r3
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	24004560 	.word	0x24004560

080075a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80075a4:	b590      	push	{r4, r7, lr}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	4a0a      	ldr	r2, [pc, #40]	; (80075e0 <disk_read+0x3c>)
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	689c      	ldr	r4, [r3, #8]
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	4a07      	ldr	r2, [pc, #28]	; (80075e0 <disk_read+0x3c>)
 80075c4:	4413      	add	r3, r2
 80075c6:	7a18      	ldrb	r0, [r3, #8]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	47a0      	blx	r4
 80075d0:	4603      	mov	r3, r0
 80075d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd90      	pop	{r4, r7, pc}
 80075de:	bf00      	nop
 80075e0:	24004560 	.word	0x24004560

080075e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	4a0a      	ldr	r2, [pc, #40]	; (8007620 <disk_write+0x3c>)
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	68dc      	ldr	r4, [r3, #12]
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	4a07      	ldr	r2, [pc, #28]	; (8007620 <disk_write+0x3c>)
 8007604:	4413      	add	r3, r2
 8007606:	7a18      	ldrb	r0, [r3, #8]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	47a0      	blx	r4
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]
  return res;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
}
 8007616:	4618      	mov	r0, r3
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	bd90      	pop	{r4, r7, pc}
 800761e:	bf00      	nop
 8007620:	24004560 	.word	0x24004560

08007624 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	603a      	str	r2, [r7, #0]
 800762e:	71fb      	strb	r3, [r7, #7]
 8007630:	460b      	mov	r3, r1
 8007632:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	4a09      	ldr	r2, [pc, #36]	; (800765c <disk_ioctl+0x38>)
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	79fa      	ldrb	r2, [r7, #7]
 8007642:	4906      	ldr	r1, [pc, #24]	; (800765c <disk_ioctl+0x38>)
 8007644:	440a      	add	r2, r1
 8007646:	7a10      	ldrb	r0, [r2, #8]
 8007648:	79b9      	ldrb	r1, [r7, #6]
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	4798      	blx	r3
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]
  return res;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	24004560 	.word	0x24004560

08007660 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3301      	adds	r3, #1
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007670:	89fb      	ldrh	r3, [r7, #14]
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	b21a      	sxth	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	b21b      	sxth	r3, r3
 800767c:	4313      	orrs	r3, r2
 800767e:	b21b      	sxth	r3, r3
 8007680:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007682:	89fb      	ldrh	r3, [r7, #14]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3303      	adds	r3, #3
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	3202      	adds	r2, #2
 80076a8:	7812      	ldrb	r2, [r2, #0]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	3201      	adds	r2, #1
 80076b6:	7812      	ldrb	r2, [r2, #0]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	7812      	ldrb	r2, [r2, #0]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80076c8:	68fb      	ldr	r3, [r7, #12]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	887a      	ldrh	r2, [r7, #2]
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	887b      	ldrh	r3, [r7, #2]
 80076f0:	0a1b      	lsrs	r3, r3, #8
 80076f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	887a      	ldrh	r2, [r7, #2]
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	701a      	strb	r2, [r3, #0]
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	0a1b      	lsrs	r3, r3, #8
 8007738:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	b2d2      	uxtb	r2, r2
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	0a1b      	lsrs	r3, r3, #8
 800774a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	607a      	str	r2, [r7, #4]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	701a      	strb	r2, [r3, #0]
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00d      	beq.n	800779a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	1c53      	adds	r3, r2, #1
 8007782:	613b      	str	r3, [r7, #16]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	1c59      	adds	r1, r3, #1
 8007788:	6179      	str	r1, [r7, #20]
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3b01      	subs	r3, #1
 8007792:	607b      	str	r3, [r7, #4]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f1      	bne.n	800777e <mem_cpy+0x1a>
	}
}
 800779a:	bf00      	nop
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80077a6:	b480      	push	{r7}
 80077a8:	b087      	sub	sp, #28
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	617a      	str	r2, [r7, #20]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1f3      	bne.n	80077b6 <mem_set+0x10>
}
 80077ce:	bf00      	nop
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80077dc:	b480      	push	{r7}
 80077de:	b089      	sub	sp, #36	; 0x24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	61fa      	str	r2, [r7, #28]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	4619      	mov	r1, r3
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	61ba      	str	r2, [r7, #24]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	1acb      	subs	r3, r1, r3
 8007808:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3b01      	subs	r3, #1
 800780e:	607b      	str	r3, [r7, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <mem_cmp+0x40>
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0eb      	beq.n	80077f4 <mem_cmp+0x18>

	return r;
 800781c:	697b      	ldr	r3, [r7, #20]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3724      	adds	r7, #36	; 0x24
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007834:	e002      	b.n	800783c <chk_chr+0x12>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	3301      	adds	r3, #1
 800783a:	607b      	str	r3, [r7, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <chk_chr+0x26>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	4293      	cmp	r3, r2
 800784e:	d1f2      	bne.n	8007836 <chk_chr+0xc>
	return *str;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	781b      	ldrb	r3, [r3, #0]
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <lock_fs+0x22>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	4618      	mov	r0, r3
 8007874:	f002 fe1c 	bl	800a4b0 <ff_req_grant>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <lock_fs+0x22>
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <lock_fs+0x24>
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00d      	beq.n	80078ba <unlock_fs+0x2e>
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	2b0c      	cmp	r3, #12
 80078a2:	d00a      	beq.n	80078ba <unlock_fs+0x2e>
 80078a4:	78fb      	ldrb	r3, [r7, #3]
 80078a6:	2b0b      	cmp	r3, #11
 80078a8:	d007      	beq.n	80078ba <unlock_fs+0x2e>
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	2b0f      	cmp	r3, #15
 80078ae:	d004      	beq.n	80078ba <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f002 fe10 	bl	800a4da <ff_rel_grant>
	}
}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078ce:	2300      	movs	r3, #0
 80078d0:	60bb      	str	r3, [r7, #8]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	e029      	b.n	800792c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80078d8:	4a27      	ldr	r2, [pc, #156]	; (8007978 <chk_lock+0xb4>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	4413      	add	r3, r2
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01d      	beq.n	8007922 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078e6:	4a24      	ldr	r2, [pc, #144]	; (8007978 <chk_lock+0xb4>)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	4413      	add	r3, r2
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d116      	bne.n	8007926 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80078f8:	4a1f      	ldr	r2, [pc, #124]	; (8007978 <chk_lock+0xb4>)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	4413      	add	r3, r2
 8007900:	3304      	adds	r3, #4
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007908:	429a      	cmp	r2, r3
 800790a:	d10c      	bne.n	8007926 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800790c:	4a1a      	ldr	r2, [pc, #104]	; (8007978 <chk_lock+0xb4>)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	4413      	add	r3, r2
 8007914:	3308      	adds	r3, #8
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800791c:	429a      	cmp	r2, r3
 800791e:	d102      	bne.n	8007926 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007920:	e007      	b.n	8007932 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007922:	2301      	movs	r3, #1
 8007924:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d9d2      	bls.n	80078d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b02      	cmp	r3, #2
 8007936:	d109      	bne.n	800794c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d102      	bne.n	8007944 <chk_lock+0x80>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d101      	bne.n	8007948 <chk_lock+0x84>
 8007944:	2300      	movs	r3, #0
 8007946:	e010      	b.n	800796a <chk_lock+0xa6>
 8007948:	2312      	movs	r3, #18
 800794a:	e00e      	b.n	800796a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d108      	bne.n	8007964 <chk_lock+0xa0>
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <chk_lock+0xb4>)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	4413      	add	r3, r2
 800795a:	330c      	adds	r3, #12
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007962:	d101      	bne.n	8007968 <chk_lock+0xa4>
 8007964:	2310      	movs	r3, #16
 8007966:	e000      	b.n	800796a <chk_lock+0xa6>
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	24004540 	.word	0x24004540

0800797c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007982:	2300      	movs	r3, #0
 8007984:	607b      	str	r3, [r7, #4]
 8007986:	e002      	b.n	800798e <enq_lock+0x12>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3301      	adds	r3, #1
 800798c:	607b      	str	r3, [r7, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d806      	bhi.n	80079a2 <enq_lock+0x26>
 8007994:	4a09      	ldr	r2, [pc, #36]	; (80079bc <enq_lock+0x40>)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	4413      	add	r3, r2
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1f2      	bne.n	8007988 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	bf14      	ite	ne
 80079a8:	2301      	movne	r3, #1
 80079aa:	2300      	moveq	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	24004540 	.word	0x24004540

080079c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e01f      	b.n	8007a10 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80079d0:	4a41      	ldr	r2, [pc, #260]	; (8007ad8 <inc_lock+0x118>)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	4413      	add	r3, r2
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d113      	bne.n	8007a0a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80079e2:	4a3d      	ldr	r2, [pc, #244]	; (8007ad8 <inc_lock+0x118>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	4413      	add	r3, r2
 80079ea:	3304      	adds	r3, #4
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d109      	bne.n	8007a0a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80079f6:	4a38      	ldr	r2, [pc, #224]	; (8007ad8 <inc_lock+0x118>)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	4413      	add	r3, r2
 80079fe:	3308      	adds	r3, #8
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d006      	beq.n	8007a18 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d9dc      	bls.n	80079d0 <inc_lock+0x10>
 8007a16:	e000      	b.n	8007a1a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007a18:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d132      	bne.n	8007a86 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e002      	b.n	8007a2c <inc_lock+0x6c>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d806      	bhi.n	8007a40 <inc_lock+0x80>
 8007a32:	4a29      	ldr	r2, [pc, #164]	; (8007ad8 <inc_lock+0x118>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	4413      	add	r3, r2
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1f2      	bne.n	8007a26 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d101      	bne.n	8007a4a <inc_lock+0x8a>
 8007a46:	2300      	movs	r3, #0
 8007a48:	e040      	b.n	8007acc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4922      	ldr	r1, [pc, #136]	; (8007ad8 <inc_lock+0x118>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	440b      	add	r3, r1
 8007a56:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	491e      	ldr	r1, [pc, #120]	; (8007ad8 <inc_lock+0x118>)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	440b      	add	r3, r1
 8007a64:	3304      	adds	r3, #4
 8007a66:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695a      	ldr	r2, [r3, #20]
 8007a6c:	491a      	ldr	r1, [pc, #104]	; (8007ad8 <inc_lock+0x118>)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	440b      	add	r3, r1
 8007a74:	3308      	adds	r3, #8
 8007a76:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007a78:	4a17      	ldr	r2, [pc, #92]	; (8007ad8 <inc_lock+0x118>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	4413      	add	r3, r2
 8007a80:	330c      	adds	r3, #12
 8007a82:	2200      	movs	r2, #0
 8007a84:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d009      	beq.n	8007aa0 <inc_lock+0xe0>
 8007a8c:	4a12      	ldr	r2, [pc, #72]	; (8007ad8 <inc_lock+0x118>)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	4413      	add	r3, r2
 8007a94:	330c      	adds	r3, #12
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <inc_lock+0xe0>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	e015      	b.n	8007acc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d108      	bne.n	8007ab8 <inc_lock+0xf8>
 8007aa6:	4a0c      	ldr	r2, [pc, #48]	; (8007ad8 <inc_lock+0x118>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	4413      	add	r3, r2
 8007aae:	330c      	adds	r3, #12
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	e001      	b.n	8007abc <inc_lock+0xfc>
 8007ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007abc:	4906      	ldr	r1, [pc, #24]	; (8007ad8 <inc_lock+0x118>)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	440b      	add	r3, r1
 8007ac4:	330c      	adds	r3, #12
 8007ac6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	24004540 	.word	0x24004540

08007adc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	607b      	str	r3, [r7, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d825      	bhi.n	8007b3c <dec_lock+0x60>
		n = Files[i].ctr;
 8007af0:	4a17      	ldr	r2, [pc, #92]	; (8007b50 <dec_lock+0x74>)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	4413      	add	r3, r2
 8007af8:	330c      	adds	r3, #12
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007afe:	89fb      	ldrh	r3, [r7, #14]
 8007b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b04:	d101      	bne.n	8007b0a <dec_lock+0x2e>
 8007b06:	2300      	movs	r3, #0
 8007b08:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007b0a:	89fb      	ldrh	r3, [r7, #14]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <dec_lock+0x3a>
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007b16:	4a0e      	ldr	r2, [pc, #56]	; (8007b50 <dec_lock+0x74>)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	4413      	add	r3, r2
 8007b1e:	330c      	adds	r3, #12
 8007b20:	89fa      	ldrh	r2, [r7, #14]
 8007b22:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007b24:	89fb      	ldrh	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <dec_lock+0x5a>
 8007b2a:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <dec_lock+0x74>)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	011b      	lsls	r3, r3, #4
 8007b30:	4413      	add	r3, r2
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	737b      	strb	r3, [r7, #13]
 8007b3a:	e001      	b.n	8007b40 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007b40:	7b7b      	ldrb	r3, [r7, #13]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	24004540 	.word	0x24004540

08007b54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e010      	b.n	8007b84 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007b62:	4a0d      	ldr	r2, [pc, #52]	; (8007b98 <clear_lock+0x44>)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	4413      	add	r3, r2
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d105      	bne.n	8007b7e <clear_lock+0x2a>
 8007b72:	4a09      	ldr	r2, [pc, #36]	; (8007b98 <clear_lock+0x44>)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	4413      	add	r3, r2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3301      	adds	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d9eb      	bls.n	8007b62 <clear_lock+0xe>
	}
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	24004540 	.word	0x24004540

08007b9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	78db      	ldrb	r3, [r3, #3]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d034      	beq.n	8007c1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7858      	ldrb	r0, [r3, #1]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	f7ff fd0e 	bl	80075e4 <disk_write>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	73fb      	strb	r3, [r7, #15]
 8007bd2:	e022      	b.n	8007c1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	1ad2      	subs	r2, r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d217      	bcs.n	8007c1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	789b      	ldrb	r3, [r3, #2]
 8007bee:	613b      	str	r3, [r7, #16]
 8007bf0:	e010      	b.n	8007c14 <sync_window+0x78>
					wsect += fs->fsize;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	7858      	ldrb	r0, [r3, #1]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c06:	2301      	movs	r3, #1
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	f7ff fceb 	bl	80075e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d8eb      	bhi.n	8007bf2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d01b      	beq.n	8007c74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff ffad 	bl	8007b9c <sync_window>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d113      	bne.n	8007c74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7858      	ldrb	r0, [r3, #1]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c56:	2301      	movs	r3, #1
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	f7ff fca3 	bl	80075a4 <disk_read>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c64:	f04f 33ff 	mov.w	r3, #4294967295
 8007c68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff ff87 	bl	8007b9c <sync_window>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d159      	bne.n	8007d4c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d149      	bne.n	8007d34 <sync_fs+0xb4>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	791b      	ldrb	r3, [r3, #4]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d145      	bne.n	8007d34 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	899b      	ldrh	r3, [r3, #12]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	f7ff fd76 	bl	80077a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3338      	adds	r3, #56	; 0x38
 8007cbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007cc2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fd05 	bl	80076d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3338      	adds	r3, #56	; 0x38
 8007cd0:	4921      	ldr	r1, [pc, #132]	; (8007d58 <sync_fs+0xd8>)
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fd1a 	bl	800770c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3338      	adds	r3, #56	; 0x38
 8007cdc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ce0:	491e      	ldr	r1, [pc, #120]	; (8007d5c <sync_fs+0xdc>)
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fd12 	bl	800770c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3338      	adds	r3, #56	; 0x38
 8007cec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7ff fd08 	bl	800770c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3338      	adds	r3, #56	; 0x38
 8007d00:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f7ff fcfe 	bl	800770c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7858      	ldrb	r0, [r3, #1]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f7ff fc5b 	bl	80075e4 <disk_write>
			fs->fsi_flag = 0;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff fc71 	bl	8007624 <disk_ioctl>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <sync_fs+0xcc>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	41615252 	.word	0x41615252
 8007d5c:	61417272 	.word	0x61417272

08007d60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	3b02      	subs	r3, #2
 8007d6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	3b02      	subs	r3, #2
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d301      	bcc.n	8007d80 <clust2sect+0x20>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e008      	b.n	8007d92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	895b      	ldrh	r3, [r3, #10]
 8007d84:	461a      	mov	r2, r3
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	fb03 f202 	mul.w	r2, r3, r2
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	4413      	add	r3, r2
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b086      	sub	sp, #24
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d904      	bls.n	8007dbe <get_fat+0x20>
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	e0bb      	b.n	8007f3c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	f000 8083 	beq.w	8007eda <get_fat+0x13c>
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	f300 80a7 	bgt.w	8007f28 <get_fat+0x18a>
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d002      	beq.n	8007de4 <get_fat+0x46>
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d056      	beq.n	8007e90 <get_fat+0xf2>
 8007de2:	e0a1      	b.n	8007f28 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	085b      	lsrs	r3, r3, #1
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	899b      	ldrh	r3, [r3, #12]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e02:	4413      	add	r3, r2
 8007e04:	4619      	mov	r1, r3
 8007e06:	6938      	ldr	r0, [r7, #16]
 8007e08:	f7ff ff0c 	bl	8007c24 <move_window>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f040 808d 	bne.w	8007f2e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	60fa      	str	r2, [r7, #12]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	8992      	ldrh	r2, [r2, #12]
 8007e1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e22:	fb01 f202 	mul.w	r2, r1, r2
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	899b      	ldrh	r3, [r3, #12]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e42:	4413      	add	r3, r2
 8007e44:	4619      	mov	r1, r3
 8007e46:	6938      	ldr	r0, [r7, #16]
 8007e48:	f7ff feec 	bl	8007c24 <move_window>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d16f      	bne.n	8007f32 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	899b      	ldrh	r3, [r3, #12]
 8007e56:	461a      	mov	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e5e:	fb01 f202 	mul.w	r2, r1, r2
 8007e62:	1a9b      	subs	r3, r3, r2
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4413      	add	r3, r2
 8007e68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	461a      	mov	r2, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <get_fat+0xe8>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	091b      	lsrs	r3, r3, #4
 8007e84:	e002      	b.n	8007e8c <get_fat+0xee>
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e8c:	617b      	str	r3, [r7, #20]
			break;
 8007e8e:	e055      	b.n	8007f3c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	899b      	ldrh	r3, [r3, #12]
 8007e98:	085b      	lsrs	r3, r3, #1
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ea4:	4413      	add	r3, r2
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6938      	ldr	r0, [r7, #16]
 8007eaa:	f7ff febb 	bl	8007c24 <move_window>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d140      	bne.n	8007f36 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	8992      	ldrh	r2, [r2, #12]
 8007ec2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ec6:	fb00 f202 	mul.w	r2, r0, r2
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	440b      	add	r3, r1
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fbc6 	bl	8007660 <ld_word>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	617b      	str	r3, [r7, #20]
			break;
 8007ed8:	e030      	b.n	8007f3c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	899b      	ldrh	r3, [r3, #12]
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8007eee:	4413      	add	r3, r2
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6938      	ldr	r0, [r7, #16]
 8007ef4:	f7ff fe96 	bl	8007c24 <move_window>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d11d      	bne.n	8007f3a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	8992      	ldrh	r2, [r2, #12]
 8007f0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f10:	fb00 f202 	mul.w	r2, r0, r2
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	440b      	add	r3, r1
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7ff fbb9 	bl	8007690 <ld_dword>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f24:	617b      	str	r3, [r7, #20]
			break;
 8007f26:	e009      	b.n	8007f3c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007f28:	2301      	movs	r3, #1
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	e006      	b.n	8007f3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f2e:	bf00      	nop
 8007f30:	e004      	b.n	8007f3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f32:	bf00      	nop
 8007f34:	e002      	b.n	8007f3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f3a:	bf00      	nop
		}
	}

	return val;
 8007f3c:	697b      	ldr	r3, [r7, #20]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007f46:	b590      	push	{r4, r7, lr}
 8007f48:	b089      	sub	sp, #36	; 0x24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007f52:	2302      	movs	r3, #2
 8007f54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	f240 8102 	bls.w	8008162 <put_fat+0x21c>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	f080 80fc 	bcs.w	8008162 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	f000 80b6 	beq.w	80080e0 <put_fat+0x19a>
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	f300 80fd 	bgt.w	8008174 <put_fat+0x22e>
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d003      	beq.n	8007f86 <put_fat+0x40>
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	f000 8083 	beq.w	800808a <put_fat+0x144>
 8007f84:	e0f6      	b.n	8008174 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	61bb      	str	r3, [r7, #24]
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	085b      	lsrs	r3, r3, #1
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	4413      	add	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	899b      	ldrh	r3, [r3, #12]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fa4:	4413      	add	r3, r2
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff fe3b 	bl	8007c24 <move_window>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fb2:	7ffb      	ldrb	r3, [r7, #31]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f040 80d6 	bne.w	8008166 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	61ba      	str	r2, [r7, #24]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	8992      	ldrh	r2, [r2, #12]
 8007fca:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fce:	fb00 f202 	mul.w	r2, r0, r2
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	440b      	add	r3, r1
 8007fd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00d      	beq.n	8007ffe <put_fat+0xb8>
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b25b      	sxtb	r3, r3
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	b25a      	sxtb	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	b25b      	sxtb	r3, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	b25b      	sxtb	r3, r3
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	e001      	b.n	8008002 <put_fat+0xbc>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	899b      	ldrh	r3, [r3, #12]
 8008014:	4619      	mov	r1, r3
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	fbb3 f3f1 	udiv	r3, r3, r1
 800801c:	4413      	add	r3, r2
 800801e:	4619      	mov	r1, r3
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff fdff 	bl	8007c24 <move_window>
 8008026:	4603      	mov	r3, r0
 8008028:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800802a:	7ffb      	ldrb	r3, [r7, #31]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f040 809c 	bne.w	800816a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	899b      	ldrh	r3, [r3, #12]
 800803c:	461a      	mov	r2, r3
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	fbb3 f0f2 	udiv	r0, r3, r2
 8008044:	fb00 f202 	mul.w	r2, r0, r2
 8008048:	1a9b      	subs	r3, r3, r2
 800804a:	440b      	add	r3, r1
 800804c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d003      	beq.n	8008060 <put_fat+0x11a>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	091b      	lsrs	r3, r3, #4
 800805c:	b2db      	uxtb	r3, r3
 800805e:	e00e      	b.n	800807e <put_fat+0x138>
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	b25b      	sxtb	r3, r3
 8008066:	f023 030f 	bic.w	r3, r3, #15
 800806a:	b25a      	sxtb	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	0a1b      	lsrs	r3, r3, #8
 8008070:	b25b      	sxtb	r3, r3
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	b25b      	sxtb	r3, r3
 8008078:	4313      	orrs	r3, r2
 800807a:	b25b      	sxtb	r3, r3
 800807c:	b2db      	uxtb	r3, r3
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	70da      	strb	r2, [r3, #3]
			break;
 8008088:	e074      	b.n	8008174 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	899b      	ldrh	r3, [r3, #12]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	b29b      	uxth	r3, r3
 8008096:	4619      	mov	r1, r3
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	fbb3 f3f1 	udiv	r3, r3, r1
 800809e:	4413      	add	r3, r2
 80080a0:	4619      	mov	r1, r3
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7ff fdbe 	bl	8007c24 <move_window>
 80080a8:	4603      	mov	r3, r0
 80080aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080ac:	7ffb      	ldrb	r3, [r7, #31]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d15d      	bne.n	800816e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	8992      	ldrh	r2, [r2, #12]
 80080c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80080c4:	fb00 f202 	mul.w	r2, r0, r2
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	440b      	add	r3, r1
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	b292      	uxth	r2, r2
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff faff 	bl	80076d6 <st_word>
			fs->wflag = 1;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	70da      	strb	r2, [r3, #3]
			break;
 80080de:	e049      	b.n	8008174 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	899b      	ldrh	r3, [r3, #12]
 80080e8:	089b      	lsrs	r3, r3, #2
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	4619      	mov	r1, r3
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80080f4:	4413      	add	r3, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff fd93 	bl	8007c24 <move_window>
 80080fe:	4603      	mov	r3, r0
 8008100:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008102:	7ffb      	ldrb	r3, [r7, #31]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d134      	bne.n	8008172 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	8992      	ldrh	r2, [r2, #12]
 800811c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008120:	fb00 f202 	mul.w	r2, r0, r2
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	440b      	add	r3, r1
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff fab1 	bl	8007690 <ld_dword>
 800812e:	4603      	mov	r3, r0
 8008130:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008134:	4323      	orrs	r3, r4
 8008136:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	8992      	ldrh	r2, [r2, #12]
 8008146:	fbb3 f0f2 	udiv	r0, r3, r2
 800814a:	fb00 f202 	mul.w	r2, r0, r2
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	440b      	add	r3, r1
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff fad9 	bl	800770c <st_dword>
			fs->wflag = 1;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	70da      	strb	r2, [r3, #3]
			break;
 8008160:	e008      	b.n	8008174 <put_fat+0x22e>
		}
	}
 8008162:	bf00      	nop
 8008164:	e006      	b.n	8008174 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008166:	bf00      	nop
 8008168:	e004      	b.n	8008174 <put_fat+0x22e>
			if (res != FR_OK) break;
 800816a:	bf00      	nop
 800816c:	e002      	b.n	8008174 <put_fat+0x22e>
			if (res != FR_OK) break;
 800816e:	bf00      	nop
 8008170:	e000      	b.n	8008174 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008172:	bf00      	nop
	return res;
 8008174:	7ffb      	ldrb	r3, [r7, #31]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3724      	adds	r7, #36	; 0x24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd90      	pop	{r4, r7, pc}

0800817e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b088      	sub	sp, #32
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d904      	bls.n	80081a4 <remove_chain+0x26>
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d301      	bcc.n	80081a8 <remove_chain+0x2a>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e04b      	b.n	8008240 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00c      	beq.n	80081c8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80081ae:	f04f 32ff 	mov.w	r2, #4294967295
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	69b8      	ldr	r0, [r7, #24]
 80081b6:	f7ff fec6 	bl	8007f46 <put_fat>
 80081ba:	4603      	mov	r3, r0
 80081bc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80081be:	7ffb      	ldrb	r3, [r7, #31]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <remove_chain+0x4a>
 80081c4:	7ffb      	ldrb	r3, [r7, #31]
 80081c6:	e03b      	b.n	8008240 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff fde7 	bl	8007d9e <get_fat>
 80081d0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d031      	beq.n	800823c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <remove_chain+0x64>
 80081de:	2302      	movs	r3, #2
 80081e0:	e02e      	b.n	8008240 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e8:	d101      	bne.n	80081ee <remove_chain+0x70>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e028      	b.n	8008240 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80081ee:	2200      	movs	r2, #0
 80081f0:	68b9      	ldr	r1, [r7, #8]
 80081f2:	69b8      	ldr	r0, [r7, #24]
 80081f4:	f7ff fea7 	bl	8007f46 <put_fat>
 80081f8:	4603      	mov	r3, r0
 80081fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80081fc:	7ffb      	ldrb	r3, [r7, #31]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <remove_chain+0x88>
 8008202:	7ffb      	ldrb	r3, [r7, #31]
 8008204:	e01c      	b.n	8008240 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	3b02      	subs	r3, #2
 8008210:	429a      	cmp	r2, r3
 8008212:	d20b      	bcs.n	800822c <remove_chain+0xae>
			fs->free_clst++;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	791b      	ldrb	r3, [r3, #4]
 8008222:	f043 0301 	orr.w	r3, r3, #1
 8008226:	b2da      	uxtb	r2, r3
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	429a      	cmp	r2, r3
 8008238:	d3c6      	bcc.n	80081c8 <remove_chain+0x4a>
 800823a:	e000      	b.n	800823e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800823c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10d      	bne.n	800827a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <create_chain+0x2c>
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	429a      	cmp	r2, r3
 8008272:	d31b      	bcc.n	80082ac <create_chain+0x64>
 8008274:	2301      	movs	r3, #1
 8008276:	61bb      	str	r3, [r7, #24]
 8008278:	e018      	b.n	80082ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff fd8e 	bl	8007d9e <get_fat>
 8008282:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d801      	bhi.n	800828e <create_chain+0x46>
 800828a:	2301      	movs	r3, #1
 800828c:	e070      	b.n	8008370 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008294:	d101      	bne.n	800829a <create_chain+0x52>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	e06a      	b.n	8008370 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d201      	bcs.n	80082a8 <create_chain+0x60>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	e063      	b.n	8008370 <create_chain+0x128>
		scl = clst;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	3301      	adds	r3, #1
 80082b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d307      	bcc.n	80082d0 <create_chain+0x88>
				ncl = 2;
 80082c0:	2302      	movs	r3, #2
 80082c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d901      	bls.n	80082d0 <create_chain+0x88>
 80082cc:	2300      	movs	r3, #0
 80082ce:	e04f      	b.n	8008370 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80082d0:	69f9      	ldr	r1, [r7, #28]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fd63 	bl	8007d9e <get_fat>
 80082d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00e      	beq.n	80082fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d003      	beq.n	80082ee <create_chain+0xa6>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d101      	bne.n	80082f2 <create_chain+0xaa>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	e03e      	b.n	8008370 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d1da      	bne.n	80082b0 <create_chain+0x68>
 80082fa:	2300      	movs	r3, #0
 80082fc:	e038      	b.n	8008370 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80082fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008300:	f04f 32ff 	mov.w	r2, #4294967295
 8008304:	69f9      	ldr	r1, [r7, #28]
 8008306:	6938      	ldr	r0, [r7, #16]
 8008308:	f7ff fe1d 	bl	8007f46 <put_fat>
 800830c:	4603      	mov	r3, r0
 800830e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <create_chain+0xe2>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d006      	beq.n	800832a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6938      	ldr	r0, [r7, #16]
 8008322:	f7ff fe10 	bl	8007f46 <put_fat>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d116      	bne.n	800835e <create_chain+0x116>
		fs->last_clst = ncl;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	699a      	ldr	r2, [r3, #24]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	3b02      	subs	r3, #2
 8008340:	429a      	cmp	r2, r3
 8008342:	d804      	bhi.n	800834e <create_chain+0x106>
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	1e5a      	subs	r2, r3, #1
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	791b      	ldrb	r3, [r3, #4]
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	711a      	strb	r2, [r3, #4]
 800835c:	e007      	b.n	800836e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d102      	bne.n	800836a <create_chain+0x122>
 8008364:	f04f 33ff 	mov.w	r3, #4294967295
 8008368:	e000      	b.n	800836c <create_chain+0x124>
 800836a:	2301      	movs	r3, #1
 800836c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800836e:	69fb      	ldr	r3, [r7, #28]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3720      	adds	r7, #32
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	3304      	adds	r3, #4
 800838e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	899b      	ldrh	r3, [r3, #12]
 8008394:	461a      	mov	r2, r3
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	fbb3 f3f2 	udiv	r3, r3, r2
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	8952      	ldrh	r2, [r2, #10]
 80083a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	1d1a      	adds	r2, r3, #4
 80083aa:	613a      	str	r2, [r7, #16]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <clmt_clust+0x42>
 80083b6:	2300      	movs	r3, #0
 80083b8:	e010      	b.n	80083dc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d307      	bcc.n	80083d2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	617b      	str	r3, [r7, #20]
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3304      	adds	r3, #4
 80083ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80083d0:	e7e9      	b.n	80083a6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80083d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4413      	add	r3, r2
}
 80083dc:	4618      	mov	r0, r3
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083fe:	d204      	bcs.n	800840a <dir_sdi+0x22>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f003 031f 	and.w	r3, r3, #31
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <dir_sdi+0x26>
		return FR_INT_ERR;
 800840a:	2302      	movs	r3, #2
 800840c:	e071      	b.n	80084f2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <dir_sdi+0x46>
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d902      	bls.n	800842e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10c      	bne.n	800844e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	095b      	lsrs	r3, r3, #5
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	8912      	ldrh	r2, [r2, #8]
 800843c:	4293      	cmp	r3, r2
 800843e:	d301      	bcc.n	8008444 <dir_sdi+0x5c>
 8008440:	2302      	movs	r3, #2
 8008442:	e056      	b.n	80084f2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	61da      	str	r2, [r3, #28]
 800844c:	e02d      	b.n	80084aa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	895b      	ldrh	r3, [r3, #10]
 8008452:	461a      	mov	r2, r3
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	899b      	ldrh	r3, [r3, #12]
 8008458:	fb02 f303 	mul.w	r3, r2, r3
 800845c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800845e:	e019      	b.n	8008494 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6979      	ldr	r1, [r7, #20]
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fc9a 	bl	8007d9e <get_fat>
 800846a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	d101      	bne.n	8008478 <dir_sdi+0x90>
 8008474:	2301      	movs	r3, #1
 8008476:	e03c      	b.n	80084f2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d904      	bls.n	8008488 <dir_sdi+0xa0>
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	429a      	cmp	r2, r3
 8008486:	d301      	bcc.n	800848c <dir_sdi+0xa4>
 8008488:	2302      	movs	r3, #2
 800848a:	e032      	b.n	80084f2 <dir_sdi+0x10a>
			ofs -= csz;
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	429a      	cmp	r2, r3
 800849a:	d2e1      	bcs.n	8008460 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800849c:	6979      	ldr	r1, [r7, #20]
 800849e:	6938      	ldr	r0, [r7, #16]
 80084a0:	f7ff fc5e 	bl	8007d60 <clust2sect>
 80084a4:	4602      	mov	r2, r0
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <dir_sdi+0xd4>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e01a      	b.n	80084f2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	899b      	ldrh	r3, [r3, #12]
 80084c4:	4619      	mov	r1, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80084cc:	441a      	add	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	899b      	ldrh	r3, [r3, #12]
 80084dc:	461a      	mov	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80084e4:	fb00 f202 	mul.w	r2, r0, r2
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	18ca      	adds	r2, r1, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	3320      	adds	r3, #32
 8008510:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <dir_next+0x28>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008520:	d301      	bcc.n	8008526 <dir_next+0x2c>
 8008522:	2304      	movs	r3, #4
 8008524:	e0bb      	b.n	800869e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	899b      	ldrh	r3, [r3, #12]
 800852a:	461a      	mov	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008532:	fb01 f202 	mul.w	r2, r1, r2
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	2b00      	cmp	r3, #0
 800853a:	f040 809d 	bne.w	8008678 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10b      	bne.n	8008568 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	8912      	ldrh	r2, [r2, #8]
 8008558:	4293      	cmp	r3, r2
 800855a:	f0c0 808d 	bcc.w	8008678 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	61da      	str	r2, [r3, #28]
 8008564:	2304      	movs	r3, #4
 8008566:	e09a      	b.n	800869e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	899b      	ldrh	r3, [r3, #12]
 800856c:	461a      	mov	r2, r3
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	fbb3 f3f2 	udiv	r3, r3, r2
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	8952      	ldrh	r2, [r2, #10]
 8008578:	3a01      	subs	r2, #1
 800857a:	4013      	ands	r3, r2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d17b      	bne.n	8008678 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	4619      	mov	r1, r3
 8008588:	4610      	mov	r0, r2
 800858a:	f7ff fc08 	bl	8007d9e <get_fat>
 800858e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d801      	bhi.n	800859a <dir_next+0xa0>
 8008596:	2302      	movs	r3, #2
 8008598:	e081      	b.n	800869e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d101      	bne.n	80085a6 <dir_next+0xac>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e07b      	b.n	800869e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d359      	bcc.n	8008664 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d104      	bne.n	80085c0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	61da      	str	r2, [r3, #28]
 80085bc:	2304      	movs	r3, #4
 80085be:	e06e      	b.n	800869e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	4619      	mov	r1, r3
 80085c8:	4610      	mov	r0, r2
 80085ca:	f7ff fe3d 	bl	8008248 <create_chain>
 80085ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <dir_next+0xe0>
 80085d6:	2307      	movs	r3, #7
 80085d8:	e061      	b.n	800869e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d101      	bne.n	80085e4 <dir_next+0xea>
 80085e0:	2302      	movs	r3, #2
 80085e2:	e05c      	b.n	800869e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	d101      	bne.n	80085f0 <dir_next+0xf6>
 80085ec:	2301      	movs	r3, #1
 80085ee:	e056      	b.n	800869e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff fad3 	bl	8007b9c <sync_window>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <dir_next+0x106>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e04e      	b.n	800869e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	899b      	ldrh	r3, [r3, #12]
 800860a:	461a      	mov	r2, r3
 800860c:	2100      	movs	r1, #0
 800860e:	f7ff f8ca 	bl	80077a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008612:	2300      	movs	r3, #0
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	6979      	ldr	r1, [r7, #20]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f7ff fba1 	bl	8007d60 <clust2sect>
 800861e:	4602      	mov	r2, r0
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	635a      	str	r2, [r3, #52]	; 0x34
 8008624:	e012      	b.n	800864c <dir_next+0x152>
						fs->wflag = 1;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff fab5 	bl	8007b9c <sync_window>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <dir_next+0x142>
 8008638:	2301      	movs	r3, #1
 800863a:	e030      	b.n	800869e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	3301      	adds	r3, #1
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	635a      	str	r2, [r3, #52]	; 0x34
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	895b      	ldrh	r3, [r3, #10]
 8008650:	461a      	mov	r2, r3
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	4293      	cmp	r3, r2
 8008656:	d3e6      	bcc.n	8008626 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800866a:	6979      	ldr	r1, [r7, #20]
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7ff fb77 	bl	8007d60 <clust2sect>
 8008672:	4602      	mov	r2, r0
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	899b      	ldrh	r3, [r3, #12]
 8008688:	461a      	mov	r2, r3
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008690:	fb00 f202 	mul.w	r2, r0, r2
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	18ca      	adds	r2, r1, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b086      	sub	sp, #24
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80086b6:	2100      	movs	r1, #0
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff fe95 	bl	80083e8 <dir_sdi>
 80086be:	4603      	mov	r3, r0
 80086c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d12b      	bne.n	8008720 <dir_alloc+0x7a>
		n = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	4619      	mov	r1, r3
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff faa6 	bl	8007c24 <move_window>
 80086d8:	4603      	mov	r3, r0
 80086da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d11d      	bne.n	800871e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2be5      	cmp	r3, #229	; 0xe5
 80086ea:	d004      	beq.n	80086f6 <dir_alloc+0x50>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3301      	adds	r3, #1
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d102      	bne.n	800870a <dir_alloc+0x64>
 8008704:	e00c      	b.n	8008720 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008706:	2300      	movs	r3, #0
 8008708:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800870a:	2101      	movs	r1, #1
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7ff fef4 	bl	80084fa <dir_next>
 8008712:	4603      	mov	r3, r0
 8008714:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0d7      	beq.n	80086cc <dir_alloc+0x26>
 800871c:	e000      	b.n	8008720 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800871e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	2b04      	cmp	r3, #4
 8008724:	d101      	bne.n	800872a <dir_alloc+0x84>
 8008726:	2307      	movs	r3, #7
 8008728:	75fb      	strb	r3, [r7, #23]
	return res;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	331a      	adds	r3, #26
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe ff8c 	bl	8007660 <ld_word>
 8008748:	4603      	mov	r3, r0
 800874a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b03      	cmp	r3, #3
 8008752:	d109      	bne.n	8008768 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	3314      	adds	r3, #20
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe ff81 	bl	8007660 <ld_word>
 800875e:	4603      	mov	r3, r0
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	4313      	orrs	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008768:	68fb      	ldr	r3, [r7, #12]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b084      	sub	sp, #16
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	331a      	adds	r3, #26
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	b292      	uxth	r2, r2
 8008786:	4611      	mov	r1, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe ffa4 	bl	80076d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b03      	cmp	r3, #3
 8008794:	d109      	bne.n	80087aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f103 0214 	add.w	r2, r3, #20
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	0c1b      	lsrs	r3, r3, #16
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f7fe ff96 	bl	80076d6 <st_word>
	}
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80087c0:	2100      	movs	r1, #0
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fe10 	bl	80083e8 <dir_sdi>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <dir_find+0x24>
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	e03e      	b.n	8008854 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	4619      	mov	r1, r3
 80087dc:	6938      	ldr	r0, [r7, #16]
 80087de:	f7ff fa21 	bl	8007c24 <move_window>
 80087e2:	4603      	mov	r3, r0
 80087e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d12f      	bne.n	800884c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <dir_find+0x4e>
 80087fa:	2304      	movs	r3, #4
 80087fc:	75fb      	strb	r3, [r7, #23]
 80087fe:	e028      	b.n	8008852 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	330b      	adds	r3, #11
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800880c:	b2da      	uxtb	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	330b      	adds	r3, #11
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <dir_find+0x86>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a18      	ldr	r0, [r3, #32]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3324      	adds	r3, #36	; 0x24
 800882a:	220b      	movs	r2, #11
 800882c:	4619      	mov	r1, r3
 800882e:	f7fe ffd5 	bl	80077dc <mem_cmp>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00b      	beq.n	8008850 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008838:	2100      	movs	r1, #0
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff fe5d 	bl	80084fa <dir_next>
 8008840:	4603      	mov	r3, r0
 8008842:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0c5      	beq.n	80087d6 <dir_find+0x24>
 800884a:	e002      	b.n	8008852 <dir_find+0xa0>
		if (res != FR_OK) break;
 800884c:	bf00      	nop
 800884e:	e000      	b.n	8008852 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008850:	bf00      	nop

	return res;
 8008852:	7dfb      	ldrb	r3, [r7, #23]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800886a:	2101      	movs	r1, #1
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff ff1a 	bl	80086a6 <dir_alloc>
 8008872:	4603      	mov	r3, r0
 8008874:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11c      	bne.n	80088b6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	4619      	mov	r1, r3
 8008882:	68b8      	ldr	r0, [r7, #8]
 8008884:	f7ff f9ce 	bl	8007c24 <move_window>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d111      	bne.n	80088b6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	2220      	movs	r2, #32
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe ff83 	bl	80077a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a18      	ldr	r0, [r3, #32]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3324      	adds	r3, #36	; 0x24
 80088a8:	220b      	movs	r2, #11
 80088aa:	4619      	mov	r1, r3
 80088ac:	f7fe ff5a 	bl	8007764 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2201      	movs	r2, #1
 80088b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3324      	adds	r3, #36	; 0x24
 80088d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80088d6:	220b      	movs	r2, #11
 80088d8:	2120      	movs	r1, #32
 80088da:	68b8      	ldr	r0, [r7, #8]
 80088dc:	f7fe ff63 	bl	80077a6 <mem_set>
	si = i = 0; ni = 8;
 80088e0:	2300      	movs	r3, #0
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	61fb      	str	r3, [r7, #28]
 80088e8:	2308      	movs	r3, #8
 80088ea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	61fa      	str	r2, [r7, #28]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80088fa:	7efb      	ldrb	r3, [r7, #27]
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d94e      	bls.n	800899e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008900:	7efb      	ldrb	r3, [r7, #27]
 8008902:	2b2f      	cmp	r3, #47	; 0x2f
 8008904:	d006      	beq.n	8008914 <create_name+0x54>
 8008906:	7efb      	ldrb	r3, [r7, #27]
 8008908:	2b5c      	cmp	r3, #92	; 0x5c
 800890a:	d110      	bne.n	800892e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800890c:	e002      	b.n	8008914 <create_name+0x54>
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	3301      	adds	r3, #1
 8008912:	61fb      	str	r3, [r7, #28]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	4413      	add	r3, r2
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b2f      	cmp	r3, #47	; 0x2f
 800891e:	d0f6      	beq.n	800890e <create_name+0x4e>
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	4413      	add	r3, r2
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	2b5c      	cmp	r3, #92	; 0x5c
 800892a:	d0f0      	beq.n	800890e <create_name+0x4e>
			break;
 800892c:	e038      	b.n	80089a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800892e:	7efb      	ldrb	r3, [r7, #27]
 8008930:	2b2e      	cmp	r3, #46	; 0x2e
 8008932:	d003      	beq.n	800893c <create_name+0x7c>
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	429a      	cmp	r2, r3
 800893a:	d30c      	bcc.n	8008956 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2b0b      	cmp	r3, #11
 8008940:	d002      	beq.n	8008948 <create_name+0x88>
 8008942:	7efb      	ldrb	r3, [r7, #27]
 8008944:	2b2e      	cmp	r3, #46	; 0x2e
 8008946:	d001      	beq.n	800894c <create_name+0x8c>
 8008948:	2306      	movs	r3, #6
 800894a:	e044      	b.n	80089d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800894c:	2308      	movs	r3, #8
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	230b      	movs	r3, #11
 8008952:	617b      	str	r3, [r7, #20]
			continue;
 8008954:	e022      	b.n	800899c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008956:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800895a:	2b00      	cmp	r3, #0
 800895c:	da04      	bge.n	8008968 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800895e:	7efb      	ldrb	r3, [r7, #27]
 8008960:	3b80      	subs	r3, #128	; 0x80
 8008962:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <create_name+0x120>)
 8008964:	5cd3      	ldrb	r3, [r2, r3]
 8008966:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008968:	7efb      	ldrb	r3, [r7, #27]
 800896a:	4619      	mov	r1, r3
 800896c:	481d      	ldr	r0, [pc, #116]	; (80089e4 <create_name+0x124>)
 800896e:	f7fe ff5c 	bl	800782a <chk_chr>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <create_name+0xbc>
 8008978:	2306      	movs	r3, #6
 800897a:	e02c      	b.n	80089d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800897c:	7efb      	ldrb	r3, [r7, #27]
 800897e:	2b60      	cmp	r3, #96	; 0x60
 8008980:	d905      	bls.n	800898e <create_name+0xce>
 8008982:	7efb      	ldrb	r3, [r7, #27]
 8008984:	2b7a      	cmp	r3, #122	; 0x7a
 8008986:	d802      	bhi.n	800898e <create_name+0xce>
 8008988:	7efb      	ldrb	r3, [r7, #27]
 800898a:	3b20      	subs	r3, #32
 800898c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	613a      	str	r2, [r7, #16]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	4413      	add	r3, r2
 8008998:	7efa      	ldrb	r2, [r7, #27]
 800899a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800899c:	e7a6      	b.n	80088ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800899e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	441a      	add	r2, r3
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <create_name+0xf4>
 80089b0:	2306      	movs	r3, #6
 80089b2:	e010      	b.n	80089d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2be5      	cmp	r3, #229	; 0xe5
 80089ba:	d102      	bne.n	80089c2 <create_name+0x102>
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2205      	movs	r2, #5
 80089c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80089c2:	7efb      	ldrb	r3, [r7, #27]
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	d801      	bhi.n	80089cc <create_name+0x10c>
 80089c8:	2204      	movs	r2, #4
 80089ca:	e000      	b.n	80089ce <create_name+0x10e>
 80089cc:	2200      	movs	r2, #0
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	330b      	adds	r3, #11
 80089d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80089d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3720      	adds	r7, #32
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	0800dde4 	.word	0x0800dde4
 80089e4:	0800dd1c 	.word	0x0800dd1c

080089e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80089fc:	e002      	b.n	8008a04 <follow_path+0x1c>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	3301      	adds	r3, #1
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b2f      	cmp	r3, #47	; 0x2f
 8008a0a:	d0f8      	beq.n	80089fe <follow_path+0x16>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b5c      	cmp	r3, #92	; 0x5c
 8008a12:	d0f4      	beq.n	80089fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	2200      	movs	r2, #0
 8008a18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b1f      	cmp	r3, #31
 8008a20:	d80a      	bhi.n	8008a38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2280      	movs	r2, #128	; 0x80
 8008a26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff fcdb 	bl	80083e8 <dir_sdi>
 8008a32:	4603      	mov	r3, r0
 8008a34:	75fb      	strb	r3, [r7, #23]
 8008a36:	e048      	b.n	8008aca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a38:	463b      	mov	r3, r7
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff ff3f 	bl	80088c0 <create_name>
 8008a42:	4603      	mov	r3, r0
 8008a44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d139      	bne.n	8008ac0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff feb0 	bl	80087b2 <dir_find>
 8008a52:	4603      	mov	r3, r0
 8008a54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00a      	beq.n	8008a7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d12c      	bne.n	8008ac4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d127      	bne.n	8008ac4 <follow_path+0xdc>
 8008a74:	2305      	movs	r3, #5
 8008a76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008a78:	e024      	b.n	8008ac4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a7a:	7afb      	ldrb	r3, [r7, #11]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d121      	bne.n	8008ac8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	799b      	ldrb	r3, [r3, #6]
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008a90:	2305      	movs	r3, #5
 8008a92:	75fb      	strb	r3, [r7, #23]
 8008a94:	e019      	b.n	8008aca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	8992      	ldrh	r2, [r2, #12]
 8008aa4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008aa8:	fb00 f202 	mul.w	r2, r0, r2
 8008aac:	1a9b      	subs	r3, r3, r2
 8008aae:	440b      	add	r3, r1
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f7ff fe3e 	bl	8008734 <ld_clust>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008abe:	e7bb      	b.n	8008a38 <follow_path+0x50>
			if (res != FR_OK) break;
 8008ac0:	bf00      	nop
 8008ac2:	e002      	b.n	8008aca <follow_path+0xe2>
				break;
 8008ac4:	bf00      	nop
 8008ac6:	e000      	b.n	8008aca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ac8:	bf00      	nop
			}
		}
	}

	return res;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008adc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d031      	beq.n	8008b4e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e002      	b.n	8008af8 <get_ldnumber+0x24>
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	3301      	adds	r3, #1
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	d903      	bls.n	8008b08 <get_ldnumber+0x34>
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b3a      	cmp	r3, #58	; 0x3a
 8008b06:	d1f4      	bne.n	8008af2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b3a      	cmp	r3, #58	; 0x3a
 8008b0e:	d11c      	bne.n	8008b4a <get_ldnumber+0x76>
			tp = *path;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	60fa      	str	r2, [r7, #12]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	3b30      	subs	r3, #48	; 0x30
 8008b20:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d80e      	bhi.n	8008b46 <get_ldnumber+0x72>
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d10a      	bne.n	8008b46 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d107      	bne.n	8008b46 <get_ldnumber+0x72>
					vol = (int)i;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	e002      	b.n	8008b50 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008b4e:	693b      	ldr	r3, [r7, #16]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	70da      	strb	r2, [r3, #3]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b72:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff f854 	bl	8007c24 <move_window>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <check_fs+0x2a>
 8008b82:	2304      	movs	r3, #4
 8008b84:	e038      	b.n	8008bf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3338      	adds	r3, #56	; 0x38
 8008b8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fd66 	bl	8007660 <ld_word>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d001      	beq.n	8008ba4 <check_fs+0x48>
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e029      	b.n	8008bf8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008baa:	2be9      	cmp	r3, #233	; 0xe9
 8008bac:	d009      	beq.n	8008bc2 <check_fs+0x66>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008bb4:	2beb      	cmp	r3, #235	; 0xeb
 8008bb6:	d11e      	bne.n	8008bf6 <check_fs+0x9a>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008bbe:	2b90      	cmp	r3, #144	; 0x90
 8008bc0:	d119      	bne.n	8008bf6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3338      	adds	r3, #56	; 0x38
 8008bc6:	3336      	adds	r3, #54	; 0x36
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe fd61 	bl	8007690 <ld_dword>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008bd4:	4a0a      	ldr	r2, [pc, #40]	; (8008c00 <check_fs+0xa4>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d101      	bne.n	8008bde <check_fs+0x82>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e00c      	b.n	8008bf8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3338      	adds	r3, #56	; 0x38
 8008be2:	3352      	adds	r3, #82	; 0x52
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fe fd53 	bl	8007690 <ld_dword>
 8008bea:	4603      	mov	r3, r0
 8008bec:	4a05      	ldr	r2, [pc, #20]	; (8008c04 <check_fs+0xa8>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d101      	bne.n	8008bf6 <check_fs+0x9a>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e000      	b.n	8008bf8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008bf6:	2302      	movs	r3, #2
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	00544146 	.word	0x00544146
 8008c04:	33544146 	.word	0x33544146

08008c08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b096      	sub	sp, #88	; 0x58
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7ff ff59 	bl	8008ad4 <get_ldnumber>
 8008c22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da01      	bge.n	8008c2e <find_volume+0x26>
 8008c2a:	230b      	movs	r3, #11
 8008c2c:	e26a      	b.n	8009104 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008c2e:	4aa3      	ldr	r2, [pc, #652]	; (8008ebc <find_volume+0x2b4>)
 8008c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <find_volume+0x3a>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	e260      	b.n	8009104 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8008c42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c44:	f7fe fe0c 	bl	8007860 <lock_fs>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <find_volume+0x4a>
 8008c4e:	230f      	movs	r3, #15
 8008c50:	e258      	b.n	8009104 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	f023 0301 	bic.w	r3, r3, #1
 8008c5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01a      	beq.n	8008c9e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	785b      	ldrb	r3, [r3, #1]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fe fc59 	bl	8007524 <disk_status>
 8008c72:	4603      	mov	r3, r0
 8008c74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10c      	bne.n	8008c9e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <find_volume+0x92>
 8008c8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c8e:	f003 0304 	and.w	r3, r3, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008c96:	230a      	movs	r3, #10
 8008c98:	e234      	b.n	8009104 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e232      	b.n	8009104 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	785b      	ldrb	r3, [r3, #1]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fe fc51 	bl	8007558 <disk_initialize>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008cbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e21b      	b.n	8009104 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <find_volume+0xda>
 8008cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008cde:	230a      	movs	r3, #10
 8008ce0:	e210      	b.n	8009104 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	7858      	ldrb	r0, [r3, #1]
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	330c      	adds	r3, #12
 8008cea:	461a      	mov	r2, r3
 8008cec:	2102      	movs	r1, #2
 8008cee:	f7fe fc99 	bl	8007624 <disk_ioctl>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <find_volume+0xf4>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e203      	b.n	8009104 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	899b      	ldrh	r3, [r3, #12]
 8008d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d04:	d80d      	bhi.n	8008d22 <find_volume+0x11a>
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	899b      	ldrh	r3, [r3, #12]
 8008d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d0e:	d308      	bcc.n	8008d22 <find_volume+0x11a>
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	899b      	ldrh	r3, [r3, #12]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d18:	899b      	ldrh	r3, [r3, #12]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <find_volume+0x11e>
 8008d22:	2301      	movs	r3, #1
 8008d24:	e1ee      	b.n	8009104 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008d2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d2e:	f7ff ff15 	bl	8008b5c <check_fs>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008d38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d149      	bne.n	8008dd4 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008d40:	2300      	movs	r3, #0
 8008d42:	643b      	str	r3, [r7, #64]	; 0x40
 8008d44:	e01e      	b.n	8008d84 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008d54:	4413      	add	r3, r2
 8008d56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d006      	beq.n	8008d70 <find_volume+0x168>
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	3308      	adds	r3, #8
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fc92 	bl	8007690 <ld_dword>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	e000      	b.n	8008d72 <find_volume+0x16a>
 8008d70:	2200      	movs	r2, #0
 8008d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	3358      	adds	r3, #88	; 0x58
 8008d78:	443b      	add	r3, r7
 8008d7a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d80:	3301      	adds	r3, #1
 8008d82:	643b      	str	r3, [r7, #64]	; 0x40
 8008d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d9dd      	bls.n	8008d46 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <find_volume+0x192>
 8008d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d96:	3b01      	subs	r3, #1
 8008d98:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	3358      	adds	r3, #88	; 0x58
 8008da0:	443b      	add	r3, r7
 8008da2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008da6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <find_volume+0x1b2>
 8008dae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008db0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008db2:	f7ff fed3 	bl	8008b5c <check_fs>
 8008db6:	4603      	mov	r3, r0
 8008db8:	e000      	b.n	8008dbc <find_volume+0x1b4>
 8008dba:	2303      	movs	r3, #3
 8008dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d905      	bls.n	8008dd4 <find_volume+0x1cc>
 8008dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dca:	3301      	adds	r3, #1
 8008dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8008dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d9e2      	bls.n	8008d9a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d101      	bne.n	8008de0 <find_volume+0x1d8>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e191      	b.n	8009104 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d901      	bls.n	8008dec <find_volume+0x1e4>
 8008de8:	230d      	movs	r3, #13
 8008dea:	e18b      	b.n	8009104 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	3338      	adds	r3, #56	; 0x38
 8008df0:	330b      	adds	r3, #11
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe fc34 	bl	8007660 <ld_word>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	899b      	ldrh	r3, [r3, #12]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d001      	beq.n	8008e08 <find_volume+0x200>
 8008e04:	230d      	movs	r3, #13
 8008e06:	e17d      	b.n	8009104 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0a:	3338      	adds	r3, #56	; 0x38
 8008e0c:	3316      	adds	r3, #22
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fc26 	bl	8007660 <ld_word>
 8008e14:	4603      	mov	r3, r0
 8008e16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <find_volume+0x224>
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	3338      	adds	r3, #56	; 0x38
 8008e22:	3324      	adds	r3, #36	; 0x24
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe fc33 	bl	8007690 <ld_dword>
 8008e2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e30:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e34:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	789b      	ldrb	r3, [r3, #2]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d005      	beq.n	8008e50 <find_volume+0x248>
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	789b      	ldrb	r3, [r3, #2]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d001      	beq.n	8008e50 <find_volume+0x248>
 8008e4c:	230d      	movs	r3, #13
 8008e4e:	e159      	b.n	8009104 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e52:	789b      	ldrb	r3, [r3, #2]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e58:	fb02 f303 	mul.w	r3, r2, r3
 8008e5c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	895b      	ldrh	r3, [r3, #10]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d008      	beq.n	8008e84 <find_volume+0x27c>
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	895b      	ldrh	r3, [r3, #10]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7a:	895b      	ldrh	r3, [r3, #10]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	4013      	ands	r3, r2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <find_volume+0x280>
 8008e84:	230d      	movs	r3, #13
 8008e86:	e13d      	b.n	8009104 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	3338      	adds	r3, #56	; 0x38
 8008e8c:	3311      	adds	r3, #17
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe fbe6 	bl	8007660 <ld_word>
 8008e94:	4603      	mov	r3, r0
 8008e96:	461a      	mov	r2, r3
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	891b      	ldrh	r3, [r3, #8]
 8008ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ea2:	8992      	ldrh	r2, [r2, #12]
 8008ea4:	0952      	lsrs	r2, r2, #5
 8008ea6:	b292      	uxth	r2, r2
 8008ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eac:	fb01 f202 	mul.w	r2, r1, r2
 8008eb0:	1a9b      	subs	r3, r3, r2
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d003      	beq.n	8008ec0 <find_volume+0x2b8>
 8008eb8:	230d      	movs	r3, #13
 8008eba:	e123      	b.n	8009104 <find_volume+0x4fc>
 8008ebc:	24004538 	.word	0x24004538

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	3338      	adds	r3, #56	; 0x38
 8008ec4:	3313      	adds	r3, #19
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe fbca 	bl	8007660 <ld_word>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <find_volume+0x2dc>
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	3338      	adds	r3, #56	; 0x38
 8008eda:	3320      	adds	r3, #32
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe fbd7 	bl	8007690 <ld_dword>
 8008ee2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	3338      	adds	r3, #56	; 0x38
 8008ee8:	330e      	adds	r3, #14
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fbb8 	bl	8007660 <ld_word>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008ef4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <find_volume+0x2f6>
 8008efa:	230d      	movs	r3, #13
 8008efc:	e102      	b.n	8009104 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008efe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f02:	4413      	add	r3, r2
 8008f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f06:	8911      	ldrh	r1, [r2, #8]
 8008f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f0a:	8992      	ldrh	r2, [r2, #12]
 8008f0c:	0952      	lsrs	r2, r2, #5
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	fbb1 f2f2 	udiv	r2, r1, r2
 8008f14:	b292      	uxth	r2, r2
 8008f16:	4413      	add	r3, r2
 8008f18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d201      	bcs.n	8008f26 <find_volume+0x31e>
 8008f22:	230d      	movs	r3, #13
 8008f24:	e0ee      	b.n	8009104 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f2e:	8952      	ldrh	r2, [r2, #10]
 8008f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <find_volume+0x338>
 8008f3c:	230d      	movs	r3, #13
 8008f3e:	e0e1      	b.n	8009104 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8008f40:	2303      	movs	r3, #3
 8008f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d802      	bhi.n	8008f56 <find_volume+0x34e>
 8008f50:	2302      	movs	r3, #2
 8008f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d802      	bhi.n	8008f66 <find_volume+0x35e>
 8008f60:	2301      	movs	r3, #1
 8008f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	1c9a      	adds	r2, r3, #2
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f72:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008f74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f78:	441a      	add	r2, r3
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008f7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	441a      	add	r2, r3
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d11e      	bne.n	8008fce <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	3338      	adds	r3, #56	; 0x38
 8008f94:	332a      	adds	r3, #42	; 0x2a
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe fb62 	bl	8007660 <ld_word>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <find_volume+0x39e>
 8008fa2:	230d      	movs	r3, #13
 8008fa4:	e0ae      	b.n	8009104 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa8:	891b      	ldrh	r3, [r3, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <find_volume+0x3aa>
 8008fae:	230d      	movs	r3, #13
 8008fb0:	e0a8      	b.n	8009104 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb4:	3338      	adds	r3, #56	; 0x38
 8008fb6:	332c      	adds	r3, #44	; 0x2c
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe fb69 	bl	8007690 <ld_dword>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	647b      	str	r3, [r7, #68]	; 0x44
 8008fcc:	e01f      	b.n	800900e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd0:	891b      	ldrh	r3, [r3, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <find_volume+0x3d2>
 8008fd6:	230d      	movs	r3, #13
 8008fd8:	e094      	b.n	8009104 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe0:	441a      	add	r2, r3
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008fe6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d103      	bne.n	8008ff6 <find_volume+0x3ee>
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	e00a      	b.n	800900c <find_volume+0x404>
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	69da      	ldr	r2, [r3, #28]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	4413      	add	r3, r2
 8009000:	085a      	lsrs	r2, r3, #1
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800900c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	6a1a      	ldr	r2, [r3, #32]
 8009012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009014:	899b      	ldrh	r3, [r3, #12]
 8009016:	4619      	mov	r1, r3
 8009018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800901a:	440b      	add	r3, r1
 800901c:	3b01      	subs	r3, #1
 800901e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009020:	8989      	ldrh	r1, [r1, #12]
 8009022:	fbb3 f3f1 	udiv	r3, r3, r1
 8009026:	429a      	cmp	r2, r3
 8009028:	d201      	bcs.n	800902e <find_volume+0x426>
 800902a:	230d      	movs	r3, #13
 800902c:	e06a      	b.n	8009104 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	f04f 32ff 	mov.w	r2, #4294967295
 8009034:	619a      	str	r2, [r3, #24]
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	699a      	ldr	r2, [r3, #24]
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	2280      	movs	r2, #128	; 0x80
 8009042:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009048:	2b03      	cmp	r3, #3
 800904a:	d149      	bne.n	80090e0 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	3338      	adds	r3, #56	; 0x38
 8009050:	3330      	adds	r3, #48	; 0x30
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fb04 	bl	8007660 <ld_word>
 8009058:	4603      	mov	r3, r0
 800905a:	2b01      	cmp	r3, #1
 800905c:	d140      	bne.n	80090e0 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800905e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009060:	3301      	adds	r3, #1
 8009062:	4619      	mov	r1, r3
 8009064:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009066:	f7fe fddd 	bl	8007c24 <move_window>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d137      	bne.n	80090e0 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	2200      	movs	r2, #0
 8009074:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	3338      	adds	r3, #56	; 0x38
 800907a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe faee 	bl	8007660 <ld_word>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800908c:	429a      	cmp	r2, r3
 800908e:	d127      	bne.n	80090e0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	3338      	adds	r3, #56	; 0x38
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fafb 	bl	8007690 <ld_dword>
 800909a:	4603      	mov	r3, r0
 800909c:	4a1b      	ldr	r2, [pc, #108]	; (800910c <find_volume+0x504>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d11e      	bne.n	80090e0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	3338      	adds	r3, #56	; 0x38
 80090a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe faf0 	bl	8007690 <ld_dword>
 80090b0:	4603      	mov	r3, r0
 80090b2:	4a17      	ldr	r2, [pc, #92]	; (8009110 <find_volume+0x508>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d113      	bne.n	80090e0 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	3338      	adds	r3, #56	; 0x38
 80090bc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe fae5 	bl	8007690 <ld_dword>
 80090c6:	4602      	mov	r2, r0
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	3338      	adds	r3, #56	; 0x38
 80090d0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fe fadb 	bl	8007690 <ld_dword>
 80090da:	4602      	mov	r2, r0
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80090e6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80090e8:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <find_volume+0x50c>)
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	4b08      	ldr	r3, [pc, #32]	; (8009114 <find_volume+0x50c>)
 80090f2:	801a      	strh	r2, [r3, #0]
 80090f4:	4b07      	ldr	r3, [pc, #28]	; (8009114 <find_volume+0x50c>)
 80090f6:	881a      	ldrh	r2, [r3, #0]
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80090fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090fe:	f7fe fd29 	bl	8007b54 <clear_lock>
#endif
	return FR_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3758      	adds	r7, #88	; 0x58
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	41615252 	.word	0x41615252
 8009110:	61417272 	.word	0x61417272
 8009114:	2400453c 	.word	0x2400453c

08009118 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009122:	2309      	movs	r3, #9
 8009124:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d02e      	beq.n	800918a <validate+0x72>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d02a      	beq.n	800918a <validate+0x72>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d025      	beq.n	800918a <validate+0x72>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	889a      	ldrh	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	88db      	ldrh	r3, [r3, #6]
 8009148:	429a      	cmp	r2, r3
 800914a:	d11e      	bne.n	800918a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe fb85 	bl	8007860 <lock_fs>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d014      	beq.n	8009186 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	785b      	ldrb	r3, [r3, #1]
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe f9de 	bl	8007524 <disk_status>
 8009168:	4603      	mov	r3, r0
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d102      	bne.n	8009178 <validate+0x60>
				res = FR_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]
 8009176:	e008      	b.n	800918a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2100      	movs	r1, #0
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fb84 	bl	800788c <unlock_fs>
 8009184:	e001      	b.n	800918a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009186:	230f      	movs	r3, #15
 8009188:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d102      	bne.n	8009196 <validate+0x7e>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	e000      	b.n	8009198 <validate+0x80>
 8009196:	2300      	movs	r3, #0
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	6013      	str	r3, [r2, #0]
	return res;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	4613      	mov	r3, r2
 80091b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80091ba:	f107 0310 	add.w	r3, r7, #16
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff fc88 	bl	8008ad4 <get_ldnumber>
 80091c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	da01      	bge.n	80091d0 <f_mount+0x28>
 80091cc:	230b      	movs	r3, #11
 80091ce:	e048      	b.n	8009262 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80091d0:	4a26      	ldr	r2, [pc, #152]	; (800926c <f_mount+0xc4>)
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00f      	beq.n	8009200 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80091e0:	69b8      	ldr	r0, [r7, #24]
 80091e2:	f7fe fcb7 	bl	8007b54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 f954 	bl	800a498 <ff_del_syncobj>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <f_mount+0x52>
 80091f6:	2302      	movs	r3, #2
 80091f8:	e033      	b.n	8009262 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	2200      	movs	r2, #0
 80091fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00f      	beq.n	8009226 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	b2da      	uxtb	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3310      	adds	r3, #16
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f001 f923 	bl	800a462 <ff_cre_syncobj>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <f_mount+0x7e>
 8009222:	2302      	movs	r3, #2
 8009224:	e01d      	b.n	8009262 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	4910      	ldr	r1, [pc, #64]	; (800926c <f_mount+0xc4>)
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <f_mount+0x94>
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d001      	beq.n	8009240 <f_mount+0x98>
 800923c:	2300      	movs	r3, #0
 800923e:	e010      	b.n	8009262 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009240:	f107 010c 	add.w	r1, r7, #12
 8009244:	f107 0308 	add.w	r3, r7, #8
 8009248:	2200      	movs	r2, #0
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff fcdc 	bl	8008c08 <find_volume>
 8009250:	4603      	mov	r3, r0
 8009252:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	7dfa      	ldrb	r2, [r7, #23]
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe fb16 	bl	800788c <unlock_fs>
 8009260:	7dfb      	ldrb	r3, [r7, #23]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3720      	adds	r7, #32
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	24004538 	.word	0x24004538

08009270 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b098      	sub	sp, #96	; 0x60
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <f_open+0x18>
 8009284:	2309      	movs	r3, #9
 8009286:	e1c2      	b.n	800960e <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800928e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009290:	79fa      	ldrb	r2, [r7, #7]
 8009292:	f107 0110 	add.w	r1, r7, #16
 8009296:	f107 0308 	add.w	r3, r7, #8
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fcb4 	bl	8008c08 <find_volume>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80092a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f040 819f 	bne.w	80095ee <f_open+0x37e>
		dj.obj.fs = fs;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	f107 0314 	add.w	r3, r7, #20
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f7ff fb93 	bl	80089e8 <follow_path>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80092c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d11a      	bne.n	8009306 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80092d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092d4:	b25b      	sxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	da03      	bge.n	80092e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80092da:	2306      	movs	r3, #6
 80092dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80092e0:	e011      	b.n	8009306 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	f023 0301 	bic.w	r3, r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	bf14      	ite	ne
 80092ec:	2301      	movne	r3, #1
 80092ee:	2300      	moveq	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	461a      	mov	r2, r3
 80092f4:	f107 0314 	add.w	r3, r7, #20
 80092f8:	4611      	mov	r1, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fae2 	bl	80078c4 <chk_lock>
 8009300:	4603      	mov	r3, r0
 8009302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	f003 031c 	and.w	r3, r3, #28
 800930c:	2b00      	cmp	r3, #0
 800930e:	d07f      	beq.n	8009410 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009314:	2b00      	cmp	r3, #0
 8009316:	d017      	beq.n	8009348 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009318:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800931c:	2b04      	cmp	r3, #4
 800931e:	d10e      	bne.n	800933e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009320:	f7fe fb2c 	bl	800797c <enq_lock>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d006      	beq.n	8009338 <f_open+0xc8>
 800932a:	f107 0314 	add.w	r3, r7, #20
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff fa94 	bl	800885c <dir_register>
 8009334:	4603      	mov	r3, r0
 8009336:	e000      	b.n	800933a <f_open+0xca>
 8009338:	2312      	movs	r3, #18
 800933a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800933e:	79fb      	ldrb	r3, [r7, #7]
 8009340:	f043 0308 	orr.w	r3, r3, #8
 8009344:	71fb      	strb	r3, [r7, #7]
 8009346:	e010      	b.n	800936a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009348:	7ebb      	ldrb	r3, [r7, #26]
 800934a:	f003 0311 	and.w	r3, r3, #17
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <f_open+0xea>
					res = FR_DENIED;
 8009352:	2307      	movs	r3, #7
 8009354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009358:	e007      	b.n	800936a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <f_open+0xfa>
 8009364:	2308      	movs	r3, #8
 8009366:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800936a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800936e:	2b00      	cmp	r3, #0
 8009370:	d168      	bne.n	8009444 <f_open+0x1d4>
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	f003 0308 	and.w	r3, r3, #8
 8009378:	2b00      	cmp	r3, #0
 800937a:	d063      	beq.n	8009444 <f_open+0x1d4>
				dw = GET_FATTIME();
 800937c:	f7fd fe8a 	bl	8007094 <get_fattime>
 8009380:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009384:	330e      	adds	r3, #14
 8009386:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe f9bf 	bl	800770c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800938e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009390:	3316      	adds	r3, #22
 8009392:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009394:	4618      	mov	r0, r3
 8009396:	f7fe f9b9 	bl	800770c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	330b      	adds	r3, #11
 800939e:	2220      	movs	r2, #32
 80093a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a6:	4611      	mov	r1, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff f9c3 	bl	8008734 <ld_clust>
 80093ae:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093b4:	2200      	movs	r2, #0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff f9db 	bl	8008772 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80093bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093be:	331c      	adds	r3, #28
 80093c0:	2100      	movs	r1, #0
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe f9a2 	bl	800770c <st_dword>
					fs->wflag = 1;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2201      	movs	r2, #1
 80093cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80093ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d037      	beq.n	8009444 <f_open+0x1d4>
						dw = fs->winsect;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80093da:	f107 0314 	add.w	r3, r7, #20
 80093de:	2200      	movs	r2, #0
 80093e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fecb 	bl	800817e <remove_chain>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80093ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d126      	bne.n	8009444 <f_open+0x1d4>
							res = move_window(fs, dw);
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fe fc12 	bl	8007c24 <move_window>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800940a:	3a01      	subs	r2, #1
 800940c:	615a      	str	r2, [r3, #20]
 800940e:	e019      	b.n	8009444 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009414:	2b00      	cmp	r3, #0
 8009416:	d115      	bne.n	8009444 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009418:	7ebb      	ldrb	r3, [r7, #26]
 800941a:	f003 0310 	and.w	r3, r3, #16
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009422:	2304      	movs	r3, #4
 8009424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009428:	e00c      	b.n	8009444 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d007      	beq.n	8009444 <f_open+0x1d4>
 8009434:	7ebb      	ldrb	r3, [r7, #26]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <f_open+0x1d4>
						res = FR_DENIED;
 800943e:	2307      	movs	r3, #7
 8009440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009444:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009448:	2b00      	cmp	r3, #0
 800944a:	d128      	bne.n	800949e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	f003 0308 	and.w	r3, r3, #8
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009456:	79fb      	ldrb	r3, [r7, #7]
 8009458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800945c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	bf14      	ite	ne
 8009476:	2301      	movne	r3, #1
 8009478:	2300      	moveq	r3, #0
 800947a:	b2db      	uxtb	r3, r3
 800947c:	461a      	mov	r2, r3
 800947e:	f107 0314 	add.w	r3, r7, #20
 8009482:	4611      	mov	r1, r2
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe fa9b 	bl	80079c0 <inc_lock>
 800948a:	4602      	mov	r2, r0
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d102      	bne.n	800949e <f_open+0x22e>
 8009498:	2302      	movs	r3, #2
 800949a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800949e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f040 80a3 	bne.w	80095ee <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ac:	4611      	mov	r1, r2
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff f940 	bl	8008734 <ld_clust>
 80094b4:	4602      	mov	r2, r0
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80094ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094bc:	331c      	adds	r3, #28
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe f8e6 	bl	8007690 <ld_dword>
 80094c4:	4602      	mov	r2, r0
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	88da      	ldrh	r2, [r3, #6]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	79fa      	ldrb	r2, [r7, #7]
 80094e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3330      	adds	r3, #48	; 0x30
 80094fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80094fe:	2100      	movs	r1, #0
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe f950 	bl	80077a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d06e      	beq.n	80095ee <f_open+0x37e>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d06a      	beq.n	80095ee <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	895b      	ldrh	r3, [r3, #10]
 8009524:	461a      	mov	r2, r3
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	899b      	ldrh	r3, [r3, #12]
 800952a:	fb02 f303 	mul.w	r3, r2, r3
 800952e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	657b      	str	r3, [r7, #84]	; 0x54
 800953c:	e016      	b.n	800956c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe fc2b 	bl	8007d9e <get_fat>
 8009548:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800954a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800954c:	2b01      	cmp	r3, #1
 800954e:	d802      	bhi.n	8009556 <f_open+0x2e6>
 8009550:	2302      	movs	r3, #2
 8009552:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d102      	bne.n	8009564 <f_open+0x2f4>
 800955e:	2301      	movs	r3, #1
 8009560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009564:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	657b      	str	r3, [r7, #84]	; 0x54
 800956c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009570:	2b00      	cmp	r3, #0
 8009572:	d103      	bne.n	800957c <f_open+0x30c>
 8009574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009578:	429a      	cmp	r2, r3
 800957a:	d8e0      	bhi.n	800953e <f_open+0x2ce>
				}
				fp->clust = clst;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009580:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009586:	2b00      	cmp	r3, #0
 8009588:	d131      	bne.n	80095ee <f_open+0x37e>
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	899b      	ldrh	r3, [r3, #12]
 800958e:	461a      	mov	r2, r3
 8009590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009592:	fbb3 f1f2 	udiv	r1, r3, r2
 8009596:	fb01 f202 	mul.w	r2, r1, r2
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	2b00      	cmp	r3, #0
 800959e:	d026      	beq.n	80095ee <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fe fbdb 	bl	8007d60 <clust2sect>
 80095aa:	6478      	str	r0, [r7, #68]	; 0x44
 80095ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d103      	bne.n	80095ba <f_open+0x34a>
						res = FR_INT_ERR;
 80095b2:	2302      	movs	r3, #2
 80095b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095b8:	e019      	b.n	80095ee <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	899b      	ldrh	r3, [r3, #12]
 80095be:	461a      	mov	r2, r3
 80095c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80095c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095c8:	441a      	add	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	7858      	ldrb	r0, [r3, #1]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a1a      	ldr	r2, [r3, #32]
 80095dc:	2301      	movs	r3, #1
 80095de:	f7fd ffe1 	bl	80075a4 <disk_read>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <f_open+0x37e>
 80095e8:	2301      	movs	r3, #1
 80095ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80095ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d002      	beq.n	80095fc <f_open+0x38c>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009602:	4611      	mov	r1, r2
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe f941 	bl	800788c <unlock_fs>
 800960a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800960e:	4618      	mov	r0, r3
 8009610:	3760      	adds	r7, #96	; 0x60
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b08c      	sub	sp, #48	; 0x30
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
 8009622:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f107 0210 	add.w	r2, r7, #16
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fd6e 	bl	8009118 <validate>
 800963c:	4603      	mov	r3, r0
 800963e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009646:	2b00      	cmp	r3, #0
 8009648:	d107      	bne.n	800965a <f_write+0x44>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	7d5b      	ldrb	r3, [r3, #21]
 800964e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009656:	2b00      	cmp	r3, #0
 8009658:	d009      	beq.n	800966e <f_write+0x58>
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009660:	4611      	mov	r1, r2
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe f912 	bl	800788c <unlock_fs>
 8009668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800966c:	e192      	b.n	8009994 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	7d1b      	ldrb	r3, [r3, #20]
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b00      	cmp	r3, #0
 8009678:	d106      	bne.n	8009688 <f_write+0x72>
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	2107      	movs	r1, #7
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe f904 	bl	800788c <unlock_fs>
 8009684:	2307      	movs	r3, #7
 8009686:	e185      	b.n	8009994 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	699a      	ldr	r2, [r3, #24]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	441a      	add	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	429a      	cmp	r2, r3
 8009696:	f080 816a 	bcs.w	800996e <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	43db      	mvns	r3, r3
 80096a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80096a2:	e164      	b.n	800996e <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	8992      	ldrh	r2, [r2, #12]
 80096ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80096b0:	fb01 f202 	mul.w	r2, r1, r2
 80096b4:	1a9b      	subs	r3, r3, r2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f040 810f 	bne.w	80098da <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	8992      	ldrh	r2, [r2, #12]
 80096c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	8952      	ldrh	r2, [r2, #10]
 80096cc:	3a01      	subs	r2, #1
 80096ce:	4013      	ands	r3, r2
 80096d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d14d      	bne.n	8009774 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10c      	bne.n	80096fa <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d11a      	bne.n	8009722 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2100      	movs	r1, #0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe fda9 	bl	8008248 <create_chain>
 80096f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80096f8:	e013      	b.n	8009722 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	4619      	mov	r1, r3
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f7fe fe35 	bl	8008378 <clmt_clust>
 800970e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009710:	e007      	b.n	8009722 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f7fe fd94 	bl	8008248 <create_chain>
 8009720:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 8127 	beq.w	8009978 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972c:	2b01      	cmp	r3, #1
 800972e:	d109      	bne.n	8009744 <f_write+0x12e>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2202      	movs	r2, #2
 8009734:	755a      	strb	r2, [r3, #21]
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2102      	movs	r1, #2
 800973a:	4618      	mov	r0, r3
 800973c:	f7fe f8a6 	bl	800788c <unlock_fs>
 8009740:	2302      	movs	r3, #2
 8009742:	e127      	b.n	8009994 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974a:	d109      	bne.n	8009760 <f_write+0x14a>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	755a      	strb	r2, [r3, #21]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	2101      	movs	r1, #1
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe f898 	bl	800788c <unlock_fs>
 800975c:	2301      	movs	r3, #1
 800975e:	e119      	b.n	8009994 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009764:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d102      	bne.n	8009774 <f_write+0x15e>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009772:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	7d1b      	ldrb	r3, [r3, #20]
 8009778:	b25b      	sxtb	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	da1d      	bge.n	80097ba <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	7858      	ldrb	r0, [r3, #1]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6a1a      	ldr	r2, [r3, #32]
 800978c:	2301      	movs	r3, #1
 800978e:	f7fd ff29 	bl	80075e4 <disk_write>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d009      	beq.n	80097ac <f_write+0x196>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2201      	movs	r2, #1
 800979c:	755a      	strb	r2, [r3, #21]
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2101      	movs	r1, #1
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe f872 	bl	800788c <unlock_fs>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e0f3      	b.n	8009994 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	7d1b      	ldrb	r3, [r3, #20]
 80097b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f7fe facc 	bl	8007d60 <clust2sect>
 80097c8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d109      	bne.n	80097e4 <f_write+0x1ce>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2202      	movs	r2, #2
 80097d4:	755a      	strb	r2, [r3, #21]
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2102      	movs	r1, #2
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe f856 	bl	800788c <unlock_fs>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e0d7      	b.n	8009994 <f_write+0x37e>
			sect += csect;
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	4413      	add	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	899b      	ldrh	r3, [r3, #12]
 80097f0:	461a      	mov	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097f8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d048      	beq.n	8009892 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009800:	69ba      	ldr	r2, [r7, #24]
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	4413      	add	r3, r2
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	8952      	ldrh	r2, [r2, #10]
 800980a:	4293      	cmp	r3, r2
 800980c:	d905      	bls.n	800981a <f_write+0x204>
					cc = fs->csize - csect;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	895b      	ldrh	r3, [r3, #10]
 8009812:	461a      	mov	r2, r3
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	7858      	ldrb	r0, [r3, #1]
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	69f9      	ldr	r1, [r7, #28]
 8009824:	f7fd fede 	bl	80075e4 <disk_write>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d009      	beq.n	8009842 <f_write+0x22c>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2201      	movs	r2, #1
 8009832:	755a      	strb	r2, [r3, #21]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2101      	movs	r1, #1
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe f827 	bl	800788c <unlock_fs>
 800983e:	2301      	movs	r3, #1
 8009840:	e0a8      	b.n	8009994 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1a      	ldr	r2, [r3, #32]
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	6a3a      	ldr	r2, [r7, #32]
 800984c:	429a      	cmp	r2, r3
 800984e:	d918      	bls.n	8009882 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6a1a      	ldr	r2, [r3, #32]
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	8992      	ldrh	r2, [r2, #12]
 8009862:	fb02 f303 	mul.w	r3, r2, r3
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	18d1      	adds	r1, r2, r3
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	899b      	ldrh	r3, [r3, #12]
 800986e:	461a      	mov	r2, r3
 8009870:	f7fd ff78 	bl	8007764 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	7d1b      	ldrb	r3, [r3, #20]
 8009878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800987c:	b2da      	uxtb	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	899b      	ldrh	r3, [r3, #12]
 8009886:	461a      	mov	r2, r3
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	fb02 f303 	mul.w	r3, r2, r3
 800988e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009890:	e050      	b.n	8009934 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	429a      	cmp	r2, r3
 800989a:	d01b      	beq.n	80098d4 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	699a      	ldr	r2, [r3, #24]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d215      	bcs.n	80098d4 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	7858      	ldrb	r0, [r3, #1]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098b2:	2301      	movs	r3, #1
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	f7fd fe75 	bl	80075a4 <disk_read>
 80098ba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d009      	beq.n	80098d4 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2201      	movs	r2, #1
 80098c4:	755a      	strb	r2, [r3, #21]
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2101      	movs	r1, #1
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fd ffde 	bl	800788c <unlock_fs>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e05f      	b.n	8009994 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	899b      	ldrh	r3, [r3, #12]
 80098de:	4618      	mov	r0, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	8992      	ldrh	r2, [r2, #12]
 80098e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80098ec:	fb01 f202 	mul.w	r2, r1, r2
 80098f0:	1a9b      	subs	r3, r3, r2
 80098f2:	1ac3      	subs	r3, r0, r3
 80098f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80098f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d901      	bls.n	8009902 <f_write+0x2ec>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	8992      	ldrh	r2, [r2, #12]
 8009910:	fbb3 f0f2 	udiv	r0, r3, r2
 8009914:	fb00 f202 	mul.w	r2, r0, r2
 8009918:	1a9b      	subs	r3, r3, r2
 800991a:	440b      	add	r3, r1
 800991c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991e:	69f9      	ldr	r1, [r7, #28]
 8009920:	4618      	mov	r0, r3
 8009922:	f7fd ff1f 	bl	8007764 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	7d1b      	ldrb	r3, [r3, #20]
 800992a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800992e:	b2da      	uxtb	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	4413      	add	r3, r2
 800993a:	61fb      	str	r3, [r7, #28]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	441a      	add	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	619a      	str	r2, [r3, #24]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	429a      	cmp	r2, r3
 8009952:	bf38      	it	cc
 8009954:	461a      	movcc	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	60da      	str	r2, [r3, #12]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	441a      	add	r2, r3
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	f47f ae97 	bne.w	80096a4 <f_write+0x8e>
 8009976:	e000      	b.n	800997a <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009978:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	7d1b      	ldrb	r3, [r3, #20]
 800997e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009982:	b2da      	uxtb	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	2100      	movs	r1, #0
 800998c:	4618      	mov	r0, r3
 800998e:	f7fd ff7d 	bl	800788c <unlock_fs>
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3730      	adds	r7, #48	; 0x30
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f107 0208 	add.w	r2, r7, #8
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7ff fbb3 	bl	8009118 <validate>
 80099b2:	4603      	mov	r3, r0
 80099b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d16d      	bne.n	8009a98 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	7d1b      	ldrb	r3, [r3, #20]
 80099c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d067      	beq.n	8009a98 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	7d1b      	ldrb	r3, [r3, #20]
 80099cc:	b25b      	sxtb	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	da1a      	bge.n	8009a08 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	7858      	ldrb	r0, [r3, #1]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a1a      	ldr	r2, [r3, #32]
 80099e0:	2301      	movs	r3, #1
 80099e2:	f7fd fdff 	bl	80075e4 <disk_write>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d006      	beq.n	80099fa <f_sync+0x5e>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2101      	movs	r1, #1
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fd ff4b 	bl	800788c <unlock_fs>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e055      	b.n	8009aa6 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	7d1b      	ldrb	r3, [r3, #20]
 80099fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a08:	f7fd fb44 	bl	8007094 <get_fattime>
 8009a0c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a14:	4619      	mov	r1, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	f7fe f904 	bl	8007c24 <move_window>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009a20:	7dfb      	ldrb	r3, [r7, #23]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d138      	bne.n	8009a98 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	330b      	adds	r3, #11
 8009a30:	781a      	ldrb	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	330b      	adds	r3, #11
 8009a36:	f042 0220 	orr.w	r2, r2, #32
 8009a3a:	b2d2      	uxtb	r2, r2
 8009a3c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	461a      	mov	r2, r3
 8009a48:	68f9      	ldr	r1, [r7, #12]
 8009a4a:	f7fe fe92 	bl	8008772 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f103 021c 	add.w	r2, r3, #28
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	f7fd fe56 	bl	800770c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3316      	adds	r3, #22
 8009a64:	6939      	ldr	r1, [r7, #16]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fd fe50 	bl	800770c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3312      	adds	r3, #18
 8009a70:	2100      	movs	r1, #0
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fd fe2f 	bl	80076d6 <st_word>
					fs->wflag = 1;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fe f8fd 	bl	8007c80 <sync_fs>
 8009a86:	4603      	mov	r3, r0
 8009a88:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	7d1b      	ldrb	r3, [r3, #20]
 8009a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	7dfa      	ldrb	r2, [r7, #23]
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fd fef4 	bl	800788c <unlock_fs>
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7ff ff70 	bl	800999c <f_sync>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d11d      	bne.n	8009b02 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f107 0208 	add.w	r2, r7, #8
 8009acc:	4611      	mov	r1, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff fb22 	bl	8009118 <validate>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d111      	bne.n	8009b02 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fd fffa 	bl	8007adc <dec_lock>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d102      	bne.n	8009af8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2100      	movs	r1, #0
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fd fec5 	bl	800788c <unlock_fs>
#endif
		}
	}
	return res;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8009b0c:	b590      	push	{r4, r7, lr}
 8009b0e:	b09d      	sub	sp, #116	; 0x74
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	607a      	str	r2, [r7, #4]
 8009b16:	603b      	str	r3, [r7, #0]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8009b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b24:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8009b26:	f107 030c 	add.w	r3, r7, #12
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe ffd2 	bl	8008ad4 <get_ldnumber>
 8009b30:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	da02      	bge.n	8009b3e <f_mkfs+0x32>
 8009b38:	230b      	movs	r3, #11
 8009b3a:	f000 bc31 	b.w	800a3a0 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8009b3e:	4aa5      	ldr	r2, [pc, #660]	; (8009dd4 <f_mkfs+0x2c8>)
 8009b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d005      	beq.n	8009b56 <f_mkfs+0x4a>
 8009b4a:	4aa2      	ldr	r2, [pc, #648]	; (8009dd4 <f_mkfs+0x2c8>)
 8009b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b52:	2200      	movs	r2, #0
 8009b54:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8009b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b58:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8009b62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fd fcf6 	bl	8007558 <disk_initialize>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8009b72:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <f_mkfs+0x78>
 8009b7e:	2303      	movs	r3, #3
 8009b80:	f000 bc0e 	b.w	800a3a0 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8009b84:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <f_mkfs+0x8a>
 8009b90:	230a      	movs	r3, #10
 8009b92:	f000 bc05 	b.w	800a3a0 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8009b96:	f107 0214 	add.w	r2, r7, #20
 8009b9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b9e:	2103      	movs	r1, #3
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fd fd3f 	bl	8007624 <disk_ioctl>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10c      	bne.n	8009bc6 <f_mkfs+0xba>
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d009      	beq.n	8009bc6 <f_mkfs+0xba>
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb8:	d805      	bhi.n	8009bc6 <f_mkfs+0xba>
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	1e5a      	subs	r2, r3, #1
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <f_mkfs+0xbe>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8009bca:	f107 021a 	add.w	r2, r7, #26
 8009bce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009bd2:	2102      	movs	r1, #2
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fd fd25 	bl	8007624 <disk_ioctl>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <f_mkfs+0xd8>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e3dd      	b.n	800a3a0 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8009be4:	8b7b      	ldrh	r3, [r7, #26]
 8009be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bea:	d80a      	bhi.n	8009c02 <f_mkfs+0xf6>
 8009bec:	8b7b      	ldrh	r3, [r7, #26]
 8009bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf2:	d306      	bcc.n	8009c02 <f_mkfs+0xf6>
 8009bf4:	8b7b      	ldrh	r3, [r7, #26]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	8b7b      	ldrh	r3, [r7, #26]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <f_mkfs+0xfa>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e3cc      	b.n	800a3a0 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d004      	beq.n	8009c16 <f_mkfs+0x10a>
 8009c0c:	8b7b      	ldrh	r3, [r7, #26]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d309      	bcc.n	8009c2a <f_mkfs+0x11e>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c1c:	d805      	bhi.n	8009c2a <f_mkfs+0x11e>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	1e5a      	subs	r2, r3, #1
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4013      	ands	r3, r2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <f_mkfs+0x122>
 8009c2a:	2313      	movs	r3, #19
 8009c2c:	e3b8      	b.n	800a3a0 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 8009c2e:	8b7b      	ldrh	r3, [r7, #26]
 8009c30:	461a      	mov	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c38:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8009c3e:	8b7b      	ldrh	r3, [r7, #26]
 8009c40:	461a      	mov	r2, r3
 8009c42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c4a:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8009c4c:	8b7b      	ldrh	r3, [r7, #26]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	fb02 f303 	mul.w	r3, r2, r3
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <f_mkfs+0x156>
 8009c5e:	230e      	movs	r3, #14
 8009c60:	e39e      	b.n	800a3a0 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8009c62:	f107 0210 	add.w	r2, r7, #16
 8009c66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd fcd9 	bl	8007624 <disk_ioctl>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <f_mkfs+0x170>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e391      	b.n	800a3a0 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <f_mkfs+0x17e>
 8009c86:	2300      	movs	r3, #0
 8009c88:	e000      	b.n	8009c8c <f_mkfs+0x180>
 8009c8a:	233f      	movs	r3, #63	; 0x3f
 8009c8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d901      	bls.n	8009c9a <f_mkfs+0x18e>
 8009c96:	230e      	movs	r3, #14
 8009c98:	e382      	b.n	800a3a0 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ca6:	d801      	bhi.n	8009cac <f_mkfs+0x1a0>
 8009ca8:	230e      	movs	r3, #14
 8009caa:	e379      	b.n	800a3a0 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b80      	cmp	r3, #128	; 0x80
 8009cb0:	d901      	bls.n	8009cb6 <f_mkfs+0x1aa>
 8009cb2:	2313      	movs	r3, #19
 8009cb4:	e374      	b.n	800a3a0 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	f003 0302 	and.w	r3, r3, #2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00d      	beq.n	8009cdc <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8009cc0:	7afb      	ldrb	r3, [r7, #11]
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d004      	beq.n	8009cd4 <f_mkfs+0x1c8>
 8009cca:	7afb      	ldrb	r3, [r7, #11]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d103      	bne.n	8009cdc <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009cda:	e009      	b.n	8009cf0 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8009cdc:	7afb      	ldrb	r3, [r7, #11]
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <f_mkfs+0x1de>
 8009ce6:	2313      	movs	r3, #19
 8009ce8:	e35a      	b.n	800a3a0 <f_mkfs+0x894>
		fmt = FS_FAT16;
 8009cea:	2302      	movs	r3, #2
 8009cec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8009cf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	d13c      	bne.n	8009d76 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 8009cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d11b      	bne.n	8009d3a <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	0c5b      	lsrs	r3, r3, #17
 8009d06:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009d08:	2300      	movs	r3, #0
 8009d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8009d10:	e005      	b.n	8009d1e <f_mkfs+0x212>
 8009d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d14:	3301      	adds	r3, #1
 8009d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d1a:	005b      	lsls	r3, r3, #1
 8009d1c:	653b      	str	r3, [r7, #80]	; 0x50
 8009d1e:	4a2e      	ldr	r2, [pc, #184]	; (8009dd8 <f_mkfs+0x2cc>)
 8009d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d007      	beq.n	8009d3a <f_mkfs+0x22e>
 8009d2a:	4a2b      	ldr	r2, [pc, #172]	; (8009dd8 <f_mkfs+0x2cc>)
 8009d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d32:	461a      	mov	r2, r3
 8009d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d2eb      	bcs.n	8009d12 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	3302      	adds	r3, #2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	8b7a      	ldrh	r2, [r7, #26]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	8b7a      	ldrh	r2, [r7, #26]
 8009d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d56:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8009d58:	2320      	movs	r3, #32
 8009d5a:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d903      	bls.n	8009d72 <f_mkfs+0x266>
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	4a1b      	ldr	r2, [pc, #108]	; (8009ddc <f_mkfs+0x2d0>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d954      	bls.n	8009e1c <f_mkfs+0x310>
 8009d72:	230e      	movs	r3, #14
 8009d74:	e314      	b.n	800a3a0 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8009d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d11b      	bne.n	8009db4 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	0b1b      	lsrs	r3, r3, #12
 8009d80:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009d82:	2300      	movs	r3, #0
 8009d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d86:	2301      	movs	r3, #1
 8009d88:	653b      	str	r3, [r7, #80]	; 0x50
 8009d8a:	e005      	b.n	8009d98 <f_mkfs+0x28c>
 8009d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d8e:	3301      	adds	r3, #1
 8009d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	653b      	str	r3, [r7, #80]	; 0x50
 8009d98:	4a11      	ldr	r2, [pc, #68]	; (8009de0 <f_mkfs+0x2d4>)
 8009d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d007      	beq.n	8009db4 <f_mkfs+0x2a8>
 8009da4:	4a0e      	ldr	r2, [pc, #56]	; (8009de0 <f_mkfs+0x2d4>)
 8009da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dac:	461a      	mov	r2, r3
 8009dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d2eb      	bcs.n	8009d8c <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d90d      	bls.n	8009de4 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	3302      	adds	r3, #2
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dd0:	e013      	b.n	8009dfa <f_mkfs+0x2ee>
 8009dd2:	bf00      	nop
 8009dd4:	24004538 	.word	0x24004538
 8009dd8:	0800de64 	.word	0x0800de64
 8009ddc:	0ffffff5 	.word	0x0ffffff5
 8009de0:	0800de74 	.word	0x0800de74
				} else {
					fmt = FS_FAT12;
 8009de4:	2301      	movs	r3, #1
 8009de6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8009dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dec:	4613      	mov	r3, r2
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	4413      	add	r3, r2
 8009df2:	3301      	adds	r3, #1
 8009df4:	085b      	lsrs	r3, r3, #1
 8009df6:	3303      	adds	r3, #3
 8009df8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8009dfa:	8b7b      	ldrh	r3, [r7, #26]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e00:	4413      	add	r3, r2
 8009e02:	3b01      	subs	r3, #1
 8009e04:	8b7a      	ldrh	r2, [r7, #26]
 8009e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e0a:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8009e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e12:	015b      	lsls	r3, r3, #5
 8009e14:	8b7a      	ldrh	r2, [r7, #26]
 8009e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8009e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e20:	4413      	add	r3, r2
 8009e22:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8009e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e28:	fb03 f202 	mul.w	r2, r3, r2
 8009e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e2e:	4413      	add	r3, r2
 8009e30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e32:	4413      	add	r3, r2
 8009e34:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	1e5a      	subs	r2, r3, #1
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	425b      	negs	r3, r3
 8009e42:	401a      	ands	r2, r3
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8009e4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d108      	bne.n	8009e64 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 8009e52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e56:	4413      	add	r3, r2
 8009e58:	657b      	str	r3, [r7, #84]	; 0x54
 8009e5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e5e:	4413      	add	r3, r2
 8009e60:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e62:	e006      	b.n	8009e72 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8009e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e6e:	4413      	add	r3, r2
 8009e70:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8009e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e74:	011a      	lsls	r2, r3, #4
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	441a      	add	r2, r3
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	1ad2      	subs	r2, r2, r3
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d901      	bls.n	8009e88 <f_mkfs+0x37c>
 8009e84:	230e      	movs	r3, #14
 8009e86:	e28b      	b.n	800a3a0 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e8c:	1ad2      	subs	r2, r2, r3
 8009e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e92:	fb01 f303 	mul.w	r3, r1, r3
 8009e96:	1ad2      	subs	r2, r2, r3
 8009e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e9a:	1ad2      	subs	r2, r2, r3
 8009e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea2:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8009ea4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d10f      	bne.n	8009ecc <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d80a      	bhi.n	8009ecc <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d105      	bne.n	8009ec8 <f_mkfs+0x3bc>
 8009ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ebe:	085b      	lsrs	r3, r3, #1
 8009ec0:	607b      	str	r3, [r7, #4]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d144      	bne.n	8009f52 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 8009ec8:	230e      	movs	r3, #14
 8009eca:	e269      	b.n	800a3a0 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 8009ecc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d133      	bne.n	8009f3c <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d91e      	bls.n	8009f1c <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d107      	bne.n	8009ef4 <f_mkfs+0x3e8>
 8009ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	2b40      	cmp	r3, #64	; 0x40
 8009eea:	d803      	bhi.n	8009ef4 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8009eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	607b      	str	r3, [r7, #4]
 8009ef2:	e033      	b.n	8009f5c <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 8009ef4:	7afb      	ldrb	r3, [r7, #11]
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8009efe:	2303      	movs	r3, #3
 8009f00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009f04:	e02a      	b.n	8009f5c <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d105      	bne.n	8009f18 <f_mkfs+0x40c>
 8009f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	607b      	str	r3, [r7, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b80      	cmp	r3, #128	; 0x80
 8009f16:	d91e      	bls.n	8009f56 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 8009f18:	230e      	movs	r3, #14
 8009f1a:	e241      	b.n	800a3a0 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d80a      	bhi.n	8009f3c <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d105      	bne.n	8009f38 <f_mkfs+0x42c>
 8009f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f2e:	005b      	lsls	r3, r3, #1
 8009f30:	607b      	str	r3, [r7, #4]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b80      	cmp	r3, #128	; 0x80
 8009f36:	d910      	bls.n	8009f5a <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 8009f38:	230e      	movs	r3, #14
 8009f3a:	e231      	b.n	800a3a0 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8009f3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d10c      	bne.n	8009f5e <f_mkfs+0x452>
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d907      	bls.n	8009f5e <f_mkfs+0x452>
 8009f4e:	230e      	movs	r3, #14
 8009f50:	e226      	b.n	800a3a0 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009f52:	bf00      	nop
 8009f54:	e6cc      	b.n	8009cf0 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009f56:	bf00      	nop
 8009f58:	e6ca      	b.n	8009cf0 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009f5a:	bf00      	nop
			pau = au;
 8009f5c:	e6c8      	b.n	8009cf0 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 8009f5e:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8009f60:	8b7b      	ldrh	r3, [r7, #26]
 8009f62:	461a      	mov	r2, r3
 8009f64:	2100      	movs	r1, #0
 8009f66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f68:	f7fd fc1d 	bl	80077a6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8009f6c:	220b      	movs	r2, #11
 8009f6e:	49b3      	ldr	r1, [pc, #716]	; (800a23c <f_mkfs+0x730>)
 8009f70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f72:	f7fd fbf7 	bl	8007764 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8009f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f78:	330b      	adds	r3, #11
 8009f7a:	8b7a      	ldrh	r2, [r7, #26]
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fd fba9 	bl	80076d6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8009f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f86:	330d      	adds	r3, #13
 8009f88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f8a:	b2d2      	uxtb	r2, r2
 8009f8c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f90:	330e      	adds	r3, #14
 8009f92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f94:	b292      	uxth	r2, r2
 8009f96:	4611      	mov	r1, r2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fd fb9c 	bl	80076d6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa0:	3310      	adds	r3, #16
 8009fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fa4:	b2d2      	uxtb	r2, r2
 8009fa6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8009fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009faa:	f103 0211 	add.w	r2, r3, #17
 8009fae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d002      	beq.n	8009fbc <f_mkfs+0x4b0>
 8009fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	e000      	b.n	8009fbe <f_mkfs+0x4b2>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	f7fd fb88 	bl	80076d6 <st_word>
		if (sz_vol < 0x10000) {
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fcc:	d208      	bcs.n	8009fe0 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8009fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd0:	3313      	adds	r3, #19
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	b292      	uxth	r2, r2
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fd fb7c 	bl	80076d6 <st_word>
 8009fde:	e006      	b.n	8009fee <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8009fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe2:	3320      	adds	r3, #32
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fd fb8f 	bl	800770c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8009fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff0:	3315      	adds	r3, #21
 8009ff2:	22f8      	movs	r2, #248	; 0xf8
 8009ff4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8009ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff8:	3318      	adds	r3, #24
 8009ffa:	213f      	movs	r1, #63	; 0x3f
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fd fb6a 	bl	80076d6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a004:	331a      	adds	r3, #26
 800a006:	21ff      	movs	r1, #255	; 0xff
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fd fb64 	bl	80076d6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800a00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a010:	331c      	adds	r3, #28
 800a012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a014:	4618      	mov	r0, r3
 800a016:	f7fd fb79 	bl	800770c <st_dword>
		if (fmt == FS_FAT32) {
 800a01a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d131      	bne.n	800a086 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800a022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a024:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800a028:	f7fd f834 	bl	8007094 <get_fattime>
 800a02c:	4603      	mov	r3, r0
 800a02e:	4619      	mov	r1, r3
 800a030:	4620      	mov	r0, r4
 800a032:	f7fd fb6b 	bl	800770c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a038:	3324      	adds	r3, #36	; 0x24
 800a03a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fd fb65 	bl	800770c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a044:	332c      	adds	r3, #44	; 0x2c
 800a046:	2102      	movs	r1, #2
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fd fb5f 	bl	800770c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a050:	3330      	adds	r3, #48	; 0x30
 800a052:	2101      	movs	r1, #1
 800a054:	4618      	mov	r0, r3
 800a056:	f7fd fb3e 	bl	80076d6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05c:	3332      	adds	r3, #50	; 0x32
 800a05e:	2106      	movs	r1, #6
 800a060:	4618      	mov	r0, r3
 800a062:	f7fd fb38 	bl	80076d6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a068:	3340      	adds	r3, #64	; 0x40
 800a06a:	2280      	movs	r2, #128	; 0x80
 800a06c:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a070:	3342      	adds	r3, #66	; 0x42
 800a072:	2229      	movs	r2, #41	; 0x29
 800a074:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a078:	3347      	adds	r3, #71	; 0x47
 800a07a:	2213      	movs	r2, #19
 800a07c:	4970      	ldr	r1, [pc, #448]	; (800a240 <f_mkfs+0x734>)
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fd fb70 	bl	8007764 <mem_cpy>
 800a084:	e020      	b.n	800a0c8 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a088:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800a08c:	f7fd f802 	bl	8007094 <get_fattime>
 800a090:	4603      	mov	r3, r0
 800a092:	4619      	mov	r1, r3
 800a094:	4620      	mov	r0, r4
 800a096:	f7fd fb39 	bl	800770c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a09c:	3316      	adds	r3, #22
 800a09e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0a0:	b292      	uxth	r2, r2
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fd fb16 	bl	80076d6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ac:	3324      	adds	r3, #36	; 0x24
 800a0ae:	2280      	movs	r2, #128	; 0x80
 800a0b0:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	3326      	adds	r3, #38	; 0x26
 800a0b6:	2229      	movs	r2, #41	; 0x29
 800a0b8:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0bc:	332b      	adds	r3, #43	; 0x2b
 800a0be:	2213      	movs	r2, #19
 800a0c0:	4960      	ldr	r1, [pc, #384]	; (800a244 <f_mkfs+0x738>)
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fd fb4e 	bl	8007764 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fd faff 	bl	80076d6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a0d8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a0dc:	2301      	movs	r3, #1
 800a0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0e2:	f7fd fa7f 	bl	80075e4 <disk_write>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <f_mkfs+0x5e4>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e157      	b.n	800a3a0 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800a0f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d140      	bne.n	800a17a <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	1d9a      	adds	r2, r3, #6
 800a0fc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a100:	2301      	movs	r3, #1
 800a102:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a104:	f7fd fa6e 	bl	80075e4 <disk_write>
			mem_set(buf, 0, ss);
 800a108:	8b7b      	ldrh	r3, [r7, #26]
 800a10a:	461a      	mov	r2, r3
 800a10c:	2100      	movs	r1, #0
 800a10e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a110:	f7fd fb49 	bl	80077a6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a114:	494c      	ldr	r1, [pc, #304]	; (800a248 <f_mkfs+0x73c>)
 800a116:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a118:	f7fd faf8 	bl	800770c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a11e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a122:	494a      	ldr	r1, [pc, #296]	; (800a24c <f_mkfs+0x740>)
 800a124:	4618      	mov	r0, r3
 800a126:	f7fd faf1 	bl	800770c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	3b01      	subs	r3, #1
 800a134:	4619      	mov	r1, r3
 800a136:	4610      	mov	r0, r2
 800a138:	f7fd fae8 	bl	800770c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a142:	2102      	movs	r1, #2
 800a144:	4618      	mov	r0, r3
 800a146:	f7fd fae1 	bl	800770c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a150:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a154:	4618      	mov	r0, r3
 800a156:	f7fd fabe 	bl	80076d6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	1dda      	adds	r2, r3, #7
 800a15e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a162:	2301      	movs	r3, #1
 800a164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a166:	f7fd fa3d 	bl	80075e4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a172:	2301      	movs	r3, #1
 800a174:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a176:	f7fd fa35 	bl	80075e4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800a17a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a17c:	2100      	movs	r1, #0
 800a17e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a180:	f7fd fb11 	bl	80077a6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800a184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a186:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a188:	2300      	movs	r3, #0
 800a18a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a18c:	e04b      	b.n	800a226 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 800a18e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a192:	2b03      	cmp	r3, #3
 800a194:	d113      	bne.n	800a1be <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800a196:	f06f 0107 	mvn.w	r1, #7
 800a19a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a19c:	f7fd fab6 	bl	800770c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	f04f 31ff 	mov.w	r1, #4294967295
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fd faaf 	bl	800770c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800a1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fd faa8 	bl	800770c <st_dword>
 800a1bc:	e00b      	b.n	800a1d6 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800a1be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d101      	bne.n	800a1ca <f_mkfs+0x6be>
 800a1c6:	4b22      	ldr	r3, [pc, #136]	; (800a250 <f_mkfs+0x744>)
 800a1c8:	e001      	b.n	800a1ce <f_mkfs+0x6c2>
 800a1ca:	f06f 0307 	mvn.w	r3, #7
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a1d2:	f7fd fa9b 	bl	800770c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800a1d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1d8:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800a1da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	bf28      	it	cs
 800a1e2:	4613      	movcs	r3, r2
 800a1e4:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a1e6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a1ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a1ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1f0:	f7fd f9f8 	bl	80075e4 <disk_write>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <f_mkfs+0x6f2>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e0d0      	b.n	800a3a0 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 800a1fe:	8b7b      	ldrh	r3, [r7, #26]
 800a200:	461a      	mov	r2, r3
 800a202:	2100      	movs	r1, #0
 800a204:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a206:	f7fd face 	bl	80077a6 <mem_set>
				sect += n; nsect -= n;
 800a20a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a20e:	4413      	add	r3, r2
 800a210:	667b      	str	r3, [r7, #100]	; 0x64
 800a212:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800a21a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1dc      	bne.n	800a1da <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a222:	3301      	adds	r3, #1
 800a224:	64bb      	str	r3, [r7, #72]	; 0x48
 800a226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d3af      	bcc.n	800a18e <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800a22e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a232:	2b03      	cmp	r3, #3
 800a234:	d10e      	bne.n	800a254 <f_mkfs+0x748>
 800a236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a238:	e00d      	b.n	800a256 <f_mkfs+0x74a>
 800a23a:	bf00      	nop
 800a23c:	0800dd2c 	.word	0x0800dd2c
 800a240:	0800dd38 	.word	0x0800dd38
 800a244:	0800dd4c 	.word	0x0800dd4c
 800a248:	41615252 	.word	0x41615252
 800a24c:	61417272 	.word	0x61417272
 800a250:	00fffff8 	.word	0x00fffff8
 800a254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a256:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800a258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	4293      	cmp	r3, r2
 800a25e:	bf28      	it	cs
 800a260:	4613      	movcs	r3, r2
 800a262:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a264:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a26a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a26c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a26e:	f7fd f9b9 	bl	80075e4 <disk_write>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <f_mkfs+0x770>
 800a278:	2301      	movs	r3, #1
 800a27a:	e091      	b.n	800a3a0 <f_mkfs+0x894>
			sect += n; nsect -= n;
 800a27c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a27e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a280:	4413      	add	r3, r2
 800a282:	667b      	str	r3, [r7, #100]	; 0x64
 800a284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800a28c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e2      	bne.n	800a258 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800a292:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a296:	2b03      	cmp	r3, #3
 800a298:	d103      	bne.n	800a2a2 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 800a29a:	230c      	movs	r3, #12
 800a29c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800a2a0:	e010      	b.n	800a2c4 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a8:	d303      	bcc.n	800a2b2 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800a2aa:	2306      	movs	r3, #6
 800a2ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800a2b0:	e008      	b.n	800a2c4 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800a2b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d101      	bne.n	800a2be <f_mkfs+0x7b2>
 800a2ba:	2304      	movs	r3, #4
 800a2bc:	e000      	b.n	800a2c0 <f_mkfs+0x7b4>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800a2c4:	7afb      	ldrb	r3, [r7, #11]
 800a2c6:	f003 0308 	and.w	r3, r3, #8
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d15b      	bne.n	800a386 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 800a2ce:	8b7b      	ldrh	r3, [r7, #26]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a2d6:	f7fd fa66 	bl	80077a6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fd f9f6 	bl	80076d6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a2f0:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	3302      	adds	r3, #2
 800a304:	2201      	movs	r2, #1
 800a306:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	3303      	adds	r3, #3
 800a30c:	2200      	movs	r2, #0
 800a30e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	3304      	adds	r3, #4
 800a314:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800a318:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31e:	441a      	add	r2, r3
 800a320:	4b21      	ldr	r3, [pc, #132]	; (800a3a8 <f_mkfs+0x89c>)
 800a322:	fba3 1302 	umull	r1, r3, r3, r2
 800a326:	1ad2      	subs	r2, r2, r3
 800a328:	0852      	lsrs	r2, r2, #1
 800a32a:	4413      	add	r3, r2
 800a32c:	0b5b      	lsrs	r3, r3, #13
 800a32e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	3305      	adds	r3, #5
 800a334:	22fe      	movs	r2, #254	; 0xfe
 800a336:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800a338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a33a:	089b      	lsrs	r3, r3, #2
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	3306      	adds	r3, #6
 800a342:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800a346:	b2d2      	uxtb	r2, r2
 800a348:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	3307      	adds	r3, #7
 800a34e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a350:	b2d2      	uxtb	r2, r2
 800a352:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	3308      	adds	r3, #8
 800a358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fd f9d6 	bl	800770c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	330c      	adds	r3, #12
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	4611      	mov	r1, r2
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fd f9cf 	bl	800770c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a36e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a372:	2301      	movs	r3, #1
 800a374:	2200      	movs	r2, #0
 800a376:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a378:	f7fd f934 	bl	80075e4 <disk_write>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <f_mkfs+0x87a>
 800a382:	2301      	movs	r3, #1
 800a384:	e00c      	b.n	800a3a0 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800a386:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a38a:	2200      	movs	r2, #0
 800a38c:	2100      	movs	r1, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fd f948 	bl	8007624 <disk_ioctl>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <f_mkfs+0x892>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <f_mkfs+0x894>

	return FR_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3774      	adds	r7, #116	; 0x74
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd90      	pop	{r4, r7, pc}
 800a3a8:	0515565b 	.word	0x0515565b

0800a3ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a3c2:	4b1f      	ldr	r3, [pc, #124]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3c4:	7a5b      	ldrb	r3, [r3, #9]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d131      	bne.n	800a430 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a3cc:	4b1c      	ldr	r3, [pc, #112]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3ce:	7a5b      	ldrb	r3, [r3, #9]
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	4b1a      	ldr	r3, [pc, #104]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a3da:	4b19      	ldr	r3, [pc, #100]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3dc:	7a5b      	ldrb	r3, [r3, #9]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	4a17      	ldr	r2, [pc, #92]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a3ea:	4b15      	ldr	r3, [pc, #84]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3ec:	7a5b      	ldrb	r3, [r3, #9]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4b13      	ldr	r3, [pc, #76]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3f4:	4413      	add	r3, r2
 800a3f6:	79fa      	ldrb	r2, [r7, #7]
 800a3f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3fa:	4b11      	ldr	r3, [pc, #68]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a3fc:	7a5b      	ldrb	r3, [r3, #9]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	b2d1      	uxtb	r1, r2
 800a404:	4a0e      	ldr	r2, [pc, #56]	; (800a440 <FATFS_LinkDriverEx+0x94>)
 800a406:	7251      	strb	r1, [r2, #9]
 800a408:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a40a:	7dbb      	ldrb	r3, [r7, #22]
 800a40c:	3330      	adds	r3, #48	; 0x30
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	3301      	adds	r3, #1
 800a418:	223a      	movs	r2, #58	; 0x3a
 800a41a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	3302      	adds	r3, #2
 800a420:	222f      	movs	r2, #47	; 0x2f
 800a422:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	3303      	adds	r3, #3
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a430:	7dfb      	ldrb	r3, [r7, #23]
}
 800a432:	4618      	mov	r0, r3
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	24004560 	.word	0x24004560

0800a444 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a44e:	2200      	movs	r2, #0
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff ffaa 	bl	800a3ac <FATFS_LinkDriverEx>
 800a458:	4603      	mov	r3, r0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	4603      	mov	r3, r0
 800a46a:	6039      	str	r1, [r7, #0]
 800a46c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800a46e:	2200      	movs	r2, #0
 800a470:	2101      	movs	r1, #1
 800a472:	2001      	movs	r0, #1
 800a474:	f000 f9ae 	bl	800a7d4 <osSemaphoreNew>
 800a478:	4602      	mov	r2, r0
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	bf14      	ite	ne
 800a486:	2301      	movne	r3, #1
 800a488:	2300      	moveq	r3, #0
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	60fb      	str	r3, [r7, #12]

    return ret;
 800a48e:	68fb      	ldr	r3, [r7, #12]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fab7 	bl	800aa14 <osSemaphoreDelete>
#endif
    return 1;
 800a4a6:	2301      	movs	r3, #1
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800a4bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fa11 	bl	800a8e8 <osSemaphoreAcquire>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b082      	sub	sp, #8
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fa52 	bl	800a98c <osSemaphoreRelease>
#endif
}
 800a4e8:	bf00      	nop
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <__NVIC_SetPriority>:
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	6039      	str	r1, [r7, #0]
 800a4fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a4fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a500:	2b00      	cmp	r3, #0
 800a502:	db0a      	blt.n	800a51a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	b2da      	uxtb	r2, r3
 800a508:	490c      	ldr	r1, [pc, #48]	; (800a53c <__NVIC_SetPriority+0x4c>)
 800a50a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a50e:	0112      	lsls	r2, r2, #4
 800a510:	b2d2      	uxtb	r2, r2
 800a512:	440b      	add	r3, r1
 800a514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a518:	e00a      	b.n	800a530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	4908      	ldr	r1, [pc, #32]	; (800a540 <__NVIC_SetPriority+0x50>)
 800a520:	88fb      	ldrh	r3, [r7, #6]
 800a522:	f003 030f 	and.w	r3, r3, #15
 800a526:	3b04      	subs	r3, #4
 800a528:	0112      	lsls	r2, r2, #4
 800a52a:	b2d2      	uxtb	r2, r2
 800a52c:	440b      	add	r3, r1
 800a52e:	761a      	strb	r2, [r3, #24]
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	e000e100 	.word	0xe000e100
 800a540:	e000ed00 	.word	0xe000ed00

0800a544 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <SysTick_Handler+0x1c>)
 800a54a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a54c:	f002 faf4 	bl	800cb38 <xTaskGetSchedulerState>
 800a550:	4603      	mov	r3, r0
 800a552:	2b01      	cmp	r3, #1
 800a554:	d001      	beq.n	800a55a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a556:	f003 f9d7 	bl	800d908 <xPortSysTickHandler>
  }
}
 800a55a:	bf00      	nop
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	e000e010 	.word	0xe000e010

0800a564 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a564:	b580      	push	{r7, lr}
 800a566:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a568:	2100      	movs	r1, #0
 800a56a:	f06f 0004 	mvn.w	r0, #4
 800a56e:	f7ff ffbf 	bl	800a4f0 <__NVIC_SetPriority>
#endif
}
 800a572:	bf00      	nop
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a57e:	f3ef 8305 	mrs	r3, IPSR
 800a582:	603b      	str	r3, [r7, #0]
  return(result);
 800a584:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a58a:	f06f 0305 	mvn.w	r3, #5
 800a58e:	607b      	str	r3, [r7, #4]
 800a590:	e00c      	b.n	800a5ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a592:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <osKernelInitialize+0x44>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d105      	bne.n	800a5a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a59a:	4b08      	ldr	r3, [pc, #32]	; (800a5bc <osKernelInitialize+0x44>)
 800a59c:	2201      	movs	r2, #1
 800a59e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	607b      	str	r3, [r7, #4]
 800a5a4:	e002      	b.n	800a5ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a5ac:	687b      	ldr	r3, [r7, #4]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	2400456c 	.word	0x2400456c

0800a5c0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800a5c6:	f002 fab7 	bl	800cb38 <xTaskGetSchedulerState>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d004      	beq.n	800a5da <osKernelGetState+0x1a>
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d105      	bne.n	800a5e0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	607b      	str	r3, [r7, #4]
      break;
 800a5d8:	e00c      	b.n	800a5f4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	607b      	str	r3, [r7, #4]
      break;
 800a5de:	e009      	b.n	800a5f4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800a5e0:	4b07      	ldr	r3, [pc, #28]	; (800a600 <osKernelGetState+0x40>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d102      	bne.n	800a5ee <osKernelGetState+0x2e>
        state = osKernelReady;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800a5ec:	e001      	b.n	800a5f2 <osKernelGetState+0x32>
        state = osKernelInactive;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	607b      	str	r3, [r7, #4]
      break;
 800a5f2:	bf00      	nop
  }

  return (state);
 800a5f4:	687b      	ldr	r3, [r7, #4]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	2400456c 	.word	0x2400456c

0800a604 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a60a:	f3ef 8305 	mrs	r3, IPSR
 800a60e:	603b      	str	r3, [r7, #0]
  return(result);
 800a610:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a616:	f06f 0305 	mvn.w	r3, #5
 800a61a:	607b      	str	r3, [r7, #4]
 800a61c:	e010      	b.n	800a640 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a61e:	4b0b      	ldr	r3, [pc, #44]	; (800a64c <osKernelStart+0x48>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d109      	bne.n	800a63a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a626:	f7ff ff9d 	bl	800a564 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a62a:	4b08      	ldr	r3, [pc, #32]	; (800a64c <osKernelStart+0x48>)
 800a62c:	2202      	movs	r2, #2
 800a62e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a630:	f001 fe14 	bl	800c25c <vTaskStartScheduler>
      stat = osOK;
 800a634:	2300      	movs	r3, #0
 800a636:	607b      	str	r3, [r7, #4]
 800a638:	e002      	b.n	800a640 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a63a:	f04f 33ff 	mov.w	r3, #4294967295
 800a63e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a640:	687b      	ldr	r3, [r7, #4]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	2400456c 	.word	0x2400456c

0800a650 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a656:	f3ef 8305 	mrs	r3, IPSR
 800a65a:	603b      	str	r3, [r7, #0]
  return(result);
 800a65c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a662:	f001 ff27 	bl	800c4b4 <xTaskGetTickCountFromISR>
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	e002      	b.n	800a670 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a66a:	f001 ff13 	bl	800c494 <xTaskGetTickCount>
 800a66e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a670:	687b      	ldr	r3, [r7, #4]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b08e      	sub	sp, #56	; 0x38
 800a67e:	af04      	add	r7, sp, #16
 800a680:	60f8      	str	r0, [r7, #12]
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a686:	2300      	movs	r3, #0
 800a688:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a68a:	f3ef 8305 	mrs	r3, IPSR
 800a68e:	617b      	str	r3, [r7, #20]
  return(result);
 800a690:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a692:	2b00      	cmp	r3, #0
 800a694:	d17e      	bne.n	800a794 <osThreadNew+0x11a>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d07b      	beq.n	800a794 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a69c:	2380      	movs	r3, #128	; 0x80
 800a69e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a6a0:	2318      	movs	r3, #24
 800a6a2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d045      	beq.n	800a740 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <osThreadNew+0x48>
        name = attr->name;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d008      	beq.n	800a6e8 <osThreadNew+0x6e>
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	2b38      	cmp	r3, #56	; 0x38
 800a6da:	d805      	bhi.n	800a6e8 <osThreadNew+0x6e>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <osThreadNew+0x72>
        return (NULL);
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e054      	b.n	800a796 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d003      	beq.n	800a6fc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	089b      	lsrs	r3, r3, #2
 800a6fa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00e      	beq.n	800a722 <osThreadNew+0xa8>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	2bcb      	cmp	r3, #203	; 0xcb
 800a70a:	d90a      	bls.n	800a722 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a710:	2b00      	cmp	r3, #0
 800a712:	d006      	beq.n	800a722 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <osThreadNew+0xa8>
        mem = 1;
 800a71c:	2301      	movs	r3, #1
 800a71e:	61bb      	str	r3, [r7, #24]
 800a720:	e010      	b.n	800a744 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10c      	bne.n	800a744 <osThreadNew+0xca>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d108      	bne.n	800a744 <osThreadNew+0xca>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d104      	bne.n	800a744 <osThreadNew+0xca>
          mem = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	61bb      	str	r3, [r7, #24]
 800a73e:	e001      	b.n	800a744 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d110      	bne.n	800a76c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a752:	9202      	str	r2, [sp, #8]
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	6a3a      	ldr	r2, [r7, #32]
 800a75e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f001 fb8f 	bl	800be84 <xTaskCreateStatic>
 800a766:	4603      	mov	r3, r0
 800a768:	613b      	str	r3, [r7, #16]
 800a76a:	e013      	b.n	800a794 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d110      	bne.n	800a794 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	b29a      	uxth	r2, r3
 800a776:	f107 0310 	add.w	r3, r7, #16
 800a77a:	9301      	str	r3, [sp, #4]
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f001 fbda 	bl	800bf3e <xTaskCreate>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d001      	beq.n	800a794 <osThreadNew+0x11a>
            hTask = NULL;
 800a790:	2300      	movs	r3, #0
 800a792:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a794:	693b      	ldr	r3, [r7, #16]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3728      	adds	r7, #40	; 0x28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7a6:	f3ef 8305 	mrs	r3, IPSR
 800a7aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <osDelay+0x1c>
    stat = osErrorISR;
 800a7b2:	f06f 0305 	mvn.w	r3, #5
 800a7b6:	60fb      	str	r3, [r7, #12]
 800a7b8:	e007      	b.n	800a7ca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <osDelay+0x2c>
      vTaskDelay(ticks);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f001 fd15 	bl	800c1f4 <vTaskDelay>
    }
  }

  return (stat);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7e4:	f3ef 8305 	mrs	r3, IPSR
 800a7e8:	613b      	str	r3, [r7, #16]
  return(result);
 800a7ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d175      	bne.n	800a8dc <osSemaphoreNew+0x108>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d072      	beq.n	800a8dc <osSemaphoreNew+0x108>
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d86e      	bhi.n	800a8dc <osSemaphoreNew+0x108>
    mem = -1;
 800a7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a802:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d015      	beq.n	800a836 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d006      	beq.n	800a820 <osSemaphoreNew+0x4c>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	2b4f      	cmp	r3, #79	; 0x4f
 800a818:	d902      	bls.n	800a820 <osSemaphoreNew+0x4c>
        mem = 1;
 800a81a:	2301      	movs	r3, #1
 800a81c:	61bb      	str	r3, [r7, #24]
 800a81e:	e00c      	b.n	800a83a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d108      	bne.n	800a83a <osSemaphoreNew+0x66>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d104      	bne.n	800a83a <osSemaphoreNew+0x66>
          mem = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	61bb      	str	r3, [r7, #24]
 800a834:	e001      	b.n	800a83a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a840:	d04c      	beq.n	800a8dc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d128      	bne.n	800a89a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d10a      	bne.n	800a864 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	2203      	movs	r2, #3
 800a854:	9200      	str	r2, [sp, #0]
 800a856:	2200      	movs	r2, #0
 800a858:	2100      	movs	r1, #0
 800a85a:	2001      	movs	r0, #1
 800a85c:	f000 fb6c 	bl	800af38 <xQueueGenericCreateStatic>
 800a860:	61f8      	str	r0, [r7, #28]
 800a862:	e005      	b.n	800a870 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a864:	2203      	movs	r2, #3
 800a866:	2100      	movs	r1, #0
 800a868:	2001      	movs	r0, #1
 800a86a:	f000 fbdd 	bl	800b028 <xQueueGenericCreate>
 800a86e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d022      	beq.n	800a8bc <osSemaphoreNew+0xe8>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01f      	beq.n	800a8bc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a87c:	2300      	movs	r3, #0
 800a87e:	2200      	movs	r2, #0
 800a880:	2100      	movs	r1, #0
 800a882:	69f8      	ldr	r0, [r7, #28]
 800a884:	f000 fc98 	bl	800b1b8 <xQueueGenericSend>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d016      	beq.n	800a8bc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a88e:	69f8      	ldr	r0, [r7, #28]
 800a890:	f001 f924 	bl	800badc <vQueueDelete>
            hSemaphore = NULL;
 800a894:	2300      	movs	r3, #0
 800a896:	61fb      	str	r3, [r7, #28]
 800a898:	e010      	b.n	800a8bc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d108      	bne.n	800a8b2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	68b9      	ldr	r1, [r7, #8]
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f000 fc1a 	bl	800b0e2 <xQueueCreateCountingSemaphoreStatic>
 800a8ae:	61f8      	str	r0, [r7, #28]
 800a8b0:	e004      	b.n	800a8bc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a8b2:	68b9      	ldr	r1, [r7, #8]
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f000 fc4b 	bl	800b150 <xQueueCreateCountingSemaphore>
 800a8ba:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00c      	beq.n	800a8dc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	e001      	b.n	800a8d4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a8d4:	6979      	ldr	r1, [r7, #20]
 800a8d6:	69f8      	ldr	r0, [r7, #28]
 800a8d8:	f001 fa4c 	bl	800bd74 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a8dc:	69fb      	ldr	r3, [r7, #28]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3720      	adds	r7, #32
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
	...

0800a8e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d103      	bne.n	800a908 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a900:	f06f 0303 	mvn.w	r3, #3
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	e039      	b.n	800a97c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a908:	f3ef 8305 	mrs	r3, IPSR
 800a90c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a90e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a910:	2b00      	cmp	r3, #0
 800a912:	d022      	beq.n	800a95a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a91a:	f06f 0303 	mvn.w	r3, #3
 800a91e:	617b      	str	r3, [r7, #20]
 800a920:	e02c      	b.n	800a97c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a922:	2300      	movs	r3, #0
 800a924:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a926:	f107 0308 	add.w	r3, r7, #8
 800a92a:	461a      	mov	r2, r3
 800a92c:	2100      	movs	r1, #0
 800a92e:	6938      	ldr	r0, [r7, #16]
 800a930:	f001 f854 	bl	800b9dc <xQueueReceiveFromISR>
 800a934:	4603      	mov	r3, r0
 800a936:	2b01      	cmp	r3, #1
 800a938:	d003      	beq.n	800a942 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a93a:	f06f 0302 	mvn.w	r3, #2
 800a93e:	617b      	str	r3, [r7, #20]
 800a940:	e01c      	b.n	800a97c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d019      	beq.n	800a97c <osSemaphoreAcquire+0x94>
 800a948:	4b0f      	ldr	r3, [pc, #60]	; (800a988 <osSemaphoreAcquire+0xa0>)
 800a94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	e010      	b.n	800a97c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6938      	ldr	r0, [r7, #16]
 800a95e:	f000 ff31 	bl	800b7c4 <xQueueSemaphoreTake>
 800a962:	4603      	mov	r3, r0
 800a964:	2b01      	cmp	r3, #1
 800a966:	d009      	beq.n	800a97c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a96e:	f06f 0301 	mvn.w	r3, #1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	e002      	b.n	800a97c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a976:	f06f 0302 	mvn.w	r3, #2
 800a97a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a97c:	697b      	ldr	r3, [r7, #20]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a998:	2300      	movs	r3, #0
 800a99a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d103      	bne.n	800a9aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a9a2:	f06f 0303 	mvn.w	r3, #3
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	e02c      	b.n	800aa04 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9aa:	f3ef 8305 	mrs	r3, IPSR
 800a9ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d01a      	beq.n	800a9ec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a9ba:	f107 0308 	add.w	r3, r7, #8
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6938      	ldr	r0, [r7, #16]
 800a9c2:	f000 fd92 	bl	800b4ea <xQueueGiveFromISR>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d003      	beq.n	800a9d4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a9cc:	f06f 0302 	mvn.w	r3, #2
 800a9d0:	617b      	str	r3, [r7, #20]
 800a9d2:	e017      	b.n	800aa04 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d014      	beq.n	800aa04 <osSemaphoreRelease+0x78>
 800a9da:	4b0d      	ldr	r3, [pc, #52]	; (800aa10 <osSemaphoreRelease+0x84>)
 800a9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	e00b      	b.n	800aa04 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	6938      	ldr	r0, [r7, #16]
 800a9f4:	f000 fbe0 	bl	800b1b8 <xQueueGenericSend>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d002      	beq.n	800aa04 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a9fe:	f06f 0302 	mvn.w	r3, #2
 800aa02:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800aa04:	697b      	ldr	r3, [r7, #20]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	60fb      	str	r3, [r7, #12]

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
  }
#else
  stat = osError;
 800aa20:	f04f 33ff 	mov.w	r3, #4294967295
 800aa24:	60bb      	str	r3, [r7, #8]
#endif

  return (stat);
 800aa26:	68bb      	ldr	r3, [r7, #8]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08a      	sub	sp, #40	; 0x28
 800aa38:	af02      	add	r7, sp, #8
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aa40:	2300      	movs	r3, #0
 800aa42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa44:	f3ef 8305 	mrs	r3, IPSR
 800aa48:	613b      	str	r3, [r7, #16]
  return(result);
 800aa4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d15f      	bne.n	800ab10 <osMessageQueueNew+0xdc>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d05c      	beq.n	800ab10 <osMessageQueueNew+0xdc>
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d059      	beq.n	800ab10 <osMessageQueueNew+0xdc>
    mem = -1;
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d029      	beq.n	800aabc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d012      	beq.n	800aa96 <osMessageQueueNew+0x62>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	2b4f      	cmp	r3, #79	; 0x4f
 800aa76:	d90e      	bls.n	800aa96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00a      	beq.n	800aa96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	695a      	ldr	r2, [r3, #20]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68b9      	ldr	r1, [r7, #8]
 800aa88:	fb01 f303 	mul.w	r3, r1, r3
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d302      	bcc.n	800aa96 <osMessageQueueNew+0x62>
        mem = 1;
 800aa90:	2301      	movs	r3, #1
 800aa92:	61bb      	str	r3, [r7, #24]
 800aa94:	e014      	b.n	800aac0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d110      	bne.n	800aac0 <osMessageQueueNew+0x8c>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10c      	bne.n	800aac0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d108      	bne.n	800aac0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d104      	bne.n	800aac0 <osMessageQueueNew+0x8c>
          mem = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	61bb      	str	r3, [r7, #24]
 800aaba:	e001      	b.n	800aac0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d10b      	bne.n	800aade <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	691a      	ldr	r2, [r3, #16]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	2100      	movs	r1, #0
 800aad0:	9100      	str	r1, [sp, #0]
 800aad2:	68b9      	ldr	r1, [r7, #8]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 fa2f 	bl	800af38 <xQueueGenericCreateStatic>
 800aada:	61f8      	str	r0, [r7, #28]
 800aadc:	e008      	b.n	800aaf0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d105      	bne.n	800aaf0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800aae4:	2200      	movs	r2, #0
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f000 fa9d 	bl	800b028 <xQueueGenericCreate>
 800aaee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00c      	beq.n	800ab10 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <osMessageQueueNew+0xd0>
        name = attr->name;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	617b      	str	r3, [r7, #20]
 800ab02:	e001      	b.n	800ab08 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ab04:	2300      	movs	r3, #0
 800ab06:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ab08:	6979      	ldr	r1, [r7, #20]
 800ab0a:	69f8      	ldr	r0, [r7, #28]
 800ab0c:	f001 f932 	bl	800bd74 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ab10:	69fb      	ldr	r3, [r7, #28]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3720      	adds	r7, #32
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
	...

0800ab1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	603b      	str	r3, [r7, #0]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab34:	f3ef 8305 	mrs	r3, IPSR
 800ab38:	617b      	str	r3, [r7, #20]
  return(result);
 800ab3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d028      	beq.n	800ab92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d005      	beq.n	800ab52 <osMessageQueuePut+0x36>
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <osMessageQueuePut+0x36>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ab52:	f06f 0303 	mvn.w	r3, #3
 800ab56:	61fb      	str	r3, [r7, #28]
 800ab58:	e038      	b.n	800abcc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ab5e:	f107 0210 	add.w	r2, r7, #16
 800ab62:	2300      	movs	r3, #0
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	69b8      	ldr	r0, [r7, #24]
 800ab68:	f000 fc24 	bl	800b3b4 <xQueueGenericSendFromISR>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d003      	beq.n	800ab7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ab72:	f06f 0302 	mvn.w	r3, #2
 800ab76:	61fb      	str	r3, [r7, #28]
 800ab78:	e028      	b.n	800abcc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d025      	beq.n	800abcc <osMessageQueuePut+0xb0>
 800ab80:	4b15      	ldr	r3, [pc, #84]	; (800abd8 <osMessageQueuePut+0xbc>)
 800ab82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab86:	601a      	str	r2, [r3, #0]
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	e01c      	b.n	800abcc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d002      	beq.n	800ab9e <osMessageQueuePut+0x82>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d103      	bne.n	800aba6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ab9e:	f06f 0303 	mvn.w	r3, #3
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	e012      	b.n	800abcc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aba6:	2300      	movs	r3, #0
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	68b9      	ldr	r1, [r7, #8]
 800abac:	69b8      	ldr	r0, [r7, #24]
 800abae:	f000 fb03 	bl	800b1b8 <xQueueGenericSend>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d009      	beq.n	800abcc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800abbe:	f06f 0301 	mvn.w	r3, #1
 800abc2:	61fb      	str	r3, [r7, #28]
 800abc4:	e002      	b.n	800abcc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800abc6:	f06f 0302 	mvn.w	r3, #2
 800abca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800abcc:	69fb      	ldr	r3, [r7, #28]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3720      	adds	r7, #32
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	e000ed04 	.word	0xe000ed04

0800abdc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800abdc:	b580      	push	{r7, lr}
 800abde:	b088      	sub	sp, #32
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800abee:	2300      	movs	r3, #0
 800abf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abf2:	f3ef 8305 	mrs	r3, IPSR
 800abf6:	617b      	str	r3, [r7, #20]
  return(result);
 800abf8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d028      	beq.n	800ac50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d005      	beq.n	800ac10 <osMessageQueueGet+0x34>
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <osMessageQueueGet+0x34>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ac10:	f06f 0303 	mvn.w	r3, #3
 800ac14:	61fb      	str	r3, [r7, #28]
 800ac16:	e037      	b.n	800ac88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ac1c:	f107 0310 	add.w	r3, r7, #16
 800ac20:	461a      	mov	r2, r3
 800ac22:	68b9      	ldr	r1, [r7, #8]
 800ac24:	69b8      	ldr	r0, [r7, #24]
 800ac26:	f000 fed9 	bl	800b9dc <xQueueReceiveFromISR>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d003      	beq.n	800ac38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ac30:	f06f 0302 	mvn.w	r3, #2
 800ac34:	61fb      	str	r3, [r7, #28]
 800ac36:	e027      	b.n	800ac88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d024      	beq.n	800ac88 <osMessageQueueGet+0xac>
 800ac3e:	4b15      	ldr	r3, [pc, #84]	; (800ac94 <osMessageQueueGet+0xb8>)
 800ac40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	e01b      	b.n	800ac88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d002      	beq.n	800ac5c <osMessageQueueGet+0x80>
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d103      	bne.n	800ac64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ac5c:	f06f 0303 	mvn.w	r3, #3
 800ac60:	61fb      	str	r3, [r7, #28]
 800ac62:	e011      	b.n	800ac88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	69b8      	ldr	r0, [r7, #24]
 800ac6a:	f000 fccb 	bl	800b604 <xQueueReceive>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d009      	beq.n	800ac88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ac7a:	f06f 0301 	mvn.w	r3, #1
 800ac7e:	61fb      	str	r3, [r7, #28]
 800ac80:	e002      	b.n	800ac88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ac82:	f06f 0302 	mvn.w	r3, #2
 800ac86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ac88:	69fb      	ldr	r3, [r7, #28]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3720      	adds	r7, #32
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	e000ed04 	.word	0xe000ed04

0800ac98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	4a07      	ldr	r2, [pc, #28]	; (800acc4 <vApplicationGetIdleTaskMemory+0x2c>)
 800aca8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	4a06      	ldr	r2, [pc, #24]	; (800acc8 <vApplicationGetIdleTaskMemory+0x30>)
 800acae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2280      	movs	r2, #128	; 0x80
 800acb4:	601a      	str	r2, [r3, #0]
}
 800acb6:	bf00      	nop
 800acb8:	3714      	adds	r7, #20
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	24004570 	.word	0x24004570
 800acc8:	2400463c 	.word	0x2400463c

0800accc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4a07      	ldr	r2, [pc, #28]	; (800acf8 <vApplicationGetTimerTaskMemory+0x2c>)
 800acdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	4a06      	ldr	r2, [pc, #24]	; (800acfc <vApplicationGetTimerTaskMemory+0x30>)
 800ace2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acea:	601a      	str	r2, [r3, #0]
}
 800acec:	bf00      	nop
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	2400483c 	.word	0x2400483c
 800acfc:	24004908 	.word	0x24004908

0800ad00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f103 0208 	add.w	r2, r3, #8
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f04f 32ff 	mov.w	r2, #4294967295
 800ad18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f103 0208 	add.w	r2, r3, #8
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f103 0208 	add.w	r2, r3, #8
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad4e:	bf00      	nop
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	689a      	ldr	r2, [r3, #8]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	601a      	str	r2, [r3, #0]
}
 800ad96:	bf00      	nop
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ada2:	b480      	push	{r7}
 800ada4:	b085      	sub	sp, #20
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb8:	d103      	bne.n	800adc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	e00c      	b.n	800addc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3308      	adds	r3, #8
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	e002      	b.n	800add0 <vListInsert+0x2e>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	429a      	cmp	r2, r3
 800adda:	d2f6      	bcs.n	800adca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	1c5a      	adds	r2, r3, #1
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	601a      	str	r2, [r3, #0]
}
 800ae08:	bf00      	nop
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	6892      	ldr	r2, [r2, #8]
 800ae2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	6852      	ldr	r2, [r2, #4]
 800ae34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d103      	bne.n	800ae48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	1e5a      	subs	r2, r3, #1
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ae8e:	bf00      	nop
 800ae90:	e7fe      	b.n	800ae90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ae92:	f002 fca7 	bl	800d7e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae9e:	68f9      	ldr	r1, [r7, #12]
 800aea0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aea2:	fb01 f303 	mul.w	r3, r1, r3
 800aea6:	441a      	add	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec2:	3b01      	subs	r3, #1
 800aec4:	68f9      	ldr	r1, [r7, #12]
 800aec6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aec8:	fb01 f303 	mul.w	r3, r1, r3
 800aecc:	441a      	add	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	22ff      	movs	r2, #255	; 0xff
 800aed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	22ff      	movs	r2, #255	; 0xff
 800aede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d114      	bne.n	800af12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01a      	beq.n	800af26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3310      	adds	r3, #16
 800aef4:	4618      	mov	r0, r3
 800aef6:	f001 fc5d 	bl	800c7b4 <xTaskRemoveFromEventList>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d012      	beq.n	800af26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af00:	4b0c      	ldr	r3, [pc, #48]	; (800af34 <xQueueGenericReset+0xcc>)
 800af02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af06:	601a      	str	r2, [r3, #0]
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	e009      	b.n	800af26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	3310      	adds	r3, #16
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff fef2 	bl	800ad00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	3324      	adds	r3, #36	; 0x24
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff feed 	bl	800ad00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af26:	f002 fc8d 	bl	800d844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af2a:	2301      	movs	r3, #1
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08e      	sub	sp, #56	; 0x38
 800af3c:	af02      	add	r7, sp, #8
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
 800af44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10a      	bne.n	800af62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af5e:	bf00      	nop
 800af60:	e7fe      	b.n	800af60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10a      	bne.n	800af7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <xQueueGenericCreateStatic+0x52>
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <xQueueGenericCreateStatic+0x56>
 800af8a:	2301      	movs	r3, #1
 800af8c:	e000      	b.n	800af90 <xQueueGenericCreateStatic+0x58>
 800af8e:	2300      	movs	r3, #0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	623b      	str	r3, [r7, #32]
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d102      	bne.n	800afb6 <xQueueGenericCreateStatic+0x7e>
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <xQueueGenericCreateStatic+0x82>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e000      	b.n	800afbc <xQueueGenericCreateStatic+0x84>
 800afba:	2300      	movs	r3, #0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10a      	bne.n	800afd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	61fb      	str	r3, [r7, #28]
}
 800afd2:	bf00      	nop
 800afd4:	e7fe      	b.n	800afd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800afd6:	2350      	movs	r3, #80	; 0x50
 800afd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2b50      	cmp	r3, #80	; 0x50
 800afde:	d00a      	beq.n	800aff6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	61bb      	str	r3, [r7, #24]
}
 800aff2:	bf00      	nop
 800aff4:	e7fe      	b.n	800aff4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aff6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800affc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00d      	beq.n	800b01e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b004:	2201      	movs	r2, #1
 800b006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b00a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	4613      	mov	r3, r2
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 f83f 	bl	800b09c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b020:	4618      	mov	r0, r3
 800b022:	3730      	adds	r7, #48	; 0x30
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08a      	sub	sp, #40	; 0x28
 800b02c:	af02      	add	r7, sp, #8
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	4613      	mov	r3, r2
 800b034:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10a      	bne.n	800b052 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	613b      	str	r3, [r7, #16]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	fb02 f303 	mul.w	r3, r2, r3
 800b05a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	3350      	adds	r3, #80	; 0x50
 800b060:	4618      	mov	r0, r3
 800b062:	f002 fce1 	bl	800da28 <pvPortMalloc>
 800b066:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d011      	beq.n	800b092 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	3350      	adds	r3, #80	; 0x50
 800b076:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b080:	79fa      	ldrb	r2, [r7, #7]
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	4613      	mov	r3, r2
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	68b9      	ldr	r1, [r7, #8]
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 f805 	bl	800b09c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b092:	69bb      	ldr	r3, [r7, #24]
	}
 800b094:	4618      	mov	r0, r3
 800b096:	3720      	adds	r7, #32
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d103      	bne.n	800b0b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	69ba      	ldr	r2, [r7, #24]
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	e002      	b.n	800b0be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	69b8      	ldr	r0, [r7, #24]
 800b0ce:	f7ff fecb 	bl	800ae68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	78fa      	ldrb	r2, [r7, #3]
 800b0d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0da:	bf00      	nop
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b08a      	sub	sp, #40	; 0x28
 800b0e6:	af02      	add	r7, sp, #8
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10a      	bne.n	800b10a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	61bb      	str	r3, [r7, #24]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d90a      	bls.n	800b128 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	617b      	str	r3, [r7, #20]
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b128:	2302      	movs	r3, #2
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	2100      	movs	r1, #0
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f7ff ff00 	bl	800af38 <xQueueGenericCreateStatic>
 800b138:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b146:	69fb      	ldr	r3, [r7, #28]
	}
 800b148:	4618      	mov	r0, r3
 800b14a:	3720      	adds	r7, #32
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10a      	bne.n	800b176 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	613b      	str	r3, [r7, #16]
}
 800b172:	bf00      	nop
 800b174:	e7fe      	b.n	800b174 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d90a      	bls.n	800b194 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	60fb      	str	r3, [r7, #12]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b194:	2202      	movs	r2, #2
 800b196:	2100      	movs	r1, #0
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff ff45 	bl	800b028 <xQueueGenericCreate>
 800b19e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b1ac:	697b      	ldr	r3, [r7, #20]
	}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08e      	sub	sp, #56	; 0x38
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
 800b1c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <xQueueGenericSend+0x32>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b1e6:	bf00      	nop
 800b1e8:	e7fe      	b.n	800b1e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d103      	bne.n	800b1f8 <xQueueGenericSend+0x40>
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <xQueueGenericSend+0x44>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e000      	b.n	800b1fe <xQueueGenericSend+0x46>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10a      	bne.n	800b218 <xQueueGenericSend+0x60>
	__asm volatile
 800b202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b214:	bf00      	nop
 800b216:	e7fe      	b.n	800b216 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d103      	bne.n	800b226 <xQueueGenericSend+0x6e>
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b222:	2b01      	cmp	r3, #1
 800b224:	d101      	bne.n	800b22a <xQueueGenericSend+0x72>
 800b226:	2301      	movs	r3, #1
 800b228:	e000      	b.n	800b22c <xQueueGenericSend+0x74>
 800b22a:	2300      	movs	r3, #0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10a      	bne.n	800b246 <xQueueGenericSend+0x8e>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	623b      	str	r3, [r7, #32]
}
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b246:	f001 fc77 	bl	800cb38 <xTaskGetSchedulerState>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d102      	bne.n	800b256 <xQueueGenericSend+0x9e>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <xQueueGenericSend+0xa2>
 800b256:	2301      	movs	r3, #1
 800b258:	e000      	b.n	800b25c <xQueueGenericSend+0xa4>
 800b25a:	2300      	movs	r3, #0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <xQueueGenericSend+0xbe>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	61fb      	str	r3, [r7, #28]
}
 800b272:	bf00      	nop
 800b274:	e7fe      	b.n	800b274 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b276:	f002 fab5 	bl	800d7e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b282:	429a      	cmp	r2, r3
 800b284:	d302      	bcc.n	800b28c <xQueueGenericSend+0xd4>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d129      	bne.n	800b2e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	68b9      	ldr	r1, [r7, #8]
 800b290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b292:	f000 fc5e 	bl	800bb52 <prvCopyDataToQueue>
 800b296:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d010      	beq.n	800b2c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a2:	3324      	adds	r3, #36	; 0x24
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f001 fa85 	bl	800c7b4 <xTaskRemoveFromEventList>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d013      	beq.n	800b2d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b2b0:	4b3f      	ldr	r3, [pc, #252]	; (800b3b0 <xQueueGenericSend+0x1f8>)
 800b2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b6:	601a      	str	r2, [r3, #0]
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	e00a      	b.n	800b2d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d007      	beq.n	800b2d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b2c8:	4b39      	ldr	r3, [pc, #228]	; (800b3b0 <xQueueGenericSend+0x1f8>)
 800b2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ce:	601a      	str	r2, [r3, #0]
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b2d8:	f002 fab4 	bl	800d844 <vPortExitCritical>
				return pdPASS;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e063      	b.n	800b3a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d103      	bne.n	800b2ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2e6:	f002 faad 	bl	800d844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e05c      	b.n	800b3a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d106      	bne.n	800b302 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2f4:	f107 0314 	add.w	r3, r7, #20
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f001 fabf 	bl	800c87c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2fe:	2301      	movs	r3, #1
 800b300:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b302:	f002 fa9f 	bl	800d844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b306:	f001 f819 	bl	800c33c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b30a:	f002 fa6b 	bl	800d7e4 <vPortEnterCritical>
 800b30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b314:	b25b      	sxtb	r3, r3
 800b316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b31a:	d103      	bne.n	800b324 <xQueueGenericSend+0x16c>
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b32a:	b25b      	sxtb	r3, r3
 800b32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b330:	d103      	bne.n	800b33a <xQueueGenericSend+0x182>
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b33a:	f002 fa83 	bl	800d844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b33e:	1d3a      	adds	r2, r7, #4
 800b340:	f107 0314 	add.w	r3, r7, #20
 800b344:	4611      	mov	r1, r2
 800b346:	4618      	mov	r0, r3
 800b348:	f001 faae 	bl	800c8a8 <xTaskCheckForTimeOut>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d124      	bne.n	800b39c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b354:	f000 fcf5 	bl	800bd42 <prvIsQueueFull>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d018      	beq.n	800b390 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	3310      	adds	r3, #16
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	4611      	mov	r1, r2
 800b366:	4618      	mov	r0, r3
 800b368:	f001 f9d4 	bl	800c714 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b36e:	f000 fc80 	bl	800bc72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b372:	f000 fff1 	bl	800c358 <xTaskResumeAll>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f47f af7c 	bne.w	800b276 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b37e:	4b0c      	ldr	r3, [pc, #48]	; (800b3b0 <xQueueGenericSend+0x1f8>)
 800b380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	e772      	b.n	800b276 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b392:	f000 fc6e 	bl	800bc72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b396:	f000 ffdf 	bl	800c358 <xTaskResumeAll>
 800b39a:	e76c      	b.n	800b276 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b39c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b39e:	f000 fc68 	bl	800bc72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3a2:	f000 ffd9 	bl	800c358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b3a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3738      	adds	r7, #56	; 0x38
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	e000ed04 	.word	0xe000ed04

0800b3b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b090      	sub	sp, #64	; 0x40
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d103      	bne.n	800b3f0 <xQueueGenericSendFromISR+0x3c>
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d101      	bne.n	800b3f4 <xQueueGenericSendFromISR+0x40>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e000      	b.n	800b3f6 <xQueueGenericSendFromISR+0x42>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10a      	bne.n	800b410 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d103      	bne.n	800b41e <xQueueGenericSendFromISR+0x6a>
 800b416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d101      	bne.n	800b422 <xQueueGenericSendFromISR+0x6e>
 800b41e:	2301      	movs	r3, #1
 800b420:	e000      	b.n	800b424 <xQueueGenericSendFromISR+0x70>
 800b422:	2300      	movs	r3, #0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10a      	bne.n	800b43e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	623b      	str	r3, [r7, #32]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b43e:	f002 fab3 	bl	800d9a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b442:	f3ef 8211 	mrs	r2, BASEPRI
 800b446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44a:	f383 8811 	msr	BASEPRI, r3
 800b44e:	f3bf 8f6f 	isb	sy
 800b452:	f3bf 8f4f 	dsb	sy
 800b456:	61fa      	str	r2, [r7, #28]
 800b458:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b45a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b45c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b466:	429a      	cmp	r2, r3
 800b468:	d302      	bcc.n	800b470 <xQueueGenericSendFromISR+0xbc>
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d12f      	bne.n	800b4d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	68b9      	ldr	r1, [r7, #8]
 800b484:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b486:	f000 fb64 	bl	800bb52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b48a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b492:	d112      	bne.n	800b4ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d016      	beq.n	800b4ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	3324      	adds	r3, #36	; 0x24
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 f987 	bl	800c7b4 <xTaskRemoveFromEventList>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00e      	beq.n	800b4ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00b      	beq.n	800b4ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	e007      	b.n	800b4ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4be:	3301      	adds	r3, #1
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	b25a      	sxtb	r2, r3
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b4ce:	e001      	b.n	800b4d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b4de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3740      	adds	r7, #64	; 0x40
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b08e      	sub	sp, #56	; 0x38
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10a      	bne.n	800b514 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	623b      	str	r3, [r7, #32]
}
 800b510:	bf00      	nop
 800b512:	e7fe      	b.n	800b512 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00a      	beq.n	800b532 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	61fb      	str	r3, [r7, #28]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d103      	bne.n	800b542 <xQueueGiveFromISR+0x58>
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <xQueueGiveFromISR+0x5c>
 800b542:	2301      	movs	r3, #1
 800b544:	e000      	b.n	800b548 <xQueueGiveFromISR+0x5e>
 800b546:	2300      	movs	r3, #0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10a      	bne.n	800b562 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	61bb      	str	r3, [r7, #24]
}
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b562:	f002 fa21 	bl	800d9a8 <vPortValidateInterruptPriority>
	__asm volatile
 800b566:	f3ef 8211 	mrs	r2, BASEPRI
 800b56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	617a      	str	r2, [r7, #20]
 800b57c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b57e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b580:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b586:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b58c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b58e:	429a      	cmp	r2, r3
 800b590:	d22b      	bcs.n	800b5ea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b5a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ac:	d112      	bne.n	800b5d4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d016      	beq.n	800b5e4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	3324      	adds	r3, #36	; 0x24
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f001 f8fa 	bl	800c7b4 <xTaskRemoveFromEventList>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00e      	beq.n	800b5e4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00b      	beq.n	800b5e4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	e007      	b.n	800b5e4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5d8:	3301      	adds	r3, #1
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	b25a      	sxtb	r2, r3
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5e8:	e001      	b.n	800b5ee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f383 8811 	msr	BASEPRI, r3
}
 800b5f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3738      	adds	r7, #56	; 0x38
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b08c      	sub	sp, #48	; 0x30
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b610:	2300      	movs	r3, #0
 800b612:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10a      	bne.n	800b634 <xQueueReceive+0x30>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	623b      	str	r3, [r7, #32]
}
 800b630:	bf00      	nop
 800b632:	e7fe      	b.n	800b632 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d103      	bne.n	800b642 <xQueueReceive+0x3e>
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <xQueueReceive+0x42>
 800b642:	2301      	movs	r3, #1
 800b644:	e000      	b.n	800b648 <xQueueReceive+0x44>
 800b646:	2300      	movs	r3, #0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10a      	bne.n	800b662 <xQueueReceive+0x5e>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	61fb      	str	r3, [r7, #28]
}
 800b65e:	bf00      	nop
 800b660:	e7fe      	b.n	800b660 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b662:	f001 fa69 	bl	800cb38 <xTaskGetSchedulerState>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d102      	bne.n	800b672 <xQueueReceive+0x6e>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <xQueueReceive+0x72>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <xQueueReceive+0x74>
 800b676:	2300      	movs	r3, #0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <xQueueReceive+0x8e>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	61bb      	str	r3, [r7, #24]
}
 800b68e:	bf00      	nop
 800b690:	e7fe      	b.n	800b690 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b692:	f002 f8a7 	bl	800d7e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d01f      	beq.n	800b6e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6a6:	f000 fabe 	bl	800bc26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	1e5a      	subs	r2, r3, #1
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00f      	beq.n	800b6da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	3310      	adds	r3, #16
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f001 f878 	bl	800c7b4 <xTaskRemoveFromEventList>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d007      	beq.n	800b6da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6ca:	4b3d      	ldr	r3, [pc, #244]	; (800b7c0 <xQueueReceive+0x1bc>)
 800b6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6da:	f002 f8b3 	bl	800d844 <vPortExitCritical>
				return pdPASS;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e069      	b.n	800b7b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d103      	bne.n	800b6f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6e8:	f002 f8ac 	bl	800d844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e062      	b.n	800b7b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6f6:	f107 0310 	add.w	r3, r7, #16
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f001 f8be 	bl	800c87c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b700:	2301      	movs	r3, #1
 800b702:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b704:	f002 f89e 	bl	800d844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b708:	f000 fe18 	bl	800c33c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b70c:	f002 f86a 	bl	800d7e4 <vPortEnterCritical>
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b716:	b25b      	sxtb	r3, r3
 800b718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b71c:	d103      	bne.n	800b726 <xQueueReceive+0x122>
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b72c:	b25b      	sxtb	r3, r3
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d103      	bne.n	800b73c <xQueueReceive+0x138>
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b73c:	f002 f882 	bl	800d844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b740:	1d3a      	adds	r2, r7, #4
 800b742:	f107 0310 	add.w	r3, r7, #16
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f001 f8ad 	bl	800c8a8 <xTaskCheckForTimeOut>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d123      	bne.n	800b79c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b756:	f000 fade 	bl	800bd16 <prvIsQueueEmpty>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d017      	beq.n	800b790 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	3324      	adds	r3, #36	; 0x24
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	4611      	mov	r1, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 ffd3 	bl	800c714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b76e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b770:	f000 fa7f 	bl	800bc72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b774:	f000 fdf0 	bl	800c358 <xTaskResumeAll>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d189      	bne.n	800b692 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b77e:	4b10      	ldr	r3, [pc, #64]	; (800b7c0 <xQueueReceive+0x1bc>)
 800b780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b784:	601a      	str	r2, [r3, #0]
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	e780      	b.n	800b692 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b792:	f000 fa6e 	bl	800bc72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b796:	f000 fddf 	bl	800c358 <xTaskResumeAll>
 800b79a:	e77a      	b.n	800b692 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b79c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b79e:	f000 fa68 	bl	800bc72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7a2:	f000 fdd9 	bl	800c358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7a8:	f000 fab5 	bl	800bd16 <prvIsQueueEmpty>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f43f af6f 	beq.w	800b692 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3730      	adds	r7, #48	; 0x30
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	e000ed04 	.word	0xe000ed04

0800b7c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b08e      	sub	sp, #56	; 0x38
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10a      	bne.n	800b7f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	623b      	str	r3, [r7, #32]
}
 800b7f2:	bf00      	nop
 800b7f4:	e7fe      	b.n	800b7f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	61fb      	str	r3, [r7, #28]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b814:	f001 f990 	bl	800cb38 <xTaskGetSchedulerState>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d102      	bne.n	800b824 <xQueueSemaphoreTake+0x60>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <xQueueSemaphoreTake+0x64>
 800b824:	2301      	movs	r3, #1
 800b826:	e000      	b.n	800b82a <xQueueSemaphoreTake+0x66>
 800b828:	2300      	movs	r3, #0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10a      	bne.n	800b844 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	61bb      	str	r3, [r7, #24]
}
 800b840:	bf00      	nop
 800b842:	e7fe      	b.n	800b842 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b844:	f001 ffce 	bl	800d7e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b850:	2b00      	cmp	r3, #0
 800b852:	d024      	beq.n	800b89e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	1e5a      	subs	r2, r3, #1
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d104      	bne.n	800b86e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b864:	f001 fade 	bl	800ce24 <pvTaskIncrementMutexHeldCount>
 800b868:	4602      	mov	r2, r0
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00f      	beq.n	800b896 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	3310      	adds	r3, #16
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 ff9a 	bl	800c7b4 <xTaskRemoveFromEventList>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d007      	beq.n	800b896 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b886:	4b54      	ldr	r3, [pc, #336]	; (800b9d8 <xQueueSemaphoreTake+0x214>)
 800b888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b896:	f001 ffd5 	bl	800d844 <vPortExitCritical>
				return pdPASS;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e097      	b.n	800b9ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d111      	bne.n	800b8c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00a      	beq.n	800b8c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	617b      	str	r3, [r7, #20]
}
 800b8bc:	bf00      	nop
 800b8be:	e7fe      	b.n	800b8be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b8c0:	f001 ffc0 	bl	800d844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e082      	b.n	800b9ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d106      	bne.n	800b8dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8ce:	f107 030c 	add.w	r3, r7, #12
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 ffd2 	bl	800c87c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8dc:	f001 ffb2 	bl	800d844 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8e0:	f000 fd2c 	bl	800c33c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8e4:	f001 ff7e 	bl	800d7e4 <vPortEnterCritical>
 800b8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8ee:	b25b      	sxtb	r3, r3
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d103      	bne.n	800b8fe <xQueueSemaphoreTake+0x13a>
 800b8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b904:	b25b      	sxtb	r3, r3
 800b906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90a:	d103      	bne.n	800b914 <xQueueSemaphoreTake+0x150>
 800b90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b914:	f001 ff96 	bl	800d844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b918:	463a      	mov	r2, r7
 800b91a:	f107 030c 	add.w	r3, r7, #12
 800b91e:	4611      	mov	r1, r2
 800b920:	4618      	mov	r0, r3
 800b922:	f000 ffc1 	bl	800c8a8 <xTaskCheckForTimeOut>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d132      	bne.n	800b992 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b92c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b92e:	f000 f9f2 	bl	800bd16 <prvIsQueueEmpty>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d026      	beq.n	800b986 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d109      	bne.n	800b954 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b940:	f001 ff50 	bl	800d7e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 f913 	bl	800cb74 <xTaskPriorityInherit>
 800b94e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b950:	f001 ff78 	bl	800d844 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b956:	3324      	adds	r3, #36	; 0x24
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	4611      	mov	r1, r2
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 fed9 	bl	800c714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b964:	f000 f985 	bl	800bc72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b968:	f000 fcf6 	bl	800c358 <xTaskResumeAll>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f47f af68 	bne.w	800b844 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b974:	4b18      	ldr	r3, [pc, #96]	; (800b9d8 <xQueueSemaphoreTake+0x214>)
 800b976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	e75e      	b.n	800b844 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b988:	f000 f973 	bl	800bc72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b98c:	f000 fce4 	bl	800c358 <xTaskResumeAll>
 800b990:	e758      	b.n	800b844 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b994:	f000 f96d 	bl	800bc72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b998:	f000 fcde 	bl	800c358 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b99c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b99e:	f000 f9ba 	bl	800bd16 <prvIsQueueEmpty>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f43f af4d 	beq.w	800b844 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00d      	beq.n	800b9cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b9b0:	f001 ff18 	bl	800d7e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b9b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9b6:	f000 f8b4 	bl	800bb22 <prvGetDisinheritPriorityAfterTimeout>
 800b9ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 f9ac 	bl	800cd20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b9c8:	f001 ff3c 	bl	800d844 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b9cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3738      	adds	r7, #56	; 0x38
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	e000ed04 	.word	0xe000ed04

0800b9dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b08e      	sub	sp, #56	; 0x38
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	623b      	str	r3, [r7, #32]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d103      	bne.n	800ba16 <xQueueReceiveFromISR+0x3a>
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d101      	bne.n	800ba1a <xQueueReceiveFromISR+0x3e>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e000      	b.n	800ba1c <xQueueReceiveFromISR+0x40>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10a      	bne.n	800ba36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	61fb      	str	r3, [r7, #28]
}
 800ba32:	bf00      	nop
 800ba34:	e7fe      	b.n	800ba34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba36:	f001 ffb7 	bl	800d9a8 <vPortValidateInterruptPriority>
	__asm volatile
 800ba3a:	f3ef 8211 	mrs	r2, BASEPRI
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	61ba      	str	r2, [r7, #24]
 800ba50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ba52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d02f      	beq.n	800bac2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba70:	f000 f8d9 	bl	800bc26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	1e5a      	subs	r2, r3, #1
 800ba78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ba7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba84:	d112      	bne.n	800baac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d016      	beq.n	800babc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	3310      	adds	r3, #16
 800ba92:	4618      	mov	r0, r3
 800ba94:	f000 fe8e 	bl	800c7b4 <xTaskRemoveFromEventList>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00e      	beq.n	800babc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00b      	beq.n	800babc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	601a      	str	r2, [r3, #0]
 800baaa:	e007      	b.n	800babc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800baac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab0:	3301      	adds	r3, #1
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	b25a      	sxtb	r2, r3
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800babc:	2301      	movs	r3, #1
 800babe:	637b      	str	r3, [r7, #52]	; 0x34
 800bac0:	e001      	b.n	800bac6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	637b      	str	r3, [r7, #52]	; 0x34
 800bac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	f383 8811 	msr	BASEPRI, r3
}
 800bad0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3738      	adds	r7, #56	; 0x38
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10a      	bne.n	800bb04 <vQueueDelete+0x28>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60bb      	str	r3, [r7, #8]
}
 800bb00:	bf00      	nop
 800bb02:	e7fe      	b.n	800bb02 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 f95f 	bl	800bdc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d102      	bne.n	800bb1a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f001 ffcd 	bl	800dab4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bb1a:	bf00      	nop
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d006      	beq.n	800bb40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	e001      	b.n	800bb44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bb40:	2300      	movs	r3, #0
 800bb42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bb44:	68fb      	ldr	r3, [r7, #12]
	}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b086      	sub	sp, #24
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	60f8      	str	r0, [r7, #12]
 800bb5a:	60b9      	str	r1, [r7, #8]
 800bb5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10d      	bne.n	800bb8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d14d      	bne.n	800bc14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 f861 	bl	800cc44 <xTaskPriorityDisinherit>
 800bb82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	609a      	str	r2, [r3, #8]
 800bb8a:	e043      	b.n	800bc14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d119      	bne.n	800bbc6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6858      	ldr	r0, [r3, #4]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	68b9      	ldr	r1, [r7, #8]
 800bb9e:	f001 ffc7 	bl	800db30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbaa:	441a      	add	r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d32b      	bcc.n	800bc14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	605a      	str	r2, [r3, #4]
 800bbc4:	e026      	b.n	800bc14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	68d8      	ldr	r0, [r3, #12]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbce:	461a      	mov	r2, r3
 800bbd0:	68b9      	ldr	r1, [r7, #8]
 800bbd2:	f001 ffad 	bl	800db30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	68da      	ldr	r2, [r3, #12]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbde:	425b      	negs	r3, r3
 800bbe0:	441a      	add	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	68da      	ldr	r2, [r3, #12]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d207      	bcs.n	800bc02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfa:	425b      	negs	r3, r3
 800bbfc:	441a      	add	r2, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d105      	bne.n	800bc14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	3b01      	subs	r3, #1
 800bc12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	1c5a      	adds	r2, r3, #1
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc1c:	697b      	ldr	r3, [r7, #20]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b082      	sub	sp, #8
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d018      	beq.n	800bc6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68da      	ldr	r2, [r3, #12]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc40:	441a      	add	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	68da      	ldr	r2, [r3, #12]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d303      	bcc.n	800bc5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68d9      	ldr	r1, [r3, #12]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc62:	461a      	mov	r2, r3
 800bc64:	6838      	ldr	r0, [r7, #0]
 800bc66:	f001 ff63 	bl	800db30 <memcpy>
	}
}
 800bc6a:	bf00      	nop
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc7a:	f001 fdb3 	bl	800d7e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc86:	e011      	b.n	800bcac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d012      	beq.n	800bcb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	3324      	adds	r3, #36	; 0x24
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 fd8d 	bl	800c7b4 <xTaskRemoveFromEventList>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bca0:	f000 fe64 	bl	800c96c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	3b01      	subs	r3, #1
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dce9      	bgt.n	800bc88 <prvUnlockQueue+0x16>
 800bcb4:	e000      	b.n	800bcb8 <prvUnlockQueue+0x46>
					break;
 800bcb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	22ff      	movs	r2, #255	; 0xff
 800bcbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bcc0:	f001 fdc0 	bl	800d844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bcc4:	f001 fd8e 	bl	800d7e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcd0:	e011      	b.n	800bcf6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d012      	beq.n	800bd00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	3310      	adds	r3, #16
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 fd68 	bl	800c7b4 <xTaskRemoveFromEventList>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcea:	f000 fe3f 	bl	800c96c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bcee:	7bbb      	ldrb	r3, [r7, #14]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	dce9      	bgt.n	800bcd2 <prvUnlockQueue+0x60>
 800bcfe:	e000      	b.n	800bd02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	22ff      	movs	r2, #255	; 0xff
 800bd06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd0a:	f001 fd9b 	bl	800d844 <vPortExitCritical>
}
 800bd0e:	bf00      	nop
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b084      	sub	sp, #16
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd1e:	f001 fd61 	bl	800d7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d102      	bne.n	800bd30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	60fb      	str	r3, [r7, #12]
 800bd2e:	e001      	b.n	800bd34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd34:	f001 fd86 	bl	800d844 <vPortExitCritical>

	return xReturn;
 800bd38:	68fb      	ldr	r3, [r7, #12]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b084      	sub	sp, #16
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd4a:	f001 fd4b 	bl	800d7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d102      	bne.n	800bd60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	e001      	b.n	800bd64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd60:	2300      	movs	r3, #0
 800bd62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd64:	f001 fd6e 	bl	800d844 <vPortExitCritical>

	return xReturn;
 800bd68:	68fb      	ldr	r3, [r7, #12]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	e014      	b.n	800bdae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd84:	4a0f      	ldr	r2, [pc, #60]	; (800bdc4 <vQueueAddToRegistry+0x50>)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10b      	bne.n	800bda8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd90:	490c      	ldr	r1, [pc, #48]	; (800bdc4 <vQueueAddToRegistry+0x50>)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd9a:	4a0a      	ldr	r2, [pc, #40]	; (800bdc4 <vQueueAddToRegistry+0x50>)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	00db      	lsls	r3, r3, #3
 800bda0:	4413      	add	r3, r2
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bda6:	e006      	b.n	800bdb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b07      	cmp	r3, #7
 800bdb2:	d9e7      	bls.n	800bd84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bdb4:	bf00      	nop
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	24004d08 	.word	0x24004d08

0800bdc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	e016      	b.n	800be04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bdd6:	4a10      	ldr	r2, [pc, #64]	; (800be18 <vQueueUnregisterQueue+0x50>)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	4413      	add	r3, r2
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d10b      	bne.n	800bdfe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bde6:	4a0c      	ldr	r2, [pc, #48]	; (800be18 <vQueueUnregisterQueue+0x50>)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2100      	movs	r1, #0
 800bdec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bdf0:	4a09      	ldr	r2, [pc, #36]	; (800be18 <vQueueUnregisterQueue+0x50>)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	00db      	lsls	r3, r3, #3
 800bdf6:	4413      	add	r3, r2
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	605a      	str	r2, [r3, #4]
				break;
 800bdfc:	e006      	b.n	800be0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3301      	adds	r3, #1
 800be02:	60fb      	str	r3, [r7, #12]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b07      	cmp	r3, #7
 800be08:	d9e5      	bls.n	800bdd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800be0a:	bf00      	nop
 800be0c:	bf00      	nop
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	24004d08 	.word	0x24004d08

0800be1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800be2c:	f001 fcda 	bl	800d7e4 <vPortEnterCritical>
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be36:	b25b      	sxtb	r3, r3
 800be38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be3c:	d103      	bne.n	800be46 <vQueueWaitForMessageRestricted+0x2a>
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be4c:	b25b      	sxtb	r3, r3
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be52:	d103      	bne.n	800be5c <vQueueWaitForMessageRestricted+0x40>
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2200      	movs	r2, #0
 800be58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be5c:	f001 fcf2 	bl	800d844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be64:	2b00      	cmp	r3, #0
 800be66:	d106      	bne.n	800be76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	3324      	adds	r3, #36	; 0x24
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	68b9      	ldr	r1, [r7, #8]
 800be70:	4618      	mov	r0, r3
 800be72:	f000 fc73 	bl	800c75c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be76:	6978      	ldr	r0, [r7, #20]
 800be78:	f7ff fefb 	bl	800bc72 <prvUnlockQueue>
	}
 800be7c:	bf00      	nop
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be84:	b580      	push	{r7, lr}
 800be86:	b08e      	sub	sp, #56	; 0x38
 800be88:	af04      	add	r7, sp, #16
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
 800be90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <xTaskCreateStatic+0x2a>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	623b      	str	r3, [r7, #32]
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800beae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10a      	bne.n	800beca <xTaskCreateStatic+0x46>
	__asm volatile
 800beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	61fb      	str	r3, [r7, #28]
}
 800bec6:	bf00      	nop
 800bec8:	e7fe      	b.n	800bec8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800beca:	23cc      	movs	r3, #204	; 0xcc
 800becc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	2bcc      	cmp	r3, #204	; 0xcc
 800bed2:	d00a      	beq.n	800beea <xTaskCreateStatic+0x66>
	__asm volatile
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	61bb      	str	r3, [r7, #24]
}
 800bee6:	bf00      	nop
 800bee8:	e7fe      	b.n	800bee8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800beea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d01e      	beq.n	800bf30 <xTaskCreateStatic+0xac>
 800bef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d01b      	beq.n	800bf30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	2202      	movs	r2, #2
 800bf06:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	9303      	str	r3, [sp, #12]
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	9302      	str	r3, [sp, #8]
 800bf12:	f107 0314 	add.w	r3, r7, #20
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	68b9      	ldr	r1, [r7, #8]
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f000 f850 	bl	800bfc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf2a:	f000 f8f3 	bl	800c114 <prvAddNewTaskToReadyList>
 800bf2e:	e001      	b.n	800bf34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bf30:	2300      	movs	r3, #0
 800bf32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf34:	697b      	ldr	r3, [r7, #20]
	}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3728      	adds	r7, #40	; 0x28
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b08c      	sub	sp, #48	; 0x30
 800bf42:	af04      	add	r7, sp, #16
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	603b      	str	r3, [r7, #0]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf4e:	88fb      	ldrh	r3, [r7, #6]
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f001 fd68 	bl	800da28 <pvPortMalloc>
 800bf58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00e      	beq.n	800bf7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf60:	20cc      	movs	r0, #204	; 0xcc
 800bf62:	f001 fd61 	bl	800da28 <pvPortMalloc>
 800bf66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d003      	beq.n	800bf76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	697a      	ldr	r2, [r7, #20]
 800bf72:	631a      	str	r2, [r3, #48]	; 0x30
 800bf74:	e005      	b.n	800bf82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf76:	6978      	ldr	r0, [r7, #20]
 800bf78:	f001 fd9c 	bl	800dab4 <vPortFree>
 800bf7c:	e001      	b.n	800bf82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d017      	beq.n	800bfb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf90:	88fa      	ldrh	r2, [r7, #6]
 800bf92:	2300      	movs	r3, #0
 800bf94:	9303      	str	r3, [sp, #12]
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	9302      	str	r3, [sp, #8]
 800bf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9c:	9301      	str	r3, [sp, #4]
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f000 f80e 	bl	800bfc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfac:	69f8      	ldr	r0, [r7, #28]
 800bfae:	f000 f8b1 	bl	800c114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	61bb      	str	r3, [r7, #24]
 800bfb6:	e002      	b.n	800bfbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfbe:	69bb      	ldr	r3, [r7, #24]
	}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3720      	adds	r7, #32
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b088      	sub	sp, #32
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
 800bfd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	461a      	mov	r2, r3
 800bfe0:	21a5      	movs	r1, #165	; 0xa5
 800bfe2:	f001 fdb3 	bl	800db4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfea:	6879      	ldr	r1, [r7, #4]
 800bfec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bff0:	440b      	add	r3, r1
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4413      	add	r3, r2
 800bff6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	f023 0307 	bic.w	r3, r3, #7
 800bffe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	f003 0307 	and.w	r3, r3, #7
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00a      	beq.n	800c020 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	617b      	str	r3, [r7, #20]
}
 800c01c:	bf00      	nop
 800c01e:	e7fe      	b.n	800c01e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d01f      	beq.n	800c066 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c026:	2300      	movs	r3, #0
 800c028:	61fb      	str	r3, [r7, #28]
 800c02a:	e012      	b.n	800c052 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	4413      	add	r3, r2
 800c032:	7819      	ldrb	r1, [r3, #0]
 800c034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	4413      	add	r3, r2
 800c03a:	3334      	adds	r3, #52	; 0x34
 800c03c:	460a      	mov	r2, r1
 800c03e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	4413      	add	r3, r2
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d006      	beq.n	800c05a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	3301      	adds	r3, #1
 800c050:	61fb      	str	r3, [r7, #28]
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	2b1d      	cmp	r3, #29
 800c056:	d9e9      	bls.n	800c02c <prvInitialiseNewTask+0x64>
 800c058:	e000      	b.n	800c05c <prvInitialiseNewTask+0x94>
			{
				break;
 800c05a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800c064:	e003      	b.n	800c06e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c070:	2b37      	cmp	r3, #55	; 0x37
 800c072:	d901      	bls.n	800c078 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c074:	2337      	movs	r3, #55	; 0x37
 800c076:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c07c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c082:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	2200      	movs	r2, #0
 800c088:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	3304      	adds	r3, #4
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe fe56 	bl	800ad40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	3318      	adds	r3, #24
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fe fe51 	bl	800ad40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	3364      	adds	r3, #100	; 0x64
 800c0c8:	2260      	movs	r2, #96	; 0x60
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f001 fd3d 	bl	800db4c <memset>
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	4a0c      	ldr	r2, [pc, #48]	; (800c108 <prvInitialiseNewTask+0x140>)
 800c0d6:	669a      	str	r2, [r3, #104]	; 0x68
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0da:	4a0c      	ldr	r2, [pc, #48]	; (800c10c <prvInitialiseNewTask+0x144>)
 800c0dc:	66da      	str	r2, [r3, #108]	; 0x6c
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	4a0b      	ldr	r2, [pc, #44]	; (800c110 <prvInitialiseNewTask+0x148>)
 800c0e2:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	68f9      	ldr	r1, [r7, #12]
 800c0e8:	69b8      	ldr	r0, [r7, #24]
 800c0ea:	f001 fa51 	bl	800d590 <pxPortInitialiseStack>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d002      	beq.n	800c100 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c100:	bf00      	nop
 800c102:	3720      	adds	r7, #32
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	0800dea4 	.word	0x0800dea4
 800c10c:	0800dec4 	.word	0x0800dec4
 800c110:	0800de84 	.word	0x0800de84

0800c114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c11c:	f001 fb62 	bl	800d7e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c120:	4b2d      	ldr	r3, [pc, #180]	; (800c1d8 <prvAddNewTaskToReadyList+0xc4>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3301      	adds	r3, #1
 800c126:	4a2c      	ldr	r2, [pc, #176]	; (800c1d8 <prvAddNewTaskToReadyList+0xc4>)
 800c128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c12a:	4b2c      	ldr	r3, [pc, #176]	; (800c1dc <prvAddNewTaskToReadyList+0xc8>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d109      	bne.n	800c146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c132:	4a2a      	ldr	r2, [pc, #168]	; (800c1dc <prvAddNewTaskToReadyList+0xc8>)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c138:	4b27      	ldr	r3, [pc, #156]	; (800c1d8 <prvAddNewTaskToReadyList+0xc4>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d110      	bne.n	800c162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c140:	f000 fc38 	bl	800c9b4 <prvInitialiseTaskLists>
 800c144:	e00d      	b.n	800c162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c146:	4b26      	ldr	r3, [pc, #152]	; (800c1e0 <prvAddNewTaskToReadyList+0xcc>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d109      	bne.n	800c162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c14e:	4b23      	ldr	r3, [pc, #140]	; (800c1dc <prvAddNewTaskToReadyList+0xc8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c158:	429a      	cmp	r2, r3
 800c15a:	d802      	bhi.n	800c162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c15c:	4a1f      	ldr	r2, [pc, #124]	; (800c1dc <prvAddNewTaskToReadyList+0xc8>)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c162:	4b20      	ldr	r3, [pc, #128]	; (800c1e4 <prvAddNewTaskToReadyList+0xd0>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3301      	adds	r3, #1
 800c168:	4a1e      	ldr	r2, [pc, #120]	; (800c1e4 <prvAddNewTaskToReadyList+0xd0>)
 800c16a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c16c:	4b1d      	ldr	r3, [pc, #116]	; (800c1e4 <prvAddNewTaskToReadyList+0xd0>)
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c178:	4b1b      	ldr	r3, [pc, #108]	; (800c1e8 <prvAddNewTaskToReadyList+0xd4>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d903      	bls.n	800c188 <prvAddNewTaskToReadyList+0x74>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c184:	4a18      	ldr	r2, [pc, #96]	; (800c1e8 <prvAddNewTaskToReadyList+0xd4>)
 800c186:	6013      	str	r3, [r2, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4a15      	ldr	r2, [pc, #84]	; (800c1ec <prvAddNewTaskToReadyList+0xd8>)
 800c196:	441a      	add	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3304      	adds	r3, #4
 800c19c:	4619      	mov	r1, r3
 800c19e:	4610      	mov	r0, r2
 800c1a0:	f7fe fddb 	bl	800ad5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c1a4:	f001 fb4e 	bl	800d844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1a8:	4b0d      	ldr	r3, [pc, #52]	; (800c1e0 <prvAddNewTaskToReadyList+0xcc>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00e      	beq.n	800c1ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1b0:	4b0a      	ldr	r3, [pc, #40]	; (800c1dc <prvAddNewTaskToReadyList+0xc8>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d207      	bcs.n	800c1ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1be:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <prvAddNewTaskToReadyList+0xdc>)
 800c1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c4:	601a      	str	r2, [r3, #0]
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1ce:	bf00      	nop
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	2400521c 	.word	0x2400521c
 800c1dc:	24004d48 	.word	0x24004d48
 800c1e0:	24005228 	.word	0x24005228
 800c1e4:	24005238 	.word	0x24005238
 800c1e8:	24005224 	.word	0x24005224
 800c1ec:	24004d4c 	.word	0x24004d4c
 800c1f0:	e000ed04 	.word	0xe000ed04

0800c1f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d017      	beq.n	800c236 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c206:	4b13      	ldr	r3, [pc, #76]	; (800c254 <vTaskDelay+0x60>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00a      	beq.n	800c224 <vTaskDelay+0x30>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	60bb      	str	r3, [r7, #8]
}
 800c220:	bf00      	nop
 800c222:	e7fe      	b.n	800c222 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c224:	f000 f88a 	bl	800c33c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c228:	2100      	movs	r1, #0
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 fe0e 	bl	800ce4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c230:	f000 f892 	bl	800c358 <xTaskResumeAll>
 800c234:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d107      	bne.n	800c24c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c23c:	4b06      	ldr	r3, [pc, #24]	; (800c258 <vTaskDelay+0x64>)
 800c23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c24c:	bf00      	nop
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	24005244 	.word	0x24005244
 800c258:	e000ed04 	.word	0xe000ed04

0800c25c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08a      	sub	sp, #40	; 0x28
 800c260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c266:	2300      	movs	r3, #0
 800c268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c26a:	463a      	mov	r2, r7
 800c26c:	1d39      	adds	r1, r7, #4
 800c26e:	f107 0308 	add.w	r3, r7, #8
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe fd10 	bl	800ac98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	9202      	str	r2, [sp, #8]
 800c280:	9301      	str	r3, [sp, #4]
 800c282:	2300      	movs	r3, #0
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	2300      	movs	r3, #0
 800c288:	460a      	mov	r2, r1
 800c28a:	4924      	ldr	r1, [pc, #144]	; (800c31c <vTaskStartScheduler+0xc0>)
 800c28c:	4824      	ldr	r0, [pc, #144]	; (800c320 <vTaskStartScheduler+0xc4>)
 800c28e:	f7ff fdf9 	bl	800be84 <xTaskCreateStatic>
 800c292:	4603      	mov	r3, r0
 800c294:	4a23      	ldr	r2, [pc, #140]	; (800c324 <vTaskStartScheduler+0xc8>)
 800c296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c298:	4b22      	ldr	r3, [pc, #136]	; (800c324 <vTaskStartScheduler+0xc8>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	617b      	str	r3, [r7, #20]
 800c2a4:	e001      	b.n	800c2aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d102      	bne.n	800c2b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c2b0:	f000 fe20 	bl	800cef4 <xTimerCreateTimerTask>
 800c2b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d11b      	bne.n	800c2f4 <vTaskStartScheduler+0x98>
	__asm volatile
 800c2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	613b      	str	r3, [r7, #16]
}
 800c2ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2d0:	4b15      	ldr	r3, [pc, #84]	; (800c328 <vTaskStartScheduler+0xcc>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3364      	adds	r3, #100	; 0x64
 800c2d6:	4a15      	ldr	r2, [pc, #84]	; (800c32c <vTaskStartScheduler+0xd0>)
 800c2d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2da:	4b15      	ldr	r3, [pc, #84]	; (800c330 <vTaskStartScheduler+0xd4>)
 800c2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2e2:	4b14      	ldr	r3, [pc, #80]	; (800c334 <vTaskStartScheduler+0xd8>)
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c2e8:	4b13      	ldr	r3, [pc, #76]	; (800c338 <vTaskStartScheduler+0xdc>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2ee:	f001 f9d7 	bl	800d6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c2f2:	e00e      	b.n	800c312 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fa:	d10a      	bne.n	800c312 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	60fb      	str	r3, [r7, #12]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <vTaskStartScheduler+0xb4>
}
 800c312:	bf00      	nop
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	0800dd60 	.word	0x0800dd60
 800c320:	0800c985 	.word	0x0800c985
 800c324:	24005240 	.word	0x24005240
 800c328:	24004d48 	.word	0x24004d48
 800c32c:	24000030 	.word	0x24000030
 800c330:	2400523c 	.word	0x2400523c
 800c334:	24005228 	.word	0x24005228
 800c338:	24005220 	.word	0x24005220

0800c33c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c33c:	b480      	push	{r7}
 800c33e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c340:	4b04      	ldr	r3, [pc, #16]	; (800c354 <vTaskSuspendAll+0x18>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	3301      	adds	r3, #1
 800c346:	4a03      	ldr	r2, [pc, #12]	; (800c354 <vTaskSuspendAll+0x18>)
 800c348:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c34a:	bf00      	nop
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	24005244 	.word	0x24005244

0800c358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c35e:	2300      	movs	r3, #0
 800c360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c362:	2300      	movs	r3, #0
 800c364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c366:	4b42      	ldr	r3, [pc, #264]	; (800c470 <xTaskResumeAll+0x118>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10a      	bne.n	800c384 <xTaskResumeAll+0x2c>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	603b      	str	r3, [r7, #0]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c384:	f001 fa2e 	bl	800d7e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c388:	4b39      	ldr	r3, [pc, #228]	; (800c470 <xTaskResumeAll+0x118>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	4a38      	ldr	r2, [pc, #224]	; (800c470 <xTaskResumeAll+0x118>)
 800c390:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c392:	4b37      	ldr	r3, [pc, #220]	; (800c470 <xTaskResumeAll+0x118>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d162      	bne.n	800c460 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c39a:	4b36      	ldr	r3, [pc, #216]	; (800c474 <xTaskResumeAll+0x11c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d05e      	beq.n	800c460 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3a2:	e02f      	b.n	800c404 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a4:	4b34      	ldr	r3, [pc, #208]	; (800c478 <xTaskResumeAll+0x120>)
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3318      	adds	r3, #24
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe fd2f 	bl	800ae14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3304      	adds	r3, #4
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fe fd2a 	bl	800ae14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c4:	4b2d      	ldr	r3, [pc, #180]	; (800c47c <xTaskResumeAll+0x124>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d903      	bls.n	800c3d4 <xTaskResumeAll+0x7c>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d0:	4a2a      	ldr	r2, [pc, #168]	; (800c47c <xTaskResumeAll+0x124>)
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d8:	4613      	mov	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	4a27      	ldr	r2, [pc, #156]	; (800c480 <xTaskResumeAll+0x128>)
 800c3e2:	441a      	add	r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	f7fe fcb5 	bl	800ad5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f4:	4b23      	ldr	r3, [pc, #140]	; (800c484 <xTaskResumeAll+0x12c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d302      	bcc.n	800c404 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c3fe:	4b22      	ldr	r3, [pc, #136]	; (800c488 <xTaskResumeAll+0x130>)
 800c400:	2201      	movs	r2, #1
 800c402:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c404:	4b1c      	ldr	r3, [pc, #112]	; (800c478 <xTaskResumeAll+0x120>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1cb      	bne.n	800c3a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c412:	f000 fb71 	bl	800caf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c416:	4b1d      	ldr	r3, [pc, #116]	; (800c48c <xTaskResumeAll+0x134>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d010      	beq.n	800c444 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c422:	f000 f859 	bl	800c4d8 <xTaskIncrementTick>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d002      	beq.n	800c432 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c42c:	4b16      	ldr	r3, [pc, #88]	; (800c488 <xTaskResumeAll+0x130>)
 800c42e:	2201      	movs	r2, #1
 800c430:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	3b01      	subs	r3, #1
 800c436:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1f1      	bne.n	800c422 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <xTaskResumeAll+0x134>)
 800c440:	2200      	movs	r2, #0
 800c442:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c444:	4b10      	ldr	r3, [pc, #64]	; (800c488 <xTaskResumeAll+0x130>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d009      	beq.n	800c460 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c44c:	2301      	movs	r3, #1
 800c44e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c450:	4b0f      	ldr	r3, [pc, #60]	; (800c490 <xTaskResumeAll+0x138>)
 800c452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c456:	601a      	str	r2, [r3, #0]
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c460:	f001 f9f0 	bl	800d844 <vPortExitCritical>

	return xAlreadyYielded;
 800c464:	68bb      	ldr	r3, [r7, #8]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	24005244 	.word	0x24005244
 800c474:	2400521c 	.word	0x2400521c
 800c478:	240051dc 	.word	0x240051dc
 800c47c:	24005224 	.word	0x24005224
 800c480:	24004d4c 	.word	0x24004d4c
 800c484:	24004d48 	.word	0x24004d48
 800c488:	24005230 	.word	0x24005230
 800c48c:	2400522c 	.word	0x2400522c
 800c490:	e000ed04 	.word	0xe000ed04

0800c494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <xTaskGetTickCount+0x1c>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4a0:	687b      	ldr	r3, [r7, #4]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	370c      	adds	r7, #12
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	24005220 	.word	0x24005220

0800c4b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4ba:	f001 fa75 	bl	800d9a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c4be:	2300      	movs	r3, #0
 800c4c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c4c2:	4b04      	ldr	r3, [pc, #16]	; (800c4d4 <xTaskGetTickCountFromISR+0x20>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4c8:	683b      	ldr	r3, [r7, #0]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	24005220 	.word	0x24005220

0800c4d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4e2:	4b4f      	ldr	r3, [pc, #316]	; (800c620 <xTaskIncrementTick+0x148>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f040 808f 	bne.w	800c60a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4ec:	4b4d      	ldr	r3, [pc, #308]	; (800c624 <xTaskIncrementTick+0x14c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4f4:	4a4b      	ldr	r2, [pc, #300]	; (800c624 <xTaskIncrementTick+0x14c>)
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d120      	bne.n	800c542 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c500:	4b49      	ldr	r3, [pc, #292]	; (800c628 <xTaskIncrementTick+0x150>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00a      	beq.n	800c520 <xTaskIncrementTick+0x48>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	603b      	str	r3, [r7, #0]
}
 800c51c:	bf00      	nop
 800c51e:	e7fe      	b.n	800c51e <xTaskIncrementTick+0x46>
 800c520:	4b41      	ldr	r3, [pc, #260]	; (800c628 <xTaskIncrementTick+0x150>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	4b41      	ldr	r3, [pc, #260]	; (800c62c <xTaskIncrementTick+0x154>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a3f      	ldr	r2, [pc, #252]	; (800c628 <xTaskIncrementTick+0x150>)
 800c52c:	6013      	str	r3, [r2, #0]
 800c52e:	4a3f      	ldr	r2, [pc, #252]	; (800c62c <xTaskIncrementTick+0x154>)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6013      	str	r3, [r2, #0]
 800c534:	4b3e      	ldr	r3, [pc, #248]	; (800c630 <xTaskIncrementTick+0x158>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	3301      	adds	r3, #1
 800c53a:	4a3d      	ldr	r2, [pc, #244]	; (800c630 <xTaskIncrementTick+0x158>)
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	f000 fadb 	bl	800caf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c542:	4b3c      	ldr	r3, [pc, #240]	; (800c634 <xTaskIncrementTick+0x15c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d349      	bcc.n	800c5e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c54c:	4b36      	ldr	r3, [pc, #216]	; (800c628 <xTaskIncrementTick+0x150>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d104      	bne.n	800c560 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c556:	4b37      	ldr	r3, [pc, #220]	; (800c634 <xTaskIncrementTick+0x15c>)
 800c558:	f04f 32ff 	mov.w	r2, #4294967295
 800c55c:	601a      	str	r2, [r3, #0]
					break;
 800c55e:	e03f      	b.n	800c5e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c560:	4b31      	ldr	r3, [pc, #196]	; (800c628 <xTaskIncrementTick+0x150>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	429a      	cmp	r2, r3
 800c576:	d203      	bcs.n	800c580 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c578:	4a2e      	ldr	r2, [pc, #184]	; (800c634 <xTaskIncrementTick+0x15c>)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c57e:	e02f      	b.n	800c5e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	3304      	adds	r3, #4
 800c584:	4618      	mov	r0, r3
 800c586:	f7fe fc45 	bl	800ae14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d004      	beq.n	800c59c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	3318      	adds	r3, #24
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fc3c 	bl	800ae14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a0:	4b25      	ldr	r3, [pc, #148]	; (800c638 <xTaskIncrementTick+0x160>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d903      	bls.n	800c5b0 <xTaskIncrementTick+0xd8>
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ac:	4a22      	ldr	r2, [pc, #136]	; (800c638 <xTaskIncrementTick+0x160>)
 800c5ae:	6013      	str	r3, [r2, #0]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	4413      	add	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4a1f      	ldr	r2, [pc, #124]	; (800c63c <xTaskIncrementTick+0x164>)
 800c5be:	441a      	add	r2, r3
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	4610      	mov	r0, r2
 800c5c8:	f7fe fbc7 	bl	800ad5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d0:	4b1b      	ldr	r3, [pc, #108]	; (800c640 <xTaskIncrementTick+0x168>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d3b8      	bcc.n	800c54c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5de:	e7b5      	b.n	800c54c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5e0:	4b17      	ldr	r3, [pc, #92]	; (800c640 <xTaskIncrementTick+0x168>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e6:	4915      	ldr	r1, [pc, #84]	; (800c63c <xTaskIncrementTick+0x164>)
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4413      	add	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	440b      	add	r3, r1
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d901      	bls.n	800c5fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c5fc:	4b11      	ldr	r3, [pc, #68]	; (800c644 <xTaskIncrementTick+0x16c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d007      	beq.n	800c614 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c604:	2301      	movs	r3, #1
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	e004      	b.n	800c614 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c60a:	4b0f      	ldr	r3, [pc, #60]	; (800c648 <xTaskIncrementTick+0x170>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3301      	adds	r3, #1
 800c610:	4a0d      	ldr	r2, [pc, #52]	; (800c648 <xTaskIncrementTick+0x170>)
 800c612:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c614:	697b      	ldr	r3, [r7, #20]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	24005244 	.word	0x24005244
 800c624:	24005220 	.word	0x24005220
 800c628:	240051d4 	.word	0x240051d4
 800c62c:	240051d8 	.word	0x240051d8
 800c630:	24005234 	.word	0x24005234
 800c634:	2400523c 	.word	0x2400523c
 800c638:	24005224 	.word	0x24005224
 800c63c:	24004d4c 	.word	0x24004d4c
 800c640:	24004d48 	.word	0x24004d48
 800c644:	24005230 	.word	0x24005230
 800c648:	2400522c 	.word	0x2400522c

0800c64c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c652:	4b2a      	ldr	r3, [pc, #168]	; (800c6fc <vTaskSwitchContext+0xb0>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c65a:	4b29      	ldr	r3, [pc, #164]	; (800c700 <vTaskSwitchContext+0xb4>)
 800c65c:	2201      	movs	r2, #1
 800c65e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c660:	e046      	b.n	800c6f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c662:	4b27      	ldr	r3, [pc, #156]	; (800c700 <vTaskSwitchContext+0xb4>)
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c668:	4b26      	ldr	r3, [pc, #152]	; (800c704 <vTaskSwitchContext+0xb8>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	60fb      	str	r3, [r7, #12]
 800c66e:	e010      	b.n	800c692 <vTaskSwitchContext+0x46>
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10a      	bne.n	800c68c <vTaskSwitchContext+0x40>
	__asm volatile
 800c676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	607b      	str	r3, [r7, #4]
}
 800c688:	bf00      	nop
 800c68a:	e7fe      	b.n	800c68a <vTaskSwitchContext+0x3e>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	3b01      	subs	r3, #1
 800c690:	60fb      	str	r3, [r7, #12]
 800c692:	491d      	ldr	r1, [pc, #116]	; (800c708 <vTaskSwitchContext+0xbc>)
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	4613      	mov	r3, r2
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	4413      	add	r3, r2
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	440b      	add	r3, r1
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d0e4      	beq.n	800c670 <vTaskSwitchContext+0x24>
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	4a15      	ldr	r2, [pc, #84]	; (800c708 <vTaskSwitchContext+0xbc>)
 800c6b2:	4413      	add	r3, r2
 800c6b4:	60bb      	str	r3, [r7, #8]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	605a      	str	r2, [r3, #4]
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	3308      	adds	r3, #8
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d104      	bne.n	800c6d6 <vTaskSwitchContext+0x8a>
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	605a      	str	r2, [r3, #4]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	4a0b      	ldr	r2, [pc, #44]	; (800c70c <vTaskSwitchContext+0xc0>)
 800c6de:	6013      	str	r3, [r2, #0]
 800c6e0:	4a08      	ldr	r2, [pc, #32]	; (800c704 <vTaskSwitchContext+0xb8>)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6e6:	4b09      	ldr	r3, [pc, #36]	; (800c70c <vTaskSwitchContext+0xc0>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	3364      	adds	r3, #100	; 0x64
 800c6ec:	4a08      	ldr	r2, [pc, #32]	; (800c710 <vTaskSwitchContext+0xc4>)
 800c6ee:	6013      	str	r3, [r2, #0]
}
 800c6f0:	bf00      	nop
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	24005244 	.word	0x24005244
 800c700:	24005230 	.word	0x24005230
 800c704:	24005224 	.word	0x24005224
 800c708:	24004d4c 	.word	0x24004d4c
 800c70c:	24004d48 	.word	0x24004d48
 800c710:	24000030 	.word	0x24000030

0800c714 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10a      	bne.n	800c73a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c728:	f383 8811 	msr	BASEPRI, r3
 800c72c:	f3bf 8f6f 	isb	sy
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	60fb      	str	r3, [r7, #12]
}
 800c736:	bf00      	nop
 800c738:	e7fe      	b.n	800c738 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c73a:	4b07      	ldr	r3, [pc, #28]	; (800c758 <vTaskPlaceOnEventList+0x44>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	3318      	adds	r3, #24
 800c740:	4619      	mov	r1, r3
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7fe fb2d 	bl	800ada2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c748:	2101      	movs	r1, #1
 800c74a:	6838      	ldr	r0, [r7, #0]
 800c74c:	f000 fb7e 	bl	800ce4c <prvAddCurrentTaskToDelayedList>
}
 800c750:	bf00      	nop
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	24004d48 	.word	0x24004d48

0800c75c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10a      	bne.n	800c784 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	617b      	str	r3, [r7, #20]
}
 800c780:	bf00      	nop
 800c782:	e7fe      	b.n	800c782 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c784:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3318      	adds	r3, #24
 800c78a:	4619      	mov	r1, r3
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7fe fae4 	bl	800ad5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c798:	f04f 33ff 	mov.w	r3, #4294967295
 800c79c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c79e:	6879      	ldr	r1, [r7, #4]
 800c7a0:	68b8      	ldr	r0, [r7, #8]
 800c7a2:	f000 fb53 	bl	800ce4c <prvAddCurrentTaskToDelayedList>
	}
 800c7a6:	bf00      	nop
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	24004d48 	.word	0x24004d48

0800c7b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b086      	sub	sp, #24
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10a      	bne.n	800c7e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	60fb      	str	r3, [r7, #12]
}
 800c7dc:	bf00      	nop
 800c7de:	e7fe      	b.n	800c7de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	3318      	adds	r3, #24
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fe fb15 	bl	800ae14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7ea:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <xTaskRemoveFromEventList+0xb0>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d11d      	bne.n	800c82e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	3304      	adds	r3, #4
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe fb0c 	bl	800ae14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c800:	4b19      	ldr	r3, [pc, #100]	; (800c868 <xTaskRemoveFromEventList+0xb4>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	429a      	cmp	r2, r3
 800c806:	d903      	bls.n	800c810 <xTaskRemoveFromEventList+0x5c>
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80c:	4a16      	ldr	r2, [pc, #88]	; (800c868 <xTaskRemoveFromEventList+0xb4>)
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c814:	4613      	mov	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4413      	add	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4a13      	ldr	r2, [pc, #76]	; (800c86c <xTaskRemoveFromEventList+0xb8>)
 800c81e:	441a      	add	r2, r3
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	3304      	adds	r3, #4
 800c824:	4619      	mov	r1, r3
 800c826:	4610      	mov	r0, r2
 800c828:	f7fe fa97 	bl	800ad5a <vListInsertEnd>
 800c82c:	e005      	b.n	800c83a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	3318      	adds	r3, #24
 800c832:	4619      	mov	r1, r3
 800c834:	480e      	ldr	r0, [pc, #56]	; (800c870 <xTaskRemoveFromEventList+0xbc>)
 800c836:	f7fe fa90 	bl	800ad5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83e:	4b0d      	ldr	r3, [pc, #52]	; (800c874 <xTaskRemoveFromEventList+0xc0>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	429a      	cmp	r2, r3
 800c846:	d905      	bls.n	800c854 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c848:	2301      	movs	r3, #1
 800c84a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c84c:	4b0a      	ldr	r3, [pc, #40]	; (800c878 <xTaskRemoveFromEventList+0xc4>)
 800c84e:	2201      	movs	r2, #1
 800c850:	601a      	str	r2, [r3, #0]
 800c852:	e001      	b.n	800c858 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c854:	2300      	movs	r3, #0
 800c856:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c858:	697b      	ldr	r3, [r7, #20]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3718      	adds	r7, #24
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	24005244 	.word	0x24005244
 800c868:	24005224 	.word	0x24005224
 800c86c:	24004d4c 	.word	0x24004d4c
 800c870:	240051dc 	.word	0x240051dc
 800c874:	24004d48 	.word	0x24004d48
 800c878:	24005230 	.word	0x24005230

0800c87c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c884:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <vTaskInternalSetTimeOutState+0x24>)
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c88c:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <vTaskInternalSetTimeOutState+0x28>)
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	605a      	str	r2, [r3, #4]
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	24005234 	.word	0x24005234
 800c8a4:	24005220 	.word	0x24005220

0800c8a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b088      	sub	sp, #32
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10a      	bne.n	800c8ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	613b      	str	r3, [r7, #16]
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	60fb      	str	r3, [r7, #12]
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c8ea:	f000 ff7b 	bl	800d7e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c8ee:	4b1d      	ldr	r3, [pc, #116]	; (800c964 <xTaskCheckForTimeOut+0xbc>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	69ba      	ldr	r2, [r7, #24]
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c906:	d102      	bne.n	800c90e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c908:	2300      	movs	r3, #0
 800c90a:	61fb      	str	r3, [r7, #28]
 800c90c:	e023      	b.n	800c956 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	4b15      	ldr	r3, [pc, #84]	; (800c968 <xTaskCheckForTimeOut+0xc0>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	429a      	cmp	r2, r3
 800c918:	d007      	beq.n	800c92a <xTaskCheckForTimeOut+0x82>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	69ba      	ldr	r2, [r7, #24]
 800c920:	429a      	cmp	r2, r3
 800c922:	d302      	bcc.n	800c92a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c924:	2301      	movs	r3, #1
 800c926:	61fb      	str	r3, [r7, #28]
 800c928:	e015      	b.n	800c956 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	429a      	cmp	r2, r3
 800c932:	d20b      	bcs.n	800c94c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	1ad2      	subs	r2, r2, r3
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff ff9b 	bl	800c87c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c946:	2300      	movs	r3, #0
 800c948:	61fb      	str	r3, [r7, #28]
 800c94a:	e004      	b.n	800c956 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c952:	2301      	movs	r3, #1
 800c954:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c956:	f000 ff75 	bl	800d844 <vPortExitCritical>

	return xReturn;
 800c95a:	69fb      	ldr	r3, [r7, #28]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3720      	adds	r7, #32
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	24005220 	.word	0x24005220
 800c968:	24005234 	.word	0x24005234

0800c96c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c96c:	b480      	push	{r7}
 800c96e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c970:	4b03      	ldr	r3, [pc, #12]	; (800c980 <vTaskMissedYield+0x14>)
 800c972:	2201      	movs	r2, #1
 800c974:	601a      	str	r2, [r3, #0]
}
 800c976:	bf00      	nop
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	24005230 	.word	0x24005230

0800c984 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c98c:	f000 f852 	bl	800ca34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c990:	4b06      	ldr	r3, [pc, #24]	; (800c9ac <prvIdleTask+0x28>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d9f9      	bls.n	800c98c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c998:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <prvIdleTask+0x2c>)
 800c99a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c99e:	601a      	str	r2, [r3, #0]
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9a8:	e7f0      	b.n	800c98c <prvIdleTask+0x8>
 800c9aa:	bf00      	nop
 800c9ac:	24004d4c 	.word	0x24004d4c
 800c9b0:	e000ed04 	.word	0xe000ed04

0800c9b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	607b      	str	r3, [r7, #4]
 800c9be:	e00c      	b.n	800c9da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4413      	add	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4a12      	ldr	r2, [pc, #72]	; (800ca14 <prvInitialiseTaskLists+0x60>)
 800c9cc:	4413      	add	r3, r2
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe f996 	bl	800ad00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	607b      	str	r3, [r7, #4]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b37      	cmp	r3, #55	; 0x37
 800c9de:	d9ef      	bls.n	800c9c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c9e0:	480d      	ldr	r0, [pc, #52]	; (800ca18 <prvInitialiseTaskLists+0x64>)
 800c9e2:	f7fe f98d 	bl	800ad00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c9e6:	480d      	ldr	r0, [pc, #52]	; (800ca1c <prvInitialiseTaskLists+0x68>)
 800c9e8:	f7fe f98a 	bl	800ad00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9ec:	480c      	ldr	r0, [pc, #48]	; (800ca20 <prvInitialiseTaskLists+0x6c>)
 800c9ee:	f7fe f987 	bl	800ad00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9f2:	480c      	ldr	r0, [pc, #48]	; (800ca24 <prvInitialiseTaskLists+0x70>)
 800c9f4:	f7fe f984 	bl	800ad00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9f8:	480b      	ldr	r0, [pc, #44]	; (800ca28 <prvInitialiseTaskLists+0x74>)
 800c9fa:	f7fe f981 	bl	800ad00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9fe:	4b0b      	ldr	r3, [pc, #44]	; (800ca2c <prvInitialiseTaskLists+0x78>)
 800ca00:	4a05      	ldr	r2, [pc, #20]	; (800ca18 <prvInitialiseTaskLists+0x64>)
 800ca02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca04:	4b0a      	ldr	r3, [pc, #40]	; (800ca30 <prvInitialiseTaskLists+0x7c>)
 800ca06:	4a05      	ldr	r2, [pc, #20]	; (800ca1c <prvInitialiseTaskLists+0x68>)
 800ca08:	601a      	str	r2, [r3, #0]
}
 800ca0a:	bf00      	nop
 800ca0c:	3708      	adds	r7, #8
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	24004d4c 	.word	0x24004d4c
 800ca18:	240051ac 	.word	0x240051ac
 800ca1c:	240051c0 	.word	0x240051c0
 800ca20:	240051dc 	.word	0x240051dc
 800ca24:	240051f0 	.word	0x240051f0
 800ca28:	24005208 	.word	0x24005208
 800ca2c:	240051d4 	.word	0x240051d4
 800ca30:	240051d8 	.word	0x240051d8

0800ca34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca3a:	e019      	b.n	800ca70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca3c:	f000 fed2 	bl	800d7e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca40:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <prvCheckTasksWaitingTermination+0x50>)
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fe f9e1 	bl	800ae14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca52:	4b0d      	ldr	r3, [pc, #52]	; (800ca88 <prvCheckTasksWaitingTermination+0x54>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	4a0b      	ldr	r2, [pc, #44]	; (800ca88 <prvCheckTasksWaitingTermination+0x54>)
 800ca5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca5c:	4b0b      	ldr	r3, [pc, #44]	; (800ca8c <prvCheckTasksWaitingTermination+0x58>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3b01      	subs	r3, #1
 800ca62:	4a0a      	ldr	r2, [pc, #40]	; (800ca8c <prvCheckTasksWaitingTermination+0x58>)
 800ca64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca66:	f000 feed 	bl	800d844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f810 	bl	800ca90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca70:	4b06      	ldr	r3, [pc, #24]	; (800ca8c <prvCheckTasksWaitingTermination+0x58>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1e1      	bne.n	800ca3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca78:	bf00      	nop
 800ca7a:	bf00      	nop
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	240051f0 	.word	0x240051f0
 800ca88:	2400521c 	.word	0x2400521c
 800ca8c:	24005204 	.word	0x24005204

0800ca90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3364      	adds	r3, #100	; 0x64
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f001 f86b 	bl	800db78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d108      	bne.n	800cabe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 ffff 	bl	800dab4 <vPortFree>
				vPortFree( pxTCB );
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fffc 	bl	800dab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cabc:	e018      	b.n	800caf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d103      	bne.n	800cad0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 fff3 	bl	800dab4 <vPortFree>
	}
 800cace:	e00f      	b.n	800caf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d00a      	beq.n	800caf0 <prvDeleteTCB+0x60>
	__asm volatile
 800cada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	60fb      	str	r3, [r7, #12]
}
 800caec:	bf00      	nop
 800caee:	e7fe      	b.n	800caee <prvDeleteTCB+0x5e>
	}
 800caf0:	bf00      	nop
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cafe:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <prvResetNextTaskUnblockTime+0x38>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d104      	bne.n	800cb12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb08:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <prvResetNextTaskUnblockTime+0x3c>)
 800cb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb10:	e008      	b.n	800cb24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <prvResetNextTaskUnblockTime+0x38>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a04      	ldr	r2, [pc, #16]	; (800cb34 <prvResetNextTaskUnblockTime+0x3c>)
 800cb22:	6013      	str	r3, [r2, #0]
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr
 800cb30:	240051d4 	.word	0x240051d4
 800cb34:	2400523c 	.word	0x2400523c

0800cb38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb3e:	4b0b      	ldr	r3, [pc, #44]	; (800cb6c <xTaskGetSchedulerState+0x34>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d102      	bne.n	800cb4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb46:	2301      	movs	r3, #1
 800cb48:	607b      	str	r3, [r7, #4]
 800cb4a:	e008      	b.n	800cb5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb4c:	4b08      	ldr	r3, [pc, #32]	; (800cb70 <xTaskGetSchedulerState+0x38>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d102      	bne.n	800cb5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb54:	2302      	movs	r3, #2
 800cb56:	607b      	str	r3, [r7, #4]
 800cb58:	e001      	b.n	800cb5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb5e:	687b      	ldr	r3, [r7, #4]
	}
 800cb60:	4618      	mov	r0, r3
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr
 800cb6c:	24005228 	.word	0x24005228
 800cb70:	24005244 	.word	0x24005244

0800cb74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cb80:	2300      	movs	r3, #0
 800cb82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d051      	beq.n	800cc2e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8e:	4b2a      	ldr	r3, [pc, #168]	; (800cc38 <xTaskPriorityInherit+0xc4>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d241      	bcs.n	800cc1c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	699b      	ldr	r3, [r3, #24]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	db06      	blt.n	800cbae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cba0:	4b25      	ldr	r3, [pc, #148]	; (800cc38 <xTaskPriorityInherit+0xc4>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	6959      	ldr	r1, [r3, #20]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4413      	add	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4a1f      	ldr	r2, [pc, #124]	; (800cc3c <xTaskPriorityInherit+0xc8>)
 800cbc0:	4413      	add	r3, r2
 800cbc2:	4299      	cmp	r1, r3
 800cbc4:	d122      	bne.n	800cc0c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	3304      	adds	r3, #4
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe f922 	bl	800ae14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cbd0:	4b19      	ldr	r3, [pc, #100]	; (800cc38 <xTaskPriorityInherit+0xc4>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbde:	4b18      	ldr	r3, [pc, #96]	; (800cc40 <xTaskPriorityInherit+0xcc>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d903      	bls.n	800cbee <xTaskPriorityInherit+0x7a>
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbea:	4a15      	ldr	r2, [pc, #84]	; (800cc40 <xTaskPriorityInherit+0xcc>)
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4413      	add	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4a10      	ldr	r2, [pc, #64]	; (800cc3c <xTaskPriorityInherit+0xc8>)
 800cbfc:	441a      	add	r2, r3
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	3304      	adds	r3, #4
 800cc02:	4619      	mov	r1, r3
 800cc04:	4610      	mov	r0, r2
 800cc06:	f7fe f8a8 	bl	800ad5a <vListInsertEnd>
 800cc0a:	e004      	b.n	800cc16 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc0c:	4b0a      	ldr	r3, [pc, #40]	; (800cc38 <xTaskPriorityInherit+0xc4>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cc16:	2301      	movs	r3, #1
 800cc18:	60fb      	str	r3, [r7, #12]
 800cc1a:	e008      	b.n	800cc2e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc20:	4b05      	ldr	r3, [pc, #20]	; (800cc38 <xTaskPriorityInherit+0xc4>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d201      	bcs.n	800cc2e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
	}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	24004d48 	.word	0x24004d48
 800cc3c:	24004d4c 	.word	0x24004d4c
 800cc40:	24005224 	.word	0x24005224

0800cc44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc50:	2300      	movs	r3, #0
 800cc52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d056      	beq.n	800cd08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc5a:	4b2e      	ldr	r3, [pc, #184]	; (800cd14 <xTaskPriorityDisinherit+0xd0>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	693a      	ldr	r2, [r7, #16]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d00a      	beq.n	800cc7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	60fb      	str	r3, [r7, #12]
}
 800cc76:	bf00      	nop
 800cc78:	e7fe      	b.n	800cc78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10a      	bne.n	800cc98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	60bb      	str	r3, [r7, #8]
}
 800cc94:	bf00      	nop
 800cc96:	e7fe      	b.n	800cc96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc9c:	1e5a      	subs	r2, r3, #1
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d02c      	beq.n	800cd08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d128      	bne.n	800cd08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	3304      	adds	r3, #4
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fe f8aa 	bl	800ae14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cccc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd8:	4b0f      	ldr	r3, [pc, #60]	; (800cd18 <xTaskPriorityDisinherit+0xd4>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d903      	bls.n	800cce8 <xTaskPriorityDisinherit+0xa4>
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce4:	4a0c      	ldr	r2, [pc, #48]	; (800cd18 <xTaskPriorityDisinherit+0xd4>)
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccec:	4613      	mov	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4413      	add	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4a09      	ldr	r2, [pc, #36]	; (800cd1c <xTaskPriorityDisinherit+0xd8>)
 800ccf6:	441a      	add	r2, r3
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	4610      	mov	r0, r2
 800cd00:	f7fe f82b 	bl	800ad5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd04:	2301      	movs	r3, #1
 800cd06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd08:	697b      	ldr	r3, [r7, #20]
	}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3718      	adds	r7, #24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	24004d48 	.word	0x24004d48
 800cd18:	24005224 	.word	0x24005224
 800cd1c:	24004d4c 	.word	0x24004d4c

0800cd20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b088      	sub	sp, #32
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d06a      	beq.n	800ce0e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10a      	bne.n	800cd56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	60fb      	str	r3, [r7, #12]
}
 800cd52:	bf00      	nop
 800cd54:	e7fe      	b.n	800cd54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d902      	bls.n	800cd66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	61fb      	str	r3, [r7, #28]
 800cd64:	e002      	b.n	800cd6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	69fa      	ldr	r2, [r7, #28]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d04b      	beq.n	800ce0e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d146      	bne.n	800ce0e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cd80:	4b25      	ldr	r3, [pc, #148]	; (800ce18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	69ba      	ldr	r2, [r7, #24]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d10a      	bne.n	800cda0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	60bb      	str	r3, [r7, #8]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	69fa      	ldr	r2, [r7, #28]
 800cdaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	699b      	ldr	r3, [r3, #24]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	db04      	blt.n	800cdbe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	6959      	ldr	r1, [r3, #20]
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4a13      	ldr	r2, [pc, #76]	; (800ce1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cdce:	4413      	add	r3, r2
 800cdd0:	4299      	cmp	r1, r3
 800cdd2:	d11c      	bne.n	800ce0e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fe f81b 	bl	800ae14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde2:	4b0f      	ldr	r3, [pc, #60]	; (800ce20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d903      	bls.n	800cdf2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdee:	4a0c      	ldr	r2, [pc, #48]	; (800ce20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cdf0:	6013      	str	r3, [r2, #0]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4a07      	ldr	r2, [pc, #28]	; (800ce1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ce00:	441a      	add	r2, r3
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	3304      	adds	r3, #4
 800ce06:	4619      	mov	r1, r3
 800ce08:	4610      	mov	r0, r2
 800ce0a:	f7fd ffa6 	bl	800ad5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce0e:	bf00      	nop
 800ce10:	3720      	adds	r7, #32
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	24004d48 	.word	0x24004d48
 800ce1c:	24004d4c 	.word	0x24004d4c
 800ce20:	24005224 	.word	0x24005224

0800ce24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ce24:	b480      	push	{r7}
 800ce26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ce28:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d004      	beq.n	800ce3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ce30:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ce36:	3201      	adds	r2, #1
 800ce38:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800ce3a:	4b03      	ldr	r3, [pc, #12]	; (800ce48 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
	}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	24004d48 	.word	0x24004d48

0800ce4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce56:	4b21      	ldr	r3, [pc, #132]	; (800cedc <prvAddCurrentTaskToDelayedList+0x90>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce5c:	4b20      	ldr	r3, [pc, #128]	; (800cee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	3304      	adds	r3, #4
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fd ffd6 	bl	800ae14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce6e:	d10a      	bne.n	800ce86 <prvAddCurrentTaskToDelayedList+0x3a>
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d007      	beq.n	800ce86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce76:	4b1a      	ldr	r3, [pc, #104]	; (800cee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3304      	adds	r3, #4
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	4819      	ldr	r0, [pc, #100]	; (800cee4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ce80:	f7fd ff6b 	bl	800ad5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce84:	e026      	b.n	800ced4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce8e:	4b14      	ldr	r3, [pc, #80]	; (800cee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68ba      	ldr	r2, [r7, #8]
 800ce94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d209      	bcs.n	800ceb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce9e:	4b12      	ldr	r3, [pc, #72]	; (800cee8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	4b0f      	ldr	r3, [pc, #60]	; (800cee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3304      	adds	r3, #4
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4610      	mov	r0, r2
 800ceac:	f7fd ff79 	bl	800ada2 <vListInsert>
}
 800ceb0:	e010      	b.n	800ced4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ceb2:	4b0e      	ldr	r3, [pc, #56]	; (800ceec <prvAddCurrentTaskToDelayedList+0xa0>)
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	4b0a      	ldr	r3, [pc, #40]	; (800cee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3304      	adds	r3, #4
 800cebc:	4619      	mov	r1, r3
 800cebe:	4610      	mov	r0, r2
 800cec0:	f7fd ff6f 	bl	800ada2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cec4:	4b0a      	ldr	r3, [pc, #40]	; (800cef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d202      	bcs.n	800ced4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cece:	4a08      	ldr	r2, [pc, #32]	; (800cef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	6013      	str	r3, [r2, #0]
}
 800ced4:	bf00      	nop
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	24005220 	.word	0x24005220
 800cee0:	24004d48 	.word	0x24004d48
 800cee4:	24005208 	.word	0x24005208
 800cee8:	240051d8 	.word	0x240051d8
 800ceec:	240051d4 	.word	0x240051d4
 800cef0:	2400523c 	.word	0x2400523c

0800cef4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b08a      	sub	sp, #40	; 0x28
 800cef8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cefa:	2300      	movs	r3, #0
 800cefc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cefe:	f000 fb07 	bl	800d510 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cf02:	4b1c      	ldr	r3, [pc, #112]	; (800cf74 <xTimerCreateTimerTask+0x80>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d021      	beq.n	800cf4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cf12:	1d3a      	adds	r2, r7, #4
 800cf14:	f107 0108 	add.w	r1, r7, #8
 800cf18:	f107 030c 	add.w	r3, r7, #12
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fd fed5 	bl	800accc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cf22:	6879      	ldr	r1, [r7, #4]
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	9202      	str	r2, [sp, #8]
 800cf2a:	9301      	str	r3, [sp, #4]
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	2300      	movs	r3, #0
 800cf32:	460a      	mov	r2, r1
 800cf34:	4910      	ldr	r1, [pc, #64]	; (800cf78 <xTimerCreateTimerTask+0x84>)
 800cf36:	4811      	ldr	r0, [pc, #68]	; (800cf7c <xTimerCreateTimerTask+0x88>)
 800cf38:	f7fe ffa4 	bl	800be84 <xTaskCreateStatic>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	4a10      	ldr	r2, [pc, #64]	; (800cf80 <xTimerCreateTimerTask+0x8c>)
 800cf40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cf42:	4b0f      	ldr	r3, [pc, #60]	; (800cf80 <xTimerCreateTimerTask+0x8c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d10a      	bne.n	800cf6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	613b      	str	r3, [r7, #16]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cf6a:	697b      	ldr	r3, [r7, #20]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3718      	adds	r7, #24
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	24005278 	.word	0x24005278
 800cf78:	0800dd68 	.word	0x0800dd68
 800cf7c:	0800d0b9 	.word	0x0800d0b9
 800cf80:	2400527c 	.word	0x2400527c

0800cf84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b08a      	sub	sp, #40	; 0x28
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10a      	bne.n	800cfb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	623b      	str	r3, [r7, #32]
}
 800cfae:	bf00      	nop
 800cfb0:	e7fe      	b.n	800cfb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cfb2:	4b1a      	ldr	r3, [pc, #104]	; (800d01c <xTimerGenericCommand+0x98>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d02a      	beq.n	800d010 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	2b05      	cmp	r3, #5
 800cfca:	dc18      	bgt.n	800cffe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cfcc:	f7ff fdb4 	bl	800cb38 <xTaskGetSchedulerState>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d109      	bne.n	800cfea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cfd6:	4b11      	ldr	r3, [pc, #68]	; (800d01c <xTimerGenericCommand+0x98>)
 800cfd8:	6818      	ldr	r0, [r3, #0]
 800cfda:	f107 0110 	add.w	r1, r7, #16
 800cfde:	2300      	movs	r3, #0
 800cfe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfe2:	f7fe f8e9 	bl	800b1b8 <xQueueGenericSend>
 800cfe6:	6278      	str	r0, [r7, #36]	; 0x24
 800cfe8:	e012      	b.n	800d010 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cfea:	4b0c      	ldr	r3, [pc, #48]	; (800d01c <xTimerGenericCommand+0x98>)
 800cfec:	6818      	ldr	r0, [r3, #0]
 800cfee:	f107 0110 	add.w	r1, r7, #16
 800cff2:	2300      	movs	r3, #0
 800cff4:	2200      	movs	r2, #0
 800cff6:	f7fe f8df 	bl	800b1b8 <xQueueGenericSend>
 800cffa:	6278      	str	r0, [r7, #36]	; 0x24
 800cffc:	e008      	b.n	800d010 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cffe:	4b07      	ldr	r3, [pc, #28]	; (800d01c <xTimerGenericCommand+0x98>)
 800d000:	6818      	ldr	r0, [r3, #0]
 800d002:	f107 0110 	add.w	r1, r7, #16
 800d006:	2300      	movs	r3, #0
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	f7fe f9d3 	bl	800b3b4 <xQueueGenericSendFromISR>
 800d00e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d012:	4618      	mov	r0, r3
 800d014:	3728      	adds	r7, #40	; 0x28
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	24005278 	.word	0x24005278

0800d020 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b088      	sub	sp, #32
 800d024:	af02      	add	r7, sp, #8
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d02a:	4b22      	ldr	r3, [pc, #136]	; (800d0b4 <prvProcessExpiredTimer+0x94>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	3304      	adds	r3, #4
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fd feeb 	bl	800ae14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d044:	f003 0304 	and.w	r3, r3, #4
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d022      	beq.n	800d092 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	699a      	ldr	r2, [r3, #24]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	18d1      	adds	r1, r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	6978      	ldr	r0, [r7, #20]
 800d05a:	f000 f8d1 	bl	800d200 <prvInsertTimerInActiveList>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d01f      	beq.n	800d0a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d064:	2300      	movs	r3, #0
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	2300      	movs	r3, #0
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	2100      	movs	r1, #0
 800d06e:	6978      	ldr	r0, [r7, #20]
 800d070:	f7ff ff88 	bl	800cf84 <xTimerGenericCommand>
 800d074:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d113      	bne.n	800d0a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	60fb      	str	r3, [r7, #12]
}
 800d08e:	bf00      	nop
 800d090:	e7fe      	b.n	800d090 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d098:	f023 0301 	bic.w	r3, r3, #1
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	6a1b      	ldr	r3, [r3, #32]
 800d0a8:	6978      	ldr	r0, [r7, #20]
 800d0aa:	4798      	blx	r3
}
 800d0ac:	bf00      	nop
 800d0ae:	3718      	adds	r7, #24
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	24005270 	.word	0x24005270

0800d0b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0c0:	f107 0308 	add.w	r3, r7, #8
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 f857 	bl	800d178 <prvGetNextExpireTime>
 800d0ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f000 f803 	bl	800d0dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d0d6:	f000 f8d5 	bl	800d284 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d0da:	e7f1      	b.n	800d0c0 <prvTimerTask+0x8>

0800d0dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d0e6:	f7ff f929 	bl	800c33c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0ea:	f107 0308 	add.w	r3, r7, #8
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 f866 	bl	800d1c0 <prvSampleTimeNow>
 800d0f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d130      	bne.n	800d15e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d10a      	bne.n	800d118 <prvProcessTimerOrBlockTask+0x3c>
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	429a      	cmp	r2, r3
 800d108:	d806      	bhi.n	800d118 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d10a:	f7ff f925 	bl	800c358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d10e:	68f9      	ldr	r1, [r7, #12]
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7ff ff85 	bl	800d020 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d116:	e024      	b.n	800d162 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d008      	beq.n	800d130 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d11e:	4b13      	ldr	r3, [pc, #76]	; (800d16c <prvProcessTimerOrBlockTask+0x90>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d101      	bne.n	800d12c <prvProcessTimerOrBlockTask+0x50>
 800d128:	2301      	movs	r3, #1
 800d12a:	e000      	b.n	800d12e <prvProcessTimerOrBlockTask+0x52>
 800d12c:	2300      	movs	r3, #0
 800d12e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d130:	4b0f      	ldr	r3, [pc, #60]	; (800d170 <prvProcessTimerOrBlockTask+0x94>)
 800d132:	6818      	ldr	r0, [r3, #0]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	683a      	ldr	r2, [r7, #0]
 800d13c:	4619      	mov	r1, r3
 800d13e:	f7fe fe6d 	bl	800be1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d142:	f7ff f909 	bl	800c358 <xTaskResumeAll>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10a      	bne.n	800d162 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d14c:	4b09      	ldr	r3, [pc, #36]	; (800d174 <prvProcessTimerOrBlockTask+0x98>)
 800d14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	f3bf 8f6f 	isb	sy
}
 800d15c:	e001      	b.n	800d162 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d15e:	f7ff f8fb 	bl	800c358 <xTaskResumeAll>
}
 800d162:	bf00      	nop
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	24005274 	.word	0x24005274
 800d170:	24005278 	.word	0x24005278
 800d174:	e000ed04 	.word	0xe000ed04

0800d178 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d180:	4b0e      	ldr	r3, [pc, #56]	; (800d1bc <prvGetNextExpireTime+0x44>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d101      	bne.n	800d18e <prvGetNextExpireTime+0x16>
 800d18a:	2201      	movs	r2, #1
 800d18c:	e000      	b.n	800d190 <prvGetNextExpireTime+0x18>
 800d18e:	2200      	movs	r2, #0
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d105      	bne.n	800d1a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d19c:	4b07      	ldr	r3, [pc, #28]	; (800d1bc <prvGetNextExpireTime+0x44>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	60fb      	str	r3, [r7, #12]
 800d1a6:	e001      	b.n	800d1ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3714      	adds	r7, #20
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	24005270 	.word	0x24005270

0800d1c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d1c8:	f7ff f964 	bl	800c494 <xTaskGetTickCount>
 800d1cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d1ce:	4b0b      	ldr	r3, [pc, #44]	; (800d1fc <prvSampleTimeNow+0x3c>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d205      	bcs.n	800d1e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d1d8:	f000 f936 	bl	800d448 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	601a      	str	r2, [r3, #0]
 800d1e2:	e002      	b.n	800d1ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d1ea:	4a04      	ldr	r2, [pc, #16]	; (800d1fc <prvSampleTimeNow+0x3c>)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	24005280 	.word	0x24005280

0800d200 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af00      	add	r7, sp, #0
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	607a      	str	r2, [r7, #4]
 800d20c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d20e:	2300      	movs	r3, #0
 800d210:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	68ba      	ldr	r2, [r7, #8]
 800d216:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	429a      	cmp	r2, r3
 800d224:	d812      	bhi.n	800d24c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	1ad2      	subs	r2, r2, r3
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	699b      	ldr	r3, [r3, #24]
 800d230:	429a      	cmp	r2, r3
 800d232:	d302      	bcc.n	800d23a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d234:	2301      	movs	r3, #1
 800d236:	617b      	str	r3, [r7, #20]
 800d238:	e01b      	b.n	800d272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d23a:	4b10      	ldr	r3, [pc, #64]	; (800d27c <prvInsertTimerInActiveList+0x7c>)
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3304      	adds	r3, #4
 800d242:	4619      	mov	r1, r3
 800d244:	4610      	mov	r0, r2
 800d246:	f7fd fdac 	bl	800ada2 <vListInsert>
 800d24a:	e012      	b.n	800d272 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	429a      	cmp	r2, r3
 800d252:	d206      	bcs.n	800d262 <prvInsertTimerInActiveList+0x62>
 800d254:	68ba      	ldr	r2, [r7, #8]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d302      	bcc.n	800d262 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d25c:	2301      	movs	r3, #1
 800d25e:	617b      	str	r3, [r7, #20]
 800d260:	e007      	b.n	800d272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d262:	4b07      	ldr	r3, [pc, #28]	; (800d280 <prvInsertTimerInActiveList+0x80>)
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	3304      	adds	r3, #4
 800d26a:	4619      	mov	r1, r3
 800d26c:	4610      	mov	r0, r2
 800d26e:	f7fd fd98 	bl	800ada2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d272:	697b      	ldr	r3, [r7, #20]
}
 800d274:	4618      	mov	r0, r3
 800d276:	3718      	adds	r7, #24
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	24005274 	.word	0x24005274
 800d280:	24005270 	.word	0x24005270

0800d284 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b08e      	sub	sp, #56	; 0x38
 800d288:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d28a:	e0ca      	b.n	800d422 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	da18      	bge.n	800d2c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d292:	1d3b      	adds	r3, r7, #4
 800d294:	3304      	adds	r3, #4
 800d296:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10a      	bne.n	800d2b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	61fb      	str	r3, [r7, #28]
}
 800d2b0:	bf00      	nop
 800d2b2:	e7fe      	b.n	800d2b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2ba:	6850      	ldr	r0, [r2, #4]
 800d2bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2be:	6892      	ldr	r2, [r2, #8]
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f2c0 80aa 	blt.w	800d420 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d2:	695b      	ldr	r3, [r3, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d004      	beq.n	800d2e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2da:	3304      	adds	r3, #4
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fd fd99 	bl	800ae14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2e2:	463b      	mov	r3, r7
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7ff ff6b 	bl	800d1c0 <prvSampleTimeNow>
 800d2ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b09      	cmp	r3, #9
 800d2f0:	f200 8097 	bhi.w	800d422 <prvProcessReceivedCommands+0x19e>
 800d2f4:	a201      	add	r2, pc, #4	; (adr r2, 800d2fc <prvProcessReceivedCommands+0x78>)
 800d2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2fa:	bf00      	nop
 800d2fc:	0800d325 	.word	0x0800d325
 800d300:	0800d325 	.word	0x0800d325
 800d304:	0800d325 	.word	0x0800d325
 800d308:	0800d399 	.word	0x0800d399
 800d30c:	0800d3ad 	.word	0x0800d3ad
 800d310:	0800d3f7 	.word	0x0800d3f7
 800d314:	0800d325 	.word	0x0800d325
 800d318:	0800d325 	.word	0x0800d325
 800d31c:	0800d399 	.word	0x0800d399
 800d320:	0800d3ad 	.word	0x0800d3ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d32a:	f043 0301 	orr.w	r3, r3, #1
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	18d1      	adds	r1, r2, r3
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d344:	f7ff ff5c 	bl	800d200 <prvInsertTimerInActiveList>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d069      	beq.n	800d422 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d354:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d35c:	f003 0304 	and.w	r3, r3, #4
 800d360:	2b00      	cmp	r3, #0
 800d362:	d05e      	beq.n	800d422 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d368:	699b      	ldr	r3, [r3, #24]
 800d36a:	441a      	add	r2, r3
 800d36c:	2300      	movs	r3, #0
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	2300      	movs	r3, #0
 800d372:	2100      	movs	r1, #0
 800d374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d376:	f7ff fe05 	bl	800cf84 <xTimerGenericCommand>
 800d37a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d14f      	bne.n	800d422 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	61bb      	str	r3, [r7, #24]
}
 800d394:	bf00      	nop
 800d396:	e7fe      	b.n	800d396 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d39e:	f023 0301 	bic.w	r3, r3, #1
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d3aa:	e03a      	b.n	800d422 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3b2:	f043 0301 	orr.w	r3, r3, #1
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	699b      	ldr	r3, [r3, #24]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10a      	bne.n	800d3e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d0:	f383 8811 	msr	BASEPRI, r3
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	617b      	str	r3, [r7, #20]
}
 800d3de:	bf00      	nop
 800d3e0:	e7fe      	b.n	800d3e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e4:	699a      	ldr	r2, [r3, #24]
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e8:	18d1      	adds	r1, r2, r3
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3f0:	f7ff ff06 	bl	800d200 <prvInsertTimerInActiveList>
					break;
 800d3f4:	e015      	b.n	800d422 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3fc:	f003 0302 	and.w	r3, r3, #2
 800d400:	2b00      	cmp	r3, #0
 800d402:	d103      	bne.n	800d40c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d406:	f000 fb55 	bl	800dab4 <vPortFree>
 800d40a:	e00a      	b.n	800d422 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d412:	f023 0301 	bic.w	r3, r3, #1
 800d416:	b2da      	uxtb	r2, r3
 800d418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d41e:	e000      	b.n	800d422 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d420:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d422:	4b08      	ldr	r3, [pc, #32]	; (800d444 <prvProcessReceivedCommands+0x1c0>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	1d39      	adds	r1, r7, #4
 800d428:	2200      	movs	r2, #0
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fe f8ea 	bl	800b604 <xQueueReceive>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	f47f af2a 	bne.w	800d28c <prvProcessReceivedCommands+0x8>
	}
}
 800d438:	bf00      	nop
 800d43a:	bf00      	nop
 800d43c:	3730      	adds	r7, #48	; 0x30
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	24005278 	.word	0x24005278

0800d448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d44e:	e048      	b.n	800d4e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d450:	4b2d      	ldr	r3, [pc, #180]	; (800d508 <prvSwitchTimerLists+0xc0>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d45a:	4b2b      	ldr	r3, [pc, #172]	; (800d508 <prvSwitchTimerLists+0xc0>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	3304      	adds	r3, #4
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fd fcd3 	bl	800ae14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d47c:	f003 0304 	and.w	r3, r3, #4
 800d480:	2b00      	cmp	r3, #0
 800d482:	d02e      	beq.n	800d4e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	699b      	ldr	r3, [r3, #24]
 800d488:	693a      	ldr	r2, [r7, #16]
 800d48a:	4413      	add	r3, r2
 800d48c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d48e:	68ba      	ldr	r2, [r7, #8]
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	429a      	cmp	r2, r3
 800d494:	d90e      	bls.n	800d4b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	68ba      	ldr	r2, [r7, #8]
 800d49a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68fa      	ldr	r2, [r7, #12]
 800d4a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4a2:	4b19      	ldr	r3, [pc, #100]	; (800d508 <prvSwitchTimerLists+0xc0>)
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	3304      	adds	r3, #4
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	4610      	mov	r0, r2
 800d4ae:	f7fd fc78 	bl	800ada2 <vListInsert>
 800d4b2:	e016      	b.n	800d4e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	693a      	ldr	r2, [r7, #16]
 800d4bc:	2100      	movs	r1, #0
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f7ff fd60 	bl	800cf84 <xTimerGenericCommand>
 800d4c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	603b      	str	r3, [r7, #0]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d4e2:	4b09      	ldr	r3, [pc, #36]	; (800d508 <prvSwitchTimerLists+0xc0>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1b1      	bne.n	800d450 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d4ec:	4b06      	ldr	r3, [pc, #24]	; (800d508 <prvSwitchTimerLists+0xc0>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d4f2:	4b06      	ldr	r3, [pc, #24]	; (800d50c <prvSwitchTimerLists+0xc4>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a04      	ldr	r2, [pc, #16]	; (800d508 <prvSwitchTimerLists+0xc0>)
 800d4f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d4fa:	4a04      	ldr	r2, [pc, #16]	; (800d50c <prvSwitchTimerLists+0xc4>)
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	6013      	str	r3, [r2, #0]
}
 800d500:	bf00      	nop
 800d502:	3718      	adds	r7, #24
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	24005270 	.word	0x24005270
 800d50c:	24005274 	.word	0x24005274

0800d510 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d516:	f000 f965 	bl	800d7e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d51a:	4b15      	ldr	r3, [pc, #84]	; (800d570 <prvCheckForValidListAndQueue+0x60>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d120      	bne.n	800d564 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d522:	4814      	ldr	r0, [pc, #80]	; (800d574 <prvCheckForValidListAndQueue+0x64>)
 800d524:	f7fd fbec 	bl	800ad00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d528:	4813      	ldr	r0, [pc, #76]	; (800d578 <prvCheckForValidListAndQueue+0x68>)
 800d52a:	f7fd fbe9 	bl	800ad00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d52e:	4b13      	ldr	r3, [pc, #76]	; (800d57c <prvCheckForValidListAndQueue+0x6c>)
 800d530:	4a10      	ldr	r2, [pc, #64]	; (800d574 <prvCheckForValidListAndQueue+0x64>)
 800d532:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d534:	4b12      	ldr	r3, [pc, #72]	; (800d580 <prvCheckForValidListAndQueue+0x70>)
 800d536:	4a10      	ldr	r2, [pc, #64]	; (800d578 <prvCheckForValidListAndQueue+0x68>)
 800d538:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d53a:	2300      	movs	r3, #0
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	4b11      	ldr	r3, [pc, #68]	; (800d584 <prvCheckForValidListAndQueue+0x74>)
 800d540:	4a11      	ldr	r2, [pc, #68]	; (800d588 <prvCheckForValidListAndQueue+0x78>)
 800d542:	2110      	movs	r1, #16
 800d544:	200a      	movs	r0, #10
 800d546:	f7fd fcf7 	bl	800af38 <xQueueGenericCreateStatic>
 800d54a:	4603      	mov	r3, r0
 800d54c:	4a08      	ldr	r2, [pc, #32]	; (800d570 <prvCheckForValidListAndQueue+0x60>)
 800d54e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d550:	4b07      	ldr	r3, [pc, #28]	; (800d570 <prvCheckForValidListAndQueue+0x60>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d005      	beq.n	800d564 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d558:	4b05      	ldr	r3, [pc, #20]	; (800d570 <prvCheckForValidListAndQueue+0x60>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	490b      	ldr	r1, [pc, #44]	; (800d58c <prvCheckForValidListAndQueue+0x7c>)
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fe fc08 	bl	800bd74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d564:	f000 f96e 	bl	800d844 <vPortExitCritical>
}
 800d568:	bf00      	nop
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	24005278 	.word	0x24005278
 800d574:	24005248 	.word	0x24005248
 800d578:	2400525c 	.word	0x2400525c
 800d57c:	24005270 	.word	0x24005270
 800d580:	24005274 	.word	0x24005274
 800d584:	24005324 	.word	0x24005324
 800d588:	24005284 	.word	0x24005284
 800d58c:	0800dd70 	.word	0x0800dd70

0800d590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	3b04      	subs	r3, #4
 800d5a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d5a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	3b04      	subs	r3, #4
 800d5ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	f023 0201 	bic.w	r2, r3, #1
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	3b04      	subs	r3, #4
 800d5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5c0:	4a0c      	ldr	r2, [pc, #48]	; (800d5f4 <pxPortInitialiseStack+0x64>)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	3b14      	subs	r3, #20
 800d5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	3b04      	subs	r3, #4
 800d5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f06f 0202 	mvn.w	r2, #2
 800d5de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	3b20      	subs	r3, #32
 800d5e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3714      	adds	r7, #20
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr
 800d5f4:	0800d5f9 	.word	0x0800d5f9

0800d5f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d5fe:	2300      	movs	r3, #0
 800d600:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d602:	4b12      	ldr	r3, [pc, #72]	; (800d64c <prvTaskExitError+0x54>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60a:	d00a      	beq.n	800d622 <prvTaskExitError+0x2a>
	__asm volatile
 800d60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d610:	f383 8811 	msr	BASEPRI, r3
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	60fb      	str	r3, [r7, #12]
}
 800d61e:	bf00      	nop
 800d620:	e7fe      	b.n	800d620 <prvTaskExitError+0x28>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	60bb      	str	r3, [r7, #8]
}
 800d634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d636:	bf00      	nop
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d0fc      	beq.n	800d638 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d63e:	bf00      	nop
 800d640:	bf00      	nop
 800d642:	3714      	adds	r7, #20
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	2400002c 	.word	0x2400002c

0800d650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d650:	4b07      	ldr	r3, [pc, #28]	; (800d670 <pxCurrentTCBConst2>)
 800d652:	6819      	ldr	r1, [r3, #0]
 800d654:	6808      	ldr	r0, [r1, #0]
 800d656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65a:	f380 8809 	msr	PSP, r0
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	f04f 0000 	mov.w	r0, #0
 800d666:	f380 8811 	msr	BASEPRI, r0
 800d66a:	4770      	bx	lr
 800d66c:	f3af 8000 	nop.w

0800d670 <pxCurrentTCBConst2>:
 800d670:	24004d48 	.word	0x24004d48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d674:	bf00      	nop
 800d676:	bf00      	nop

0800d678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d678:	4808      	ldr	r0, [pc, #32]	; (800d69c <prvPortStartFirstTask+0x24>)
 800d67a:	6800      	ldr	r0, [r0, #0]
 800d67c:	6800      	ldr	r0, [r0, #0]
 800d67e:	f380 8808 	msr	MSP, r0
 800d682:	f04f 0000 	mov.w	r0, #0
 800d686:	f380 8814 	msr	CONTROL, r0
 800d68a:	b662      	cpsie	i
 800d68c:	b661      	cpsie	f
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	df00      	svc	0
 800d698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d69a:	bf00      	nop
 800d69c:	e000ed08 	.word	0xe000ed08

0800d6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d6a6:	4b46      	ldr	r3, [pc, #280]	; (800d7c0 <xPortStartScheduler+0x120>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a46      	ldr	r2, [pc, #280]	; (800d7c4 <xPortStartScheduler+0x124>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d10a      	bne.n	800d6c6 <xPortStartScheduler+0x26>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	613b      	str	r3, [r7, #16]
}
 800d6c2:	bf00      	nop
 800d6c4:	e7fe      	b.n	800d6c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d6c6:	4b3e      	ldr	r3, [pc, #248]	; (800d7c0 <xPortStartScheduler+0x120>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a3f      	ldr	r2, [pc, #252]	; (800d7c8 <xPortStartScheduler+0x128>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d10a      	bne.n	800d6e6 <xPortStartScheduler+0x46>
	__asm volatile
 800d6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	60fb      	str	r3, [r7, #12]
}
 800d6e2:	bf00      	nop
 800d6e4:	e7fe      	b.n	800d6e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d6e6:	4b39      	ldr	r3, [pc, #228]	; (800d7cc <xPortStartScheduler+0x12c>)
 800d6e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	22ff      	movs	r2, #255	; 0xff
 800d6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d700:	78fb      	ldrb	r3, [r7, #3]
 800d702:	b2db      	uxtb	r3, r3
 800d704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d708:	b2da      	uxtb	r2, r3
 800d70a:	4b31      	ldr	r3, [pc, #196]	; (800d7d0 <xPortStartScheduler+0x130>)
 800d70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d70e:	4b31      	ldr	r3, [pc, #196]	; (800d7d4 <xPortStartScheduler+0x134>)
 800d710:	2207      	movs	r2, #7
 800d712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d714:	e009      	b.n	800d72a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d716:	4b2f      	ldr	r3, [pc, #188]	; (800d7d4 <xPortStartScheduler+0x134>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	3b01      	subs	r3, #1
 800d71c:	4a2d      	ldr	r2, [pc, #180]	; (800d7d4 <xPortStartScheduler+0x134>)
 800d71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d720:	78fb      	ldrb	r3, [r7, #3]
 800d722:	b2db      	uxtb	r3, r3
 800d724:	005b      	lsls	r3, r3, #1
 800d726:	b2db      	uxtb	r3, r3
 800d728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d72a:	78fb      	ldrb	r3, [r7, #3]
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d732:	2b80      	cmp	r3, #128	; 0x80
 800d734:	d0ef      	beq.n	800d716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d736:	4b27      	ldr	r3, [pc, #156]	; (800d7d4 <xPortStartScheduler+0x134>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f1c3 0307 	rsb	r3, r3, #7
 800d73e:	2b04      	cmp	r3, #4
 800d740:	d00a      	beq.n	800d758 <xPortStartScheduler+0xb8>
	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	60bb      	str	r3, [r7, #8]
}
 800d754:	bf00      	nop
 800d756:	e7fe      	b.n	800d756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d758:	4b1e      	ldr	r3, [pc, #120]	; (800d7d4 <xPortStartScheduler+0x134>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	021b      	lsls	r3, r3, #8
 800d75e:	4a1d      	ldr	r2, [pc, #116]	; (800d7d4 <xPortStartScheduler+0x134>)
 800d760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d762:	4b1c      	ldr	r3, [pc, #112]	; (800d7d4 <xPortStartScheduler+0x134>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d76a:	4a1a      	ldr	r2, [pc, #104]	; (800d7d4 <xPortStartScheduler+0x134>)
 800d76c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	b2da      	uxtb	r2, r3
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d776:	4b18      	ldr	r3, [pc, #96]	; (800d7d8 <xPortStartScheduler+0x138>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a17      	ldr	r2, [pc, #92]	; (800d7d8 <xPortStartScheduler+0x138>)
 800d77c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d782:	4b15      	ldr	r3, [pc, #84]	; (800d7d8 <xPortStartScheduler+0x138>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4a14      	ldr	r2, [pc, #80]	; (800d7d8 <xPortStartScheduler+0x138>)
 800d788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d78c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d78e:	f000 f8dd 	bl	800d94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d792:	4b12      	ldr	r3, [pc, #72]	; (800d7dc <xPortStartScheduler+0x13c>)
 800d794:	2200      	movs	r2, #0
 800d796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d798:	f000 f8fc 	bl	800d994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d79c:	4b10      	ldr	r3, [pc, #64]	; (800d7e0 <xPortStartScheduler+0x140>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a0f      	ldr	r2, [pc, #60]	; (800d7e0 <xPortStartScheduler+0x140>)
 800d7a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7a8:	f7ff ff66 	bl	800d678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d7ac:	f7fe ff4e 	bl	800c64c <vTaskSwitchContext>
	prvTaskExitError();
 800d7b0:	f7ff ff22 	bl	800d5f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3718      	adds	r7, #24
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	e000ed00 	.word	0xe000ed00
 800d7c4:	410fc271 	.word	0x410fc271
 800d7c8:	410fc270 	.word	0x410fc270
 800d7cc:	e000e400 	.word	0xe000e400
 800d7d0:	24005374 	.word	0x24005374
 800d7d4:	24005378 	.word	0x24005378
 800d7d8:	e000ed20 	.word	0xe000ed20
 800d7dc:	2400002c 	.word	0x2400002c
 800d7e0:	e000ef34 	.word	0xe000ef34

0800d7e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
	__asm volatile
 800d7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	607b      	str	r3, [r7, #4]
}
 800d7fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d7fe:	4b0f      	ldr	r3, [pc, #60]	; (800d83c <vPortEnterCritical+0x58>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	3301      	adds	r3, #1
 800d804:	4a0d      	ldr	r2, [pc, #52]	; (800d83c <vPortEnterCritical+0x58>)
 800d806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d808:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <vPortEnterCritical+0x58>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d10f      	bne.n	800d830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d810:	4b0b      	ldr	r3, [pc, #44]	; (800d840 <vPortEnterCritical+0x5c>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00a      	beq.n	800d830 <vPortEnterCritical+0x4c>
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	603b      	str	r3, [r7, #0]
}
 800d82c:	bf00      	nop
 800d82e:	e7fe      	b.n	800d82e <vPortEnterCritical+0x4a>
	}
}
 800d830:	bf00      	nop
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	2400002c 	.word	0x2400002c
 800d840:	e000ed04 	.word	0xe000ed04

0800d844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d84a:	4b12      	ldr	r3, [pc, #72]	; (800d894 <vPortExitCritical+0x50>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10a      	bne.n	800d868 <vPortExitCritical+0x24>
	__asm volatile
 800d852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	607b      	str	r3, [r7, #4]
}
 800d864:	bf00      	nop
 800d866:	e7fe      	b.n	800d866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d868:	4b0a      	ldr	r3, [pc, #40]	; (800d894 <vPortExitCritical+0x50>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	4a09      	ldr	r2, [pc, #36]	; (800d894 <vPortExitCritical+0x50>)
 800d870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d872:	4b08      	ldr	r3, [pc, #32]	; (800d894 <vPortExitCritical+0x50>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d105      	bne.n	800d886 <vPortExitCritical+0x42>
 800d87a:	2300      	movs	r3, #0
 800d87c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	f383 8811 	msr	BASEPRI, r3
}
 800d884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d886:	bf00      	nop
 800d888:	370c      	adds	r7, #12
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	2400002c 	.word	0x2400002c
	...

0800d8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8a0:	f3ef 8009 	mrs	r0, PSP
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	4b15      	ldr	r3, [pc, #84]	; (800d900 <pxCurrentTCBConst>)
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	f01e 0f10 	tst.w	lr, #16
 800d8b0:	bf08      	it	eq
 800d8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ba:	6010      	str	r0, [r2, #0]
 800d8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d8c4:	f380 8811 	msr	BASEPRI, r0
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f7fe febc 	bl	800c64c <vTaskSwitchContext>
 800d8d4:	f04f 0000 	mov.w	r0, #0
 800d8d8:	f380 8811 	msr	BASEPRI, r0
 800d8dc:	bc09      	pop	{r0, r3}
 800d8de:	6819      	ldr	r1, [r3, #0]
 800d8e0:	6808      	ldr	r0, [r1, #0]
 800d8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e6:	f01e 0f10 	tst.w	lr, #16
 800d8ea:	bf08      	it	eq
 800d8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d8f0:	f380 8809 	msr	PSP, r0
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	f3af 8000 	nop.w

0800d900 <pxCurrentTCBConst>:
 800d900:	24004d48 	.word	0x24004d48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d904:	bf00      	nop
 800d906:	bf00      	nop

0800d908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
	__asm volatile
 800d90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	607b      	str	r3, [r7, #4]
}
 800d920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d922:	f7fe fdd9 	bl	800c4d8 <xTaskIncrementTick>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d003      	beq.n	800d934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d92c:	4b06      	ldr	r3, [pc, #24]	; (800d948 <xPortSysTickHandler+0x40>)
 800d92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	2300      	movs	r3, #0
 800d936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	f383 8811 	msr	BASEPRI, r3
}
 800d93e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d940:	bf00      	nop
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	e000ed04 	.word	0xe000ed04

0800d94c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d94c:	b480      	push	{r7}
 800d94e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d950:	4b0b      	ldr	r3, [pc, #44]	; (800d980 <vPortSetupTimerInterrupt+0x34>)
 800d952:	2200      	movs	r2, #0
 800d954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d956:	4b0b      	ldr	r3, [pc, #44]	; (800d984 <vPortSetupTimerInterrupt+0x38>)
 800d958:	2200      	movs	r2, #0
 800d95a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d95c:	4b0a      	ldr	r3, [pc, #40]	; (800d988 <vPortSetupTimerInterrupt+0x3c>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a0a      	ldr	r2, [pc, #40]	; (800d98c <vPortSetupTimerInterrupt+0x40>)
 800d962:	fba2 2303 	umull	r2, r3, r2, r3
 800d966:	099b      	lsrs	r3, r3, #6
 800d968:	4a09      	ldr	r2, [pc, #36]	; (800d990 <vPortSetupTimerInterrupt+0x44>)
 800d96a:	3b01      	subs	r3, #1
 800d96c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d96e:	4b04      	ldr	r3, [pc, #16]	; (800d980 <vPortSetupTimerInterrupt+0x34>)
 800d970:	2207      	movs	r2, #7
 800d972:	601a      	str	r2, [r3, #0]
}
 800d974:	bf00      	nop
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	e000e010 	.word	0xe000e010
 800d984:	e000e018 	.word	0xe000e018
 800d988:	2400001c 	.word	0x2400001c
 800d98c:	10624dd3 	.word	0x10624dd3
 800d990:	e000e014 	.word	0xe000e014

0800d994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d9a4 <vPortEnableVFP+0x10>
 800d998:	6801      	ldr	r1, [r0, #0]
 800d99a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d99e:	6001      	str	r1, [r0, #0]
 800d9a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9a2:	bf00      	nop
 800d9a4:	e000ed88 	.word	0xe000ed88

0800d9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d9ae:	f3ef 8305 	mrs	r3, IPSR
 800d9b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b0f      	cmp	r3, #15
 800d9b8:	d914      	bls.n	800d9e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d9ba:	4a17      	ldr	r2, [pc, #92]	; (800da18 <vPortValidateInterruptPriority+0x70>)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	4413      	add	r3, r2
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d9c4:	4b15      	ldr	r3, [pc, #84]	; (800da1c <vPortValidateInterruptPriority+0x74>)
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	7afa      	ldrb	r2, [r7, #11]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d20a      	bcs.n	800d9e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	607b      	str	r3, [r7, #4]
}
 800d9e0:	bf00      	nop
 800d9e2:	e7fe      	b.n	800d9e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d9e4:	4b0e      	ldr	r3, [pc, #56]	; (800da20 <vPortValidateInterruptPriority+0x78>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d9ec:	4b0d      	ldr	r3, [pc, #52]	; (800da24 <vPortValidateInterruptPriority+0x7c>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d90a      	bls.n	800da0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	603b      	str	r3, [r7, #0]
}
 800da06:	bf00      	nop
 800da08:	e7fe      	b.n	800da08 <vPortValidateInterruptPriority+0x60>
	}
 800da0a:	bf00      	nop
 800da0c:	3714      	adds	r7, #20
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	e000e3f0 	.word	0xe000e3f0
 800da1c:	24005374 	.word	0x24005374
 800da20:	e000ed0c 	.word	0xe000ed0c
 800da24:	24005378 	.word	0x24005378

0800da28 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800da30:	2300      	movs	r3, #0
 800da32:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f003 0307 	and.w	r3, r3, #7
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d004      	beq.n	800da48 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f023 0307 	bic.w	r3, r3, #7
 800da44:	3308      	adds	r3, #8
 800da46:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800da48:	f7fe fc78 	bl	800c33c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800da4c:	4b16      	ldr	r3, [pc, #88]	; (800daa8 <pvPortMalloc+0x80>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d105      	bne.n	800da60 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800da54:	4b15      	ldr	r3, [pc, #84]	; (800daac <pvPortMalloc+0x84>)
 800da56:	f023 0307 	bic.w	r3, r3, #7
 800da5a:	461a      	mov	r2, r3
 800da5c:	4b12      	ldr	r3, [pc, #72]	; (800daa8 <pvPortMalloc+0x80>)
 800da5e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800da60:	4b13      	ldr	r3, [pc, #76]	; (800dab0 <pvPortMalloc+0x88>)
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4413      	add	r3, r2
 800da68:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d813      	bhi.n	800da98 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800da70:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <pvPortMalloc+0x88>)
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	441a      	add	r2, r3
 800da78:	4b0d      	ldr	r3, [pc, #52]	; (800dab0 <pvPortMalloc+0x88>)
 800da7a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d90b      	bls.n	800da98 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800da80:	4b09      	ldr	r3, [pc, #36]	; (800daa8 <pvPortMalloc+0x80>)
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <pvPortMalloc+0x88>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4413      	add	r3, r2
 800da8a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800da8c:	4b08      	ldr	r3, [pc, #32]	; (800dab0 <pvPortMalloc+0x88>)
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	4413      	add	r3, r2
 800da94:	4a06      	ldr	r2, [pc, #24]	; (800dab0 <pvPortMalloc+0x88>)
 800da96:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da98:	f7fe fc5e 	bl	800c358 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800da9c:	68fb      	ldr	r3, [r7, #12]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	24008f80 	.word	0x24008f80
 800daac:	24005384 	.word	0x24005384
 800dab0:	24008f7c 	.word	0x24008f7c

0800dab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00a      	beq.n	800dad8 <vPortFree+0x24>
	__asm volatile
 800dac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac6:	f383 8811 	msr	BASEPRI, r3
 800daca:	f3bf 8f6f 	isb	sy
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	60fb      	str	r3, [r7, #12]
}
 800dad4:	bf00      	nop
 800dad6:	e7fe      	b.n	800dad6 <vPortFree+0x22>
}
 800dad8:	bf00      	nop
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <__libc_init_array>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	4d0d      	ldr	r5, [pc, #52]	; (800db1c <__libc_init_array+0x38>)
 800dae8:	4c0d      	ldr	r4, [pc, #52]	; (800db20 <__libc_init_array+0x3c>)
 800daea:	1b64      	subs	r4, r4, r5
 800daec:	10a4      	asrs	r4, r4, #2
 800daee:	2600      	movs	r6, #0
 800daf0:	42a6      	cmp	r6, r4
 800daf2:	d109      	bne.n	800db08 <__libc_init_array+0x24>
 800daf4:	4d0b      	ldr	r5, [pc, #44]	; (800db24 <__libc_init_array+0x40>)
 800daf6:	4c0c      	ldr	r4, [pc, #48]	; (800db28 <__libc_init_array+0x44>)
 800daf8:	f000 f8f2 	bl	800dce0 <_init>
 800dafc:	1b64      	subs	r4, r4, r5
 800dafe:	10a4      	asrs	r4, r4, #2
 800db00:	2600      	movs	r6, #0
 800db02:	42a6      	cmp	r6, r4
 800db04:	d105      	bne.n	800db12 <__libc_init_array+0x2e>
 800db06:	bd70      	pop	{r4, r5, r6, pc}
 800db08:	f855 3b04 	ldr.w	r3, [r5], #4
 800db0c:	4798      	blx	r3
 800db0e:	3601      	adds	r6, #1
 800db10:	e7ee      	b.n	800daf0 <__libc_init_array+0xc>
 800db12:	f855 3b04 	ldr.w	r3, [r5], #4
 800db16:	4798      	blx	r3
 800db18:	3601      	adds	r6, #1
 800db1a:	e7f2      	b.n	800db02 <__libc_init_array+0x1e>
 800db1c:	0800dee4 	.word	0x0800dee4
 800db20:	0800dee4 	.word	0x0800dee4
 800db24:	0800dee4 	.word	0x0800dee4
 800db28:	0800dee8 	.word	0x0800dee8

0800db2c <__retarget_lock_acquire_recursive>:
 800db2c:	4770      	bx	lr

0800db2e <__retarget_lock_release_recursive>:
 800db2e:	4770      	bx	lr

0800db30 <memcpy>:
 800db30:	440a      	add	r2, r1
 800db32:	4291      	cmp	r1, r2
 800db34:	f100 33ff 	add.w	r3, r0, #4294967295
 800db38:	d100      	bne.n	800db3c <memcpy+0xc>
 800db3a:	4770      	bx	lr
 800db3c:	b510      	push	{r4, lr}
 800db3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db46:	4291      	cmp	r1, r2
 800db48:	d1f9      	bne.n	800db3e <memcpy+0xe>
 800db4a:	bd10      	pop	{r4, pc}

0800db4c <memset>:
 800db4c:	4402      	add	r2, r0
 800db4e:	4603      	mov	r3, r0
 800db50:	4293      	cmp	r3, r2
 800db52:	d100      	bne.n	800db56 <memset+0xa>
 800db54:	4770      	bx	lr
 800db56:	f803 1b01 	strb.w	r1, [r3], #1
 800db5a:	e7f9      	b.n	800db50 <memset+0x4>

0800db5c <cleanup_glue>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	460c      	mov	r4, r1
 800db60:	6809      	ldr	r1, [r1, #0]
 800db62:	4605      	mov	r5, r0
 800db64:	b109      	cbz	r1, 800db6a <cleanup_glue+0xe>
 800db66:	f7ff fff9 	bl	800db5c <cleanup_glue>
 800db6a:	4621      	mov	r1, r4
 800db6c:	4628      	mov	r0, r5
 800db6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db72:	f000 b869 	b.w	800dc48 <_free_r>
	...

0800db78 <_reclaim_reent>:
 800db78:	4b2c      	ldr	r3, [pc, #176]	; (800dc2c <_reclaim_reent+0xb4>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4283      	cmp	r3, r0
 800db7e:	b570      	push	{r4, r5, r6, lr}
 800db80:	4604      	mov	r4, r0
 800db82:	d051      	beq.n	800dc28 <_reclaim_reent+0xb0>
 800db84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800db86:	b143      	cbz	r3, 800db9a <_reclaim_reent+0x22>
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d14a      	bne.n	800dc24 <_reclaim_reent+0xac>
 800db8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db90:	6819      	ldr	r1, [r3, #0]
 800db92:	b111      	cbz	r1, 800db9a <_reclaim_reent+0x22>
 800db94:	4620      	mov	r0, r4
 800db96:	f000 f857 	bl	800dc48 <_free_r>
 800db9a:	6961      	ldr	r1, [r4, #20]
 800db9c:	b111      	cbz	r1, 800dba4 <_reclaim_reent+0x2c>
 800db9e:	4620      	mov	r0, r4
 800dba0:	f000 f852 	bl	800dc48 <_free_r>
 800dba4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dba6:	b111      	cbz	r1, 800dbae <_reclaim_reent+0x36>
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f000 f84d 	bl	800dc48 <_free_r>
 800dbae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dbb0:	b111      	cbz	r1, 800dbb8 <_reclaim_reent+0x40>
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f000 f848 	bl	800dc48 <_free_r>
 800dbb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dbba:	b111      	cbz	r1, 800dbc2 <_reclaim_reent+0x4a>
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f000 f843 	bl	800dc48 <_free_r>
 800dbc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dbc4:	b111      	cbz	r1, 800dbcc <_reclaim_reent+0x54>
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f000 f83e 	bl	800dc48 <_free_r>
 800dbcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dbce:	b111      	cbz	r1, 800dbd6 <_reclaim_reent+0x5e>
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f000 f839 	bl	800dc48 <_free_r>
 800dbd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dbd8:	b111      	cbz	r1, 800dbe0 <_reclaim_reent+0x68>
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f000 f834 	bl	800dc48 <_free_r>
 800dbe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbe2:	b111      	cbz	r1, 800dbea <_reclaim_reent+0x72>
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 f82f 	bl	800dc48 <_free_r>
 800dbea:	69a3      	ldr	r3, [r4, #24]
 800dbec:	b1e3      	cbz	r3, 800dc28 <_reclaim_reent+0xb0>
 800dbee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	4798      	blx	r3
 800dbf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dbf6:	b1b9      	cbz	r1, 800dc28 <_reclaim_reent+0xb0>
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbfe:	f7ff bfad 	b.w	800db5c <cleanup_glue>
 800dc02:	5949      	ldr	r1, [r1, r5]
 800dc04:	b941      	cbnz	r1, 800dc18 <_reclaim_reent+0xa0>
 800dc06:	3504      	adds	r5, #4
 800dc08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc0a:	2d80      	cmp	r5, #128	; 0x80
 800dc0c:	68d9      	ldr	r1, [r3, #12]
 800dc0e:	d1f8      	bne.n	800dc02 <_reclaim_reent+0x8a>
 800dc10:	4620      	mov	r0, r4
 800dc12:	f000 f819 	bl	800dc48 <_free_r>
 800dc16:	e7ba      	b.n	800db8e <_reclaim_reent+0x16>
 800dc18:	680e      	ldr	r6, [r1, #0]
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f000 f814 	bl	800dc48 <_free_r>
 800dc20:	4631      	mov	r1, r6
 800dc22:	e7ef      	b.n	800dc04 <_reclaim_reent+0x8c>
 800dc24:	2500      	movs	r5, #0
 800dc26:	e7ef      	b.n	800dc08 <_reclaim_reent+0x90>
 800dc28:	bd70      	pop	{r4, r5, r6, pc}
 800dc2a:	bf00      	nop
 800dc2c:	24000030 	.word	0x24000030

0800dc30 <__malloc_lock>:
 800dc30:	4801      	ldr	r0, [pc, #4]	; (800dc38 <__malloc_lock+0x8>)
 800dc32:	f7ff bf7b 	b.w	800db2c <__retarget_lock_acquire_recursive>
 800dc36:	bf00      	nop
 800dc38:	24008f84 	.word	0x24008f84

0800dc3c <__malloc_unlock>:
 800dc3c:	4801      	ldr	r0, [pc, #4]	; (800dc44 <__malloc_unlock+0x8>)
 800dc3e:	f7ff bf76 	b.w	800db2e <__retarget_lock_release_recursive>
 800dc42:	bf00      	nop
 800dc44:	24008f84 	.word	0x24008f84

0800dc48 <_free_r>:
 800dc48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc4a:	2900      	cmp	r1, #0
 800dc4c:	d044      	beq.n	800dcd8 <_free_r+0x90>
 800dc4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc52:	9001      	str	r0, [sp, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	f1a1 0404 	sub.w	r4, r1, #4
 800dc5a:	bfb8      	it	lt
 800dc5c:	18e4      	addlt	r4, r4, r3
 800dc5e:	f7ff ffe7 	bl	800dc30 <__malloc_lock>
 800dc62:	4a1e      	ldr	r2, [pc, #120]	; (800dcdc <_free_r+0x94>)
 800dc64:	9801      	ldr	r0, [sp, #4]
 800dc66:	6813      	ldr	r3, [r2, #0]
 800dc68:	b933      	cbnz	r3, 800dc78 <_free_r+0x30>
 800dc6a:	6063      	str	r3, [r4, #4]
 800dc6c:	6014      	str	r4, [r2, #0]
 800dc6e:	b003      	add	sp, #12
 800dc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc74:	f7ff bfe2 	b.w	800dc3c <__malloc_unlock>
 800dc78:	42a3      	cmp	r3, r4
 800dc7a:	d908      	bls.n	800dc8e <_free_r+0x46>
 800dc7c:	6825      	ldr	r5, [r4, #0]
 800dc7e:	1961      	adds	r1, r4, r5
 800dc80:	428b      	cmp	r3, r1
 800dc82:	bf01      	itttt	eq
 800dc84:	6819      	ldreq	r1, [r3, #0]
 800dc86:	685b      	ldreq	r3, [r3, #4]
 800dc88:	1949      	addeq	r1, r1, r5
 800dc8a:	6021      	streq	r1, [r4, #0]
 800dc8c:	e7ed      	b.n	800dc6a <_free_r+0x22>
 800dc8e:	461a      	mov	r2, r3
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	b10b      	cbz	r3, 800dc98 <_free_r+0x50>
 800dc94:	42a3      	cmp	r3, r4
 800dc96:	d9fa      	bls.n	800dc8e <_free_r+0x46>
 800dc98:	6811      	ldr	r1, [r2, #0]
 800dc9a:	1855      	adds	r5, r2, r1
 800dc9c:	42a5      	cmp	r5, r4
 800dc9e:	d10b      	bne.n	800dcb8 <_free_r+0x70>
 800dca0:	6824      	ldr	r4, [r4, #0]
 800dca2:	4421      	add	r1, r4
 800dca4:	1854      	adds	r4, r2, r1
 800dca6:	42a3      	cmp	r3, r4
 800dca8:	6011      	str	r1, [r2, #0]
 800dcaa:	d1e0      	bne.n	800dc6e <_free_r+0x26>
 800dcac:	681c      	ldr	r4, [r3, #0]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	6053      	str	r3, [r2, #4]
 800dcb2:	4421      	add	r1, r4
 800dcb4:	6011      	str	r1, [r2, #0]
 800dcb6:	e7da      	b.n	800dc6e <_free_r+0x26>
 800dcb8:	d902      	bls.n	800dcc0 <_free_r+0x78>
 800dcba:	230c      	movs	r3, #12
 800dcbc:	6003      	str	r3, [r0, #0]
 800dcbe:	e7d6      	b.n	800dc6e <_free_r+0x26>
 800dcc0:	6825      	ldr	r5, [r4, #0]
 800dcc2:	1961      	adds	r1, r4, r5
 800dcc4:	428b      	cmp	r3, r1
 800dcc6:	bf04      	itt	eq
 800dcc8:	6819      	ldreq	r1, [r3, #0]
 800dcca:	685b      	ldreq	r3, [r3, #4]
 800dccc:	6063      	str	r3, [r4, #4]
 800dcce:	bf04      	itt	eq
 800dcd0:	1949      	addeq	r1, r1, r5
 800dcd2:	6021      	streq	r1, [r4, #0]
 800dcd4:	6054      	str	r4, [r2, #4]
 800dcd6:	e7ca      	b.n	800dc6e <_free_r+0x26>
 800dcd8:	b003      	add	sp, #12
 800dcda:	bd30      	pop	{r4, r5, pc}
 800dcdc:	24008f88 	.word	0x24008f88

0800dce0 <_init>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	bf00      	nop
 800dce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dce6:	bc08      	pop	{r3}
 800dce8:	469e      	mov	lr, r3
 800dcea:	4770      	bx	lr

0800dcec <_fini>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	bf00      	nop
 800dcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf2:	bc08      	pop	{r3}
 800dcf4:	469e      	mov	lr, r3
 800dcf6:	4770      	bx	lr
