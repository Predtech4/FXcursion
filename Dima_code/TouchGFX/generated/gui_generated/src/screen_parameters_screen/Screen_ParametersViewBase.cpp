/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen_parameters_screen/Screen_ParametersViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include "cmsis_os.h"

extern osSemaphoreId_t requestParamValuesSemHandle;
extern osMessageQueueId_t AllGaugeValuesQueueHandle;

Screen_ParametersViewBase::Screen_ParametersViewBase()
{

	__background.setPosition(0, 0, 320, 240);
	__background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

	add(__background);
	for (int i = 0; i < 4; i++)
	{
		gauge[i].setBackground(touchgfx::Bitmap(BITMAP_GAUGEEXT_ID));
		gauge[i].setPosition(GAUGE_HORIZONTAL_OFFSET + (i % 2) *
				(GAUGE_WIDTH + GAUGE_HORIZONTAL_GAP), GAUGE_VERTICAL_OFFSET +
				(i / 2) * (GAUGE_HEIGHT + GAUGE_VERTICAL_GAP), GAUGE_WIDTH, GAUGE_HEIGHT);
		gauge[i].setCenter(GAUGE_WIDTH/2, GAUGE_WIDTH/2);
		gauge[i].setStartEndAngle(-135, 135);
		gauge[i].setRange(0, 100);
		gauge[i].setValue(50);
		gauge[i].setNeedle(BITMAP_GAUGEPOINTER_ID, NEEDLE_SIZE/2, NEEDLE_SIZE/2);
		gauge[i].setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
		gauge[i].setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
		add(gauge[i]);
	}
}

void Screen_ParametersViewBase::setupScreen()
{
	osSemaphoreRelease(requestParamValuesSemHandle);
	ALLGAUGEVALUES_OBJ_t allGaugeValues_msg;
	osStatus_t status = osMessageQueueGet(AllGaugeValuesQueueHandle, &allGaugeValues_msg, 0U, 10);
	if(status == osOK)
		for(int i = 0; i < 4; i++)
			gauge[i].setValue(allGaugeValues_msg.value[i]*100);
}

void Screen_ParametersViewBase::handleTickEvent()
{

}
