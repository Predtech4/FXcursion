/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/logostartup_screen/LogoStartupView.hpp>
#include <gui/logostartup_screen/LogoStartupPresenter.hpp>
#include <gui/projectsettings_screen/ProjectSettingsView.hpp>
#include <gui/projectsettings_screen/ProjectSettingsPresenter.hpp>
#include <gui/fxchain_screen/FXchainView.hpp>
#include <gui/fxchain_screen/FXchainPresenter.hpp>
#include <gui/effectsettings_screen/EffectSettingsView.hpp>
#include <gui/effectsettings_screen/EffectSettingsPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
}

/*
 * Screen Transition Declarations
 */

// LogoStartup

void FrontendApplicationBase::gotoLogoStartupScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoLogoStartupScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoLogoStartupScreenNoTransitionImpl()
{
    touchgfx::makeTransition<LogoStartupView, LogoStartupPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ProjectSettings

void FrontendApplicationBase::gotoProjectSettingsScreenBlockTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoProjectSettingsScreenBlockTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoProjectSettingsScreenBlockTransitionImpl()
{
    touchgfx::makeTransition<ProjectSettingsView, ProjectSettingsPresenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// FXchain

void FrontendApplicationBase::gotoFXchainScreenBlockTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoFXchainScreenBlockTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoFXchainScreenBlockTransitionImpl()
{
    touchgfx::makeTransition<FXchainView, FXchainPresenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// EffectSettings

void FrontendApplicationBase::gotoEffectSettingsScreenBlockTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoEffectSettingsScreenBlockTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoEffectSettingsScreenBlockTransitionImpl()
{
    touchgfx::makeTransition<EffectSettingsView, EffectSettingsPresenter, touchgfx::BlockTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
